 So, we saw the notion of arguments, these are inputs to the black box called the function. When we talk about arguments, there are two kinds of arguments. There is a this terminology called formal arguments or a formal parameter. So, a formal parameter is a name that is used inside the function body to refer to the arguments and the function call is actually made with actual arguments or actual parameters. So, there is a name that you use for things within the function and you may have names which are different in the collar. So, the collar may have names for the parameters which are different from what is in the call E. So, the actual arguments are actually values that are assigned to the corresponding formal parameters. This actual argument could be a constant or a variable or even a complicated elaborate expression. So, in our printf instead of giving the integers directly, here instead of giving the integers directly, we actually put an expression that is permissible. And actual argument is evaluated and its value is and the value of that is copied to the corresponding formal parameter for the function. So, we will see this in a little more detail with the next example. So, let us say I have a small program which calculates the triangular number. We saw this notion of triangular number in one of the earlier lectures. So, I have a main function and the main function has in main void. So, what this means is main is a function which does not take any parameters. You say that by using the keyword called void. So, void means you are not using any input, you are not taking any input and you are returning integer. So, calculate triangular number 10. So, this is a function call and the function description is here. So, this program is actually missing the function prototype. Sorry about that, there should have been a function prototype which says void calculate triangular number of int. So, anyway. So, we have a function called calculate triangular number of 10. So, this 10 is an actual argument because in the caller you have the value 10. This is the formal argument. We call it by the name n. The formal argument for calculate triangular number is n and i and triangular n b are two local variables. So, these are two local variables. i is used for the iteration and triangular n b is used for the summation. So, this is a formal argument. So, n is a formal parameter 10, 20 and 50 are actual parameters and i and n b are local variables. So, this is a distinction that you have to keep in mind. So, even though there is one formal argument, the actual arguments are actually changing. So, you notice this piece of code, actual parameter is 10 at this function call, the actual parameter is 20 for this function call and the actual parameter is 50 for this function call and the formal argument is always by the name n. So, let us see a little bit about arguments and local variables. So, the variables are actually defined inside a function. So, you go and look at this i and triangular n b are actually defined within the function. Same thing in power, we had i and p which are designed inside the function. We call them what are called automatic local variables. We call them automatic local variables. The reason we call them automatic local variables is that they are automatically created by the compiler each time the function is called. So, the key thing to notice is that they are created each time the function is called. The values that you have for these variables are local, that is why we call it local. So, these are variables they are automatically created, but they are local to the functions. So, the value of a local variable can be accessed only within the function in which the variable is defined. So, for example, from this function, I cannot directly use triangular n b or i. So, in fact, this one is only printing the triangular number on the screen. Let us say I wanted the triangular number. It is not that I want to print it on the screen. Let us say I want to use the triangular number, then this function cannot be used directly because it is calculating triangular number. It is printed on the screen, but triangular number is a local variable. It is printed on the screen and that is it. You have not returned triangular n b here. Therefore, we cannot see the value first of all. And there is no way to refer to triangular n b from the main function. So, the values of the local variables are all local to the function. You can access it only within the function. And if an initial value is given to the variable, every time the function is called, it is going to be assigned. So, this is particularly useful. For example, say let us say, calculate triangular number of 10. So, that is the first function call. You calculate triangular n b. At the end of this, the value would have been 55. So, we are adding 1, 2, 3, 4 and so on up to 10. That is 55. So, let us say triangular n b is 55. The next time I calculate the triangular number, since I have outsourced it, I assume that you are going to take care of the initialization. So, when the function comes the next time, since triangular n b is again initialized to 0. So, the value of 55 is completely lost. In fact, the triangular n b is not even present once the first call returns before the second call, the triangular n b and I are not accessible anymore. So, you have 20. When you go back here, triangular n b is again created. I is again created. You initialize triangular n b to 0. You do the computation. The result is printed on the screen. And when you return from the function, i and triangular n b can be thought of as something that vanishes also automatically. So, automatic variables are both created and destroyed automatically. So, the formal parameters are slightly different beast. So, let us look at this variable n. So, from the point of view of this function, n is also a local variable. It gets created every time the function is called and n gets destroyed every time the function returns from the, so every time you return from the function, the variable called n is destroyed also. So, formal parameters essentially behave like local parameters, they are completely private to the function. So, let us look at how this sequence works. So, I have the main program. The control control flow starts there. You are ready to call calculate triangular number of 10. So, at this point, n i and triangular n b are all created. This 10, the value of 10 was actually copied to n. So, think of each of these boxes as separate memory locations. So, 10 is already in some memory location, 20 is in some memory location, 50 is in some other memory location. The value 10 is actually copied to n and then you go through whatever is supposed to happen. And so, that happens and then you return the value or you print the things on the screen and you return to the caller. At that point, so if you carefully watch the animation, n i and triangular n b have all vanished. So, there is no way to access n or i or triangular n b anymore. So, then the function goes to the second, the main function, now moves to the second function call. At that point, again it goes to the first line of calculate triangular number. Again you would create n i and triangular n b. The value 20 gets copied and triangular n b would get the initial value of 0. I anyway gets initialized in the loop, I becomes 1. Whatever work you have to do there, that gets done and you return the control back to the main function. And finally, you have the last call and the same thing happens once more. So, this is something that you have to remember that every time a function is called, you would create the variables which are local to the function as well as the formal parameters. You do whatever work is going to happen there and when you return back from it, all these local variables and the formal parameters are lost. The only thing that can potentially be retained is the return value. If the function had a return of a variable, that value gets copied back to the right side of an expression. So, for the power function, we return p. So, the value of p is comes to the right side of the expression and that can be useful for assignment to the left side namely, num1 and num2. If you do not have a return of a variable, all the calculations that you have done are completely lost. All the variables that you declared are completely lost. Maybe you printed something on the screen, but you can never use the tenth triangular number in any calculation. You can only print things on the screen with this function that we have. So, in this context, it is good to understand the notion of lifetime and scope. So, lifetime, so this is something that people get confused about very often. So, lifetime is the period of time when a memory location is allocated. So, if you go back to this example that we had earlier. So, the lifetime of i, triangular, n, b and n are these variables are said to be alive only when this function is called. Once the function returns, you can treat them as variables that are dead. So, life of the variable is only between the function first line and the functions last line. These variables and the formal parameters are dead otherwise. So, we have the notion of lifetime. Scope is slightly different and it is an important concept to know also. So, scope is the region of program text where declaration is visible. So, we have not seen this in any detail earlier. We will see that now. So, all the local variables and formal parameters are not only alive within the function, their scope is also only within the body of the function. So, local variable i in function is different from any other variable i, you declared anywhere else. And formal parameter n is also different from any other n that you have declared or used anywhere else. So, it is not only that i and n are not alive outside there, you are free to use i and n in other places in other functions including the caller. So, let us see a small example of what the scope is. So, let us first look at the main function. It has a variable called n which takes the value 5 and you call f 1 of 3 f 2 which has no parameter and returns 0. So, this is not really doing anything with n. This example is only that to show you what the notion of scope is. So, as a control, you will start with int n equals 5. So, 5 gets a value of n and then you have f 1 of 3. So, 3 is the actual parameter f 1 is the function name. You go and look at f 1, f 1 expects a floating point called x. So, x is the formal name. Here, you have another declaration called int n equals 6. So, you may wonder whether this n and this n are actually the same. So, the answer to that is they are not. Remember, whenever a function is called, there are variables that are created. So, when you come inside, you create a new variable called n and only this variable is seen in this function. So, here n equals 6 and you called f 1 with 3. So, x is 3 and n is 6 and x plus n would be 9. So, this print f percentage f would print floating point valued 9 on this screen. Now, the function would return back to the caller. In this case, you have f 2. f 2 does not have any parameter, but when the function gets called, you have float n equals 10. You again create a new variable by the name n. The life of this variable n is only within this function. You just print n equals 10 and when you come back here, you have this return statement. So, at this point, let us say between f 1 and f 2, if you printed n, it would have been 5. After f 2, if you printed n, it would have been 5 also. This n and this n are not in the same scope as this n. This n is local to this main function. This n is local to this f 2 and this n is local to f 1. So, x and n are local to f 1. They get created when f 1 is called, they get destroyed when f 1 returns. Similarly, n gets created when f 2 is called, it is destroyed when f 2 is returned. These variable names are essentially local, it does not interfere with what is there in the caller. So, in this case, in fact, this n was a floating point and this was an integer and this was an integer. For all you care, there may be another function where n is a character or even a pointer and so on, it does not matter. So, within the same scope, you cannot have two declarations for a variable. But, once you go to different scopes, namely within across functions and so on, you are opening a new scope, you are allowed to declare new variable names. So, that is something that you have to keep in mind. So, one thing that we have done so far is we have seen what is called call by value. So, in C, the function arguments are all passed by value. Values are the arguments. So, the values contained in the actual parameters are copied to variables which are in the formal parameters. So, you have the actual parameters when you call the function, the formal parameters get created and like any variable, initially they do not have any values. And the first thing when you have for a function call is automatically the actual parameters are copied to the formal parameters. And the formal with the formal parameters, you do all the local computations, the value gets returned and those variables are destroyed. So, the modifications to the parameter variables do not affect the variables in the calling function. So, we already saw this example here also. So, n became 10, n became 6 and so on. This has nothing to do with this n first of all. And you have passed a parameter of 3 that was x here. So, this x is not changed in this example, but even if you changed x, the value 3 will not change. So, there is also something that you can do which is called call by reference. So, I want to show you the difference between call by value and call by reference. When you say call by value, we copy the contents, but when you say call by reference, we pass the reference or the address of the variables instead of the contents of the value. So, in fact, you can think of this as passing the r values and this as passing the l values of the variables. So, let us see this call by value using an example. We have p equals 1 q equals 2 and r equals 3 and I have a function called test. So, actually I am sorry this is a function prototype. This cannot appear within this function. It has to be outside and we have called s equals test. So, test equals p q r. So, this is something that should have been outside. So, it cannot appear within another function. It should have been outside. So, this is correct. We have a function prototype which takes three integers p equals 1 q equals 2 and r equals 3 and there is a fourth variable called s. So, this is the function prototype now. You pass s equals test. So, you pass p q and r to test. They are received by the variables a, b and c. So, a, b and c are local variables. In this example, a is incremented by 1, b is incremented by 1 and c is incremented by 1. So, a would start with a copy of p which is 1, but it gets incremented. So, a would be 2, b gets a copy of q that is 2 and it is incremented. So, b becomes 3, c gets a copy of r which is 3 and it is incremented. So, it is 4. So, a would be 2, b would be 3 and r would be 4, a c would be 4 and you add 2 plus 3 plus 4. So, the result would be 9 and that is what is returned as s. So, s gets 9 that is something that is probably clear to you by now, but what happens is p q and r do not change. Remember, we made a copy of p to a copy of q to b and copy of r to c. We really did not do any changes to p q and r. The variables a, b and c changed, they did not change p q and r. So, this is called pass by value. So, every time a function is called like this, p gets a copy to a, q gets a copy to b and r gets a copy to c. So, this is called pass by value or call by value. In contrast, there is something called pass by reference. So, in this slightly loaded example, we have a few things. So, I have 2 integers x and y and let us say I want to find out what is the quotient of dividing x by y and what is the reminder of dividing x by y. So, these 2 are integers. So, when I do integer division, I get a quotient and I get a reminder. So, I want to know both the quotient and the reminder. So, one thing that you have noticed is that functions cannot return multiple parameters. So, if you remember the basic prototype, basic description or template of a function, you can pass more than one inputs to it, but you can only return one output. That is clearly a restriction for this problem. I want both the quotient and the reminder, but if I write a function for it, I can only get the quotient or the reminder, but not both. So, to do that, we have a small trick. Here, we are going to pass what is called passing by value. So, we have this function called q o rm that stands for quotient and reminder. It takes 2 parameters, numerator and denominator. It takes 2 more parameters quotient address and reminder address and they are not integers, they are pointer to integers. So, we have 2 pointers that are passed on and 2 integers that are passed on. So, num will get a copy of x, then will get a copy of y and q o a d r will get a copy of ampersand of q o, which means the address of q o is copied to q o a d r and address of rm is copied to rm of a d r. But then, now you have the addresses of quotient and rm. Now, if I do num by den, you do integer division, the value gets truncated, but I can assign it to a memory location. In this case, I assign it to the location pointed to by q o a d r and num percentage then gives the reminder. The reminder is computed and it is stored in the location address by rm a d r. So, q o a d r and rm a d r are both local variables, but these are pointer variables. So, when you do star q o a d r, you are not changing pointer, but you are changing what is pointed to, you have d reference q o a d r. So, the num by den, the value is stored in the location that is pointed to by q o a d r. When you come back here, since q o a d r had a copy of q o and rm a d r had a copy of ampersand of rm, the pointers were copied. So, at this point, we already saw this, when you manipulate things with pointers, the memory locations are the same. So, q o and rm actually would have appropriate values from num by den and num percentage 10. So, this does two things, we did not really have to change c, the language c to give us two return parameters or three return parameters and so on, but still one parameter we are able to get things done. Only that you have to pass pointers instead of passing values. So, we have passed references to q o and rm instead of passing the values of q o and rm, because if you had passed q o and rm directly and if you had integers here, you would get the local variable calculated, but remember when they return, since you have avoid those values get destroyed, you will not see the appropriate values in the local copies, but passing by reference takes care of that. We will see this passing by reference in a lot more gory detail later, especially in the context of arrays. So, this brings us to the end of this module, in the next few modules we look at more details related to functions.