 So, in module 3 we will look at the notion of variables assignments and how operators in C works. So, let us take a small problem again. This is a problem on polynomial multiplication. Let us say we are given two polynomials A x plus B and C x plus D. So, by given what I mean is you are given the coefficients A comma B and you are also given the coefficients C comma D. And you are expected to compute the product of the polynomials. So, the product would be A C x squared plus A D plus B C times x plus C D. So, what we really want is the coefficient of x squared, the coefficient of x and C D itself. So, to write a program for this problem P 1.1 we need the following steps. So, we need to declare storage A, B, C D or all coefficients. If you read from the user you need to store them temporarily somewhere. And once the declarations done you need to actually read the coefficients from the user. Perform all the arithmetic operations required and finally print them on the screen. So, that is the basic steps. So, I already have a small program written up here. So, we start with declaration of storage that is step 1. So, again ignore the first few lines you see that there is A comma B comma C comma D and A into P 2 P 1 P naught. So, this is very much like what we did earlier. So, we have A, B, C D. So, we need four coefficients and the product the polynomial has only three coefficients P 2 P 1 and P naught is the name that I am giving them. Step 2 is read the inputs. So, in this program I have written the written intents that will prompt the user for one coefficient at a time. So, there is print F enter A and the user is expected to enter a number and it is read using the statements can of. Then you have print of enter B. Now, you are ready to read B and so on. So, four coefficients are read. So, this is step 2. Step 3 calculate the coefficients and print. So, here there are three lines P 2 P 1 and P naught. P 2 is A times C. P 1 is A into D plus B into C and P naught is B into D. So, this is the very first time you are seeing an assignment. So, the way to look at assignments is look at the equality sign in the first line here. You see A star C. So, star is the operator for multiplication. So, you are multiplying A with C and that is assigned to P 2. So, the way to look at this line is you do the operation A times C and the values assigned to P 2 which is on the left side. Then you have A times D plus B times C. So, you do this operation and you assign it to P 1 and B into D is assigned to P naught. So, at the end of these three statements we expect P 2 P 1 and P naught to reflect the point that you have already taken care of the multiplication of the polynomial. Now, you are ready to print and the product is printed on the screen. So, again forget all the fancy looking things there. So, you can see that print if the product is and something there. So, ignore it for now. It is only printing the coefficients along with the in the polynomial format itself. So, let us run this program. I have written this program up and let us run this program. So, you can see that the program is the same as what I said. So, you have in take M of B comma C comma D. Then you have the three coefficients P 2 P 1 and P naught. The four scan statements for reading the variables, three statements for doing all the assignments or doing the arithmetic operations and one final statement which takes care of printing. So, I will compile it now. It gives me no errors or no warnings. So, so far I have not shown you what errors and warnings could be. I have written programs which are all correct. Now, I am ready to run. So, as before we see the value prompt for A. So, I am going to enter the polynomial 1 comma 2. So, essentially 1 x plus 2 for the first polynomial and 3 x plus 4 for the second polynomial. So, the result is 3 times x squared plus 10 x plus 8. So, it is 1 x plus 2 times 3 x plus 4. So, that is 3 x squared plus 10 x plus 8. So, let us look at the program in its entirety. We have the first few lines which has the comment. So, there is a comment on the top here which says this is a program to multiply 2 polynomials A x plus B and C x plus D. So, it is always good to show the intention of the programmer and this kind of documentation is helpful for somebody else who is going to read your program and understand what is happening. Then as before we have this line has include sdio.h. This is necessary for doing all the IO operations. If you want to read from the keyboard or if you want to print on the screen you will need this. And then we have the declarations for a, b, c, d, p 2, p 1 and p naught. Then we did a series of printing on the screen and reading from the user and we did the operations and printed the result on the screen. So, I already showed you the executions. So, this by itself is not what I want to show. I want to drive something else. Let us look let us take a close look at the program and see some of the nitty gritty details that are involved. So, let us start with a, b, c, d. So, I assume with the polynomial is A x plus B and C x plus D. So, however we need the user to give these four coefficients and these four coefficients have to be taken from the user and stored temporarily somewhere and that is where we are going to use these variables A, B, C and D. So, in a little while explain what the word variable means at this point just assume that A, B, C and D are four variables. And it is not enough to just have these coefficients because we are supposed to produce the product terms. So, you have A, B, C, D and you have p 2, p 1, p naught. And when you have int A, B, C, D, it actually allocates storage for A, B, C and D because once you read it from the user you have to save it somewhere. And when you have p 2, p 1, p naught again you allocate the storage for p 2, p 1, p naught and store it somewhere. So, essentially it takes care of all the storage that you need to do all the operations and this storage is going to be in the main memory. So, we already saw the model for the computer. So, we have memory and we have a CPU and we have other units. So, these variables will be stored in the memory. And if you look at this int, int basically means that int stands for integer and it means that anything that follows this is going to be a variable which is of an integer type. So, when you have int A, B, C, D we have four integers or four variables of the data type called integers. Similarly, we have p 2, p 1, p naught which also have this int before it which means there are three integers by name p 2, p 1 and p naught. So, if the input coefficients A, B, C, D are all integers, the product and sum of integers are always integers. So, therefore, I have used integer for p 2, p 1, p naught also. And this is called the data type. So, whenever you want a variable it cannot be a variable of an unknown type, it has to be a variable of a known type. And there are a few basic data types that the language provides you. There are other data types that you can build on your own. In this case, I am going to use basic data type provided by C which is called int. So, remember int stands for integer. Now, let us see what is going to really happen from the memory point of view. So, let us see the program. So, initially the memory is unused, I am showing a segment of the memory here. So, let us assume that the memory is huge and it has several bytes of storage. I am going to show you only a portion of the memory on the right hand side. So, initially everything is unused and the moment there is a declaration int a, B, C, D what it really means is when you run the program, there are going to be four memory locations which will be called by the names A, B, C and D. So, the memory that you all that you have is initially uncommitted, the declaration int a, B, C, D will attach some names to the memory locations. So, in this example, this memory location is going to be called A, this memory location is called B, this is called C and this location is called D. So, I am purposely showing these locations without any values because when you declare you should not assume that there is going to be some known value already present in the memory. So, when you start the program, we do not know what the values are and thus we also expect the user to input these values A, B, C and D. And the next line was int p2p1p0 which means there are going to be three memory locations which are going to be called p2p1p0. So, in this picture even though it shows A, B, C and D to be continuous and p2p1p0 also to be continuous, it does not necessarily have to be so. So, they do not have to be continuous memory locations. So, we have this. So, we looked at the first few lines of the main function and all it does is it is declaring storage. So, you are saying various memory locations are going to be called by these names. Now, let us look at the statements that follow. So, we have printf enter a and let us say it prints this enter a on the screen, it is prompting the user and when it comes to scan f, it is going to read one number from the screen. Let us assume that the user actually input 1. So, we assume that the polynomial is A x plus B is 1 x plus 2 and C x plus D is 3 x plus 4. So, at this point the user is expected to have entered 1 and that would go into the memory location which is called A. So, 1 goes into this memory location then printf enter B that will show enter B on the screen when you when the user inputs B in this case it is 2 that would go into this memory location and so on and so forth. So, at the end of all these can of statements shown here if we if the user entered 1 2 3 4 these locations would contain 1 2 3 4. P 2 P 1 P 0 I am showing blank it does not mean that it does not have any value. It only means that we do not know the value at it has to be calculated yet. So, at this point A B C D are all ready and is available in the program. So, let us move to the next set of statements the next set of statements or for calculation of P 2 P 1 and P 0. So, remember in this computer's model I showed a control unit which contain the CPU which contain the control unit and the ALU you had memory. So, in this at this point I am showing the memory and the ALU I am not showing the input and output and other nodes and so on. So, ALU stands for arithmetic and logic unit and since we need arithmetic operations here like multiplication, addition and so on I am also showing the ALU. So, let us see the very first statement here P 2 is A times C. So, this star means multiplication. So, what you want is A and C to be multiplied and the result of that must be stored in P 2. This is what you want and the way it works is this. So, when you have P 2 is A times C, A and C are brought in from the memory into the ALU. The ALU does the operation multiplication in this case it is 1 times 3 and the result 1 into 3 which is 3 is written back into P 2. So, if you look at this statement you read the value of A which is 1, you read the value of C which is 3, you do multiplication the result is 3 and the result is written back in the memory location P 2. So, which is what we have so far? We read 1 and 3 and the result is 3 here. So, now we are ready to move to the next statement. The next statement is slightly more complicated. It has a star, it has a plus and it has another star and the order in which the operation is done is you perform the operation A times D first, you then perform the operation B times C. The result of these two are then added up and the result will be the end result is put back into P 1. So, that is what we are going to see the animation now. So, A and D are both read into the ALU and it is not ready to be returned back to P 1 yet because you still have more operations on the right hand side. So, this 1 times 4 the result is 4, it is temporarily stored inside the ALU itself. Then you have B times C, B and C are read from the memory and the result is 6. So, 2 times 3 is 6 and you cannot write 6 to P P 1 yet because this is also a temporary result. What we really want is A times D plus B times C. So, we cannot write 6 to the memory yet. At this point the ALU has 4 and 6 which are required for this addition operation to be performed. So, if you have only one of these operation let us say A times D was available but B times C was not available then the addition cannot be performed. But at this point of time you have both 4 and 6 and 4 plus 6 is executed by the ALU the result is 10 and once you have the result you are ready to write it back into P 1. So, the RHS or the right hand side is ready we have the result and we write the result into P 1. Now next the CPU moves to the last line which is P naught is B times D. So, again B and D are brought from the main memory in this time so B and D did not change they are 2 and 4 and the result of that is written back into the main memory. So, at the end of the program we have 3, 10 and 8. So, let us take a quick look at the program here. So, what we saw was these 4 or these statements from line number 10 to 17 initially filled up the 4 memory locations A, B, C and D with values by reading from the user lines 18, 19 and 20 did operations. The user is not involved here the values from the memory are red and the calculations are performed the results are written back into the memory and finally when line number 22 is executed it is asking P 2 P 1 and P naught to be printed on the screen in a certain format and the way it is going to be printed is as follows. So, you have the product is percentage D x squared plus percentage D x plus percentage D backslash n what that means is. So, if you look at this percentage D and if you run this program you will never see this percentage D on the screen. So, I enter the same thing if you see the result the product is only 3 x squared plus 10 x plus 8. What is really doing is this percentage D is called a format specifier. So, wherever you have percentage D here you look at what is the value outside the codes. So, it says print P 2 as integer that is what this percentage D means. So, P 2 is an integer printed as an integer P 1 is also an integer printed as an integer also and P naught as an integer printed as an integer also. So, that is why you get this result 3 times x squared plus 10 x plus 8. This x carrot 2 or x squared is verbatim in the program itself and this x plus is also verbatim in the program you see that in the result here and finally 8. So, we will get into the format specifier and so on in in more detail later but as of now just remember that this percentage D is not something that is printed on the screen. So, to print something on the screen you need P 2 P 1 P naught stored in the main memory but we have them as 3 10 and 8. So, when you see the print of statement you can read these 3 10 and 8 and print them on the screen.