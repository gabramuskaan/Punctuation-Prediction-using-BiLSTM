 Hello, welcome back all of you. I hope you have been enjoying the lecture so far and you have been putting in some time to work on the homework exercises as well. So, in this lecture we are going to look at what are called structures. So, we looked at one kind of aggregate data type called arrays earlier and in this class we are going to look at what are called structures. So, structures as arrays are or a collection of one or more variables. So, you have one or more variables, but as opposed to arrays structures can have different types grouped together. So, if you look at an array, right it is an aggregate type of the same variable data same data type. So, I can have an array of integers or array of floating point numbers and so on. Whereas, structure lets you aggregate data which are even of different data types. So, let us take for example, a point in a two dimensional plane, a two dimensional plane will have an x coordinate and a y coordinate and you want to keep this group together because that is what a point is and one way to do that is follows. So, you have something called a point which we call a struct. So, struct is a key word in C. We say that point is a data type which has two things some integer called x and another integer called y. From now on point can be treated as a new data type that you created in your program. So, this is something that is absolutely new for your setup so far. So, far we have been using all the data types that are already in place like int and float and character and so on. But for the first time we are seeing how to create your own data types. So, we have created a new data type called point which has x and y as two possible two members inside it. So, by doing this you get a mechanism for defining compound data types. As of now you do not have a storage this is like saying I have an integer. So, only when you do something like int a comma int b and so on you have variables of the names a and b just by having internet you do not have a storage space. Similarly, when we have the basic data type called struct point you are saying that this structure is going to have two things an integer called x and an integer called y that is grouped together and this collection is useful. Instead of looking at it as two different integers this collection is going to be for a represent it is going to be representing a point. So, let us look at this a point in 2d is now two integers. There are different ways to declare structure variables. So, let us look at this top part because struct point int x int y and we have this braces closing it followed by point 1 and point 2. So, the weight interpret this is point 1 and point 2 are two variables of the data type called struct point and the struct point data type two integers in it x and y. So, this is one way to do it or if you have already defined only the structure without doing declarations for the variables you can declare only this part saying that my point is a data type containing two integers you could leave it at that and then come back and say that I want two variables point 1 and point 2 they are both of the type struct point. So, if you look at this line it is quite similar to what we would have done for integers and floats and so on. So, on the left side you start with the data type and then you have a comma separated list of variable names only that the data type has this keyword struct in front of it and the name that we have assigned to the data type. So, at this point the storage for point 1 and point 2 are allocated. So, point 1 will have two integers and point 2 will also have two integers. There is one way to initialize this that is in the last line here struct point point 1 is 3 comma 2. So, at this point you are saying that point 1 is of data type struct point and since there are two members x and y the two members will get the values 3 and 2 respectively. So, that is one way to say that point 1 should have its x as 3 and y as 2. So, this is also very similar to what we have for basic data types where we say int x equal to 5 for instance would mean you are not only declaring a variable called x you also have the storage declared for it plus the initialization of the value to 5. So, let us see how to access the individual elements x and y are called members and referring to the members is done with what is called the dot operator or the period. So, point 1 is a variable point 1 dot x will give you the x coordinate and point 2 dot y will give you the y coordinate of point 2 and so on. So, let us see the small piece of code let us say I want to print point 1 on the screen. So, print f point 1 percentage d percentage d print point 1 dot x and point 1 dot y. So, this statement will look at point 1 dot x the x member of point 1 and print it as an integer and look at the y member of point 1 and print it as an integer. So, that is what this line does it is not just you can use them for printing. So, you have read the values of point 1 and point y you can also go and change the contents of point 1 you can also write to it. So, point 1 dot x equals 0 point 1 dot y equals minus 10. So, this one changes the value that you currently have to a point called 0 comma minus 10. So, it could have been something else before and now you could change it to 0 comma minus 10. So, one small thing that you have to watch out for is that you cannot access point dot x and point dot y remember point is a data type point the data type does not mean that you already have storage only when you have a variable of the certain data type you are allocated storage. So, you can only use instances of the structures namely the variables that you have used and not the original data type itself. So, point 1 dot point 1 dot x is ok point dot x is not point 2 dot y is ok point dot y is not you should also know that point 1 dot x and point 2 dot x are actually two different variables they have two separate memory locations and they do not get mixed up. So, let us see various other examples of structures. So, one classical example is of a student who has a student ID and as a as an educational institution I may want to track what is the age of the student is the student male or female and what is the student C GPA and so on. So, this is one logical group of things I have the student ID and along with that I have an integer called age I have a character I would probably put m or f depending on whether the student is male or female and the C GPA is usually a floating point number. So, I am going to keep it as a double C GPA. So, this is a logical collection of things instead of keeping them as four separate integers if I have it as a structure. So, this collection has a meaning. So, it is all the information about a student and we call this information here student info. Similarly, if I am going to look at a date I have three things that make a date the day the month and the year we need all these three again I could have kept it as three separate integers. But putting all of them as one logical unit makes sense because then I can look at is today this date or set up today's date to be this and so on instead of dealing with three separate integers which have no relation to each other. Finally, let us look at another example called bank account. So, this is a supposed to have details of a bank account I of course, the name of the person who has the bank account in this case you have name which is a character array of 15 bytes. So, the name can be up to 15 bytes then there is an integer account number in this case account number is expected to be integral and the balance that you have in the account is supposed to be a double value and I may want to track the birthday of my customers and that in turn is a structure. So, this is what I was talking about earlier that you could actually mix and match data types of different kinds and throw them into a structure. So, in this one we have a character we have a character array of size 15 an integer a double and within a structure we have another structure called date or birthday. So, there is a member called birthday whose data type is struck date. So, date I already mentioned has three members. So, in some sense we have a nested structures here. So, we have a structure called structure date within the structure called bank account. So, this kind of nesting is really useful. So, let us see another example here let us say we have a rectangle and I want the rectangle to be a data type by itself but the rectangle is specified by the left bottom point and the right top point. So, I have two different points that define the rectangle namely the left bottom point and the right top point and rectangle itself is a data type. So, this is useful for example, I want to go and draw the rectangle I will pass this structure called rectangle to the draw function. So, let us look at this struck rectangle. So, it says that we want a new data type called rectangle and this in turn consists of two members namely PT1 and PT2. PT1 is struck point data type and PT2 is also struck point data type and somewhere we have to remember and know that PT1 stands for left bottom corner and PT2 stands for right top corner. Now, if you want to access something in this next nested structure you could do this. So, rect1 is a variable of type rectangle you can see the declaration here the data type is in the top and rect1 is the variable of the type rectangle. So, rect1.pt1.x refers to the variable rect1 it has two members PT1 and PT2 and the PT1 member has x as one of its member. So, you are looking at member of a member and you want that to be set to 4 and rect1.pt1.y to be set to 5. So, this sets up the rectangle to have the left bottom point as 4,5. You could also do this rect1.pt1 is 4,5 we already saw this example only that we have a nested structure case. So, rect1.pt1 the x member takes the value 4 and the y member takes the value 5. This notion of nested structures is really useful to construct a lot of things. Let us do this example one more time similar nested structures. So, we have a struct point which has two members x and y and I have a variable p of the data type point. Then let us say I have a struct line which takes two points. So, a point in two dimensional line in a two dimensional plane is defined with respect to two points and I have these two points this this this blue line here is line L and line L as p1 and p2. So, this point here for line L which is p1 is x coordinate as L dot p1 dot x and the y coordinate is L dot p1 dot y. This point here is p2 of L which x coordinate is L dot p2 dot x and its y coordinate is L dot p2 dot y. Similarly, I can make a triangle and I have to specify three points for it. So, the data type is called t. So, the data type is called triangle and the variable is called t. So, t dot p1 dot x and t dot p1 dot y is one of the corners of the triangle and there are two other corners namely p2 and p3. So, let us say I want to set up a point p to have 4.11 line L1 to have 2.7 going to 10.9 and a triangle with these three as coordinates how do we do it. So, this is how we do it. We first say that there is struck point p we already have struck line L and struck triangle t. Let us assume that these declarations are already in place declarations for p L t are in place and now we have variables p L and t. So, to make this point p to be 4.11 we can say p.10. x is 4 and p.y is 11 and for making the line 2.7 to 10.9 L dot p1 dot x is 2 and L dot p1 dot y is 7 takes care of this point L dot p2 dot x equals 10 and L dot p2 dot y equals 9 takes care of this point. So, we have two points and for each point we are given the x coordinate and y coordinate and finally, for the triangle we will we need three points and for each point we give the x and y coordinate. So, this defining new data types is a very useful and powerful thing and sometimes it gets very tedious to say that it is struck rectangle and struck p t and so on and C programming language gives you this short cut called type dev. So, type dev is used to create new data types. For example, let us say I have an integer and the meaning that I want to attach the integer is edge. So, you do not want to accidentally mix it with something which is of type let us say volume or something which is of the type date and so on. So, this is edge and it is an integer. If I just say it is int I could accidentally use this variable somewhere else but then now what I am going to do is I am going to say edge is type dev to be an integer. So, what I mean by that is wherever I see edge as a data type in turn it is actually just an integer. Now, if I declare edge my edge equals 99 it is clear that my edge is of edge data type and I do not want to mix it with things like volume or length and so on it is actually about edge. So, this combination of doing type dev is particularly useful in structures. So, for example, I could we were using this struck point struck point and so on repeatedly. Now, I am going to use a shortcut which says type dev struck point point type. So, what this does is it defines a new data type called point type which is actually a struck of type point. So, it is a structure of type point and the nickname for that is point type. From now on I can avoid saying struck point point 1 and so on and instead I can say point type point 1 point 2. So, in the last line here you can see that this is very similar to what we do for basic variables. We put the variables data type first and then a comma separated list right. Only the variables data type does not have this extra thing called struck followed by the structure name. Instead it has this nickname called point type. So, this is actually equivalent to writing struck point point 1 and point 2 right. So, it avoids typing the struck point every time.