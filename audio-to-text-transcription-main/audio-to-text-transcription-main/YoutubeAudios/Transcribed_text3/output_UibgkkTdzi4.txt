 Hello all, this small demo of the debugging environment, I want to show you some specific features in debugging and how things work with debuggers. So, we will go back to this program that we were looking at prime numbers. Just to recollect, we declared that 2 and 3 will be prime numbers and for the other prime numbers, we will actually go and evaluate based on this small logic that we discussed. If some for a number p, we are going to check against all the prime numbers that are less than it. And if it is even divisible by one of them, we will declare that it is composite. Otherwise, at the end of checking all the prime numbers, if the number is still not divisible, then we will say that p is prime. So, let us switch to the programming environment. We saw this program earlier and the only modification that we have is, I have defined N to be 10, so that we can quickly see what is happening. So, one aspect of this debugging is essentially that, if there is a small error in the program, how do we find it out? So, I can always go and run the program multiple times or I can put print of statements in multiple locations and track, but that is not the best thing to do. So, if the programs get very large, then the print of can be very annoying. So, instead, many ideas including DevC++ give a very nice mechanism for debugging and that is what we are going to do. So, there are 2 things that we are going to do when we have a debugger. The first thing we are going to do is, set up what are called breakpoints. So, generally what happens is your program starts executing at line number 6, let us say, and it executes to line number 27. And you do not get to see any of it, you only see the program running and you get to see the final result. But what if I want to see, what is the effect of each of these lines? So, I will do single stepping and I can take one line at a time and show the effect of each of these lines. And I will also set up something called a break point, so that I can see how things should run up to the break point. So, let me illustrate those. So, what I am going to do is, I am going to set up a break point at line number 8 by pressing on key F 4. The moment I press that, you can see that the background of that line changes to red. And there is also a small tick mark on line number 8. I am also going to set up a break point on line number 12. So, I have set it up for break points at 8 and 12. So, what is going to happen is when the program is run, it will not run all the way. First, it will break just before line number 8. And after that, if I continue running the program, it will break at line number 12 and so on. So, remember line number 12 is inside the loop. So, it will break every time, it will give us a chance to inspect values at line number 12. So, to actually look at the values, we need a few other things. So, I am going to click on debug, so that the debugging is turned on and I am going to add watch on a few variables. So, what are the variables of interest? I want to see what prime says and if you see that right. So, primes seems to have all these values, which we really do not want and this is the first thing that you should be observing. So, there are values of primes and since primes is uninitialized, remember we are in we have still not executed the program, we are just in line number 8. So, we do not know what values must be there for primes. Let us also watch p, which is the value that we want. We watch i, let us watch prime index and finally, let us also watch this prime. So, I want to show how these things change as we run in the program. So, watch the left side, you will see all these variables that are there and let us see what happens now. So, as of now, I am going to do f 7, which is single step. So, it will go one line at a time. So, primes of 0 is now 2 and primes of 1 is 3. So, as I keep pressing f 7, it goes one line at a time and whatever line is to be executed will be highlighted. So, as of now line number 8 and 9 have executed. So, 2 and 3 went to the first entries in primes. So, now, I go to line number 10, I executed. So, prime index became 2. So, I am going to start filling up prime numbers from location 2 onwards. So, as of now, 2 and 3 are correct, I am going to start filling up from location 2 onwards. And what is the value now? p is 5, I am going to check whether 5 is prime or not. I assume that it is prime to start with. So, now the whole program is ready for running. We have various things. 2 and 3 are already in place. I know p equal to 5, I have to start checking from 1 onwards and see if it is divisible or not. And if so, we are going to see if this is prime changes. So, let us start moving. I is 1. So, the first, so I am at line number 15, p at this point is 5, primes of I. So, primes of 1 is 3. So, this line is checking if 5 percent H 3 is 0 or not. It is not 0. So, this line will not execute. And let us look at prime index, prime index became 2 and I is also 2. So, you go and check if this is prime or not. The flag has not changed. So, 5 is the prime number. You record that. So, if once I finish line number 19, you will see that this location, this 53 will change to 5. You can see that now. And prime index is 3. So, now we are ready to see whether the next odd number which is 7 is prime or not. So, let us continue now. So, we are ready to check whether 7 is prime or not. We go back and assert 7 is prime. And I am going to check from 1 to I less than prime index. So, prime index is 3. So, I am going to check 7 against 3 and 5. So, first you check 7 against 3. It is not 0. Then you check 7 against 5. It is also not 0. So, its prime does not change. So, its prime remains at 1. So, primes of prime index is you can record 7. So, you will see a change here. It changes to 7. And prime index will change to 4. So, we are trying to find out the next prime number. Then now we are checking 9. We assume that 9 is prime to start with. Then I am going to check against all the numbers from 2 to 7. So, sorry 3 to 7. I am going to check against 9. If p percentage primes I equal to 0. So, 3. 9 percentage 3 is actually 0. So, this is the first time this line is executed. So, its prime becomes 0. As I said earlier, we are checking still against 5 and 7. So, we check against 5. Then we check against 7. And the key thing is this prime is 0 at this point. So, since this prime is 0, this block of code from 18 to 20 will not execute. And we are going to now go and check the next number. So, p is 11. So, 11 is actually greater than 10. So, at this point you exit out of this loop from 12 to 22. We are now ready to print all the prime numbers. So, at this point, you can see that prime index is 4, which means the first 4 entries starting from 0th location till third location have valid prime numbers. So, that is what we are going to do. We can check and print the prime numbers. So, print 2, print 3, print 5, print 7 and we are done. So, at this point we are done. So, if you go and look at this, we already see 2, 3, 5 and 7 printed. And once this is all over, you can stop the execution. So, this program is actually correct. So, I can stop the execution and so on. So, what you are really seeing is this break point gives you an opportunity to start from a particular, so let us say these break points 8 and 12. If I start at 8, it actually gives me an opportunity to run till 12 without executing the lines in between. Even though I was doing single stepping, I actually showed every single statement and how it was executing. You do not really have to do that. So, let me quickly demonstrate that. So, I am going to run one more debug now. Again, I am watching all these things. You can see that all these prime numbers and so on are invalid. So, I start running the program. So, primes of 0 is 2. Then I can press continue. It will take me to the next break point. So, at this point it went from line number 8 to 12 directly without showing each of these steps. So, now since the next break point is 12 and it is inside the loop from line number 11 to 22, if I click on continue, we will do everything that is required for the loop and go to the next time when the p itself is changing. So, p changes to 7, you can see the left side p changes to 7, p changes to 9 and so on. So, all the things that were happening here, all the work got done. It is not that the work did not get done. The work got done, but you are waiting at line number 12 and seeing what is happening. So, at this point prime is you are still checking for 9 and the whole thing got done now. You can go and see that the program is executed and if I we have run till the end of the program. So, at this point you can stop the execution and all the values from 2, 3 up to 7 are already in the prime. So, you can use the debugger for debugging various programs. This is a very effective tool. I suggest that you get used to this debugging so that you can check all your programs once before you go and do your homeworks on the website. And this is a very useful utility. So, I cannot emphasize this more. You have a good handle of how the debugger is used and you do not have to print screen fulls of debugging statements instead use the debugger effectively. So, the key trick will be in finding out what variables you want to watch and where to set your break points. So, I knew this ahead of time. So, I had set break points at line number 12 and line number 8, but you have to be careful about where you are setting your break points. It does not make sense to set break points at every line. Thank you very much.