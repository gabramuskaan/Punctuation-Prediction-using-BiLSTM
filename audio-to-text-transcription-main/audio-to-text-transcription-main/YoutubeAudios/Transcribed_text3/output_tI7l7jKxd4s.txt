 So, we use these 7 variables, ABCD, P2P1P0 and these are called variables. So, every memory location is given a name. So, if you have a variable, you use a name and this name is something that you give so that you can remember what it is about and in turn this variable name is attached to a memory location when you run the program. So, the name is, so when you say A, the variable name A, you are actually referring to the value at location that you are going to call A and when you say A times B, it is actually going to take the value at location A and value at location B and multiply them together. So, the name is actually referring to the data and you usually have names which make some sense to you. So, it could be role number, class size or in our example we use P2, AB, etc. So, these variables have some kind of data type attached with them. So, in our example, we expected ABCD to be integers or we wrote the program to be in such a way that they are integers and P2P1P0 are also integers. So, because they are integers, they cannot have something like a string. Let's say it cannot have my name assigned to A, A equal to Shankar does not make sense, A should be a number. Then all the data internal to the computer is actually represented as a sequence of 1s and 0s, of some particular size or some predetermined size which we will call word. So, this integer is supposed to be of certain number of bytes and usually integers of size 4 bytes. Then there are these various operations that we did. So, if you look at A times C which is assigned to P2, then the star is an operation, the assignment itself is an operation and so on. So, instructions take the data that is stored in the variables as arguments and some of these instructions actually perform operations. For example, if I do X equals X plus 1, it takes the integer X, add 1 to it and the result is then put back in the same location X. And some other instructions actually do change the order in which the program is run and these are called control instructions, we will see them in a little more detail later. So, I wanted to look at this X equals X plus 1 in a little more carefully. So, if you do basic algebra, you may be confused about this statement. So, let's say X equals X plus 1 is written in a C program and you look at it, if you do basic algebra from your sixth grade of seventh grade, you would cancel X on both the sides and you would be looking at 0 equals 1. So, but that is indeed not the case. So, the assignment operation is something which is different. Don't treat the equality as don't treat the sign equals to as though it is an equality. So, the way it should be looked at is it is a statement, it has to be executed and the way it is done is you execute whatever is on the right side, you get a result from there, you take that result and put that result on the variable on the left side. So, let's look at the program, a program is a sequence of instructions. Normally the processor will work in the following sequence of steps. Step A would be pick the next instruction in the sequence, then step B would be get data that is required for the instruction to operate upon, execute the instruction on the data. So, if it is star, then you do multiply if it is plus you add and so on. And a step D would be take it and store it back as a result somewhere, it could be either a memory location or it could be some internal storage like 4 and 6 were stored in our steps. And finally, go back to step A itself, look for the next instruction and so on. So, this is going to be repeated in a loop. So, you pick the instruction, you pick the data that is required for it, you do the operation, store the result, go back and pick the next instruction and keep doing this till there are no more instructions for the particular program. So, let's look take a careful look at what the assignment itself means. So, this equality or the equal symbol that you saw is called the assignment operator. So, when you say when you see P 2 equals A into C, you multiply A with C and the result is assigned to the variable on the left side called P 2. Therefore, we call this equality and assignment operator, it takes the value and puts it in the memory location P 2. Therefore, it is doing an operation which is a memory operation. In this case, it is a memory write operation, you are writing to memory. So, it is an assignment operator. So, the value of a variable could be modified due to an assignment. So, the way it works is the left hand side is the variable to be modified. And right hand side is the value to be assigned. So, you have variable name equals value. So, if you have A equals to 1 as the assignment statement, then 1 is the value that gets assigned to A. If you have A equals to C, C could itself be another variable. You do not copy the character C into A. Instead, you go and look at the variable called C, look at the value that C contains and copy that value into A. If you have something like A equals A into B plus D by E, then you actually take the variable value contained in the variable A, multiply that by the value contained in the variable B, store it temporarily. Then take D and E, the values contained in these variables, divide D by E, store it again temporarily, add these two and put it back in the memory location A itself. So, the process is the right hand side is evaluated first. So, you would evaluate this right hand side first and after completing and only after completing all the operations on the right hand side, the assignment operation is performed. This will write the result back onto the left hand side. So, variables and constants are two typical things. So, this is where I want to bring this distinction between what is a variable and what is a constant. So, a variable is something that can change during the execution of a program, whereas a constant cannot change its value during the execution. So, you look at A equals 1, A is a variable here, 1 is number 1. Number 1 is not going to change during the execution of the program. Therefore, 1 is a constant and A is a variable. So, the variable names are made up of letters, digits and underscore. So, these are called identifiers. So, for different memory locations, you give different identifying names just like we have names, variables are the names for the memory locations and the variable names are what are called case sensitive. What that means is upper case or capital letters are different from lower case or small case letters. So, if I use a variable name called class size with a capital S, it is going to be different from a variable called class size with a lower case S. So, these two are two different variables, which means they will get two different memory locations assigned to them. And the maximum size that you can have for a variable name is 31 letters. You cannot have more than 31 letters for a variable. The first character for a variable that you have that you write must be a letter. It cannot be underscore or it cannot be a digit, it has to be a letter. Typically, you use a meaningful and self-documenting name for the variables. So, for instance, let us say I want to use PI or PI. So, PI is a constant, PI is not going to change its value. It is going to be 3.141 and so on. It is a constant. So, usually constants are given names, which are all capital letters. Whereas, variables are given names, which are usually a mix of lower case and upper case letters. And then there are keywords or words that are reserved by the programming language. We already saw if statement in module 2. There are also other statements, other keywords like for and so on. We will see them later. So, these are not names that you can assign to your variables. You cannot have a variable by name if or for or else or float or int or while and so on. So, the variable declaration goes as follows. Once you declare you get storage, I already showed that in the animation. Decleration is the general form. You have the data type followed by the variable name or a list of variable names. The various types that are allowed are integer, float, character and double. Int is for integers. So, you can only store integral values in them. Float and double are for real values and you can store a dot something. So, 5.34, 3.14 and so on. Care is for character. It can store a single letter, a, b, c, d or such things. So, if you look at the statement int x semicolon, what it really does is you have a variable by name x and it is of data type integer and there is a memory location which is labeled x for this execution of the program. It assigns a certain number of bytes for this. Whenever you use the variable x in your program, during the execution this value which is contained in this location x is used. We use the term variable not because, so we actually use the term variable because the value of a variable can change during the execution of the program. So, a program is essentially a modification of variable values. So, for instance, even the variables a, b, c and d, they had some unknown values initially and they changed only when the user input those values. Similarly, p2, p1 and p0 were unknown values initially and they changed once the operations on the respective right hand side were over. So, each c program is a modification of variable values and the modification can happen due to operations like plus minus slash which is for division, star for multiplication and so on. These variables can also change values because of functions or operators provided by the system. So, for example, I could say a equals sign of x. So, x would be treated as a parameter to the function called sign. Sign is a built-in function in the math library. It will do a sinusoid or sign of x. The result of sign of x will be stored in this variable called a or these variables can change due to some functions itself which the programmers create. We have not written any such functions yet we will see them as we go along. Let us look at the kind of operators in C. There are four basic operators for arithmetic namely plus minus star and slash. They stand for addition, subtraction, multiplication and division respectively. You can use these operations against integers and floating point numbers. So, plus and minus for integer and floating point will just add the values or subtract the values. Star and slash have a little bit of meaning or a change in meaning when you attach them to integers or as opposed to floating point. When you do integer division, the fractional part of the result is truncated if you do integer division. So, for example, 1, 2 or number 12 is an integer and number 5 is an integer. So, if you write 12 slash 5 you are dividing 12 by 5 and even though the result is 2.4 this 0.4 is truncated. So, the result of dividing an integer by another integer is also an integer in this case it is only 2. So, a more drastic case is if you divide 5 by 9 for example. So, 5 is smaller than 9. So, when you divide 5 by 9 you have a fraction and no integer value. So, the result would be 0. So, you have to watch out for this when you program but for now this is not a problem and then there is this modulo operator or percentage. So, this percentage if you write x percentage y on the right hand side of assignment statement what it will do is it will take x and divide it by y but instead of putting the quotient it finds out the reminder. So, a by b finds out the quotient and a percentage b finds out the reminder. So, this is for integers. So, of course, for floating point numbers a percentage b does not make sense. You can take any floating point number divided by another floating point number and you can always get a coefficient with the modulo being 0. So, this is called the modulo operator because it leaves the it finds out the reminder. So, percentage is defined only for integers it is not defined for floating point. Let us look at these operators. If you look at operations just like in when you write expressions in your basic algebra there are rules that you have to follow the rules of precedence. So, even in our example we had a times d plus b times c which was written as a plus a into d plus b into c. So, what is the order in which things are done? So, the first precedence is for parenthesis expressions. The next precedence is for star and slash and modulo and last level of precedence is for plus and minus. So, to illustrate what I mean by that let us take this expression this complicated expression a plus b times c plus d and c times d and so on. So, if you are not careful you may end up doing something like this. So, let us say I start looking at it from the left side I see a plus b I take a and b and first add it and then I multiply the result by c. I take the result multiply by d take that result find the modulo by e and so on. But this is not the way in which we do this in algebra either. So, in algebra we if an expression like this is written then you do not say you do not do the addition first you go and look for higher precedence operations first followed by lower precedence operations. So, the numbers that you see on the right side or not the values attached to these variables instead that indicates the order in which the operations will be done. So, if this expression is given to you the very first operation that will be done would be b times c. So, this star is the very first operation that will be done the result of b times c will be stored temporarily somewhere that result will be multiplied by d. So, this star is the second operation that will be done who. So, now you have b times c times d the third operation that will be done is percentage. So, b c d percentage e will find the reminder of dividing b c d by e. Once that is done then the next operation that is done is plus. So, you will do a plus that whatever is in this expression here. Then finally, you do this division followed by excuse me followed by the subtraction. So, this is the order in which things will be done. So, if you are looking for a parenthesis expression which is equivalent to this this would be the parenthesis expression. So, you start with b times c the innermost thing is evaluated first. Then you have that times d then you have that times that modulo e. So, you will have a result from here that will be added to a and you do f by g and this whole expression will be so this f by g will be subtracted from this whole expression on this side. So, it is missing one parenthesis here. So, there is so expected we expect a parenthesis to be here. So, this is the order in which things are done. So, use parenthesis always if you are in doubt until you get familiar with the order of precedence. So, star slash and percentage has higher precedence over plus and minus and parenthesis has higher precedence over star slash and plus. So, let us see another example here. So, a times b plus c percentage 5 plus x by 3 plus p minus r minus i it looks complicated enough. It is also not a very good thing to write. So, I am giving it only for illustration purposes you should not be writing such things in your programs. So, the evaluation order is b plus c and 3 plus p would be done first because of the brackets that you have around them. And once you have it star slash and percentage have the same precedence and you have star and percentage here. So, star comes before percentage in the program order if you look at it from left to right star comes before percentage. So, star will be performed before the percentage. So, a times b plus c is evaluated and then you do a module of 5 over it. Similarly, when you have x by 3 plus p, 3 plus p is evaluated already. So, you will do x by that. At the end of it you will have some value for this whole expression, some value for this whole expression minus r minus i. So, now you have only plus and minuses. You simply go from the left to right side and you will do this plus that the result is then you remove r from it and then you remove i from it. So, that will be the order in which you do things. And finally, the whole expression is evaluated and you have a value at the right hand side, that value is assigned to this variable called value, which is on the left hand side. So, equal to is the only operator that violates the left to right rule. So, star you do the calculate something on the left side before you calculate something on the right side. A percentage also you evaluate something on the left side before you evaluate something on the right side. But for the equal to operator you need to evaluate the right hand side, get it completely evaluated and then the result is assigned to the left hand side. Let us look at a few other operators that are useful and very common in C and the increment and decrement operators are these operators which are actually unusual not uncommon unusual. So, you so for example, this plus plus if you add, see if you do a plus b it is addition of a and b. But if you do a plus plus it is actually equal into a equals a plus 1 a plus 1. So, plus plus means add 1 to the operand and minus minus means subtract 1 from the operand. So, let us look at this small example n plus plus would mean you take n add 1 to it and put the result back in n itself. So, it will increment n after the use of n whereas plus plus n means increment before the use. So, let us see how this can be useful in a expression or how it can be used in an expression n equals 4. So, there is a right hand side which is 4 the left hand side as n there is nothing to do on the right hand side it is a constant. So, 4 is assigned to n. So, there is nothing to do there. Then let us look at this statement x equals n plus plus. So, what we have here is this plus plus is a post increment operation. What that means is use the current value of n assigned to the left side and then combat and change the value of n. So, in this case if n equal to 4 was already executed the current value of n is 4 it is assigned to x and then n is incremented to 5. So, at the end of these two statements n would be 5 and x would be 4. Then if you have this third statement y equals plus plus n n has a pre increment operator which means n should be incremented before the use in the right hand side. So, the current value of n is 5 you pre increment the result is 6 and that result is given to y. So, after the execution x would be 4 because you use the value before you incremented y would be 6 because 2 increments happened before you assigned it to y and n would be 6 because n got 2 increments 1 as a post increment here and 1 as a pre increment here. So, remember the memory layout there are 3 variables n x and y which means there are 3 memory locations n x and y and mentally simulate how this read and write on the memory is happening involving the ALU. So, just remember that whenever you have a post increment read assigned to the left side and then do this operation whenever you have a pre increment do the operation first and then assigned to the left hand side. So, it is as simple as that. So, we looked at the notion of variables and we looked at the notion of what the memory layout is we also looked at what the various operators in C are the basic arithmetic operators and we looked at a small program. So, I want to show something small about the code before I wrap up this session lecture 1. So, I am going to run this program we already had this program. I am going to run this program we did int a b c d int p 2 p 1 p naught. I am going to run this program. So, let us what I am going to do is I am going to run it with an unexpected input. So, I expect integers a b c and d to be given in integral values what if I violate that. So, what I am going to do is I am going to take two polynomials 1.5 x plus 1 and multiply it with 1.5 x plus 1 itself. So, I will try 1.5 and right away I have some result here which says the product is something it did not even give me a chance to enter b c d and so on. It gave me some product and clearly this is not what we expect. So, the variables a b c d where integers and by just giving the input 1.5 somehow it got values for b c and d incorrect values of course and it gave me some polynomial here as a result also. So, something bad happened here. So, we will sit down and reason about this at a later point of time. So, this is just to show you that in in module 2 we looked at some values that I gave to the program and for a b and c it still gave me correct results. But it is not because that it got the correct values in place something else happened there will sit down and reason about that at a later point of time. But this is a program where entering a wrong data type 1.5 is a floating point I gave it when an integer was expected and the program so called crash it gave me something which is unexpected. So, with this we are at the end of lecture 1. So, see you in lecture 2.