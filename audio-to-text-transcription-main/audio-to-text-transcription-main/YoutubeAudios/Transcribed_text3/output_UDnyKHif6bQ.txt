 Welcome to lecture 2 of this online course on programming. In today's lecture in the first two modules we will look at input statements and output statements, compound statements and we will also look at this category of statements called the selection statements. So we have been looking at print of an scan of for a while and I have not really explained what print of an scan of are about yet. But in this lecture we will look at what is the syntax of print of and what are the different things that go into the format itself. So print of an is general form has a format string followed by a list of comma separated variable names. So the syntax is highlighted at the top. So you have format string comma separated list of variables 1 to n. So the format string is enclosed in double quotes. So we have seen that in several examples before I will also show you examples later. And the format string essentially indicates how many variables should it be printing on the screen. What are the types of the variables? How many columns to use for printing them? So numbers could occupy different number of columns and so on. So we could have right justification or left justification and so on. So we can specify the number of columns required even though that is not something that you would see in this lecture in detail. And if you want any character string to be printed. For instance the very first program that we wrote we did not really have any variables to be printed. We just said print of hollow world. So let us look at this example. Let us say I have int x and float y and let us say x equals 20 and y is minus 16 point something. If we have this print of statement value x equals percentage d and value y equals percentage f, backslash n comma x comma y. So that is a print of statement. So as you can see the very first part is the format string which is enclosed within double codes and then there is a comma separated list of variables. In this case it is a comma separated list of two variables namely x and y. And when you look at this one there is string value space x symbol equal to and then there is something called percentage d and then there is some other string up to here percentage f backslash n. So percentage d says that whatever value it is or variable it is going to get it should print it as integer and percentage f indicates that whatever it is going to get as a variable it is supposed to be printed as a real value. So this percentage d is the very first percentage symbol that you see followed by some letter d. So this percentage d associates itself with the first variable x and the second one percentage f here associated itself with y here and so since percentage d is for integer x is printed as an integer and since percentage f is for real y is printed as real. So this is the basic example there are other specifiers but more often they are not you will need only d f and possibly a g. So the output for this would be value x equals 20 and value y equals minus 16.789. So the idea behind this is that if you have this strings here so this value appears as it is the space appears as it is x equals to appears as it is only this percentage d is a place holder. So it is holding its place for this variable to be printed in its appropriate format. So let us look at some of the print of statements we have used before print f enter the three numbers a, b and c. So this is something that we have used before. So this is just a format specification there is nothing to be printed here it will print the test text as it is. Then look at this other statement print f the product is percentage d x character 2 plus percentage d x plus percentage d backslash n. So this is something that we saw in the polynomial multiplication example in the previous lecture. So now this percentage d associated itself with p 2 this one with p 1 and the third one with p naught. So the output that we got last time was 3 x squared plus 10 x plus 4. So you can see that percentage d was place holding for 3 and percentage d was place holding for 10 here and this one for 4 and everything else gets printed as it is. So backslash n as I mentioned earlier it is essentially is printing a new line. So it will print this statement the product is this and the any other print that you give will go to the next line. What about the input statements? So in the input statement let us look at scan f. So scan f is also of the similar format you have format string and you have a comma separated list of variables that you want to be scanning. So the format string as before is enclosed in double quotes and the format string indicates how many variables to expect as it was in print f. Type of the data items to be stored in var 1, var 2 and so on. So it is very similar to print f except that you see the symbol ampersand in front of all the variables. So you have ampersand var 1, ampersand var 2, ampersand var n and so on. So the symbol ampersand is used to specify the memory address where the value is to be stored. So remember var 1 whenever you use it directly in your program it goes to the memory location and gets the value but in this case scan f is supposed to take the value from the user and put it in the memory location called var 1. So to do that you put ampersand of var 1 we will look at this in more detail later what you are essentially passing on to scan f is a pointer to var 1 by prefixing an ampersand before it. So ampersand var 1 is a pointer to var 1 and it says this is the memory address for var 1 instead of calling it by name you calling it you now get the memory address and whatever the user inputs will go to that memory address. So we saw this example in the previous lecture also when scan f happened we went to the specific location and we got the values for a, b, c, d and so on. So let us look at the other example we have seen before scan f percent hd, percentage d, percentage d, ampersand a, ampersand b, ampersand c. So again the order in which things are done is left to write for the format specifiers as well as left to write for the variables here. So it will store it will expect 3 integers from the user and put these 3 in locations a, b and c respectively. Finally if we have this kind of an example where percentage d, percentage f, ampersand marks, ampersand average marks. So I am assuming that marks is an integer and average marks is a floating point value. So if the user keys in 16 let us say some couple of spaces and 14.75. First the scanner will come and look at it from the left side and keep scanning till it finds an integer. In this case 1, 6 is an integer and after that is a white space white space is not a part of an integer. So it will stop scanning. So there is a number 16 which is a valid integer that goes into the very first variable namely marks. Then the format specifier says percentage f which means the scanner should look for a floating point number and when it looks at these spaces 1, 2, 3, 4 spaces the space is not a part of a number. Therefore it keeps looking further. It sees number 1, 4 but there is a dot and followed by 75. After that there is no more input which means the input ends at 1, 4.75 which is 14.75. So 14.75 would go as the average marks. So usually space, backslash and so on are not specified in the format specifier. In the format specifier which we put within double codes you usually do not put space, command and other things. In print if it is useful to print something on the screen in scanf you just want the data from the user and the user may enter space and so on scanf automatically ignores it. So usually you do not put it as part of the format specifier. So the scanf skips over spaces if necessary to get the next input. There are several other formats specifiers that you can use but the most commonly needed are percentage d and percentage f. The other one that might come useful is percentage c where c stands for character. So percentage d is decimal percentage f is float percentage c is character. There is also an exponent form for floating point numbers which goes by percentage e. For example 1.523 e2 means 1.523 into 10 square or 10 power 2 and which is 152.3. So there are also several modifications to percentage f and percentage d which are possible which you can use in printf. However they only control how much space the number takes on the screen it does not really control how the values itself. So if you say percentage d it is an integer. So it will get printed as an integer but depending on percentage followed by a number and a d will take as many spaces as you specify the number. This is useful in justification and so on. So I am not going to cover how to have a fixed width of numbers and so on. So that is not that is beyond the scope of this lecture. So I suggest that you go and read up a book on c to get more details. Let us move on to statements. So we know that a program is usually a declaration followed by one or more statements and these statements could be an assignment statement or function calls. We have already seen these two kinds. So assignment statements we have seen them in the polynomial example and function calls printf and scan of our functions we have seen them also. We saw selection statement also when we looked at maximum of 3 numbers and so on. One thing that we have not seen is repetitive statements. So statements could be a 4 types assignment function calls selection statement and repetitive statements. The first two are of a category and the second two are of another category which is what I want to talk about in the next few slides. So the first category we call simple statements are those statements that are expressions or function calls. So for example if I have x equals 2, x equals 2 is a single statement you take the value to assign it to x. So it is an assignment statement. Similarly x equals 2 plus 8 it computes 2 plus 8 on the right hand side gets the value 10 puts it to the left hand side. It is a simple statement because it is doing only an assignment. Then there is a function called printf hollow world. So it is a simple function call and finally sign of x. So x is passed as a parameter to a function called sign. Sign computes that and returns the value which is placed in y. So these are simple statements because the right hand side evaluates a value and the value is put into the variable on the left hand side. So simple statements are usually terminated by a semicolon and in this case you can see that all these examples, all these 4 different simple statements have a semicolon at the end. So anywhere where you evaluate an expression on and so on will all be simple statements. Anything that you call anywhere where you call functions will all be simple statements as well. So the other category is what is called compound statements. A compound statement is a group of declarations and statements collected together. So a compound statement contains one or more set of simple statements and it may also have declarations on their own. So for example, a single simple statement is also a compound statement because compound statement contains one or more simple statements. So the basic idea behind compound statement is that it forms one logical unit and to say that this is one logical unit we surround the statements that are grouped together using braces. So sometimes these set of statements that are within the braces are also called a block. So let us see these examples. So we have seen something like this. Let us say I want to calculate the maximum of 2 numbers. So I have a small program segment which does that. So you have int max. If a is greater than b max is a and print of a is greater than b. Else max is b and print of b is greater than a. So we are not only printing whether a is greater than b or b is greater than a. We are also storing the maximum value in this variable called max. So if you notice you have braces left and right braces for if a greater than b and we have left and right braces for the else clause also and this is one logical unit. So if a is greater than b the maximum is indeed a and you can also print. So this is one logical unit. So I highlight it in orange here. However the compiler only will look at this left and right bracket. Anything within this left and right brace is a block and this is treated as everything that should go under the true case. If a is greater than b is false then max is equal to b and you can print that b is greater than a. So in fact b is greater than or equal to a in this case. It is not just greater it is also greater than or equal to. So this is one logical unit and the braces say that this is one logical unit. So this is a compound statement and this whole if statement by itself is a compound statement because if statement so this is if followed by an expression followed by a block else followed by a block. This whole thing is also one logical unit. Therefore it is also a compound statement. So a compound statement may have one or more compound statements inside them and it may also have simple statements inside them. A simple statement is a one line expression or a function call and so on. So compound statements in turn can come in two varieties. They can either be conditional statements namely if the null statements or it could be switch statements. The other variety is also called the repetitive statements or loops I refer to them earlier as repetitive statements. So there are three varieties of loops available in C namely for loop while loop and do while loop. So we will look at more details in the next few slides about if then else statements and switch statements and later in the lecture we will see things about loop statements. So far in this module what we have done is we looked at I O statements and we looked at two categories namely simple and compound statements. And simple statements we already know they involve arithmetic expressions or a function calls on the right side and variable assignment on the left side. Compound statements is a collection of either compound statements or simple statements.