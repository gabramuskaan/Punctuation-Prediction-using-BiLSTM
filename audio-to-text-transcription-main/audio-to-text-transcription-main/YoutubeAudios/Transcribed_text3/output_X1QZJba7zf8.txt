 So, we in lecture 2, we will now look at conditional statements. So, as I explained earlier, conditional statements are of two kinds, they are of the if the null kind or the switch case kind. So, we will start with the conditional statements. These are also called selection statements for the reason that you actually have an expression based on the evaluation of the expression, you actually select what should be done. So, for example, there is the single selection statement. So, let us see this example if attendance is less than 75 grade equals W. So, what this is really doing is this if attendance is less than 75, if the class attendance is less than 75 percentage, grade is withdrawn that is what the statement is supposed to be. So, if attendance is less than 75 grade equals W. So, this is an this does not have any other choice, there is no else here. So, this is a single selection statement. So, you choose to assign W to grade or not depending on this expression, attendance less than 75. If attendance is actually greater than equal to 75, this assignment will not be chosen for execution, which means it will not be executed. So, this is a single selection statement. A double selection statement on the other hand has two things that you could do, you could have if marks less than 40, 40, past equals 0, else past equals 1. So, you have two statements past equals 0 and past equals 1 and one of them will be executed depending on the choice of marks. So, if marks is less than 40, past equals 0 will be executed, otherwise past equals 1 will be executed. So, there is a semicolon missing here that has to be included and otherwise it can be a switch statement where it is multiple selection. So, you have single selection, you have double selection or you have multiple selection. So, we will first see the single selection and double selection in gore details before we go into the switch. Let us look at the basic structure of a if statement. So, the if statement is starts with this keyword called if followed by an expression followed by a block called statement 1. Optionally, it can also have the else clause under block for the else clause called statement 2. So, the meaning of this is if expression evaluates true statement 1 will be executed. So, the statement 1 is remember it is a compound statement it is not a single statement, STMT1 is supposed to be a compound statement. So, compound statement will be 1 will be executed if the expression evaluates false this statement 2 will be executed. So, STMT1 and STMT2 are usually blocks of code need not be just single line code, even though single line code is acceptable need not be single statement code. So, the else part is completely optional and that is what we have when we have this square brackets here. Square bracket is not part of the syntax it is just to tell you that everything that comes within square bracket is optional here. So, if there is no else part in the statement this becomes a single selection statement and if the expression evaluates to true statement 1 will be executed. Otherwise the statement would have no effect. So, what it really does in terms of execution of programmers. Let say I do not have any of these selection statements you have a series of simple statements. If you start from let say line 1 you will do line 2 line 3 so on up till line n the last line in the program and exit. So, this is a sequential structure whereas, once you have selection statements it could change the flow of the program. So, let us say there is some piece of code here in this blue dot here and you evaluate an expression which is indicated by the diamond. If the condition evaluates to true you execute a block of statement in the true branch and if the condition evaluates to false you do not do anything and either way after executing this you come here or if the condition is false you come here. So, this branch that you have here over the true case will not happen if the expression evaluates to false and it will go to this blue dot. So, this is a single selection statement you choose to execute this true block or not depending on the expression here. Then there is this other type which is the double selection statement you have a body of code here and after that you evaluate an expression. So, this body of code could be scanning something from the user or some other program some other piece of program that you have written before you evaluate an expression. Now there are two choices either true or false if the condition evaluates to true you execute the right block if the condition evaluates to false you execute the left block and once you execute one of these blocks you come and execute this blue block of code which is after the if statement. So, this is the general structure of if then else. So, let us look at several examples now. So, starting with example one where there is no else class. So, let us say the problem that I want you to solve is given a number find out if it is a multiple of 3. So, I give you a number x and you have to find out whether it is a multiple of 3 if it is a multiple of 3 then print it on the screen print that it is so on the screen. So, the equivalent code segment would be if x percentage 3 equal to equal to 0 print f x is a multiple of 3. So, this print f is a simple statement here and this if is a compound statement which contains only one selection if the condition is true it will print this on the screen if the condition is false it will not do anything. So, remember this percentage as the model operator that are introduced in lecture 1 right this percentage 3 means you are looking at x mod 3 and this is something that is new here which is this equal to equal to. So, this equal to equal to is essentially an operator in c with checks for equality a single equal to symbol is useful for expression evaluation. So, we did this in the previous lecture. So, p 2 equal something p 1 equal something and so on. So, you evaluate something on the right side and assign it to the left side. But if you have 2 equal to symbols right after the other that is checking for equality. So, the meaning of this expression is if x modulo 3 is equal to 0 then do this else there is no else statement here. So, if this condition is true this statement will be executed. Let us move to another example where there is no else clause but it is a compound block. So, if the given number is multiple of 3 let us say you want to ask the user for another input right. So, if x percentage 3 is 0 you not only want to tell the user that x is a multiple of 3 you also want the user to enter another number and you should be able to scan it. So, if x percentage 3 equal to equal to 0 then so, the then block is between this and this brace. So, print f x is a multiple of 3 please enter another number. So, you are prompting the user to enter another number since the user is expected to enter another number you have to scan it scan f percentage d and f percentage x. So, this is a collection of 2 simple statements that goes into a code block and if this condition is true we have a logical collection of statements here or a logical sequence we not only want to print we also want the user to enter another input. So, you need a brace because there are two simple statements inside. So, you have there is a little bit of warning that I want to give here say let us say I want to say I will solve the same problem but if I left out the braces that is what you are seeing here. If x percentage 3 is 0 then I have left out the brace here and here. So, from the view of the compiler the if statement x percentage 3 equals to 0 print f that means instead of becoming a compound statement with two lines of a simple statements it instead becomes one compound statement of if only this print f is evaluated if this condition is true and this can of statement is executed unconditionally. So, what I mean by that is this print f will happen only if x percentage 3 is actually 0 or if x is a multiple of 3 and this can of will happen no matter x is model 3 x is model 3 is 0 or not. So, scan of statement is actually outside the if condition even though it is formatted in such a way that this print f and scan of seems to be inside the if block the compiler does not care about the spacing that you have given here this can of is actually is outside the if condition here. So, the result the result would be the the user will have to enter a number even if x is not a multiple of 3 and that is not what we wanted we wanted the user to enter a number enter a new number only if x is a multiple of 3 otherwise we want to do something else with it. So, the simple thumb rules use the left hand right brace to enclose if and else blocks and I typically use it even if there is only one single statement inside this will save several headaches the program can become slightly undreadable because you have too many of these left hand right braces. However, it will cause you lesser headaches. So, that is why if you go back to my lecture 1 you will see that this if then else clause that I had even though there were only single statements inside I always enclose them within braces. Let us look at another example with then else clause here. So, if the given number is a multiple of 3 ask for another number otherwise let us say I want to thank the user. So, if x percentage 3 equal to 0 then you print this on the screen and you scan the another input. So, this is one logical condition now you have multiple selection though or double selection else. So, if this is not true you print if thank you right. So, this is the structure for else and we have seen this before in our lecture 1 also. So, one word of caution here. So, just because you are scanning here it does not mean that the user would enter a number which is not a multiple of 3 the user may still enter a number which is multiple of 3 we are not checking here. So, I want to show this program just to show the structure of if then else. So, at the end here x could still be a multiple of 3. So, you need a mechanism by which you repeatedly scan the input here till the user input something else if that is what you want in this case we are not checking for that I just want to show you the structure of if then else. So, there are 2 other useful collection of if statements. So, one that you see on the left side is what is called a cascading if else and one that you see on the right side is the case of what is called nested if else. So, in the cascading if else case what you have is if expression 1 evaluates to true you do a you execute a block of statements in the else clause you actually evaluate another expression else if expression 2 evaluate you execute another block of code else if expression 3 you execute another block of code and so on. You can have a series of this else statements ending with a final else clause where you execute another block of code. So, this is called cascading if else we will see a quick example later. The other case is nested if else. So, we have if expression 1 do a block of code if expression 2 do a block of code and so on. So, what happens here is this block of code or this block or this block only one of them will execute depending on the conditions for expression 1, expression 2 and so on. So, if expression evaluates to true this block of code will execute and none of this will get executed if expression 1 is false and if expression 2 is true only this block will get executed and so on. So, in this cascading if else case there is only one block which will really execute not all of them. However, if both expression 1 and expression 2 are true both this block and that block will be executed here. So, what is really happening is if you notice if expression 1 there is a curly brace here and there is a curly brace here between these two curly braces is if expression 2 which means this is a compound statement which is within another compound statement. So, this is completely contained within the evaluation of this expression. So, therefore, this block of code as well as this statement will be executed if expression 1 is true. So, let us see an example of cascading if let us say I am grading your course and let us say this is my grading policy. If you get below 50 marks in the exam you get a D grade if you get between 50 and 59 you get C if you get 60 to 75 you get B and 75 and above will be A. Let us say this is my grading policy for the course then I have the integer marks and I have the character grade. So, marks is something that you are going to enter and grade is something that I am going to assign from the program. So, you see this structure here if marks is less than or equal to 50 then grade is D. So, if it is less than or equal to 50 I assign the grade D else if marks is less than or equal to 59 then grade is C else if marks is less than or equal to 75 grade is B else grade is A. So, what is happening is we are seeing only one of these will be true if you enter a mark here only one of these things will be true and only one blob of code will execute either you will get grade equal to D or C or B or A you can never have a case where more than one assignment happens. So, if my mark is 40 then this if condition is true then the grade would be D if the mark is 65 then if this expression will evaluate to far falls this expression will also evaluate to falls this expression will evaluate to true you will get grade B. So, this is the structure of cascading if and these are simple statements therefore, I have not put braces but putting braces is always recommended. So, there should have been a brace here and a brace here there should have been a brace here and brace here and so on. And, next if we saw this segment earlier if A is greater than B and of A is greater than C print of A is the largest else print of C is the largest and there is some other blob of code that comes as else. So, I am just showing one segment of the maximum of 3 numbers. So, if you are in doubt go back to lecture 1 and look at the code we already used an estadestatement inside the code there. You should be a bit cautious about the use of the else clause. So, let us say I did this if marks is greater than 40 and within that if true condition I have if marks is greater than 75 print of you got distinction else print of sorry you repeat the course. Let us say this is what we have right. So, what we really want to do is if somebody got less than 40 we want to tell them that they have to repeat the course, but let us see what happens here. So, if you start with this estadement there is an expression here marks greater than 75 print of you got distinction. If marks is less than 75 even if it is greater than 40 what happens is this else clause attaches itself with this if clause and not with this if clause. So, else always attaches itself to the nearest statement nearest if statement without the else clause. So, because of that what happens is let us say my mark was actually 65 it is not greater than 75. So, I do not get distinction. However, I will be asked to repeat the course which is not what we intended. What we really intended is this if marks is greater than 40 and if the marks is greater than 75 print if you got distinction and the else should have been for the this if condition. So, since else always attaches itself to the nearest if not having this brace here even though it is just one single statement here not having this brace here would result in something that you do not desire to have. So, be cautious about this that is why I said whenever you have an if condition if you automatically put braces and for else also if you automatically put braces none of these confusions will occur. So, go back to my basic thumb rule if true block should have braces else false block should have block should have braces by default and that will help in getting rid of all these headaches. So, finally let us look at the switch statement which is a multi way decision statement. So, in a multi way decision statement it is not a single decision or a double decision it could be more than one or less more than two decisions. The basic syntax is you have this keyword switch followed by an expression which is within parenthesis and you have braces. So, again this is a block of code. So, switch is a compound statement and it can contain several cases. So, you have case constant expression statements case constant expression statements and so on you can have several cases and you can also have an optional default clause and an optional default say essentially what happens is if you have multiple choices depending on the value of expression whichever evaluates to true those statements will get executed. If none of these expressions evaluate to true then the default clause will kick in and this set of statements will get executed. So, let us see examples. So, let us say I have a character C and I read this character from the user. If the character is one of R, B and Y I want to print something on the screen. So, if the user input capital R as an input I want to print F red. If the user inputs B I want to print F blue. If the user inputs Y I want to print F yellow. So, if you look at this there is a switch C followed by braces followed by one or more case statements. The case then there is a constant expression here R, B or Y followed by a colon and there is a statement here. So, that is the structure here. So, switch followed by expressions and there is something within the curly braces you have case constant expression colon statements. So, you can see that this program is following that structure. Now, let us see what this constant expression is about. So, this R, B and Y are not variables. So, when you when you put something within single codes you are actually looking for the character R or character B or character Y. This is these are not variables R, B, Y. So, remember variables are those that can change value during the execution of the program. Whereas, these are constants they cannot change their values during the execution of the program. So, C is a variable but within codes R, within codes B and within codes Y are all character literals they cannot change their values. So, what you are looking for is if C the character that you got from the user is one of these then one of these statements should execute. The other thing that is new here is this notion called break. So, what happens with these switch clauses if R is true then it prints then it prints red and you put the break so that you do not want any of these other printfs to execute or even the conditions to be checked. So, if you have printf red and you print the red and you are now out of the switch clause if you put a break here. So, this is something that is new. So, these are the choices that you put in R, B and Y and this break breaks away from the switch statement to outside the switch statement. So, it starts executing block of code after the switch statement. So, let us look at another example where we want to handle both lower and upper case choices. Maybe I as a user enter lower case or upper case I want to handle both of them. So, this is also something that you can do with switch statements. So, these two lines are as or as before this is also as before the changes in these three lines here to here. So, if you look at case R or case R the lower case R in both these cases we want to printf red. So, I could write this as case capital R printf red break case small case R printf red break and so on. But we are executing the same set of statement for both these choices small case R and upper case R. So, therefore, if you have a series of choices for which you want to execute the same set of statements you can just put them back to back and have this set of statements exactly once. The same thing we have here for both upper case B and lower case B we want to print blue. So, therefore, this set of statements is common for both upper and lower case B. Similarly, this set of statements is true for both upper and lower case Y. So, one thing that you should also notice here is the last statement here does not have a break because anyway it is the last condition you are checking automatically after checking these conditions if both these are true it will execute this and come out of the switch. If these are false you will anyway come out of the switch statement a break is not required in the last choice of case. So, there are two things that you have to watch out in the switch cases. So, one warning is that variables cannot appear as choices. So, for example, let us say I put character car 1 is R and character car 2 is B and case car 1 case car 2. So, remember the expression that you have here should be a constant expression whereas, you have used a variable called character 1. Even though character 1 is initialized to a literal R here you are putting a variable character 1 and that is not acceptable. So, C only allows constant expressions to be in the choices you cannot put variables of any kind here. So, this is an incorrect program segment. So, if you want go and write writing this in a program you will see that the compiler actually indicates an error. There is another thing that you have to be warned about namely using ranges. So, for example, let us say I want to give these grades and for 0 to 49 I want to give D for 50 to 59 I want to give C for 60 to 74 I want to give B and for 75 to 100 I want to give A. Let us say I want that you cannot do something like this case 0 dash 49 print F D or 50 dot dot 59 things like what you would do in when you write in paper right you may say 0 dot dot 49 or 50 dash 59 and so on. Those things are not acceptable also you cannot provide a range of values in a constant expression it has to be a single value for this case clause. So, whenever you have multiple values you have to have multiple cases. So, that is why we had this here. There were multiple values R and R for which we wanted to print F red we actually have multiple cases also specified explicitly. So, in summary we have a switch statement which has multiple cases and for each of these cases it executes the corresponding block. If there is a break it will break away from the switch statement. If there is no break it will go and evaluate the next cases also. So, this is not a valid way to give grades you should use the if then else clauses here I already showed you this in the earlier slide. So, with this we are the end of module