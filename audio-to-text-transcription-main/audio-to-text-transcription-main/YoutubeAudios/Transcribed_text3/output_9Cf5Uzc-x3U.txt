 So, in module 2 we will look at problem solving. We are going to take up a small problem, which is finding the largest of 3 numbers. It is a fairly simple problem, but in this problem by looking at this we will see how we can take a problem break it down into smaller chunks. We will see how to do a flow chart or at least come up with a sequence with which we can solve this problem. And I will also show the rudiments of how to write a C program and the software environment that is required for it. So, let us jump right into the problem. So, we are looking at largest of 3 integers or 3 numbers. So, let us call them A, B and C. So, this forms the input to the program or input to the problem. And what we are interested in finding out is what is the largest of the 3. Is it A, is it B or is it C. So, we have to start somewhere and we have to start with comparisons. So, let us say I compare A and B. I am going to check if A is greater than B or not. There are two possibilities. A is actually greater than B or it is not. So, if A is greater than B, then it is still possible that C could be greater than A. So, we go and check if A is greater than C also, if it is yes, then indeed A is the biggest of all. So, you have already checked it against B and you have checked it against C and therefore, A is the largest. However, if this condition is not true, if A is actually less than C, we know that A is greater than B. Therefore, C must be the greatest of all. So, this A is greater than B, but it is less than C. Therefore, C is the largest. Now, let us look at this other side. A is greater than B is false, which means B is the largest among A and B. And now, we can also check if B is indeed the largest by check comparing it against C. If B is greater than C, if it is true, then B is the largest, otherwise C is the largest. So, let us take one look at this problem before we go and write a program for this. We first compare A against B and if it is true, we check A against C. If both are true, then A is indeed the largest. If A is not greater than B, then we checked B against C. So, if B is greater than both A and B, so if B is greater than A, but if it is less than C, then C is the largest. If B is greater than both A and B, then B is the largest and so on. So, this is the basic set of that we have. So, at this point of time, it may make sense to try with a few examples and check if this is indeed correct, if this solution is correct. So, let us take this example, A is 1, B is 2 and C is 3. So, let us check this, is A greater than B is the first thing that is checked. So, you compare A and B is A greater than B, no. A greater than B, the answer is no. Now, you are ready to check is B greater than C and so to compare B and C, we take B, we take C is B greater than C, is B greater than C. So, B is not greater than C, so the answer is again no and therefore, the result must be C. So, essentially we have taken this path. Let us take another example, A is minus 1, B is 5 and C is 2. So, again if we check A greater than B, it is false and B greater than C is true. Therefore, you would have taken this path, B is indeed the largest. So, with these two examples, I am now finally, convinced that this solution is correct. Let us go and write a program for this and you are going to write a small C program and in the process, I am going to show you what it means to write a program. So, I am going to use this environment or an IDE also called an integrated development environment called DevC++. It is a piece of software that is available for windows and it is available for free. It is widely used, lots of downloads. I can provide you links later for how to download it and how to run it. I already have it installed. So, let me start a new program. So, I am going to start a new program and I am going to call so, I am going to write a piece of a comment in it saying this is a program to find the largest of three numbers. So, I want to be able to take input from the user. I mentioned earlier that we need a library for input and output and that is going to come from stdi.h and I am going to write the main program. So, do not worry about the mechanics right now. So, as I mentioned earlier, main program is the very first instruction that is executed and to do that, I am going to be so, the body of the main program is enclosed within braces. So, I am going to have three integers a, b and c. I am going to prompt the user for the values. So, printf is a statement which will print things on the screen. So, it will print enter a, b, c on the screen. At this point of time, we expect the user to actually print these numbers and there is some scanning that we have to do or reading from the user and we do that with this library function called scanf. So, do not get scared by the statement that is there. So, all is doing is reading a, b and c. So, and you can see that every statement ends with a semicolon. So, that is the terminator and now let us write this program. So, we want to be able to compare a against b and a against c and so on. At this point of time, it may make sense to actually go and look at the diagram once. So, we first compare a against b and based on s or no, we did further comparisons. So, let us compare a against b first. If a greater than b, then a still might be less than c. So, we have to check if a is greater than c also and if it is, then we are going to declare a as the largest. So, we have to check if a is greater than c also and if it is, then we are going to declare a as the largest. However, if this condition fails, then a is greater than c. So, this is the then c is the largest. So, again do not look at the mechanics right now. So, just follow the logic, we already had this. Let us go down further. So, we have taken care of two cases. We have looked at a greater than b and we have seen this side. We have taken care of this side. Now, we are ready to write code for the right side. If b is greater than c, then b is greater than a. So, by this time we already know that b is greater than a. We want to check if b is greater than c also. If b is greater than c, already we know that b is greater than a. Therefore, b is the largest. Otherwise, b is greater than c. So, this is the largest. So, this is actually a complete program. So, we have at line 2. So, you can see the line numbers on the left side. You can see it here. So, watch the mouse pointer. At line number 2, we have hash include stdo.h. Starting at line 4, ending at line 28 is our main program. The body is from line 6 to 28. There seems to be something which is in a, b, c. So, it seems to be reading in the values of a, b and c here. We have some checks and we have some print statements. So, this is the whole process. So, what we have really done is we have prompted the user for entering a, b and c. We read it from the user and we have written this piece of code which actually declares whether which one of a, b or c is the greatest of the three. So, let us save this program. So, at this point you have prompted for a name. So, I am going to write largest of three numbers. So, I am giving a fairly big name to the program, but you may want to give a smaller name if you wish to. So, I have this and this is not going to result in anything. So, we just have a program by looking at the program one can visually check whether things are correct or not, but the proof is in the pudding. We have to really make the computer run it. We have to give it test cases and see. So, we started with the specification. We have the design which was the diagram that I did earlier and we have coded now. Now, let us go and compile it. To compile it you go to execute compile in devc++ and voila we do not have any errors. So, I have written a program which has no compilation errors. We are ready to run the program now. So, I am going to press f 10 for it. When I press f 10 the first statement that is there is print f enter a b and c. So, this line number 7 is really not an executable statement. We will see why it is so later. It is actually called a declaration. So, we have declared variables a b and c of a type called int which stands for integer. So, the first executable statement is actually print f. So, print f enter a b and c and if you see the screen it just shows enter a b and c. You can see that the double quotation the open and closed code is actually missing in the output. So, this is the way in which print f which is a library function takes an argument. So, a library functions are just like mathematical functions. So, if I ask you what sign of x is you would write it as sign within parenthesis x. Would you not? It is the same thing here. So, print f is a function within parenthesis you pass the so called parameter to it and in this case the parameter is the string enter a b and c and we can see it on the screen here. So, now you can see the blinking cursor here that means the user is expected to enter something. So, let us take the two examples that we gave earlier. So, let us go back to the example. We tested 1 2 and 3 and minus 1 5 and 2. So, I am going to enter 1 2 and 3 I am typing in from the keyboard and it says c is indeed the largest. So, so far so good. Let me go back and try another input to do that I have not really changed the program per say which means nothing in the logic of the program has changed. I could just use the executable directly this is what I mentioned earlier. You could write it once compile it once and run it how many ever times you want. So, I am running it the second time without making any edits to the program because I do not see any evidence that the program is erroneous. So, enter a b and c. So, I am going to use minus 1 5 2 as an input and it says b is the largest. So, we have tested two cases this does not mean that it would work for every case. So, what I am going to do is I am just going to try and give all possible combinations of starting from let us say 1 2 3 I am going to try these combinations 1 2 3 1 3 2 2 1 3 2 3 1 3 1 2 and 3 2 1. So, I am going to try these 4 and these two combinations one after the other and if there is any bug I can hopefully catch it. So, let me give it one option after the other. So, I am going to run it once 1 2 3. So, c is the last largest good then let me run it once more 1 3 2 b is the largest good 2 1 3 I am sorry so, I am going to try 2 1 3 c is the largest 2 3 1 b is the largest 3 1 2 a is the largest 3 2 1 a is the largest. So, I gave 6 permutations that can come from ordering 1 2 1 3 and it looks like this program is actually correct. So, this by itself it is not show that the program is correct for the inputs that I have given it is correct and in this case it would actually sort any number. So, we have also tried it on negative numbers. So, let us try all negative numbers let us say minus 1 minus 2 minus 3 and in this case a is the largest. So, just for fun let us try instead of giving numbers let us try something else. So, I am going to give input as let us say S T and R. So, I gave 3 letters and I did not give numbers and R. So, I gave 3 letters and I did not give numbers and it actually says b is the largest. So, what happened here? So, we gave 3 letters S T and R and it says T is the largest. So, for whatever reason we will see why how this happened we will see why the b is declared as a largest. So, what is in fact b what is a and what is c we will see in a later module. But as of now if I give numbers things seem to work. So, just for one last time I will try another input 200 100 and 1000 and c is the largest. So, so far so good. So, this we started with the problem and we went through a sequence of steps and we designed a solution to the problem and the design is here. So, this diagram is the design and once we have the design we went and coded it we check the code by testing it. So, we have the whole setup. So, let me close this IDE or DevC++. So, with this we are at the end of this demo we saw this very first program that we wrote we tested it, we compiled it, we tested it and we ran it multiple times to ensure that things work well.