 In this module we look at how to work with one dimensional arrays, I am going to show more detailed examples and also write small programs for some sample problems. Let us look at this piece of code. What this piece of code does is actually read values. So, it says enter value of element number percent hd. You are reading some values into values of i and you are printing them. So, it is a fairly simple program. So, I am reading values and I am printing the values. So, one thing that happens in real world is that many times you do not know what is the number of things that you want ahead of time. So, we want to be able to write generic programs which means I do not want a program to be of a fixed size. So, let us say in the previous example temperature I declared it to be 365. What if I had a leap year? In which case I need 365 days and not 365 days. So, I need a mechanism by which I want this in a generic fashion and that is where C comes in very handy with something called hash define. So, as of now, so see this lines line 2 hash define n 6. So, what this does is wherever you see a symbol n it is going to replace that with value 6. So, now if I go and look at this loop, let us see how to make sense of this loop for i equals 0 i less than n i plus plus. Wherever you see n the C pre compiler pre processor will replace that with 6. So, this loop will run from 0 to 6. So, what this loop will do is read 7 elements numbered values of 0 to values of 6. And this loop also runs on same n. So, it will print values of 0 to values of 6. So, we have declared the array with values of n. n is not a variable. So, n takes the value 6 here. So, wherever you see n assume that it is number 6 there. So, what you are essentially doing is it is equivalent to saying n values of 6. And you have a for loop running from i equals 0 i less than 6 i plus plus and so on. So, we have indices that go from 0 to 5. I am sorry it is 0 to 5 and not 0 to 6. And this loop also runs from 0 to 5. So, we have 6 locations numbered 0 to 5. So, this generic value is very useful. But one small thing that you have to be careful about is that if I change this n to let us say 10, I expect 10 values numbered 0 to 9. But if I change the source code it is not enough. Remember once we have a change in the source code we have to save it, compile it and then run it. So, whenever you have a change in the source program you have to save compile, run if you want to change the value of n. It cannot be a single change in the source program and which will automatically reflect in the binary to be different. So, whenever there is a change in source program remember you have to compile and you have to save compile and run it. So, from now on we will try and use generic as much as possible. So, the first exercise that we are going to look at is the notion of Fibonacci numbers. So, Fibonacci numbers are very interesting. They come in various places later. So, Fibonacci numbers go like this. The first Fibonacci number is 0 the next number is 1 and from there on the Fibonacci numbers go in this fashion. You take the previous 2 add them and that gives you the next Fibonacci number. So, 0 plus 1 is 1. Then the next Fibonacci number is take 1 and so, take the previous 2 add them the next number is 2. Then again you take the 2 previous ones add them it is 3 and so on. So, the Fibonacci numbers go in the sequence 0, 1, 1, 2, 3, 5, 8, 11 sorry 5, 8, 13 and so on. So, this is the Fibonacci sequence. So, let us say I want to write a program to do exactly this. So, till now we were scanning the values from the user. Now, we have a program in which it will actually fill in the values. So, we are going to generate the first n Fibonacci numbers. So, as before we have a hash defined n so, what we want is we want the first 10 Fibonacci numbers starting from 0. So, we declare an array called Fib of n. So, this will declare 10 memory locations and you can address them as Fibonacci 0 to Fibonacci n. We already know the values of Fibonacci 0 and Fibonacci 1 and what the loop is going to do is it is going to run from 2 to 9. So, you have i less than n which means i less than 10. So, it runs from 2 to 9. So, i equal to 0 and i equal to 1 are already taken care of. When you run from 2 to 9 you get another 8 values. So, overall you are filling up 10 values of Fibonacci. And as I showed earlier we have we have to take a particular index i and we look at location i minus 1 and we look at location i minus 2. When we add these 2 we get Fib of i. That is exactly what this line is doing. We take Fib of i minus 1 and Fib of i minus 2 add that and put it in Fib of i. So, the first time when i equals 2 Fib of 2 will get updated with 0 plus 1 which is 1. Then you go back to the loop you check whether 2 is less than 10, yes 2 is less than 10. So, you increment you get 3. So, then you are ready to you are now ready to do Fib of 3 is Fib of 2 plus Fib of 1 which is 1 plus 1 giving 2 and so on. So, what you are having is a loop that runs from 2 to 9 and it is taking the previous 2 values and adding them and storing them in Fib of i. So, at the end of the loop you will have numbers from numbers of this form. So, 0, 1, 1, 2, 3, 5, 8, 13, 21 and 34. So, that gives us the first 10 values of Fib and notchi series. So, you will see the array Fib filled up from 0 to 34 and you can print them here. If I want the first 100 numbers let us say all I have to do is I do not have to go and touch the program anymore. I go and change the hash define I now write hash define N 100 this changes N to 100 all I have to do is save it and compile it. I do not have to go and touch these other lines where I see N. So, this is very useful. So, initially what we do is we keep values which are very small. So, that we can test the programs and then maybe I want something some example where N is very large. I tested with very small values ensure that it works fine and then I go and change it to some other larger value. We will see a similar example later. But once we have this we can now move on to other exercises. In this exercise the crucial point is we did not have Fib of i filled up with values. It starts out with uninitialized values and slowly you fill them up one after the other from Fib of 2 to Fib of 9. So, I now I let us move to another example. Let us say you are taking this course and about let us say 1000 students are taking this course and I want to find out how you students rate the class. I give a mechanism for you to rate the class you can rate the class from 1 to 5 and at the end of the course I may want to see how the ratings of this course are spread. So, each student is supposed to give a rating 1 2 3 4 or 5, 1 being bad and 5 being good let us say and at the end of it I want to see how many people said good, how many people said ok, how many people said bad and so on. I want that. So, this is something that is very common and what I want is I want to count the number of times each rating is given. So, maybe I want to see that oh there are 10 people who gave very good rating, 100 people who gave good and so on. So, I want to see numbers like that right. So, let us see how to write a program to do that. So, I am going to maintain an array called rating counters that is the array name that I am going to use and I know that the valid ratings are 1 to 5. So, I am going to have 1 2 3 4 5 I have 5 locations and rating counters of I is going to maintain the record of how many students rated the course as I. So, if 5 students gave rating 1 I would expect rating counters of 1 to be containing the value of 5 right. So, one thing is since the ratings are only 1 to 5 however, array indices start from 0 what I am going to do is I am going to declare an array of size 6 and I will not use location 0 right. Therefore, my even though my arrays actually is 6 elements I want only 5 of those I am using part of the array I am not using the whole array. So, this makes the programming slightly more easier. Let us see how to write this program. So, let us say there are only 5 students and the 5 students gave the rating 5 1 2 1 and 5 right. So, let us say these are the ratings that were given by students and what I would like to do is go one user at a time. So, the first user gave 5. So, I would want this one to be a count of 1 then the second user gave 1 I want this to be a count of 1 the third user gave 2 I want this to be a count of 1 also the fourth user gave 1 which means now there are 2 people who gave rating 1. So, I want this to be 2 and so on. In general what I want is as soon as I get a rating I want to do a plus plus on the array location which contains the response. If I get response as let us say 5 I want to go to location 5 and increment the current value. So, however, one thing you have to pay attention to is since we are doing increment we are going to do a plus plus we should ensure that all of these entries are set up at 0. If you start with unknown values you may end up with counters which are incorrect. So, we assume that all the counters are initialized to 0 we start from there. So, let us see how a program of this kind will work. So, I have in rating counters of 6 as I said earlier I am going to accommodate 6 locations, but my actual entries that I am concerned about are rating counters of 1 to rating counters of 5. So, even though I initialize this to 0 I am not really going to touch rating counters of 0 at all I am going to touch rating counters of 1 to rating counters of 5. So, I have this loop which runs from I equal to 1 up to 1000 including 1000 for I equals 1 I less than equal to 1000 plus plus I. So, at this point we are scanning 1000 responses and for each each user or each student we are going to take a response. And we are going first of all going to check if the response is less than 1 or if it is greater than 5 these are invalid responses. So, I said the ratings have to be from 1 to 5 as integers. So, if it is anything less than 1 or if it is greater than 5 it is a bad response we do not record it. So, we will record only valid responses and if it is a valid response we are going to increment the corresponding counter. So, remember there are 5 counters rating counters of 1 to rating counters of 5 and based on the response you index that particular counter and increment it. So, again if you want to break it down you can think of it as plus plus on a variable and which variable are you incrementing you are incrementing the variable for which you got the response. So, if the first user gave 1 as the response rating counters of 1 is going to get incremented. If the 500th user gave a rating of 5 I would be 500 and rating counters of 5 will be incremented by 1. And once you are done with this loop you can now print the rating. So, we print rating and the number of responses. So, we run from 1 to 5 both inclusive and we print the two values. What are we printing? We are printing the rating I and we print the count. So, at the end of this if I scan 1000 inputs the output would look something like this. Response of 1 came from 15 people. Response of 2 came from 85 people. Response 3 came from 100 people. Response 4 came from 500 people and response 5 may be came from 300. So, in this case all the users let us say gave valid responses. 5 people gave 300, 4 people gave 500 and so on the summation of this will be 1000. So, that is a quick way to check whether your program is correct or not. If let us say 5 people gave invalid responses then the count will not be 1000 the addition of this would give you 995 and not 1000. So, I suggest that you take this program and write it in the editor that I showed you in the last lecture and ensure that this actually works.