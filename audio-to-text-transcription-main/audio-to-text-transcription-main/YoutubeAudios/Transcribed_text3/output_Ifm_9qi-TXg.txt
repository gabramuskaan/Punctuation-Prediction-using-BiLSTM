 So, the last few lectures we learnt about different types of data structures. We talked about little less than we talked about trees. Then we did specifically binary trees, binary search trees and priority cues. This is what we had studied. Now, if you look at all these kinds of data structures that we have studied whether it is a tree, binary tree, binary search tree or a priority cue. We always had some kind of a node which had kind of a higher priority. There was a header node in the case of lists which then pointed to other nodes. It does not matter whatever the implementation array or we put in a hierarchy there. For a tree for example we said there is a root and then there are children and so on. Similarly, for a binary tree we had what is called a left child and right child and we had a node that was designated as the root. Now, let us think of another problem. Today with all of you are on Facebook I am sure and when you look at Facebook what are you doing you have a set of frames and so a set of frames watch you and then you watch somebody else and so on. You are connected to somebody else who is also having a set of frames. You also watch them and so on. Now, in such an example and this one has perhaps another set of frames some of them may be disjoint with respect to you. Let us say this is you. This is your friend one friend and so on. So, what is interesting is this called a social network and interestingly this social network has a lot of branches and in the social network there is nothing like in your friend circle for example, you have some experience and amongst these experience one of your experience has another set of friends who are disjoint with you. It is possible and there is nothing like a hierarchy. In the earlier data structures that we saw we saw the header node then we saw the root node and we said access to any other node is via the root node here via the header node in the list and so on. Here in the other hand there is no hierarchy amongst the nodes. So, we want to represent something like this. This is a very, very common natural phenomena in nature but generally things can be represented such that there are different nodes each one has its functionality and they are connected to each other by some property. Then to represent something like this for example, I may want to find out who are all the friends that are connected to you or I may want to find all the friends who are connected to f 1 or f 2 or f 3 for that matter. Then if it if it was using a tree then I would say if you were the root then I would say I have to access any of your friends I have to go through only you. Then what happens people who are not friends of you I cannot get access to them. So, another nice type of a data structure is what is called a graph. A graph is essentially consists of a set of vertices the vertices here are you and your friends in the social network and these vertices are connected by arcs if there is some connection over here. So, you have a set of vertices and if there is a connection between the two of them something you are a friend or whatever it may be then that is represented by an arc. The vertices are also called nodes or points the rocks are also called edges and edges may be for example, you may think for example that f 1 is your best friend but f 1 does not think that you are his or her best friend. So, that graph for example, when I am looking at it over here I might have if I am looking at only best friends you think f 1 is your best friend but f 1 things f 2 is best friend and so on. It is possible something like this and f 3 perhaps things y is you are his best friend but you do not feel the same way. Such graphs are what we call directed graphs can have directed graphs or you can have undirected graphs. For example, if I am looking at network communication across how do you connect to various websites then you are sitting at your home with your computer over here then you are connected to let us say if you using b s in l you are connected to a b s in l router then this b s in l router goes through number of various links through the internet and perhaps your server is somewhere found over here and normally these links are what we call bi directional links and then we say that this is an undirected graph both the graphs are important in practice we like to analyze both of these graphs. So, basically what is it that this defines whether a graph is directed or undirected the edges may be directed or undirected when the edges are directed the graph is called a directed graph otherwise the graph is called an undirected graph. Now, how do you define an arc or an edge we represent it as an ordered pair of vertices see the example over here if there are n vertices in the graph v 1 2 v n if there is an edge between v 1 2 v 3 let us say we represent it by a symbol like this or if you are writing it you put it as an ordered pair u comma v v 1 comma v 2 in this particular example. There is an edge between v 1 and v 3 you write it as an ordered pair like this. Now, then you also have what are called so if you want to define a path how do I define a path if I have if I want to find a path from here to here then let us say this is node v 1 v 2 v 3 then I would say my path is from v 1 to v 2 2 and v 2 2 v 3 is my path. So, this corresponds to a path. So, you can have a set of sequence of vertices which gives you the path. So, that means what I am saying here I can represented this is v 1 v 2 v 3 corresponds to a path that means there is an edge from v 1 to v 2 v 2 to v 3 and that represents the path starting from here to reach this particular node. Now, you can have both labeled and unlabeled graphs, but labeled graphs are what we are going to look at. So, when I look at a labeled graph I have something like this vertices are labeled here. See here let us say and if I have weights on this 4 6 8 9. So, both edges and nodes can be labeled as a nodes and the edges can be labeled. What do these weights mean to give you an idea if you want to let us say travel from one place to another and then this could this weight could correspond to the amount of time it takes for you to reach from point a to point p for that matter. So, this is what is what a labeled graph is. Now, I want to just leave you with one example although we will not be discussing this graph problems can be found in various applications. Here is a very interesting example. Let us see this. Let us say now here is a graph where I want to this is a 5 point intersection there are 5 lanes which are intersecting over here. There is one road is called a another road is called b c d and e c and e are one way a b d are by directional. Now, I want to let us say you know my job is to design a traffic signal for this. I want to put a traffic signal such that no accidents happen if you follow the signaling rules. So, how do I go about defining it? It was first thing let us assume that this is India and all left turns are free for the timing will assume that therefore, b to c is permitted similarly a to b is permitted and e to a is permitted and d to d to is of course, is a right turn is not permitted without a signal. So, what we will do is I want to just see what I have done here. I have converted this problem of designing a traffic signal for this such that I have converted it to a graph problem. What have I done over here? I have I have basically enumerated all the possible paths that exist that is I can go from d to b. I can go from a to c I can go from e to c can go from a to d we can go from d to a d to b and so on. So, what do I do? I look at all the paths that all the roads that can be reached from a from a I can go to b from a I can go to c and a I can go to d. So, I put make them as nodes. Similarly, from b what are the paths that I can take I can go from b to a I can go from b to c and I can also go from b to d. So, there are three paths again similarly, I do it for the rest also d to I have d to a d to b and d to c and e to a from e to I have e to a e to b e to c and a to d all the four paths are possible. Then once I so basically what is it what are the nodes the nodes of this graph correspond to the roads that the paths that are possible. If I am traveling by on this road and if I am taking a vehicle which are all the legal paths that are allowed. Now, my job is to design a traffic signal. Then what I do is I join a pair of nodes by an edge if both of them cannot happen simultaneously. So, let us look at this let us look at a to d and e d and let us see that I am looking at a c a d and d b. So, this a d and this is d b remember this is left turn right left hand traffic. So, this is going this way and this is coming this way. So, both of them cannot happen simultaneously. So, what I do is I connect here this may be a little incomplete, but what I have done is I have connected all the nodes in this graph which cannot happen simultaneously by an edge. Then what happens is this becomes what is called. Now, I said as I said I want to define a traffic signal. So, what is a problem of traffic signal now basically it is a question of colors. What are the colors that you are familiar with you have green yellow and red or green and red for the timing let us see that. So, what this means is that when I am defining colors for this two parts which intersect intersect cannot have green at the same time. So, what I essentially do is I try to find out how many different colors are required to design this traffic signal. How do I find the number of colors. So, what happens is it is very interesting that designing the traffic signal for this intersection simply becomes a problem of finding a graph edges in the graph and ensuring that two nodes which are adjacent to each other that is two nodes which are connected by an edge do not have the same color. So, first for example, so in this example if you see A B C E A simply does not matter at all. You can you do not have to have any color for them because you do not have any edges a completely free left turns. A C if I color as green then B and B A and B D cannot have the same color. So, you do this kind of then you basically if I given then you find out what are all the colors that A C can go with what are all the turns that A and C can happen together for example. If I am if I am going from I can go from A to C and I can of course make a D C there is no I can go do a I can do a I can make a free left turn from B to C. So, these two do not intersect. So, it it need not have to have the same color. So, basically what you do is you look at this particular graph start off with coloring this put a give a different color to this and similarly keep doing this until you have satisfied all of that. So, to you find the until all the nodes in the graph are colored. So, there is just an example coloring problem is a difficult problem in fact finding the minimum number of colors is not a simple solution, but this is just to give a straight that any there are you you start finding graph kind of problems even for something like this you would not even think about it is an intersection that you want to design. And for this intersection you can can convert it to graph problem and then it simply boils down to a question of not giving two adjacent nodes the same color. Developing the algorithm for this problem is a little tough it is a little beyond this scope of this course, but to just give you an idea. Now, how do you represent graphs now graphs are can be represented by matrices here is a graph and what it tells me is whenever the there this is what is called an adjacent seam matrix this is a two dimensional matrix where you have vertices on the y axis and also on the x axis and if between a pair of nodes there is a edge you you market as one otherwise 0. If it has if it is a this is an unweighted graph if it is a weighted graph that it has numbers on the edges then you put that number over here. There is another representation called the adjacent c list representation the adjacent c list representation for every node it is an array of nodes and at every node you have a linked list which says to which node it is connected to for example, a has edges to b and d and b has edges to a c and so on. Put all of for every node you give the since this is an undirected graph we also show that d has edges to a b and d because both the forward and the backward edges are present that is what we assume it to be. So, there is these are two different representations of graphs. So, now we have I think I have motivated you sufficiently to look at graph problems and what we will do is in the next one or two lectures we will look at some different problems on graphs and so we will stop with this introduction on graphs now.