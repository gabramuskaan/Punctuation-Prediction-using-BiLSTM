 There are several things that you can do as operations on structures. Structures can be copied by using assignment statement. That is a very common thing you want to copy, let us say one student's record to another student or you want to copy the date to another date and so on, you can do those things. You can put an ampersand before a structure variable and you can get the address of the structure. So, remember structure has intern as front records or members and these members intern may have other members and so on. All of them get packed as one unit in the memory back to back. If I put ampersand of a structure variable, I would get the address of the structure itself. You can take structures and pass them on to functions. You can also make structures returned from functions. You can pass the entire structure, you can pass only the components or you can even pass a pointer to the structure just like you would do for variables. For a variable, I could have transferred the variable or I could have received a, I could have passed on a pointer, right. Just like that you could do it here also. The only thing is you cannot compare structures directly with each other. So if I have int a, b, I could do if a equals b. However, if I have struct point a, b, I cannot do is if a equal to b as a check. This is something that the compiler will catch and give us an error. So this is probably one major difference between basic data types and user defined data types. You cannot use equality operator or less than and greater than and so on to compare two structures with each other. Let us see for an example how structures can be passed on to functions. So let us say I want to write a small function which is trying to find out if a point that is passed on to it is it the origin. So origin is the point 0 comma 0. I want to find out if the point that is passed on to it is actually the origin. So the function is called is origin and instead of passing two integers, I am going to pass the data type called point type and the local variable name or the formal name is called pt. So we have talked about formal names and so on earlier. The formal name is called pt. So now this is a variable pt and for pt you have pt.x and pt.y because it is of the type point type. So you are checking if pt.x is 0 and pt.y is 0 in which case the x and y coordinate are 0 comma 0 respectively. Yes it is the origin I return true, lc return false. So this is the program here. Let us see how this little piece of code would work. So let us say I have a point already in place and I call this origin of my pt. So let us say this is inside your main function. You have set up my pt to be let us say 5 comma 4. You want to find out this 5 comma 4 origin or not. So when you make this function call what happens is remember you can see that this is very this is actually passing by value right functions and you have something which is passed on by value. So pt is something which is local and it has two things namely x and y and my pt is in the collar and collar has two things x and y. And when you see this function call what happens is just like what happens for basic variables the value of the structure is copied to here. What I mean by that is the value of the x member is copied to the x member of pt and value of the y member of my pt is copied to y member of pt. So at this point pt has copies of the x and y members of my pt. Now you can do this check is pt.x 0 and pt.y 0. So you are going to go and check these values and you return 1 or 0. So the key thing to notice is that if you make a change at pt it is not going to reflect in my pt because you made a copy of my pt to pt the reason being this is a function call where everything is passed by value. We are not passing the reference to my pt. Let us look at another example. I want to make a new point with the given x comma y values. So given a x comma y value I give the x coordinate and y coordinate and I want a new data type of the type point type. So this function we are going to call make point it takes two integers x and y and it returns a data type point type. So internally we have a declaration called point type temp. So this is local to make point and you change the x member to the integer that you got and the y member to the integer y that you got. So let us see how the sequence would have worked. You would have received let us say 5 comma 10 as the two integers. Now if you say point type temp you have temp which is a structure and it is supposed to get two members x and y. Now we say temp.x equals x. So I said x was 5 and y was 10. These are the two values that were passed. So temp.x equals x would copy the contents of x into temp.x. So temp.x becomes 5 and temp.y equals y copies the content of y into temp.y. So this becomes 10. So at this point your temp has the value 5 for x and 10 for y. And just like any other data type you can take this and return it. That is what we have in this piece of code. So again the key thing to notice is that we had integers copies of integers x and y and these two integers x and y there is no confusion of these x this x and y with respect to temp.x and temp.y. Temp is a structure and temp.x is a member within the structure whereas x is a free variable it is of the data type integer. So temp.x is a qualification to get to the member of this structure called point type and in this case it is of the particular in the variable temp whereas this x is a free variable of the type integer it is not part of the structure. So let us see a few other examples. So let us say I have some declarations of this type. So I want to represent this screen that you see here as a rectangle. So I assume that the rectangle is already declared as a data type before. So I have struct rectangle screen and I have done a type depth point so I do point type middle. So middle is going to be a point and I want to find out given a screen what is the middle point in the screen. So we want these things. So to find out the middle point so let us say I start with 0,0 which is the left bottom of my screen when I call make point of 0,0 this is going to return a structure. So the return data type here is a structure and on the left side we have screen which is a rectangle but rectangle dot pdpt1 is a point. So on the right side you have a point on the left side you have a point you have matching data types everything checks out. So we have already marked the rectangles left bottom as 0,0. I want the rectangles right top to be 1920, 1080 this is the resolution of my screen. I want the right top to be 1920, 1080. So again then I call make point this is going to return a point so the return data type for this is a point and I want this to be set up as the right top coordinate for screen which is a rectangle. So these two lines take care of setting up the rectangle with the appropriate left bottom and the right top points and finally I want to find out what is the middle of the screen. So maybe it is somewhere here for my screen. I want to find out what this point is. So to do that I take the bottom coordinate of the screen and the top coordinate of the screen I add that and divide by 2 and I take the left coordinate of the screen and the right most coordinate of the screen I add them up and divide by 2 that would give me the center of the screen. So these two things are integers and make point takes two integers and returns a data type called point. Left side is already of the data type point and the right side expression gives the data type point so both the sides are of the same data type. So if we assume that these declarations are already in place this code using the structure will give me a given screen it will tell me what is the middle point of the screen is. So let us say I want to give you a point and I want to find out is this point inside the screen or not. So I am going to write a function called this pt in rect. So you can think of it as a question I am asking you is this point inside the rectangle and I am going to pass the rectangle as r and going to pass the point p as the point as p. So I could ask this about any such point it could be something outside the screen or inside the screen I do not know. I want to find out if it is outside I want to get false and if it is inside the triangle I want to get true. So I have let us say this is my rectangle and I could give you point p as this or point p as this or point p as this and so on you could get any of these things. Now how do we find out whether this point is actually within the triangle shown here. So I want to find out whether this point is actually within the triangle. So to do that if I know a friend that the x coordinate of the point is to the right of the beginning of the screen and the x coordinate is to the left of the right side of the screen then the point is somewhere in between the left and right side of the triangle. And if it also happens to be above the bottom of the triangle and below the top of the triangle if all these four conditions are satisfied then the point is within the triangle. So this point is not within the triangle even though it is within the y range of the triangle it is not in the x range. So it is to the left of my left most point so this point is not a point in the triangle. So or this point this point and so on these would not be in the triangle. For all these points you would get false and points like this I have started with right so point like this and so on will get true. So this is a small piece of code which actually takes two different structures one which is a rectangle and one which is a point and remember rectangle R has p t 1 and p t 1 has x member and a y member. So p t 1 if it is the left bottom point it will have x and y coordinates and we are comparing that with the coordinates point passed down by variable p. So just like basic data types you can also do a few other interesting things with structures. For instance let us say I want an array of 10 points maybe I want to define a polygon which has 10 sites I could do it using this. So struck point in x comma y and point array of 10. So what this gives us is we define a structure called point with two members x and y. We do not want just one variable of the type point we want 10 variables of the type point. The variables are going to be called point array of 0 point array of 1 and so on all the way up to point array of 9. So you could also do the way it is given here you can just stop with the structure description that is given here on the top and then ask for point type point array of 10. So this is also a valid way of asking for point. So in this case I assume that there is a type def struck point is given as point type and finally even if you have arrays you can initialize them. So this is an array of structures on the right side. So point array is an array of structures. So you can think of it as I have an array and each one is a structure and the structure has x and y. So this is point array of 0, x and this is point array of 0, y. This is point array of 1, x and this is point array of 1, y. This is point array of 2, x, this is point array of 2, y and so on. So, in this case the point array has 3 points. So, the x will get 1, the y will get 2 at point array of 0, then point array of 1 dot x is 2, point array of 1 dot y is 3 and finally, this would be 3, 4. So, this is the setup that we have for array of structures. You can access the individual members using arrays as given below. So, you can say point array of 0 will be a structure, given that structure you can access dot x and get the x member. Or you could even use point array of i to get the i th structure or i th member in the array and in that you want the x coordinate and y coordinate to take the values 5 and 5. You can also do read of these values point array of 0 dot x and point array of 0 dot y can be used as they are given here and printed and so on. So, finally arrays structures can be assigned to each other. We have been seeing this for a while now. So, if I did make point 4, 4 make point is a function which is going to return a point with its x as 4 and y as 4 and since the right side is a structure of the data type point, I should have the left side also to be of the same data type. In this case, new point is also of the same data type. So, what it would do is whatever is returned from here, it does member wise copy. It copies each member on the right side to the corresponding members on the left side. So, you can assign structures to each other. So, this is a useful thing because you want them to be treated as basic data types. So, this brings us to the end of this module on basic structures and we will see how we can do a few other things with structures by passing them on to functions and so on in more detail in the next module.