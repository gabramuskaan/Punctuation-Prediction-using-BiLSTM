 Welcome to lecture 3. So, in the last two lectures we saw basics of C programming and we also saw basic notions of variables and so on. We looked at control structures, we also looked at the notion of loops. So, in this lecture we will see something really important that C provides us and that is the notion of arrays. So, we have seen basic data types like integers, floating point numbers and characters and these are basic data types. So, you can get numbers or letters using that, but sometimes we also need a logical collection of these values. It is not that just one value sufficient, we need a logical collection of values and this is where arrays come in. So, arrays are what are called aggregate data types. So, it is an aggregate data type of a specific kind, it aggregates data of the same type of elements. You can also aggregate data of different types together, we will see that later, these are called structures, we will see them later, but arrays are aggregate elements of the same data type. So, there are lots of examples where you need this. One primary thing is these arrays are usually fixed at size and they are also sequentially indexed. So, we will see all these things as we go along. So, arrays are logical collections of the same type. For instance, it could be list of marks of a student, it could be temperature that you are recording over a year or you want to save matrices and do operations on matrices and so on. So, these are all examples of arrays and on these arrays, you want to do operations like find minimum, find maximum or you want to order all of the elements in such a way that the names of students come in alphabetical order or you may want to search for a particular temperature of the day and so on. So, these are common operations. So, you want to be able to read entries into an array, you want to do operations on an array and so on and that is exactly what we will do in this lecture. So, let us do a little thought experiment. I want to find out average temperature of the year. So, I have 365 days and if I did not have support for these aggregate data types called arrays, my program would look something like this. So, I show only the code segment here. Let us see what it has. So, there is first of all 365 days, I will need 365 variables. Float, I temperature 1, temperature 2 and so on, up till temperature 365, I will need all these declarations. So, even though I showed dot dot dot, you really need so many declarations and then I am going to find out the sum and the average of find the sum and therefore find the average. So, one thing that I have to do is take all the variables one at a time and read through them. So, I have so many declarations and then I go on and scan all of them and finally, I need a huge expression which takes each of these variables and add them up and give sum. So, what we have is something really cumbersome. So, we have 365 variable names, we will have to scan each one of them and we will have 365 lines in which we will scan them. So, that is what you will do in this block here and finally, this one where you are adding up all the values is also rather cumbersome because if you forget something you have no way to go back and check which one is missed out. So, this is not a nice way to do things and programming languages give support for the same data type, temperature being floating point and have many of those aggregated into something called an array. So, let us see the same thing done using arrays. It is much more elegant if you use arrays. So, the first thing you will notice is that there is float temp of 365. So, what you see here is you see that there is a declaration here which goes like open bracket 365 close bracket. All it says is I do not want a single floating point number, I need 365 floating point numbers and so that has to be allocated somewhere. As before we have float sum equals 0 and average and now I want to scan the elements one by one. This whole thing becomes very nice and simple. You have seen the for loop before for i equals 0 i less than 365 i plus plus scan f ampersent temp of i. So, what this loop does is it scans the elements one by one and it stores it in what is called temp of i. We will see what temp of i means in a little while. But the first thing I want you to observe is that it has become much more elegant. Instead of 365 lines that you had earlier, now you have three lines of code which is scanning 365 elements. The second other the other thing that we have very nice is just the addition itself. So, as before we iterate over all the elements from i equal to 0 to i equals 364 both inclusive and we add the temperature to sum. So, you add one temperature at a time and the result goes back to sum. At the end of this loop you have the sum which is the sum of all the temperatures over 365 days. So, if you divide by 365 you get average. So, one thing that you notice you have to notice here is that the sum is actually initialized to 0 here. Therefore, you start with 0 as the temperature and then you add on temperature of each of the days to give temperatures of 365 days and then you divide by 365. So, the whole the nice thing about this whole thing is it fits into one screen. So, if I have won 5 years all I have to do is ensure that I iterate over 365 into 5 iterations. So, the piece of code is still going to be something very very small. So, I do not have to declare so many variables and the program does not get clumsy and there is less scope for error when you have arrays than when you have individual variables. So, let us go and look at arrays in more detail now. The first thing is as before we need to declare arrays before we use them. So, the syntax is follows. So, you start with type and then you give a array name and then you give number of elements. So, just like this you specify the type you specify the array name and you want the number of elements. So, in this case marks is an array of size 7 and they are all integers. So, the key thing is remember there is an aggregate data type of type integer here. Similarly, in this line we have temperature which is an array of 365 elements and the values that it can contain are floating point values. So, one important thing that you order remember is that then you say in marks of 7 for example, you get something which is continuous in nature as in these are locations which are continuous in your memory and the individual elements of the array can be indexed as marks of 0 marks of 1 and so on up till marks of 6. So, anything which is of the form marks of i where 0 less than or equal to i less than or equal to 6 is valid. Let us see what happens from the memory point of view. So, earlier we saw what happens to variables from the memory point of view. Let us see what happens to arrays from a memory point of view. So, when you see a declaration like in marks of 7 what you are really seeing is an array. So, you see memory locations here I am showing only a segment of the memory and instead of one variable called marks we are going to have 7 variables named marks of 0 to marks of 6. So, this is not a mistake it is marks of 0 to 6 are not 1 to 7. So, some languages start indexing arrays at 1, but see indices started 0. So, you can think of it as 7 variables namely marks of 0 to marks of 6 and as we did earlier if you do not have any initialization the values in the array are unknown. You should assume that these values are unknown and this could get laid out anywhere in the memory just like variables 2. The only thing is that these are going to be 7 continuous locations. So, for instance let us assume that marks of 0 was allocated address 2731 then marks of 1 would be at address 2732 and so on marks of 6 would be at address 2737. So, this is what I meant by arrays are going to have continuous set of locations. So, as I said each element can be thought of as a variable just like individual variables they start out to initialize. One nice thing is once you have declared an array just like in variables you can assign values to these variables. So, we saw that we can have left hand side variable name right hand side value for or expressions for variables the same thing applies for arrays. So, in the left hand side you have an individual variable marks of 3 and on the right hand side we have a value 36. So, if you do this in your program then the value will go to 36. So, at this point you know the contents of the location marks of 3. As before we can use ampersand to get the location of the memory. So, for instance if I want let us say address of marks of 2 then I do ampersand of marks of 2 and ampersand of marks of 2 would give me 2733 as the value. Ampercent of marks of 1 would give me 2732 as the value and so on. So, the addresses are going from 2731 down to 2737 in increasing values. So, they are contiguous and they are increasing from 0 to array index 6. So, let us revisit the example that we did earlier. So, we have float temp of 365. So, we have an array of type 365 or of type float and 365 values. At this point we do not care about where it is getting laid out in the memory because that is something that your runtime system should do. So, as a programmer we do not care about where it is in the memory location just like for variables we do not care where they are in the memory. Then this is something that I did not draw attention to earlier. Now, let us see what it is doing. If it is an individual variable we saw that scan of takes the format and the address of a variable. The same thing is happening here. We have the format here and we have the address of a variable only that the variable is not an individual variable that is actually array location. So, temp of I is temp of 1 temp of 2. So, want to temp of 364 and when finally, when you look at this loop it runs from 0 to 364. So, it actually runs 365 times. So, your array is indexed from 0 to 364. The loop also runs from 0 to 364. We are actually scanning 365 elements and in this loop we are adding all the 365 elements into some and you average at the end of it. So, it is as simple as that. So, from arrays we get continuous locations and we have a same data type but we have many elements of the same data type one after the other. There are various ways to initialize arrays. You can do something like this. Let us say I want marks of 7 students and I could have it as int marks of 7 and read it from the user or sometimes I know what these values are. So, I could initialize it right away I could do this. So, int marks of 7. So, I am declaring marks to be an integer array of 7 elements and you can specify the list of values on the right hand side using a curly braces. So, in this case marks of 0 would be 22. Marks of 2 would be 75, marks of 6 would be 45 and so on. So, the locations on the left side can be seen as 0 to 7 and the values can be seen from left to right. So, you get a 1 to 1 mapping from left side to the right side. So, when you do this let us say these are locations 0 to 6 and the values are 22 for 0, 15 for 1 and so on till 45 for marks of 6. It is not just that you can initialize and leave it at that you can change the values just like you do for other variables. So, you can do something of this effect even though you have initialized mark of 3 to 56 we can do some assignment like this marks of 3 equal to 36 and that will change the value to 36. So, you saw that the value change from 56 to 36. So, there are a few fine points that you have to remember array indices always started 0 in C. If you come from other programming languages some languages started 1. So, be aware of this there is a common mistake and a lot of people get trapped in this thing that the indexes indices started 1 and not at 0. So, in C they do started 0 and when you do marks of 7 marks of 0 to 6 all are valid marks of 7 is invalid as well as marks of minus 1 or minus 2 and so on. So, you will never have indices which are negative nor will you have an index which is greater than the which is greater than equal to the declaration that you had. So, for example, in the float that you showed earlier. So, we have 365. So, flow temp of 365 would be invalid because we have only temp of 0 to temp of 364. So, I want to talk about another small example which is along the lines of finding the hottest day. So, I have read 365 temperatures into an array called temp but I want to find out the maximum temperature or which day was the hottest day. So, what I want the user to print is print the day in which the day was the hottest as well as the temperature of that day. So, as before we have float temp of 365 and I have two arrays two variables namely hottest day and I I am going to use hottest day to find out what the which day is the hottest and I am going to use I to iterate over all the locations. So, initially what I am going to assume is day 0 is the hottest. So, let us say this is January 1. I assume that January 1 is the hottest and it is day 0. So, temp of hottest day which is temp of 0 goes to max. Now, I run a loop from 1 to 364. So, this goes from January 2 till December 31 and what I am going to do is I am going to see if the current temperature is less than the the current maximum temperature that I have in record is less than temperature of day I. So, if it is less then max is that I have is not the actual max. Some other day became hotter. So, I have to update it. So, I have hottest day equal to I updated. I not only update the day in which the day was the temperature was very high. I also record the actual temperature because that is what you are actually tracking. So, what this loop really does is this. So, you go from day day 1 to day 364. So, we started day 0 we go from day 1 to day 364 and if some other day becomes hotter we update it and we move forward. And since I have to find out the hottest day in the year I have to go all the way till days or day 0 to day 364, 365 days. At the end of it hottest day will have the index of the day and max will contain the actual temperature. So, I can print that the hottest day was day number hottest day with temperature max. So, this is a very simple loop. I did not show code for reading in the temperature of the 365 days, but we only see the code for finding out the maximum. So, this is a very simple and common example of how arrays are used. I want to find out the maximum. So, it could be marks of 100 students or so and I want to find out which student got the highest mark. So, I may have to just iterate over this and find out the largest value. So, we start with day 0 being the hottest and if height day is hotter than the current record updated. There are also multi-dimensional arrays that are possible. So, not everything in practical use is one dimensional. So, even though I have things like matrices and so on, naturally they are multi-dimensional or in this matrices are actually two-dimensional. You could also have three-dimensional structures and so on. So, C gives you flexibility to have arrays of multiple dimensions. So, for instance, let us see something of this kind. If I have a declaration in A square bracket 4 square bracket 3, it means that we have 4 rows numbered 0, 1, 2, 3. So, that comes from this and number of columns being 3 numbered from 0 to 2. So, we have 4 rows by 3 columns. I can also have something which is three-dimensional. So, in this case, I have a floating point array called B and there are three dimensions to it. So, you can think of it as x, y and z dimension. So, in the x dimension, there is two. You can think of it as two planes, plane 0 and plane 1. In each plane, I have 4 rows and three columns. That is what you see here. So, in each plane, I have 4 rows and three columns. So, this comes in very handy for handling matrices and graphics and so on. We will look at these examples in little later. In a little while, we will see examples of multi-dimensional arrays. So, at the end of this module, what we have is basic notion of arrays, what how we can use the arrays, how we can index them and what happens inside memory. So, in the next two modules, we will see more details about arrays.