 We have seen what a function is and why a function is required, what are the advantages of using a function. We have also seen what is a parameter and what is an argument and the types of the parameters and the arguments must match. Otherwise, the system will of course, give you error and the reason is because the type means match and the data will not be passed properly. Because this is essentially a parameter is being assigned to an argument. Now in this lecture, we will look at some more detailed nuances, detailed points of a function. So, to start with, let us revise what we have seen, a function, what is a function? A function is a self-contained program segment. This is very important, this is not the whole program, but it is self-contained and it is a program segment, part of a program that is a main task and a part of that is being executed is being implemented by this function. And this self-contained because this can be independently tested giving data and finding out whether the task for which it has been designed is actually being fulfilled or not. It carries out some specific and well-defined task. Now that is a general concept of a function. Now in C, any C program can consist of one or more functions, at least one should be there. Why? Because we need always the main, we have seen that we need main, any C function must have a main and main is nothing but a function. And why did we put here this empty bracket? Because the structure of a function is always a function name and a place for the arguments. Now you can say that well when we are starting a main function, we are writing a main function that will do the task, it is not taking data from anywhere outside. Therefore why there is no argument? Yes, you are right, there is no argument, that is why we put two braces and there is an empty space here, there is empty. But still it looks like a function. Moreover in the earlier lecture we have seen that the result of the function is returned in its name and since this is a VID like a variable, it will have a type. So some type like for average we found float. So this main can also have a type. So we will see later that this main can have a type, we will have a set of empty arguments and the body of the function and there can be type, say sometimes the type can be int, if this main function that means this main function will return an integer and where we say that it does not return anything, we can say also that this function is of type void. That means it does not return in the value, void. So we will see this later. But this is the reason why we say that every C program must consist of one or more than one function. One of this function must be called the main and the execution of the program always begins by carrying out the instructions in main. That is the entry point, any program I mean I cannot say that main will be somewhere in the middle. No, when I start it must the gateway is the main and then from within main I can go out and use some function f1 and from f1 I can go out to another function f2, another function sorry another function f2 like that. But the gateway the entry should be main and ultimately the exit say f2 will return here then f1 will return here ultimately the exit will also be through main. A function will carry out its intended task whenever it is called or invoked. So we have encountered with this term called or invoked. So in general a function will process information that is passed to it from the calling portion of the program from where it has from where it has been called or invoked and then the function will take the data that is if some data is to be passed then it will be passed with from the calling part and it will return a single value. So what are these points? Information is passed via special identifiers called arguments and parameters and the value that is returned is returned by the return statement. Some functions do not return anything for example let us say this say I am writing a function say my function. It is maybe it is not taking any parameters because in the body it is simply nothing doing nothing just printing print f hello that is also valid function. So in this case the main function where it was it was just here and it just called my function here with nothing this is also possible. So my function it goes there and does not so I do not need to give a return but if I give a return that is also fine it does not return anything so this is of type void it is not returning anything so but the control in any case it does not return in the value but the control will come back here and from here it will be executed. So there may be some functions we do not return in the value like it is just printing some data okay that is possible for example I can make it even more realistic say here main is here and there is int a 5 int b 6 all right and here I call average a comma b right and here I write average int x int y and here I just compute average is equal to x plus y by 2 print f f v g equals backslash f v g equals I am sorry percentage f percentage f backslash n comma v g that you understand now and I can write return or I may not write return so what will happen this will come here 5 and 6 5 will be passed on here x will be 5 y will be 6 the value will be 5.5 that will be printed here but I have to give a type to this average because here the average type is not defined so I have to say this will be float average because there is some value some type to this value from type to this variable which will hold the value so this also possible here you can see that I do not need to write a return but there is no harm if I write just simply return that is a good practice that means my return my control will come back here and that is the last statement that will be the end okay so let us move forward so some function may not return anything the return type is specified as void so here is an example of factorial we start with so here first I have written the function here and then I have written the main but however in whatever way we write the main the program while execution will enter the main first all right so so the execution will be something like this that will enter from here main it takes the variable n which is an integer then n1 to less than 10 n plus plus printf percentage d okay and n and then factorial all right so factorial n now when this factorial n is encountered then we this function is called this function what is doing it has got int m so m is the argument and it is being called with a parameter n which has been which is being taken first one then two then three like that till it is 10 so I am taking it n and then here let us see what we are doing int i now this i this variable i and this variable 10 these two variables are purely internal variables that means these variables are internal to the body of the function now each of the functions have got a life each has a life right so factorial as long as factorial is running factorial is live and when factorial is live whatever variables are defined within factorial they are live as soon as we exit from factorial that function is dead and the variables associated solely I repeat the variables associated solely with the function also dies with the death of the function so let us see here i and 10 then for i equal to 1 to m 10 equals 10 times i so 1 times 2 times 3 times 4 so it is what is being computed 1 times 2 times 3 times 4 like that whatever is the value of m that is being up to that we are computing a factorial all right so if I call it now here I have called it with n the value of n all right with the value of n I am calling it and I am getting the factorial and the temp is being returned why it is being returned this temp is being returned to factorial temp is being returned to factorial and that is being printed through this percentage t all right so this is being printed so return temp because why it is different here I did not write return because I have named it as factorial and I have returned temp then temp is going to this value factorial if I had not done return then ultimately because here I am keeping the result in temp not in vectorial has not been used as any variable inside the function now when I go there and suppose if I had used some other temp here this temp and this temp would have been different we will come to this later but this is just an example of a function being invoked we just recapitulating why we need functions this term may be new to you it is modularizing a program is breaking down a program into small small parts each part independent part is called a module that is why breaking down a big program into smaller parts is known as modularization so it is modularizing a program all variables declared inside function are local variables very very important which are declared inside functions are local variables that means they are known as only as long as the function is remaining running as soon as the function completes its execution they also cease to exist therefore a value variable i for example can be used as an internal variable of a function and can also be used in some other function or in the main function they will actually physically be mapped to different memory locations so we have also seen what parameters are the parameters are communicate information between functions parameter and argument they also become local variables the arguments are local variables the parameters means the arguments are also local variables the benefits are divide and conquer we know we we as we have devoted one complete lecture on that manageable program development software reusability all existing functions can use can be used as building blocks for new programs and this is another thing that you may realize later that inside a function how I am implementing or how somebody has implemented it may be very complicated and I need not bother about that I know what it asks for what variables have to be put in through this and what output I will get out of it therefore whatever is there inside is abstracted out from me is hidden from me the internal details are not needed that is another big advantage of using functions and of course avoids code repetition something with somebody has written or say for example in a main program let us take another example to understand this better say I have got a program in which I am doing some computation say computing the standard deviation here I am computing the standard deviation here and maybe so at both these places are write this write this but that is not needed if I have a function for computing standard deviation then here is my main program and there is one function for standard deviation here and from this point I can simply call this get the value again continue from wherever I need I can again call this and I can get the value and in that way I save in the number of lines of code that I write so that is known as avoiding code repetition. Now defining a function how do we now we are till now I was trying to explain you something now we are looking at the syntactic details of C function now that can vary from language to language but more or less the ideas are same so a function definition has got two parts the first line first line and the first line and the what is happening here first line and the body of the function. Now what is the first line typically what can we have in the first line first line we have got the function name I do not know why it is not coming in the first line we have got the function name and the parameter list I call it argument list but whatever you so a function has got the first line and we can see what the first line is the first line will contain the function name and a return value type what type of value is being returned followed by this is the body of the function the second part is the body of the function where there are declarations and statements some internal values can be declared internal variables can be declared here and the other statements are also here now so that is so this one I actually I am calling them argument some people also call both of them to be parameters. Now so the first line contains the return value type the function name and optionally a set of comma separated arguments enclosed in parenthesis like say here I am defining a function called GCD greatest common divisor it has got a type int and has got two arguments one is a and one is b I have written the types of them in this parenthesis itself int a comma int b they are comma separated the arguments is possible that I can declare the arguments also on the next line for example I can say instead of writing it in this way I can write in this way int GCD a comma b and in the next line before the body before the before the bracket probably in an earlier example I did a mistake I had put the bracket inside the bracket it should not be inside the bracket immediately after that it you can write int a comma b that means you are declaring that these are a and b either inside or immediately after that both of them are fine now these are called the formal arguments or some people also call it formal parameters. Now what is the body of a function the body of a function is actually a compound statement I will just take just as I had statements like for loop or say while loop or if conditions where I write if some condition then some statement else some statement like that. So now this whole thing is a compound statement similarly here the entire body of the function can be assumed to be a complete compound statement where we are passing on to arguments and giving us some value let us look at what is being done here in GCD int a int b. So from the calling function must be I am supplying some values p and q may be two integers of type integers which are mapping to this p and q a and b. Now here you know we have seen this algorithm earlier we take a variable temp now that is now the body of the function is defined by this basis temp while b is not divided by a as long as that does not happen we take we divide b by a and take the remainder and then go on that classical way of finding the GCD you find the remainder and make the remainder the divisor right. So that is exactly what we are doing in a loop ultimately the final divisor which divides and gives us a 0 that will be the when that will be the GCD. So that GCD now that GCD is coming in this a therefore I cannot here just write simply return I have to say that return a and maybe from the main function I had something like say h c f is equal to GCD p comma q now this a is being returned to this GCD and because this is because it was a GCD function this was called and that is why it is going to a is coming to the here and then by this assignment statement that is going to h c that is how the function is being connected and we also see what is the body of the function. So when a function is called from some other function the corresponding arguments in the function are called actual arguments or actual parameters that means what I am calling parameter some people call them actual parameters. So just in the earlier example p q where actual parameters and what was there a b or x y whatever was there is a b are the are the formal parameters or formal arguments. Now as we had said the formal and the actual arguments must match in their data types the identifiers used as formal arguments are local not recognize outside the function the names of formal and actual arguments may differ as we have seen here they are differing my actual arguments were p q and here it is a and b of course they are differing now this a and b whatever it is here this a and b will not be reflected anywhere outside this function suppose here there is a main the main will not get the value of a and b this completely local here and as soon as it ends the a and b vanishes a and b will no longer be available to you same is true for temp because temp has been defined internally within this function all right. So this is a very key thing that you must understand. So so when a function is called from some other function the arguments are passed points to note that the names and of the formal and actual arguments may differ right. So here I will conclude with this this lecture I will conclude with this example. So here we are computing the g c d of 4 numbers in the main function we have got n 1 n 2 n 3 n 4 4 values have been read here you can see that they are being read as n 1 and n 2 and n 3 and n 4 they have been read. Now the result is now g c d of n 1 into g c d of n 3 n 4. So there is one function g c d which takes int a int b right that is what we saw. Now first when within this parenthesis we will first compute this g c d n 1 and n 2. So a will have n 1 the value of n 1 b will have the value of n 2 and the function will return something return a as we saw in the last example return a and so the body of the function ultimately ends with return a and that a will come here. Suppose that value was 3 say so 3 comes here. So what do I have now I have got g c d of 3 comma g c d of n 3 n 4. So now this same function will be called with a having the value of n 3 and b having the value of n 4 and suppose I compute them and I find ultimately that the g c d is 5. So the 5 will come here then what happens to this then will compute again called g c d with 3 and 5. So again here now a will have 3 and b will have 5 and the return of course the 3 and 5 will be the result the 8th shape of 3 and 5 is 1. So return a that will come here and the result will be 1 that is how the g c d is computed in cascading of the function calls. The same function you see is being called time and again repeatedly from this single statement in the main function will continue looking at functions more.