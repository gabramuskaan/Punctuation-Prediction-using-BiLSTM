 Now, we are discussing about formation of loops creation of loops in a program using force statement. Before that, we have seen the wild statement and do wild statement and now and then we have seen the force statement as well. Now, the force statement as we had shown we had discussed in the last class it is basically starting to check an expression, arithmetic expression and then it starts with initialization expression and then we check a particular condition. So, something like this for some variable, integer variable j assigned some value 5 maybe and then some expression here this one is j less than equal to 25 and then here there will be some statements which will be executed and after that there is a third expression which is altering it and that can be j assigned j plus 5 and the body of the x look. This is a structure that we had seen. So, now there are some critical issues that are to be noted for the force structure. So, if you look at this, you can see that we are using arithmetic expressions for example, x assigned to and y assigned 10 that is an arithmetic expression. So, similarly this is a valid arithmetic expression for j assigned x j less than equal to 4 times x times y that is the condition that means, after some computation we will have to find out whether j is satisfying this condition and here j here probably this is something this construct we have not shown you this is I do not like it very much and initially you need not bother about this j plus equal to y by x this is a c structure say c syntax expressing j equals j plus y by x. So, the whole thing can be written in this way. So, this but that is not important for the purpose of understanding for for expressions. So, here is just an expression and this is equivalent to like this for say x was 2 and y was 10 then this is equivalent to j assigned 2 because j assigned x and j assigned 2 are essentially same j as less than equal to 4 times x times y that means, 4 times 2 times 10 that means, 80 and j equals assigned j plus y by x is 5. So, this is equivalent all right. So, this is initialization and this is loop continuation condition and this is the increment or I as I was saying that this is the modulator or the alteration. Now, increment can be negative. So, this increment although we are calling it increment that is why we should not call it increment let us call it a modulator because say like the same thing I can write as for j assigned 2 maybe something j less than equal to 80 and might be j minus minus it can be the case when can it be say say for example, if I add if I want that I will be printing the numbers in the reverse order starting from 10. So, what should I do? So, can I do this? What I want to do is that I want to print something like 10, 9, 8, 7, 5 in this order. So, simply I can do this repeatedly in a loop. For example, for j assigned 10 and j sorry j greater than equal to 5 j minus minus and here I just do print f percentage d backslash n j. So, what will happen? Initially j is 10 less greater than equal to 5. So, 10 will be printed then I go back I decrement j. So, j will become 9 still greater than equal to 5 I come in here print j 9 I again decrement j decrement j becomes 8 I compare with this still it is greater than equal to 5 I I get in and print it in that way I can do it I can repeatedly do the same thing. But here as you can see I am being able to achieve this reverse order by instead of incrementing I am decrementing this index that is why I can increment decrement I can multiply it I change it I modulate it that is why this to be an alteration expression or modulation expression is a better term than increment or decrement. So, if the loop continuation if the loop continuation condition is initially false is initially false then the body structure the force structure will not be executed. It will proceed with the statement for the next statement. So, for example, if I write something like this as you have seen earlier j equal to 20 and for i equals i assigned 1 i greater than j i plus plus say and then I want to do some things here all right. Now, j is 20 I will first initialize i to 1 and immediately I find the first thing that I do is it is false I check this and it is false i is not greater than j therefore, this stay these statements will not be executed even once and the statements following the for loop will be executed. So, now here are some examples of for loops this is again computing the factorial. Fact factorial is a the variable fact is storing the factorial factorial all of you know factorial n is n multiplied by n minus 1 multiplied by n minus 2 so and so forth up to 1. So, it is 1 and I have got a variable i. Now, you can see simply I can do it like this i assigned 1 i less than 10 i plus plus fact assigned fact time psi. Now, what is happening here? So, I have got fact to be 1. So, i equals 1 then with that what I do is 1 times 1 is fine and I then make i to be 2 and then I so i becomes then 2 so 1 times 2 then i becomes 3 then 1 times 2 times 3 then i becomes 4 then 1 times 2 times 4 times 3 times 4 and so on so forth it will go on in this loop. So, that is a nice way of writing factorial and here is another example you can see what it does quickly you can explain it yourself what it does? Some is 0 and n is a variable and count is another integer variable. All right some is 0, n is a one variable and count is another integer variable. Now, we are reading n and for i equals 1 i less than equal to n I am adding some. So, what is being done here? What will happen if I trace this program what is going to happen? Let us do that. Suppose I have read n to be here I have read n to be 5. Now, what am I doing here? I here there is one problem here I should have been declared there is a mistake here int n and here I also add i I should have been declared here. Now, i assigned 1 so i is 1 n was 5 i less than 5 less than equal to 5. So, sum is sum was 0. So, sum is 0 plus i times i i was 1 so 0 plus 1 square and then I check I increment i so, I becomes 2. I becomes 2 and I check that i is less than not less than a still less than equal to 5. So, I got this sum and with that I add now i square i times i so, 2 square. Similarly, it will go on it will do 3 square. So, I will become then 4 and then still it is less than equal to so, 4 square then I will become 5 and still it is true so, it will be 5 square. Then I become 6 this condition will be violated and I will come to this printer. So, what will sum be? sum is 1 square plus 2 square plus 3 square and if I make it n then up to n square. So, this is the very well known series the sum of the square of natural numbers we can compute by this small program using for loop. So, it is a nice example. Now, we introduce the comma operator as I say as we say that here for when we write for then I assigned 1. Instead of that I can put in more than one statements here using a comma operator. For example, for fact 1 i equals 1 i less than equal to 10 now this part is what? This part is the initialization. Now, remember that this will not be continuously initialized. This is just a statement that I have put here an assignment statement, but my index variable for the control variable for the loop is i. So, I could have written this earlier example of factorial may be earlier example of factorial this could be initialized here also. So, that is just saving space saving the number of lines of code, but personally I suggest as I did earlier also that for of those of you who are beginners in programming you should not try this tricks or should not try this thriftiness reducing the number of lines that is not so important to how much you can reduce. The most important thing is to be logically and syntactically correct while you write a program. So, we can give several things in comma like sum here again. So, the program becomes even smaller looks smarter, but sometimes at the beginning if you try to do that you try to be smart and in the process you may result in some wrong program long long logic better avoid that. Now, infinite loop in general what is an infinite loop? When a program when a program continues program continues in a loop repeatedly it goes on and it is never completing it is going on because the condition that is supposed to turn out to be false at a particular point of time. So, that it comes out of the loop never happens. That can always happen that say if I write something like for i equals 1 i less than n and whatever i plus plus. Now, every time inside the loop when you get in you read you do something and then increment i and when you come inside the loop you do i minus minus say. Then whatever has been done here will be cancelled out here. So, this loop will never is this condition i less than n. Therefore, that this loop will continue forever such situations are known as the condition of infinite loop. Now, sometimes usually we do not like that, but sometimes it may be necessary to specify that something will happen forever. Say some particular work has to be done continuously. Now, in order to specify that for loop provides us some facility like say for and while everything. Say this one we had discussed earlier while 1 that means always it is true it is non-zero. This while of this expression part condition expression part should return non-zero and so it will go on. Now, here for and I put null that means the for has had 3 parts for the initialization part, some condition part and some incrementation, decrementation part whatever. Now, I just keep everything blank. So, I turn it to be for nothing and nothing all these things have blank. In that case what will happen? In that case what will happen? If I keep some statements that will go on forever. Similarly, if I in the case of due while if I just put while 1 that is again infinite loop. So, by this I can express my desire that some things will have should continue forever. So, this is another trick that you can utilize in some cases for the for and the while constructs. Now, we come to another statement which we have encountered a little few lectures earlier in the context of switch statements. While we are considering the switch statements if you recall you have seen that after every case statement switch on a particular variable then their case red, case green, case blue if you recall then we did something and then gave a break. Did something give a break like that we proceeded. So, the break statement of course, we know can help us we can use it with several things one is while due while for and switch. Now, this switch switch part we have seen but we can also use it for while due while and for for breaking out of the loop we want to break out of the loop. Sometimes that is required it works with while due while for but does not work with if and else statements. It causes immediate exit from a while for or due while or case we have seen that switch statements earlier. So, the program continues after with the next statement. Let us see why do we why do we want to use it it helps us to escape early from a loop. Sometimes we want to escape early I do not want to go till the end of the loop when a particular condition is met I want to come out I am doing it in a loop but waiting for some condition to take place as soon as that condition takes place I come out of the loop. Maybe I as we we have seen in the case statement switch some expression all right color then case or we do something and then give break right case G we do something and then give break right we do like that. So, we skip the remaining part of the switch block all right we come out of that. So, similarly we will see couple of examples of this say here there is a complete example. Let us look at that is a complete example complete program once again include stdiu.h you are running some programs main then fact and I are integers fact we are computing factorial. So, fact is 1 i is 1 while i is less than 10 that means i want to break out while i is less than 10 fact fact times i if fact is greater than 100 then factorial is above 100 factorial of a number is above 100. So, for example I am going on up to 10 numbers. So, what will happen with the factorials let us see. So, factorial 1 will be 1 factorial 2 will be 2 factorial 3 will be 3 times 2 that is 6 factorial 4 will be 4 times 3 4 times 6 it will be 4 times 3 times 2 so 4 times 6 that means 24 then 24 times 5 so that will be how much it will be more than how much will it be if i I have got this 4 3 2 and multiply that with 5. So, 20 60 so here just with 5 numbers I am exceeding the value 120 but I do not know when I am going to reach the value 100. So, I have written the program in this way fact while i is less than 10 I will test it up to 10 numbers every time I compute fact if fact is greater than 100 print so here as soon as fact becomes 100 will say factorial of 5 is above 100 factorial of 5 is above 100 and then I break out otherwise if I had not put this break then this would have continued till this loop all for all the 10 numbers up to factorial 10. But I just want to stop whenever my result becomes more than 100 so this is one way we can utilize break right. Similarly there is another statement although we do not use it often it is better to know that sometimes it can come handy that is a continuous statement that means the remaining part of the body of a loop we will skip if I put a continuum all right. So, let us see and it proceeds to the next iteration of the loop. So, what happens is let us look at one example here. So, while 1 that means what that means it is always true it will continually go on doing it. So, fact is fact times i i plus plus so I start with i 1 then 2 then 3 if i is less than 10 I will go into the loop otherwise I will break. So, this continue is basically remain forcing me to go back to this point by forsaking this part. I am not coming to the remaining of the loop. But if this condition is not holding then I will not execute continue I will stay to a come here and to break. I think it will need a couple of moments for you to just realize what is happening here all right. So, just look at this. So, in this way it will I think you can understand it. So, I have got i to be 1. So, fact will be 1 times 1 then i becomes 2 and then I go back. So, it will be fact will be 1 times 1 times 2 I will be 3 and in that will go on. But it will go on as long as i is to it 10 less than 10 then I will not come to break I will go back here. But if i is less than 10 I will come to break and I will come out of the loop. So, it is a combination of continuing break. This is but what I want is that you should understand how the fall loop is used for repetition that is very important to understand and we will carry out with some examples in the next lecture.