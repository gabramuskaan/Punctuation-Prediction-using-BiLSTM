 We are looking at a new construct for building up loops in C language and that construct is a four construct. So, let me first write a simple program again the same program that we are writing for reading for finding the sum of 10 numbers. So, just I am writing and you try to follow what the meaning of this program is then we will go and further explain it. My intention is to read n numbers and find the sum the simple thing how can I write that. So, I put a variable again sum is 0 and I have read some value n whatever that value is suppose say n equals 5 user has provided me or I can initialize it to 5. So, 5 numbers I will read and add. Now, I write for I what is this I I is a control variable or we also call it as very common name of this is an index variable index variable it need not be I it can be anything but an integer variable. So, that has to be declared at the beginning. So, so I can I can declare let me start with normal declarations int. So, some program has started main int sum i and the number that I will read I will see if I need any other variables later and also n sorry and also n and here I do sum 0 n equals to 5. Now, this thing I could have read from the user could have taken from the user the value how could I take it from the user by doing a scan f scan f print f please enter the number of numbers you want to add then scan f percentage d amperes and n in that way I could read this. But here for the sake of saving time I am just initializing it n is 5. Now, where I do for I this I equals 1 semicolon so, this 1 complete statement I less than equal to n semicolon i plus plus what does it mean we will see what it means then what would I do I will print f please enter number let us say integer I call it n, please enter an integer scan f percentage d norm amperes and norm. Then sum assigned sum plus norm that is all here I do not have to increment this control variable why after I add the number that has been read here after I add that with sum I am going back to this fall loop and where am I going to I am now doing this operation that is incrementing I. So, I will become it was I was 1 so, I will become 2 and then again I add the number after I make I equal I increment I so, initially I was 1 here so, what is happening let us look at what is happening to the control variable of the index I was 1 I do it once so, the sum becomes number suppose the number was 5 suppose the number was 5 that was entered so, the sum becomes 5 I increment I so, I becomes 2 I check it is less than 5 less than this n I again read another number suppose I did 7 as a second number so, sum becomes 5 plus 7 12 and then I go back here increment it it becomes 3 I check again after doing this I come here check it is still less than 5 so, less than n I again do this I read another number suppose it is 12 so, 12 plus 12 will be 24 here increment this so, it becomes 4 I still go over there still it is less than 5 I read the next number which was 6 say so, sum becomes 30 here then I is increment it to be 5 I again come here and check that is less than equal to n true so, I come here I read another number say 10 sum becomes 40 come back here I become 6 I come at this point this condition is not true therefore, I will come to this point where maybe I will be writing something like print F percentage D backslash and sum so, the sum will be printed at this point 40 so, now you see I have read how many numbers 5 7 12 6 10 5 numbers and that's what I wanted to do now I can look at this now I can I could have done several this thing in a different way also for example, if I had just instead of this I equal to 1 I make it I initialize this to be 0 all right I initialize I to 0 and keep everything the same what will be changing a n is 5 so, here I will start not from 1, but from 0 so, first will be 0 then only 1 then will be 2 then with 3 then before then will 5 so, ultimately how many numbers should I read 6 numbers, but I was actually trying to read 5 numbers I am sure you are confused so, let me show it in another through another example suppose I read I want to read 3 numbers if I write it in this way for I now by the way it need not be I I could have written declared it properly and I could have taken any variable to be my index I could have said that it is my index, but the only constraint is that this must be an integer variable my index is 0 note the semicolon here because this is one statement then I write my index less than equal to 5 say less than equal to I am trying to read 3 so, my index is less than equal to 3 semicolon again and then my index plus plus and I just read the numbers so, I am dropping of the print F just writing scan F percentage D and now I since it is only one statement I can simply remove this parenthesis now let us see I wanted to read 3 numbers now what will happen here I write my value the value of my index and the value of norm my index has been initialized to 0 and I check with my index my I check with this statement it is less than equal to 3 so, I read the number suppose the number is 15 I increment my index so, my index now becomes 1 right my index becomes 1 still less than equal to 3 I read another number 5 my next I come here so, I do this and come here and my index becomes 2 still less than equal to 3 I read the number say 14 I again come here my index becomes 3 less than equal to 3 I read another number 5 I come here my index becomes 4 I compare this condition is not satisfied so, I come out of this loop but in the process how many numbers have I read I have read 4 numbers 1 2 3 4 but what was my intention my intention was to read 3 numbers so, where did I go wrong where did my logic go wrong this is what as a programmer you must be very careful and cautious about where did I go wrong you can say that I have gone wrong in either of the two places one is I could have simply initialize my index not with 0 but I could have initialized it to 1 in that case what would have happened first this part we forget we will start with my index 1 read 1 number less than 3 so, then it become 2 less than 3 I read the other number increment it it becomes 3 still less than equal to 3 I read this number whenever I come to 4 then my index becomes 4 this condition is violated so, I will not be reading this number it will be alright otherwise another thing I could have done what could I have done you must have discovered it by now that suppose I had kept my index to be 0 I decide no I like this circular figure 0 very much so, I keep it like that then what should I do in order that I can still be logically correct I would have changed this condition from less than equal to to less than then let us see what would have happened then also my index starts with 0 I read 1 number incremented so, it becomes 1 I check for the condition my index is still less than 3 so, I read the other number 5 my index is incremented 2 still less than 3 I read the other number 14 fine as soon as I after I read I make it 3 incremented and I check the condition now it is no longer true it is not less than but equal to but less than equal to is not my condition my condition is less than therefore, I will not read the 4 number so, this is a point where often people make mistakes while writing for loops so, I encourage all of you to very carefully study this we will look into the for loop a little bit more so, we have seen the initial so, I have given you some example one point that is very important you must have noticed while I was writing this that there is no semicolon at the end of this statement why because the entire the 4 statement has not ended here it is going on for this period do this that is the end of the statement so, no semicolon is given for this 4 4 conditional part and here all these are expressions you can see that this you can see that this is an expression sorry sorry this is an expression this is another expression this is another expression now since these are expressions it can be very general for example, I could have written initialization is fine but here I could have done something I plus p times 2 is less than 25 that is very much valid and here also I could have done I assigned I could have written I assigned I plus 5 or I could have written I assigned I times 5 anything this is a modifier modulator I am changing the condition and changing the index variable and then testing that index variable with respect to a condition only point that you should remember is that this must be an integer variable. So, how it works the expression 1 that is say typically I assigned 1 the expression 1 is used to initialize some variable call index that controls the looping action expression 2 I less than equal to 5 represents a condition that must be true so, that the loop continues and expression 3 say I assigned I plus 2 all right that is a bracket I assigned I plus 2 or I plus plus as you are seen till now they are used to alter the value of the index initially assigned by expression 1 we have seen this so, not much to worry about it. So, expression 1 is used to initialize so, here so, what is the way it is done is first expression 1 is executed so, for j equals 0 j less than equal to k plus 5 can be anything it can mean expression j plus plus so, first this expression is executed then after we execute this I check by initialization have I violated the condition in that case of course, there is no point getting into the loop I will go out otherwise if it is not done then I go inside the loop carry out the loop and then instead of going into the loop straight back I will first come to this alteration or modulator statement. So, it is sorry what did I write here I wanted to write j assigned j plus 1 here or j plus plus whatever. I do that and after I do that what do I do I immediately come back to this expression and test it again is it true if so, I will get into otherwise I will exit. So, this is the structure of the 4 statement ok. Now, there are couple of critical issues but before that let us write a simpler program with 4 suppose I want to find the sum of first 10 natural numbers what are the first in natural numbers 1 2 3 4 5 up to n. So, in school mathematics you know that the sum for 10 numbers it is the formula is n times n plus 1 by 2 right. So, one simple program is if I want to find the sum of 10 numbers you can simply do in your main in sum assigned 0 and then in one short you can write sum assigned 10 because I want to write 10 natural numbers 10 times 11 divided by 2 and then print if sum that could be one way but that is not what I am going to do I want to illustrate the volume. So, the way I can do it is main function and here I put in int sum equals 0. Now, I know that it is not I am not going to find the sum of n natural numbers I am going to find the sum of 10 natural numbers. So, I can write it in this way for so, in sum equal to 0 another variable will have to initialize that is my index I write it in my index not necessarily i or j all right but it must be an integer. So, for but I am not initializing it here for mindx assigned 0 mindx less than 10 please verify whether I am right or wrong mindx plus plus sum assigned sum plus mindx plus 1 what will happen sum was 0 mindx was 0 so mindx plus 1 so, the sum will be 1 what am I expecting 10 times 11 by 2 right so, that will be 55 right sum of first 10 natural numbers now mindx becomes 1 so, mindx is 1 now less than 10 I again add that so, sum was what was my sum my sum was 1 so, here is first iteration sum was 1 then sum was 1 I have written it here so, sum plus mindx mindx was 1 so, 1 plus 1 am I right so, here it was right now sum was 1 and mindx is 1 plus so, 2 1 plus 1 so, it will be 1 plus 2 so, this will be added so, the sum will be 3 next mindx will be incremented to 2 so, now sum is 3 mindx is 2 plus 1 so, 3 plus 2 5 and 1 so, sum will be 6 in that it will go on and ultimately I will come to this point where it will exceed 10 and then I can stop so, here is now you can also do that so, sum of natural numbers you can do that in a loop using the index itself being updated and creating the different natural numbers every time so, if I had written it in this way for I equals 1 that is the first one I less than 10 would that be okay I plus plus sum equals sum plus I what would have happened I is 1 sum is 1 right now next I is incremented I is 2 and then sum was 1 so, that will be added sum is 3 again this will be added 3 sum is 4 as sum is 3 so, then will be 6 again 4 then will be 10 in that it will go on ultimately so, suppose I was trying to do it for 5 numbers so, I just I less than 5 first 5 natural numbers so, sum is 5 so, now 4 I have already taken now I plus first it becomes 5 but I will get stuck here so, if I start it with 1 what should I do I just did it in a couple of moments earlier in the earlier lecture so, what should I do here I should make it I less than equal to 5 in that case I will take the 10 plus 5 15 so, 5 natural numbers sum of 5 times 6 by 2 is 15 right so, I can compute that using this loop all right so, that is a very interesting application so, 4 is a very powerful we will see in future application that 4 is a very powerful construct using which we can do