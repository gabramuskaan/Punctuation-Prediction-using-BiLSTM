 Today, we will be having a look at how the techniques that we have learnt can be applied to different problem solving and this will continue from this lecture onwards for a few more lectures. We have learnt quite a few things we have seen the overall structure of the sea language. We have seen the if then else if else structure the iteration structure like the loops. We also know how the variables are defined. We have seen arrays how data can be stored in one dimensional array and two dimensional arrays. We have also seen functions and the most important thing about functions is that it enables us to take a complex problem and divide it into different parts and solve each of the parts separately using functions. A very important thing about functions is passing of the parameters and how the function returns a value returns a value to the calling function. We have also seen that there are two there are two ways in which parameters can be passed from the calling function to a called function one is call by value another one is call by reference in sea language in general always call by value is adopted. However, in call by value we have to copy the value of the data the parameter value or the parameter value to the argument value. However, for the case of arrays whenever I want to pass a particular array at that point an array can be 100 by 100 array or 10 by 10 array if it be a 10 by 10 array then I will have to copy 100 values so that is not advisable for that we just pass the array name and let us quickly have a look that the array name is essentially an address and array whenever we pass suppose there is an array a two dimensional 10 by 10 array all right two dimensional array like this. Now all the elements I am not passing so it is essentially it happened to be a 4 by 4 array so that is all the 16 elements I will not be passing so here is my called function the function called function and on this side is the calling function the calling function and the array name is say a so the calling function refers to suppose let this function be called f so from the body of the calling function whenever I am calling f I am passing the array say if it been integer array into a and here I just pass the array a and here in this function body we have got say int a and just saying that the size of the or it may not be a it can be x also int x something and the size of the array and here int a and maybe n so here I am actually passing the name of the array and the name of the array is nothing but the beginning of the address of the first element of the array. So here I am actually copying the address so it is a call by reference in the case of an array and in the last lecture we have also seen that we can also use pointers to sort of establish call by reference another major thing that you have to keep in mind is that suppose this array is 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 now these are organized in C in a row major form so it is stored in the memory like 1 so the rows first 2 3 4 then 5 6 like that so when I refer to the array a I actually pass on the address of the first location of the array ok. So a 0 0 in the case of a 2 dimensional points to this element and that is this element ok that is how we pass on arrays. So for functions and we have also seen some applications of all these techniques that we have learned in particular we have seen how we can carry out search and we have seen 2 search techniques one is linear search another is binary search now in linear search the complexity the time is proportional to the number of elements whereas in binary search it is reduced its faster its log of the number of elements to the base 2 and search is a very fundamental problem solving technique in technique because suppose you have got the names of students in the class all right here are the names atul sham gargi in that way the names are there and each of them have got a rule number 1 2 3 4 right there now you want to find out how many shams are there in the class. So you have to search this array and find out where sham is ok maybe here and there is another sham here. So that is searching and counting both the things but you cannot avoid searching this array all right it may be that along with that there is an array of marks obtained by rule number 1 rule number 2 etcetera so maybe this is 50 this is 70 this is 30 all right now here tell me I want to say now they are in 2 arrays this is 1 array called name and this is another array called marks of the corresponding students. Now I want to know how much what is the marks that gargi has obtained how do you go about it what will be the first step in solving this problem what is the marks that gargi has obtained in order to do that I have to first I do not know what is gargis rule number if I had known what is gargis rule number suppose gargis rule number is 3 then I could have gone in the marks array and I could have taken marks rule number what if I knew the rule number rule number minus 1 that marks I could have taken as a result all right but I do not know the rule number if I had known the rule number 3 then I would have gone to the second element so is marks 2 would have been would have given me the rule number but suppose I do not know the rule number then what should I do first I will have to search this array and what would be my key what is my key key will be the screen gargis because I want to know the marks obtained by gargis and what should I do with this key I should carry out a search it can be a linear search or it can be a binary search let us for the time being assume that it is a linear search so we will be searching and I will be finding gargis here I am assuming for simplicity that there is only one gargis in the class so I will take this and I find what will the search if you recall what will the search algorithm return me the search algorithm will return me the index of the position where gargis located and that position will be actually it will automatically come since this positions will be marked as 0 1 2 I will get this 2 returned so I will get so I get the key I search the array name this is a character array a care name size whatever size is a n and the key and this search will return me the value position 2 plus equal to 2 then I will simply take the value of marks I will go to the array marks plus which will be my result right so you see we needed the searching now while I was talking of searching this array I said that the searching I am assuming they searching to be a linear search would it be possible to search this array using binary search if you just think it over would it be possible to search it using binary search what does binary search require binary search requires that the array be sorted right array be sorted so an array like this a tool amol Varghis and joy this is an array of 4 elements can I sort it the type of sort if I want to sort it I will have to organize it in increasing or decreasing order let us assume that I am trying to do it in an increasing order now this sort will be this character array can be sorted in a way which is called the lexicographics sort that means I go I sort the character array according to the alphabets or the words as they written obviously a comes first so therefore a character a is smaller than character b all right so here between these two elements both of them has got e but similarly t is greater than m so in this sorting I will first check between these say a they are same think of bubble sort I am trying to compare them in normally what we did we found that say array x xj is less than xj plus 1 and then we did something if it was if it is the case no issue if it was the other way round I I wanted to swap but in this case it will not be so simple I can take a string and compare these two strings as to which one is whether they are same or not or whichever is greater but another way you can write a small function to compare I leave it to you I leave it to you that you now know sorting techniques so you should try to write a function that will sort a string of characters all right so a and a are same if they are same the function what will do it will now look at t and m now m is smaller than t therefore amal is smaller than atul so amal will come here and atul will come here now between atul and gargi you can see a is greater than smaller than g so gargi is in a proper space please now if say for example I do not have joy here I am having another name go thumb here now when I am comparing between gargi and go thumb g and g are the same so they recall no change next a and a are also same no issue so there is no change but r r is smaller than u because r appears earlier than u but in terms of our computer code technology the asci code of r is less than the asci code of u so in both the ways it is meaningful so r is less than u therefore gargi is smaller than go thumb so in that way I can carry out with another small function compare string is greater say is you can write a function is greater two strings okay care S 1 comma care S 2 two strings will be passed on this function and this function will find out which character if S 1 is greater than is 2 it will just return if S 1 is greater than is 2 it will return a 1 if S 1 is greater than S 2 try to write such a function okay now that is that I am giving you as a home assignment all of you should try to do that and with a little effort I am sure you will be able to do that so I could have just as I had done in the earlier one here in this thing I said that I will be doing linear search I could have done binary search also provided I had provided I had sorted them okay provided I had sorted them in the proper way and then with the sorted I had a I could have done binary search now will be also doing some problem solving will in this course will be doing some problem solving in the field of numbers or equations mathematical problem solving but before that in order to do this today let us have a relook at the strings we had looked at strings earlier as an array of characters so let us have a relook at the whole thing today how can I represent an array of strings like the one that I was showing here an array of strings all these names are tool Amal Gargi and Gautam all these are nothing but this is a string this is a string all these are different strings so how can I represent them let us have a look at that see I can I have got three strings one is spike as is Tom as is JD Now, these three strings I have to store and I am saying that each string can be at best 10 characters at most 10 characters and I am looking at three such names so it is an array three rows and each row having 10 characters so the definite the definition would be I named them as CHR I could have done character array and it is three rows and 10 columns now I can initialize that as spike as character S character P so S comes here P comes here I comes here K comes here E comes here and that is the end so it is backslash 0 I also put that and so 1 2 3 4 5 6 4 places are still vacant 4 places are still vacant similarly for the next one is Tom so T O M backslash 0 and the rest are rest 6 are all free all right but my string has ended here so one way I is that I can represent them in this way where I specifically talk about the characters in the array and terminate them with backslash 0 the other way I can do it is simply I initialize them as 3 10 the same array with three strings spike comma Tom comma jelly now internally even if I do that it is essentially becoming the same thing internally it is being stored in the same way with three rows and each row having this characters S P I K E backslash 0 and so on so forth they can be more P O M backslash 0 and so on so forth here also J E R R Y and so on sorry backslash 0 and so on so forth it is being stored so both of them are equivalent I can do it in either of these ways all right so a string can be represented in any of these ways so we already know this again the name of the array is a pointer to the 0th element of the array so if I have this array S P I K E backslash 0 T O M backslash 0 J E R R Y backslash 0 when I am calling that CHR the name itself is pointing to the first element of this array so CHR are 00 it is pointing to that so this and CHR 0 0 are the same they mean the same thing okay so this you just like an array this is also true here therefore if CHR points to the address 1000 CHR plus 1 will point to address 10 why the reason is again I have got this array and CHR is pointing CHR or AR is pointing to the 0th element of the first row if this is 1000 then 1000 to 109 this at this location is 109 because the size is 10 okay size is 10 so although S P I K E backslash 0 etc is there then when I go to the next one CHR underscore AR plus 1 that means wherever this pointer is this entire thing is taken 0 to 10 so I am taking here it is taking all these 10 elements as one it will be pointing to the next one that means it will be 1010 okay again if I make it CHR plus 2 it will come to this one all right that is how the pointer works but how can I get this character this will be CHR 0 1 that is pointing to this element okay now this thing must be clearly understood so CHR points to a 0th string or the 0th 1 dimensional array CHR 1 points to the first string or the first 1 dimensional array I mean number 1 0th first CHR 2 points the second 1 dimensional array so each of them are one dimensional arrays and CHR is pointing to each of these one dimensional arrays CHR is pointing to one one dimensional array and as I increment the pointer this pointer is going on increasing all right in general CHR I points to the i th string or the i th dimensional array clear the following program let us look at the program and the following program demonstrates how to print an array of strings please take one minute to read this array a program yourself and try to understand it you can see here that I am starting with the main function and although it is written in a in a very cryptic way so my program starts from this point and ends at this point i is an integer CHR is again an array of three strings and each can be of maximum length 10 so spike, tau and jere are there so I can print I just print first way next line I go to next line and tune next line so I just put first way and then what do I do so I will print first way and then two lines have been given blank then for i 0 2 less than 3 i plus plus print f string I am printing the string so what will be printed string equals a place holder for the string and then there will be some tab one space and then so the first will be string here some space and then tab this is tab so I give some space and write address and then sorry string equal to string equal to address equal to and there will be some space for the address and that format is unsigned integer so it will become longer alright because unsigned and signed integer whenever I am putting suppose I have got 16 bits for representing an integer if it be a signed if I distinct between plus 5 and minus 5 and keep one bit kept for the plus or minus then for the 16 bit for I will be actually having 15 bits for this size but if I make it unsigned then I can have all the 16 bits so I can represent more numbers alright more numbers so that apart so string and address and then what am I printing here care i care plus i that means 0 care 0 the first string and then I am again putting the care this now what is the difference between this care this and this this is being printed in percentage s that means the string will be printed and here in an unsigned integer what I am printing here is the address of that string so this string spike was here when I print this just the name of the array that means I am in this format if I do I am printing the address of it therefore the output will be somehow like this so this is something to be understood very clearly that this array when I am actually looking at this I am taking the content of the array otherwise I am taking the array itself so here is a program this program asks the user to enter a user name if the user name entered is one of the names in the master list then the user is allowed to calculate the factorial of a number otherwise an error message is displayed so we have got a master list of names now if you are a valid user your name is there in the list so first what is doing is including stdiu dot h is including string dot h that means some string functions are also included I am defining the factorial proto type the factorial function has been written later suppose this part this part is later than the main function okay now the main is here and what is the main doing it has got some integer i and found is 0 initially the name is not found here and some n number for which I have to compute the factorial master list 5 by 20 that means each of these each of these can be 20 character long and there are 5 such and I have put the valid names as admin, Tom, Bob, Tim and Jim now I am asking and name is and so I am and I am asking from the user enter user name now the user gives the name so get s here you are getting a new function being introduced here that is get s what is get s get carry and get c h you know and here get s means get the string so in one shot it is getting the string as the name so name I am getting from the user some name say it is Jim suppose the user enters Jim now for i equals to 0 to 5 y5 there are all the 5 names are here if string compare name and master list i if this character this string and this string matches then found is one otherwise I am again going in the fall loop so at every stage of the loop I am trying to compare this name with this string here there is no match so I come here no match no match in that way come and find Jim so here ultimately I will get found and then I will break now when I come out suppose it was not Jim it was a Jimmy then I do not get a match here so I can come out with found equal to 0 or found equal to 1 if found equal to 1 then welcome then welcome exclamation and then the name is printing welcome Jim and asking please enter the number is entering the number for the factorial and then here you see in this printf I have called the factorial that factorial of the number is this n is this so I call factorial and this part you know now that this n and this n and may not be the same I mean the two different locations but this n it could have been x also in that case internally it had it had to be x here so this is being passed over here the factorial is being computed all right once the factorial is computed now how the factorial is computed I will be discussing that later because here they some trick forget about that trick now I will be discussing that later that is recursion which we have not yet discussed and after this I am coming back here and I am printing so the purpose of this program was to show how we can handle strings so these are very common very common thing I mean you try to log in in a machine right and you type in your log in name and your password if they do not match the system says log in failure now how does it do it internally internally it has got a list of just like this it has got a list of all the users and it takes your user name and checks it with all these that is a problem that is being solved a sub problem that is being solved in the operating system and that is the basic principle is depicted in this program all right we will continue with other problem solving approaches in the future lectures