 We were discussing about structures and in particular we have discussed about the way the structure is formed. And in that context we have seen that a structure can contain within itself some members can be themselves a structure. For example, this one member which can itself be a structure consisting of other members, this possible. So this is a structure, struct S, S in which there is another struct, say P which is a member of this, it is possible. So some member can be an array, this can be say name 10, that means it is a character array of name 10. Similarly it could be some member can be int max 20 like that it can happen. Now so we have seen that we can have arrays within structure also in the last lecture we have talked about arrays of structure. So there is a scope of confusion between these two that is why I want to make it clearer that there can be an array within a structure as a member. So on the other thing is we can have array of structure. So in this case we have gotten array every element of that array is a structure of a particular type. We know that an array can hold data elements of the same type. So if I have one particular structure defined like say student and it can be an array of students. So there will be each of them is of the type student and we have also seen so these two must be differentiated very clearly. So as you can see that here a structure member can be an array we saw it in the last class, last lecture that say for example a structure student has gotten array character array name 30. Now this is a part of an array. Now that we know arrays within structure we have also seen arrays of structure where we can have a number of elements of that particular structure here. So here we have seen that we have got an array class, the array is class which can hold up to 50 elements and each element of this class is a structure of type student. So individual members when I come to say class I then I am actually accessing a structure, a particular structure in that array. Now that structure has got number of fields therefore if I have class I dot name then I will get a particular name if that be the field or I can say class 2 dot role number. So if I have class I dot name then I will get a particular name if that be the field or I can say class 2 dot role number. So here I think this distinction must be very clear that this is an array of structures and we can handle them just as here the index is pointing to the particular element and then by the dot operator we are going inside that element and looking at that array. Whereas in the case of an array within a structure we can we look at that in a different way that is if there be an then I come to the structure student and suppose there is a variable of name say a 1. So I can say a 1 dot say name and I can take a particular character of that. So look at the difference of this this is 1 the other one was class I dot may be name j. So here I am accessing the particular element from that structure and here I am coming to the structure and going to that array element within that structure. So this is a usual point of confusion among many students that is why I was repeating this. Next we will start looking at an important aspect an important style of writing programs which is type death that facilitates our programming with structure. As the name type death implies we are defining some type we know that int is a type float is a type data type care is a type etcetera. Now I can also define my own type that I will be using in my program using this type death statement type death command. So we may define a structure a structure data type using a type death command like this let us see the syntax the syntax is I see type death struct member variable 1 member variable 2 member variable n and then some tag. Tag is the name of the new data type let me illustrate this differentiating this with the earlier thing say earlier we had written something like this struct. Student then care name 10 in role number like this. So I was defining a structure in this way and I was later on referring to this structure as struct student say student 1 student 2 in this way. Now what I am trying to do here is I am trying to define a type suppose I do not write this what I am doing instead I am saying type death struct same thing. So I am trying to define a structure name 10 in role number and name this type as student if I do this then next time when I write this student declare this student 1 and student 2. So I can do it in a different way I can do it much simply as I am writing now in the red if I just simply write look inside this red box if I write student 1 comma student 2 that is sufficient. So I just as compared this with the way we had declared int x float y. So here int and float was some types now here student 1 student 2 are 2 variables of type student. Now this type is not a default type it is not predefined in C therefore but I can use it because I have already using this type death statement has defined this structure as student. But please differentiate between this and the normal definition of struct student as we do normally as say struct something and then I say student. Now this is here is it clear I say struct we have seen this and I write the members here and then define that structure as the type student. Now this is a definition once for all a particular structure as student now this if I have to use it then I have to say struct student followed by a 1 a 2 student 1 student to whatever. But in this case if I do this type death I am saved from this problem. So let us have a little look at how will go about it. So that is the tag so here type death a particular structure just as here could be care name or int role just like that note that they semicolon at the end of all these declarations. And ultimately I name this tag see me save for example here as student. So tag is the name of the new data type so given that here is an example again the example of complex number. So we are defining a type called complex ignore this underscore here. So type death something having real part and imaginary part is known as the data type complex and then I am saying complex ABC just like in ABC flow ABC I can write complex ABC because complex has already been defined here. Because complex has already been defined so I think this is clear right next we move to how do we initialize a structure we saw that we can initialize an add a similarly we can initialize a structure as well. Say structure variables may be initialized following similar rules like an array the values are provided in the within the second braces separated by commas for example here complex a complex a is a complex variable 1.0 comma 2.0 what does it imply it implies that it is a is a structure. Having two fields and one field is 1.0 another is 2.0. Similarly B is another field which is initialize to minus 3.0 and 4.0. Just as we did it in the case of arrays we do it for individual structural variables but we have to put all the values initial values for all the fields of that. So this is what happened by this initialization. The other thing that last thing that we will be talking about is parameter passing in a function how do we pass a structure as a parameter to a function. We have seen how arrays can be passed similarly how can we pass structures to a function like any other variable just like any other variable we can pass it like for example here you can see that there is a swap. Between complex variable a and complex variable b now a and e are both structures. So I am just saying just as we used to write say void swap into int b just like that. Here I write complex a complex b it is also call by value. Now so here is again the typical assignment and the way we carry it out. So here is an example program using type depth what is being done here is I am defining a type complex type depth struct there are two parts real and imaginary and this data type is known as complex. Now I am writing a function swap them so I am taking another I have taken another variable which is of type complex temp is of type complex. So when I do assign a to temp then this temp variable which is of type complex will get will copy the variables say here it was 3.0 and minus 2. So this will come here it will become 3.0 and this will become minus 2. So that is temp now I copy a to b. So here sorry b to a I am sorry not this one there was some b and the values of b are copied to a not here. These are copied here and here so might be this is changed to 5 this is changed to 2.0 minus 2.5 and then I copy again b to temp a temp to b. So this is again copied back so member by member the copy is done. So here we illustrate what we mean by type depth and a function that is using it. So now suppose how can we print a structure. Print I am now printing the comp say here is a function the main function is calling print x and print y. So say for example my main function is initializing now we understand all these things x to 4 x real part to 4 imaginary part to 5. And y is real part to 10 and imaginary part to 15. So now I am calling print x so it is calling print x so x is being copied call by value to another local variable a which is local to this function print. So a is holding the complex variable x and print f a dot real a dot imaginary so field by field I print them then I come back I print y. Y is copied to a and the same thing happens then I call swap now swap was a function that we just now saw where we take temp and we copy it to temp and then I copy b to a and then temp to a in that way we carry out the swapping. So it is purely call by value and then I print x and print y after I swap what will happen in this case if I go back to this case where I am passing among this a and b the x and y are being swapped inside that function. But will that be swapped in actuality you check that yourself how do we return a structure from a function suppose I have done something but in the earlier case x and y were being swapped inside the function but when I come back to the main my x y remains the same. So if we if we want to return the function for example here I carry out a real plus b real I make it temp say here is an example of adding to complex numbers here complex a and complex b are two variables which have been passed on as parameter here and I have got a temp as an. Local function local variable so temp dot real is copying a dot real plus b dot real so what is happening here I have got structure a with a real part and an imaginary part so 3.0 4.2 another is b with a real part. Which is 2.5 and maybe 3.6 now when I am adding two complex numbers you remember we discussed it in last class also I first add these two so a real is added to b real so I am getting in temp this is temp where I am getting 5.5 and then imaginary I am getting 7.8 and now I return temp now in the main function if I had written something like say x and y were two complex variables and what I did I said add x y assign to some other complex variable z in that case that temp this temp will be assigned to this complex variable z that is how we can return a structure from a function. So structure facilitates in many ways in this so direct arithmetic operations are not possible with structure variables that means I cannot just add a and b when both of them are structures I have to do the arithmetic operations over its members. So with that we conclude our discussion on structures and structure is we will be given assignments on structures and this will enable you to write different types of handle different types of data types together and using the type there you can design your own complex data type which you can utilize further. So please practice using structures it is not at all difficult only a little practice and a little understanding is required.