 So, we are looking at computing standard deviation. So, standard deviation is mean we have seen. Now, standard deviation is if the mean is suppose the mean is represented by mu, then I take the sum of the deviation from the mean for every element of the array. So, the array was A with every element being called A i. So, what I am trying to do is I am taking the difference of A i from the mean. And since its difference can be suppose there are some values and this is the mean and the value can be a little away from the mean on this side more than the mean or less than the mean. So, we take the square of the mean square of the difference and I do that for all the elements i equals 1 to n. And then I take the square root of the whole thing that is my standard deviation or the my variance. So, I can compute either this or this whatever I like. So, you will simply understand that in the code that we have given a little earlier, then there we had computed the mean that means mu has been computed which was the average that we computed last time. So, if I have read the elements in an array whatever the elements are 5, 7, 3, 2 and I have computed the mean mu has been computed mean is 12, 3, 15, 17 divided by 4. So, it is 4 point something 4 point 1, 4 point 2, 5 that is my mean. So, now for every element again in this array I find out for i s i and 0 i less than equal to 3 i plus plus what do I do for every element I have got the mu and let us call it average. So, sum was 0 what is it look like sum was 0, sum will be now sum plus I am getting sigma of mu minus a i whole square. So, sum plus average minus a i times average minus a i. So, that is the square average is mu minus a i that is so, I am doing this square and I am repeatedly doing this and getting the new sum and at the end of this loop therefore, I have got this. So, I can see STD, say dev let me call it standard deviation is square root of the sum. In that way I can find out the standard deviation also. Now, let us come to the now what is the application what is the meaning of this. So, with this say in a class you are you are supposed to write a program where you want to find out say in a class of physics what is the average of the numbers of all the students. So, I will find out the mean and mean of the class marks right. Similarly, I can find out that what is the standard deviation how much did it vary that also I can find out. Now, let us look at this new another problem say a shop stores in different types of items in different types of items. Now, given the number of items of each type sold during a given month and the corresponding unit prices compute the total monthly sale. So, what is the scenario the scenario is this I have got say 5 items item 1 item 2 item 3 item 4 and item 5 and let me call it the item let me call it on this side let me call it this area is item price item cost item cost. Suppose, the cost here is 7 and half rupees per item of type 0 25 for item of type 1. This is 0 this is 1 this is 2 this is 3 this is 4. So, the item cost for this for item of type 2 is 12.5 item of type 3 is 10 item of item of type 4 is 50 rupees. Now, I want to store how many items items items items items of each type has been sold. So, I take another array and call it item sold. Suppose 5 items have been sold of type 0 6 items here of type 1 2 items of type 2 4 items of type 3 and 2 items of type 1. Now, my question is what is the total sale. So, what should I do you can easily understand that the here is item cost. So, I have to multiply this with this and add all these costs. So, it will be 7.5 times 5 it will be 7.5 times 5 plus 25 times 6 plus so and so forth in that way I can find the total cost. So, what will the program look like program will look like I will be needing to add is item cost and item sold and they should be of the same size assuming that I know beforehand that there are 5 items. So, I can start with item cost of type 5 but this will be cost will be of type float and they will be another the number of items is item sold the number of items sold is integer. So, I will have this. I am not showing the part that here I am reading the 2 arrays. So, after I read the arrays I will have 2 arrays like this one is an integer array another is a floating pointer this is a float and this is an integer. Now, my actual body of the program will be in a loop for say I am doing it using for say I assign 0 I less than equal to 4 since the size is 5 I plus plus and what do I do here what do I do in the body of the for loop I take I write actually only one statement will do there is no harm in putting this bracket total cell which was a variable of type float total cell is total cell was initialized to 0 total cell plus item cost I times multiplied by item sold I. So, this will be done in a loop and so I will take the first item item cost 0 multiply with that with item cost item sold 0 add that with the total cell which was initialized to 0. So, here I can have float total cell initialized to 0 0.0 I can do that. So, now I am doing it in a loop. So, first I multiply these 2 add it to total cell next again in the next iteration I is incremented I take these 2 and multiply them and add it to the total cell. Then I do this 2 and multiply them add it to the total cell and I go on in this way this is another this is in this way by using this array I will be able to add all this values and I will get the total cell at the end. So, here we could see 2 very nice examples of application of arrays. Now, one another problem that I gave you I mean is I was while comparing the arrays you can do it in multiple ways that there is 2 arrays you must have solved it by now. That there were 2 arrays like this 7755 here 6 here 4 but again 3 3. So, everywhere they are matching but intermediate they were affected and I had a flag value. So, flag was initialized to 1 and then in a fall loop then in the fall loop I was checking this was A and this was B flag was initialized to 1. So, if A i is equal to B i this I can do because here I am doing it element wise then flag equal to 1 else flag equal to 0 and I can do exit and I come out of the loop straight way I come out of the loop because it does not really matter at which position the mismatch occurs as soon as the mismatch occurs I can say the flag is 0 and so I come out. So, when I was comparing this whenever I find a mismatch the flag will become 0 and it will not be reset to 1 again because of this mismatch because this part is not being computed. I need not computed I need not computed because my objective was to see if the 2 arrays are equal and here the violation has already occurred. So, they are not equal however so that is one way you can try it with while loop also you can try with while to solve the same problem. Another point is here the time and again here everywhere I am setting the flag to 1. I could have changed that also here if what did I need to do I go on I have in set flag to 1 and the condition I simply change I just change the condition. If AI is not equal to BI then make flag 0 I could have done this as long as this condition is not holding I am going on doing the loop. Is it clear I will go on doing the loop as long as there is no mismatch this condition means mismatch as soon as there is a mismatch I will set the flag to 0 and exit. There is another way of solving the problem. So, you have to think logically what exactly you need to do and what exactly you are writing what is the flow and what is happening with the variables and I always suggest that you have small pictures of the different variables and see how they are changing in the course of running the program. Now, so we have seen a useful commercial so called toy commercial problem that how I can find out the cost of total sales or monthly sales. So, and here the number of items sold per month are given then you can do it. Next let us look at a very important thing called searching. Searching is a fundamental task in any and in fact in many computations in many computations we need to search. What do you search there different types of searches but we will be now talking about the simplest possible search that is we are trying to find out whether a particular element is there in an array. So, the purpose is to check if a given element which is known as the key is there in the array or not. We will first talk about the array is not arranged in any order and we will do that. So, suppose I ask the question that is there any even number in the set of numbers given suppose there are some numbers given 5, 7, 2, 9, 1, 8, 3 like that. I want to see and suppose this is a huge this is a list of 100 numbers. I want to find out whether there is any particular number forget about even number for the timing. For the timing let us assume that I want to see whether in this list any 4 is there. Is there any 4 in the list that is the question that we are asking the answer can be either yes or no. If it is yes then the next question comes where in the list is it there is it where means in which position it is there. I may ask like to know the position or I may not like to know the position I would be satisfied to know whether this list contains any 4 or not. So, 5, 7, 2, 9, 1, 8, 3. So, again 5, 7, 2, 9, 1, 8, 3 and my key is 4 because I am interested in the existence of 4. So, instead of writing the C which you will be writing I will be discussing how to approach this problem what would the pseudo code be. And I am sure in the assignments in your practice you can write the program. So, I know I need to know beforehand this list. So, I need to know a list which may be an integer list of might be here 7 numbers I need to know that. Also I need to know which key I am searching for once I know these 2. So, I know 5, 7, 2, 9, 1, 8, 3 is my list and I know that 4 is my key then how should I go about it. I have got 4 in mind I start to look at as if I am looking at through some means at different positions. I look at this position and check this element and compare this element with the key and I ask are the equal. If the answer is yes then obviously I can say that 4 is in the list. But as you can see it is not true so in case of no I will shift my focus from here to here. And I will now compare with 4 this element 7 are the equal no then I will again shift the focus and I will go on. Shift the focus and I will compare with this element with the key. In that I will go on how long shall I go on till the end of the list. If suppose here there was a 4 instead of 1 there was a 4 here. And when my focus changes to this point and then again comes to this point and then I find that this element is matching the key value then I can exit and say yes 4 is there in the list. Then if the other question has to be answered that 4 is there but where is 4? In that case what would be your answer would be this position. And what is this position? This position is nothing but the current index, current value of the index. Here the index started this is my index which was shifting. So now we can think of the algorithm I have got 5, 7, 2, 9, 1, 8, 3 and my key is 4. So I will be doing so this is a loop which is list 4 equals 0 that means the focus of the index I less than equal to 1, 2, 3, 4, 5, 6, 7, 6, I plus plus. If list I that means the Ith element of the list is equal to the key then I can say found the list. And I that means the Ith element of the list is equal to the key then I can say found assigned 1. What is found? Found is some variable which I have initialized at this point initially nothing is found it is not found. So found is 0 initially I have not found the key. Here I am comparing as soon as I compare I put found equal to 1 and then I can exit or this automatically this loop will go on. Now if I do it in this way what is the problem? Suppose my key was 1 then it goes on I 0 this is never happening found is still 0 it goes on it comes to here and I count come to found equal to 1. And then I can say if found equal to 1 I can print F. Print F key found at position percentage D I. So at that point I can also print that it has been found here. In the worst case what can happen? Found will remain 0 and I will come to the end of this point when I come here I can check if found equal to 1. If found is 0 print F key not found if I do not find it there can be different flavors of the same problem. The other flavor could be that suppose this element 1 is there at multiple places suppose it is also here. And what will this program result in what would be its output? I will go on checking here I will check the for loop is extending up to which part? For loop is extending up to this position and this is separate I should not have I should have written it on this side. So I go on checking this so key is found at position number 0 1 2 3 4 key is found at position 4 the list is not exhausted. Ultimately it will come to this point and when it and again it will say the key is found at position 6 twice it is found it will be told like that. Key is it will print twice if at the end it comes and still the key the value of the variable found is 0 that will say print it is not found. I could have also say the same thing same problem I do say suppose I have got a list 5792131. The question is how many ones are there the same algorithm will do the same algorithm will work. The same algorithm the algorithm is I start from one point from this beginning I let me draw it in this way if this be an array where all my elements are there? 5792131 I start from the beginning I equal 0 and for every element I compare with the key and go on till the end. Now if I want to do this what is the additional variable that I will require I will require another variable count which is initially 0 other than found which is also false. So whenever I find the one and my key is one so whenever I find the one I will say found is equal to one and also I will do count plus plus and I will continue. Here I come and I will find I will have the value of count with 2. So I can also say that here I could print where found is becoming one so I can say at which position it is found and how many times it is found. Now it can another flavor could be that I have got this say this array I have got this array and some array 632915 and whenever I have been given a key say the key is 2. As soon as I find 2 that is enough for me I just want to know whether 2 is there in the list I am not interested to know how many times it is there or in which position it is there or at best I may like to know at which position I found it first. So what I can do I will go on searching like this and whenever you find 2 then you print that I have found 2 here and exit. So what will you do the loop will be the loop inside the loop you will have you can do it like this that if a i or list i let us I was writing list i is not equal to key. So you could have done it by while also n minus 1 i plus plus you go on doing this if list i is not equal to sorry if it is equal to n minus 1 i plus plus you go on doing this. List i is not is sorry if it is equal to the key whatever I done is equal to key say found equal to 1 and print F the position and exit. And you did not go through the entire loop now there are so that is this sort of search which I am doing in a linear way from one side to the other is known as linear search is a simple very simple search for a particular element. We will see a little bit more on this next lecture.