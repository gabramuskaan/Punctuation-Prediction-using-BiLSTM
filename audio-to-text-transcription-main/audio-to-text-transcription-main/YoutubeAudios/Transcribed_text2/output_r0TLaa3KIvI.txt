 So, we were discussing a little more complicated and little more different program that is using a function. Here what we are discussed in the last lecture is that we are using a new type of statement that is hash define. This is a pre-processor statement, this is called a pre-processor statement which is replacing pi with the value that is specified. Now anywhere I can do I can define other things like this also for example, I can write say hash define resistance is 10 ohm, all right 10.2 ohm whatever that means in my program wherever I get this variable name resistance that will be replaced by this constant value 10.2 even before the program is compiled. That is the first new thing that we saw. The second thing is look at this let us study this program. First I am putting in a comment and the comment tells me what this program is going to do. The comment is compute the area of a circle and as usual I start with a main sorry as usual I start with a main all right and inside main let us see what we have done we have done something different now all of you will be able to say what is this this is a type declaration for two variables radius and area and what sort of type declaration is that it is float that means radius and area are two variables which will hold real numbers or floating point numbers right. Now I also declare my funk this is another function and the style in which I wrote tells a compiler that this is a function and this function is also of type float what is the type of a function when we will be studying function in detail we will be understanding that now what have we done here scan F you know that by now scan F is reading the value of some variable how many here I look at this point I find that it is one percentage F so only one variable is being read and what is that variable that is that is radius all right so I will read the value of the radius and radius is of type float right so it will be say 15.25 that has been read now computing the area the main function is not doing itself all right so let us quickly go back to our old diagram so this is the main machine or the main function. So here what have we done we have read I am writing in a pseudo code I have read the value of radius and there is a function called Myfum my function all right now after I read the radius I do not want to take the botheration of computing the area this machine submachine knows how to compute the area it knows that area will be computed as pi times r times r that means pi r square right area of a circle but this is a function that can compute area of any circle it has been designed because by pi r square you are not finding the area of only this circle you can find the area of this or might be this circle only thing that is differing is the radius right here it is one radius here there is another radius here there is another radius okay so this machine or this function can compute any area any area of any circle provided it gets the radius told to him told to this so this machine is expecting some value to be passed on to this to be passed on to this okay please note the terms I am using this function once some value requires some value to be passed on to this now you can ask that well this such a simple program I could have written it here itself yes certainly you could have written it here itself but this is just an example actually in a very complicated scenario there are many complicated tasks and if we want to solve the entire task by ourselves by through a signal program there is a chance of error okay that is problem number one so we want to divide the problem into sub problems that is a general programming philosophy that we want to divide the problem into sub problems and solve each of the sub problems separately because they are more manageable I can find out what are the errors whether they are working properly or not and then I combine them together and solve the overall problem that is advantage number one advantage number two is that suppose let us just for the sake of argument assume that my function this finding the area is really a complicated program very complicated program so somebody has really taken the effort to develop this complicated program now whenever me or you or anybody any programmer wants to use this facility then they do not need to reinvent the wheel and write that complicated program once again it is available and I can reuse it and only thing that I need to do while reusing it is just to pass the parameter therefore the second big advantage is reuse of functions that is why the concept of functions is so important in programming all right you will encounter this irrespective of programming languages so let us go back to this so here you see I am not computing the area I mean the main is not computing the area what the main is doing it is just here it is calling my function so immediately this one is being called and what will my function do my function is ready my function is here and it is just expecting something which is R to come in because it will compute pi R square is expecting R and this one has got the variable that radius in the variable radius so this is being passed on to this so over here from the main function here is the main from the main this radius is being connected to this R all right and this function my function is reading is getting the value of R and inside that it is computing the area now there are some details which I will mention later it is computing the area and it is finding the value in its own variable A. A is the variable now for any program if this function is used then instead of radius you may have my radius or any other value any other sorry any other variable name can be there now any this will work for all of them let me clarify it once again say here there is a function and this this function accepts R and produces A now from my as I said that it can be used from my program I am using it with the variable radius it is being connected here maybe from your program you have not used the variable name radius you have used the variable names a rad all right so that with that when your program is using this function this rad will be connected to R now suppose here in my program I have used the variable name area for noting the area so this output A will connect to area for example for your program you said you said area now recall that in C small and capital makes different makes difference so this is another variable name this is a different variable so for you this A will connect over here now this person this my function is only concerned with R and A and the job of connecting them is up to the function that is using it all right so here what happened I called the main function my function computed A how here I wrote pi R R now how do I know pi because pi has already been defined here so this pi will be replaced by this value so 3.1415926 times R times R and what is this R since it has been called when it has been called with radius the value of radius will come here and return A now this return means where will it return this is another new word that you are coming across this return means it is returning to the point from where you are called okay the program was going on like this from here it called my function so after my function is executed it will return back to the same point all right so we have come across a new word and return is well returning the value A and that is being assigned to my variable area all right and then Pintef you can now understand it will what will be printed area is dash and this one will take some floating point number maybe 255.7 to whatever it is and this value of area will be filling up this place so this is another example of a C program so through these examples what we try to do is to introduce you to some of the very common names and common words and common features of the C programming language all right next we move to this that main is also a function I have already said that that main is also a function this is clear to you now but just quickly have a look at this here I have identified some variables I have identified some variables ABC which are integers and the same old program and this is also a function fine. Now here are some words of advice when we are writing a program it has got a couple of couple of things we have to keep in mind first it must be correct so that it can be executed by a compiler it should not it should adhere to the rules of the game the syntax and the grammar of the C language the other thing is also this program has to be understood by others because if they you have written a program and someone else wants to extend this program you are working in a big company and there are number of programmers and each of them are writing a small segment of the program and everybody must be able to understand every program therefore the programs should be written in such a way so that it is understandable more better understandable just like if we write in very bad handwriting write something here something there something there I will not understand it but if you write it nicely in a sequence it is much and with proper paragraphs etc it is much better readable and better understandable. So here we will see some some of the requirements for desirable programming style one is of course clarity right it must be very clear the program should be clearly written it should be easy to follow the program logic now here is something that is very important I insist on that there should be meaningful variable names for example I want to add two numbers and when I say some assigned a plus b or some assigned norm 1 plus norm 2 it is good semicolon please do not forget the semicolon okay in the center now this sum is a meaningful variable name it immediately tells me what this variable meant for it is holding the sum but suppose if I have written something like TT is equal to TT multiplied by T multi minus x then from this it is not very clear what is this TT why are you using this TT all right if say for example average I am computing average as AVG and that is x plus y plus z divided by 3 it is very understandable semicolon it is understandable I could have written the full thing average equals to this or I could have written AVG all these things are fine but if I had written p q r is equal to x plus y plus z divided by 3 then it is not very clear although I can look at this side and understand that okay therefore it is p q r is the average but this is not a very good practice okay now so make variable and constant names meaningful for example pi should be written as pi it is not good that 3.1415 all those that value I write as chi okay because that is not very clear what this value is standing for all right so here are some examples use ADI instead of A radius instead of R and program documentation we had said that we should be very generous about writing comments but if there are too many comments then that is also not very desirable now we are coming to a very important point that is program indentation what is that the structure of the program should be immediately visible we will give you some examples here is a good example here this is simple I am writing in straight line here there is a function this fine let us come to another example which will be better illustrating this this is a bad style you see here compare these two all right compare these two here there is a declaration then I leave some blank and then I put the actual code here these are the declaration so I understand this is a declaration compared to this which is easy to understand okay this is something this is something else compared to that here why I where I do not put a gap it is difficult to understand where the declaration ends and where the code starts okay so here is another good example say finding the largest of 3 numbers look at this as I said that if I have read this but one bad thing is here there should be a gap here there should have been a there should have been a gap here all right now here if a and b so that is the first diamond or decision box if a is greater than b and a is greater than c then I am doing something all right then I am doing this this part of the program otherwise I am doing this so here you can quickly looking at this indentation that this printf is under this and this part is under this that is very clear from this indentation I have shifted it a little bit and so immediately you can understand that this printf is if this condition is true that means this this part is for this diamond box to be true like that okay this is a good indentation good style now the same thing same thing would be a bath style if I write it in this from here it is not at all clear which one is corresponding to which one not very clear if I study it closely I will be able to understand sorry I will be able to understand that this printf this printf corresponds to this condition but immediately when I look at it it is not very visible so this is a bath style all right so indentation is something that is very much prescribed in good programming this becomes very important when we actually go for more complicated programs now coming to the c character set in an earlier lecture I had briefly talked about this just in English we have got a character set A to Z capital A to Z similarly C language has got a character set with which we make the words you have already seen them so the first thing is of course the upper case letters the lower case letters A to Z digit 0 to 9 and some special characters like you can see this hash we have already encountered this when we said hash include that is a part of the C symbol set percentage we have seen that when we say it percentage D percentage F we have seen that and this sort of symbols this we have already encountered all these are some certain special characters that are allowed in C all right. Now the identifiers and keywords we have also talked about that that the names are given to very different programming elements for example variables we already know constants we already know functions we have already seen each of them are given some names for example when we wrote my phone that was a name given to a particular function all right when I wrote AVG that was given to a particular variable that was the name given to a particular variable when I wrote pi that was the name given to a particular constant right so in that way we have encountered this so now the how there is some restriction on the names that I have also mentioned make consist of letters digits 0 to 9 and this underscore character with no space in between whenever I want to put space I will put in this underscore characters is very useful is very useful to put this underscore character here what is happening here. The first character must be a later the first character must be a later this character must be a later and identifier can be arbitrarily long but that depends on some C compilers some C compilers require recognize only the first few characters 16 or 31 and another very important thing that we had talked about that it is case sensitive a small area written in small letters and area written in capital letters or an area with a mix of small and capital are all different these are not the same this we had mentioned in the last class there are some keywords some words which are reserved for and have got some predefined meanings and have got some predefined meanings in C for example auto break constant float you know float has got a specific meaning in has got a specific meaning return you have seen it has got a specific meaning etc if you have seen it has got a specific meaning else you have seen it has got a specific meaning but within comments you are free because comment is never being so closely looked at by the compiler the compiler simply takes it and prints it out all right. So, this is another thing that you have to remember whatever keywords you face during programming you will ungradually remember that these are the keywords and that should not be used as a variable name. So, here we will conclude this lecture with some examples you can see some valid identifiers X is a very identity fair ABC now simple interest I have put in an underscored here A123 is fine because it is starting with A and alphabet list fine stood name is a student name very clear understood employee 1 employee 2 average employee salary see I wanted to write a big thing and I could take do that by instead of blank I just put underscore all right. Invalid identifiers are these and why because I cannot start with a sorry because I can start with blank sorry I cannot start with a numeral so this is wrong this is wrong because there is a special character that has been put in here I mean I could have written my underscore name my thing is also does not looking nice I could have done this my name but hyphen is not allowed hello is not allowed because here I have put in some special characters simple interest is not allowed because is a blank I cannot put in a blank but I could have written simple underscore interest that is quite valid area is not valid because it has got a parenthesis and percentage is using a special character here so these are invalid identifiers examples of invalid identifiers so you should keep that in mind we will continue with our programming lectures so till now what we have done is we have looked at some of the rules for writing the program and how the variables and the constants should be named we will continue with this.