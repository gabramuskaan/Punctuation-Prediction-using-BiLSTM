 So, we were discussing that how the today how a 2 dimensional array is stored in the memory. Now, we have already said that that is and 2 dimensional array is stored in a row wise form. So, we have to find out the address of a particular element in the memory. So, if we have a 2 dimensional array and the row and the column is specified. So, say here there are 1 2 3 4 5 rows and 3 columns. Say a particular element here has got the address, say the name of this array is A. This particular element has got the address A 0 1 2 A 2 3 2 A 2 2 right this element. So, it is stored how it is stored in this consecutive way. First, this one is stored then this one is stored then this one is to row wise right. So, if in my each of them have got a memory location. So, if the location of this is 1000 and if it be an integer array then this location will be 1000 2 this location will be 1000 4 this location will be 1000 6 1000 8 1000 10 right in that it will go on. So, little thought will tell you that if the starting address. So, what will be the starting address what will be the address of this it will be 1000 plus how many columns have to come for each column shift for each column what will be the address of this. 1010 1012 1014 1016 right actually this should be in the location 1016 of the memory. So, we start with 1000 and then since each of the elements each of the elements are taking 2 bytes. So, I will have to go for each shift 2 bytes and how many such shifts what is the distance from here to here element wise we have got 8 such positions right and so with that I can find out the address of this X. So, if this was X and this was element was K then what would be my address K into the offset is so many columns 2 3 2 columns sorry 2 means 3 columns per row and 3 such rows. So, it will be 6 rows. So, in general we can say that if X be the starting address of the array in the memory and C be the number of columns and K be the number of bytes allocated then the address will be X plus I into C plus J C is the column number plus J how many columns are there. So, if I go back to this if I go back to this I can say that how many columns C is each it has got 3 columns so K into 3 plus sorry 3 into K plus J right 3 into K means 2 plus J J was 2. So, that will be my result 1000 plus 6 plus 2 8 so that will be the location that I will be finding out. So, here that is the formulation X plus I into C plus J times K K is number of bytes allocated per element plus please look at this. So, the rows are the matrix is actually stored as A 0 0 A 0 1 A 0 2 so this entire thing is A 0 3 so 1 2 3 4 so therefore, columns in 1 row then the second row A 1 A 1 column 0 A 1 column 1 A 1 column 2 A 1 column 3 then I proceed in this way. So, this is the arrangement of 3 rows and each row having 4 columns and using this formula which is intuitive we can find out the exact location of a particular element. So, this part is row 1 this part is row sorry this part is row 0 this part is row 1 this part is row 2 you can see that this is row 1 column 0 row 1 column 1 row 1 column 2 so and so forth. Now, given so that is how it is stored and how we can find out what the address is but how do we read a particular array elements into a 2 dimensional array. We have seen that I can read one dimensional array the elements of a one dimensional array into the array by repeatedly getting the character from the user and storing it in the proper indexes and proper positions by varying the index right. Here also we will be reading one element at a time and we will store them. So, my array is say the array that I am storing is a i j having some rows and columns and i is the row index and j is the column index. So, initially in this fall loop look here there are there is a nested fall loop here. So, first I am keeping the i fixed for i equal to 0 now I come here inside this inside this there is a nesting of fall loop say I have got four columns. So, for j is equal to 0 to j less than 4 what do I do I scan F and a i j now each element here is identified by the row number and column number and so this one is and a 1 1 this one is 3 and a 1 3 in that way you do. So, now for j is equal to 0 I read the particular value and store it here suppose it is 5. Next what is done I am still inside this loop I increment j so j comes here note that i is fixed still how long will I remain fixed as long as I am inside this inner loop and how long shall I be inside this inner loop till j reaches the end of the number of columns. So, next I read the other value so it is 2 next I read the other value it is 7 next I read another value maybe 0 then it comes to 4 comes to the end of the row because all the columns have been filled up then I come out of this loop and again go inside this. So, i is now increment i is now incremented to this one and I again do the same thing inside this loop. So, this inside this loop is filling up a row and this one is filling up all the rows please take a little time to understand this this loop I am once again explaining this loop is filling up one row keeping i fixed i is fixed and in a loop I am filling up the values here here here here here and then I increment this one. So, this part for filling up all the rows one by one I come here again and again fill this up then I increment i and again fill this up again I increment this I come here and fill this up all right that is how we read the elements of an array. So, that is being what is being shown here the amperes and is necessary here just as in the case of an array it was necessary it is necessary here as well the elements can be entered all in one line or in different lines it really does not matter whether you type 5 blank 6 blank 7 blank 8 or you type 5 enter 6 center like that that really does not matter because we already know that every element will be stored in a row wise fashion. How to print the elements of an array again suppose I have got an array suppose I have got an array suppose I have got a two dimension array and I will have to print the elements I cannot just print the array in one shot I cannot do it. So, again here I will be fixed and then I will print say this is a 0 1 2 3 0 1 2 3. So, first a 0 0 will be printed whatever was the value here I am printing it here then j will be incremented. So, the next one that will be printed will be a 0 1 next j will be incremented. So, it will be a 0 2 a 0 3 so and so forth and then I will be incremented again in this way. So, it will be next printing will be a 1 and j will be initialized to 0 1 a 1 0 a 1 1 and like that it will be printed. Now, the elements are since it is a backslash you can see the elements are printed one per line because every time I am printing I am giving a backslash. So, although the my array could be 1 2 3 5 4 6 7 9 it will be printed as 1 2 3 5 4 6 7 9 because at every point I have given a backslash. Now, here what are you doing here in this case the elements will all be printed in the same line because I have not put the backslash in. So, it will be printed all the elements say sorry all the elements say 1 2 3 4 5 6 7 8 it will be printed in this way if that was the matrix then this part will be printed in one line and then I go up there is no backslash in this one will be followed and the entire thing will be printed in one line 1 2 3 4 5 6 7 8. If I had done this that first I I had this again 1 2 3 4 5 6 7 8 and I wanted to be printed in this way because here I have not given any backslash in it will be printed 1 2 3 4 and as it comes out of this loop it goes here and comes to the next row first thing that it does is print a backslash in. So, the control will come here and then 5 6 7 8 will be printed. Therefore, this is a better way of printing a 2 dimensional array so that it looks like a 2 dimensional array. So, that this will make the elements now the question is you just think how can you print 2 matrices side by side. So, suppose there is 1 matrix 1 2 3 4 and there is a character matrix A B C D how can you print them side by side what should you do can you think of that I mean if I say I have got 2 matrices 1 is 1 2 3 4 5 6 7 8 and another matrix is I have got 2 matrices I have got 2 matrices I have got say A B C D. So, I they are of different dimensions. So, first of all first of all how can you represent such a matrix say this matrix how you declare that simple this will be a character matrix character let us call this matrix let it be m m is 2 by 2. So, this is the that means, each element of this matrix will be a character and this is int let it be n 2 by 4 these are 2 matrices now you can think of how you can print 2 matrices side by side if I do look at this by this row by this I will first print 1 2 3 4 and then what should I do I should go to here I should again for j 2. So, this is the first one I should be is equal to j to m call might be j plus plus I will be doing I will be printing m i j. So, this will come immediately side by side if necessary I could have given another a blank in between and I could have printed this as a complete row next I go up and print this and this. So, I suggest that you try to write this program and run it and see whether you get a nice output or not now we come to a very well known problem that we often encounter matrix addition I am going to add 2 matrices this is a very simple problem so all of you know how this can be done. So, I have got a matrix of the same size 2 matrices so it is 1 2 3 4 7 6 9 2 and there is another matrix 10 12 15 13 13 13 13 13 13 13 13 13 now I want to add them and have another matrix first of all this is a matrix of 2 rows and 4 columns 2 rows and 4 columns. So, we can say that this a is a 2 by 4 matrix and this one B is also a 2 by 4 matrix now the sum I will store in another matrix whose dimension will also be 2 by 4 has to be and how is matrix addition done I will first take this element what is this element I am saying this element what is this element this element means a particular I j value 0 0 element I 0 j 0 from this array. So, I take this element 1 and then take B I j of the same I j value 0 0 1 add them together 1 plus 10 I get 11 I put that 11 in the I j value remaining same 0 0 of the C matrix. So, here it is 11 next I am increasing the index I here j remains sorry I am incrementing whatever I do I keep the I fixed and increment the j so I is 1 j is I is 0 j is 1. So, with that I take this value 2 and take this value with the same I and j value I is 0 and j is 1 add them so that is 14 and I store this value here in that way I go on for this entire matrix that is how I do the matrix addition. So, let us see how the code looks like for this and let us try to understand the code this much is ok in through STDIO dot H then my main program is continuing what is being done here I am trying to add 2 I am writing the program for adding 2 matrices of size 100 by 100 let us look at this 100 by 100 A matrix is of size 100 rows and 100 columns B of 100 rows and 100 columns and C of 100 rows and 100 columns and I have got other integer values P Q R P Q M N I am reading the matrices I am reading sorry I am reading M and N alright 2 values. Now, what is M and N M N although I have here recall the difference in the matrix is between I mentioned about the size and the dimension dimension is the maximum size the maximum size that it can have 100 and 100 are the maximum sizes of the A matrix and B matrix and B matrix. But actually I can have I may not need so many locations. So, what I can do I have got A has got so much size but actually I am filling up only these say these much. So, this is my M I am sorry this is my M and this is my M ok. So, my actual matrix is small and dimension is the largest size that I can accommodate alright. So, I read that actual value M N and then for P is an index P equals 0 less than M P plus plus Q. So, I am reading the matrix A and here you see I am not using the conventional I J indices. So, I am saying P is keeping account of my row and Q is keeping account of my column. So, for P 0 to M and Q 0 to N I am filling up the A matrix then I come here fill up this matrix out of this outer loop. This inner loop with this inner loop what I am doing I am filling up a particular row and the outer loop I am going to the next column repeatedly I am saying that. So, in this way I read matrix A here here I may read matrix B then I am doing the addition here. Again my the dimensions of the two matrices will be the same when I add and the result matrix will also be the same according to matrix algebra that is I am adding two matrices they will result in the same dimension matrix. So, again for P equal to 0 to M and Q equal to 0 to M I take C P C P Q. So, I have taken two matrices and now I am generating C matrix where this value this particular element is being computed by the corresponding element from A and the corresponding element from B being added I am filling it up and this is going on in a loop and so I feel this entire thing on. What is the last for loop this last for loop is nothing but printing the same array printing the array in the proper way. Now, here you please note that it is backslash end so it will come nicely after one row they will be a we will go to the new line and we will print it in this way. So, this is a matrix addition which is a very useful very common and simple application of our knowledge of two dimension array to start with. We will see other applications of this two in the future. Now, the other thing that will be discussing in the consequent lectures are next. So, we now have got an idea of one dimension array and we have got an idea of two dimension array. We have also seen strings and character arrays next will move to functions in the next lecture. We have already mentioned about the term functions while moving in the course of other discussion and we have already seen one particular function that is main function that is always that is main body of any C program and we have also seen some library functions. But next lecture onwards we look at if we have used a defined functions. We have seen some stored functions in the earlier lecture like string copy, string length, finding string length. Similarly, a user can himself or herself write a particular function of his or her own need. We will have to see why we need to write functions and how a function can be written from the next lecture onwards.