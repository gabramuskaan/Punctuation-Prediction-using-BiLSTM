 In the last lecture, we had talked about two different types of operators, relational operator and arithmetic operators. Today, we will be discussing about the third type of operator, which is known as a logical operator. Logical operators are also known as logical connectives. So, there are two essentially there are two logical operators in C. One is logical and and the other one is a logical or. Now, what do they do? They act upon the operands themselves, which are logical expressions. For example, let us say I am writing a logical expression temperature is greater than 50. Now, this will this statement suppose the temperature now is 40 degrees centigrade. Then temperature greater than 40, greater than 50 will result in false value. So, because a relational operator will always generate either true or false. And suppose there is another logical expression A times B plus C is greater than equal to 25. Now, this is another logical expression sorry this is another relational expression on the left hand side of this expression. I have got an arithmetic expression and on the right hand side I have got a constant and I am connecting them with a logical relational operator greater than equal to. Now, if A times B plus C is greater than 25 or equal to 25 then this will result in true. Now, I can connect these two, this one and this two together and write another expression like temperature greater than 50 and A times B plus C is greater than equal to 25. Now, this expression is a combination of two relational expressions and a logical operator or logical connective. This logical and means that this entire thing expression will be true or will result in a one if both of them are true. So, if the temperature is 40 then this will become false or 0 and if this is 25 then this is true but 0 and 1 both are not true therefore, this 0 and 1 will result in 0. But, suppose if the temperature was 50 and A times B plus C is equal to 25 or greater than 25 then this is true and also this is true in that case these two together and because they are ended then this will be true. So, the logical and operator what it does is returns a true value or one if all the components of the expression logical expression connected by the and operator logical and operator is true. Now, one thing you can note here that since this ampere sand is a character and we have already used this ampere sand in expressions like and scan F and we have discussed that this and actually means we are trying to get the address of a particular I am sorry I am sorry absolutely sorry I actually what I write is scan F etcetera percentage D and velocity say where velocity is a variable right. So, this and in that case use is used to mean the address of this variable velocity ok. So, in order to differentiate between this usage of and and the logical operator logical and is denoted as two ampere sands two ants. Similarly, logical or means that some expression say I have I write it in an abstract we say x expression 1 or expression 2 or expression 3. Now, this composite expression will be true if any one of them either expression 1 or expression 2 or expression 3 is true. If any one of them is true then this entire thing will be true. If two of them are true then also it will return true if all the three are true then also it will be true. But if none of them are true if none of them are true then it will not be true ok then none of them will be true. So, what is the difference between this logical or and logical and therefore, in logical and if instead of this it was written like if instead of this it was written like expression 1 and expression 2 and expression 3 this composite and expression would be true only if all these three expressions are true. So, that is logical or now what do they do they act upon the operands that are themselves logical expressions why logical expressions where from did I get logical expressions I got the logical expressions from relational operators for example, now I am writing some time is greater than 20 is a logical expression what is this this is a relational operator. But this expression is a logical expression why it is a logical expression because this will return only true or false nothing in between. So, t greater than 20 if t is time or whatever value t might be if that is greater than 20 then it will return 1 or it will return 0 ok. So, the logical connectives or the logical operators they are acting upon the operands themselves and the connecting them. The individual logical expressions get combined into a more complex condition that are either true or false ok we will see some examples. So, logical and the result is true if both the operands are true or for two for two operands if for three operands if all the operands are true it should be corrected as if all operands are true and logical or the result is true if at least one of the operands are true if at least one this is most important. So, let us look at the truth table here x and y any of them can have the value false or true accordingly we can have four combinations x false y false x false y true x true y false and both x and y are true. Now, if I carry out the logical and then for all these cases say false false the result will be false or 0 false and one true still it will be false because here I want all operands should be true. So, one is x is true y is false the result will be false if both of them are true the result will be true while in the case of or x or y will result in false if x is false and y is false. But if x is false and y is true will get a true because I am interested in getting at least one to be true if this is true and this is false and also true if both of them are true then also it is true. So, I think it is clear to you what is made by the logical operators and how we can combine logical expressions based on that. Now, we have so we have seen three types of operations one is actually operators one is the arithmetic operators. The next is relational operators and the third one is logical operators. Now, arithmetic operations use of arithmetic operations lead to arithmetic expressions. The use of relational operators lead to logical expressions why logical expressions they lead to true or false value right logical expressions and use of logical operators will combine and get more complex logical expressions complex or let me let me not write complex let me write composite that communicates the meaning better composite logical expressions composite logical expressions composite logical expressions. So, we will see the use of this pretty soon when we will be looking at the control operators right. Next just to wrap up the things let us come to the input output statements by the way besides this besides the arithmetic expressions logical expressions we had seen another type of expression those are assignment expressions or assignment operators. But that means the left hand side is an expression and right hand side is a variable we assign the result of the computation of the right hand sorry I just said the opposite the right hand side is an expression on this side is an expression and here on that right on the left side is a variable and we compute the expression and assign the value of that computation to this variable and this is the assignment operator ok. Now, besides that we had seen two other statements one is the printf statement we have seen that performs the output to the standard output device typically when we declare a steady i o dot h then by default it is taken as the screen and the other one and it requires a format string in which we can specify the text to be printed out and the specifications on how to print the values like printf number is dash and that dash can be filled up by percentage d for that means the specification is that an integer can come here and then you remember what this means this means I am going to the new line all right and then followed by the number the format specification causes the value listed to be embedded here I have discussed that that you can consider this format to be a placeholder all right the number is dash and how can this dash be filled out the dash since its percentage d some integer value can come and fill it up right we have seen that. The other statement that we saw is scanf that is for reading the values. So, it performs input from standard input device normally by default it is a keyboard and then it also requires a format string and a list of variables like it is required to put an ampere sand before the names of the variables we have also explained why that is so the reason is that this ampere sand essentially means the address of that variable where the value that is being read will be put ok. So, here are some examples scanf percentage d and size that means what that I am reading in a variable size size is the name of a variable and in which I am putting in some integer value all right. Similarly next care say is a say this one is a character variable. So, I am specifying that only a character can come in here and that is why I have put in the specification percentage c percentage f means some floating point number will come here, but in all these cases this ampere sand means the address of the corresponding variables all right. Here percentage d percentage d means sequentially I am going to read two integer variables a and b. So, all these we have seen and you will be best learning this by practicing it time and again and we will see a number of examples and in the in this course there will be quite a few assignments which you will have to do ok. Next we will move to next we will move to a new topic which is the control structures and control statements ok. We have seen if you recall in a flow chart let us go back to the flow chart where we have got some computation statements where we are doing some computations and we usually carry out one statement of time other right that is how we do and in that we go till the end of the program. For example, read number 1 read number 2 etc divide add the numbers and divide the numbers to get the average. So, when we computed the average it was something like this and at the end we did some print f and in the meanwhile there were some reading the numbers these were some of them were input some were computations right. But it was a complete sequential thing but if you recall the other type of the other type of flow charts that we had seen there we had started we did some computation and then we took some decisions and based on the decisions I have sometimes gone back to the earlier operation that earlier thing that I had done and otherwise I would have followed this path. Typically in the example that I had seen we just see the pseudo codify right say for computing the average of 3 numbers I will be read number 1 read number 2 read number 3 and then some equals to number 1 plus number 2 like that I add them and then I compute the average to be some divided by 3 right. So, and then we print the sum print the average so this entire thing is going in a sequence all right just one after another one after another no change in the path but in this case for example when we try to if you recall when we are not writing the this program in this form of pseudo code instead I initialize say count to be 3 then read number 1 and initial count here and say sum was 0 assign 0 and then sum is let me just make it just num I am reading one number and sum plus num and then count I decrement so I may count to be count minus 1 because I have one I have already read now I check if count is greater than 0 then what I do in my flow chart I go back to reading the number again otherwise otherwise else I come to the computation of the average right otherwise so if as long as count is greater than 0 I am continuously doing this thing right these steps. So, here at this point you check that I am looking at the value of count and depending on the value of count I am deciding whether I will be going in this direction or I will go back and change the direction of the flow. So, that means as if the at this point the the execution is undergoing a decision making to decide which part it will go through this path or this path as if you are count therefore, you are controlling the flow of the program either in this way or you change the path we will see that we can change the path in two different ways one is that sequentially I am coming and I may go ahead I can skip some of the operations and I can go jump forward that is also a change of the path this dotted line is showing the normal sequential execution or could be that from here I can go back to another path. So, these are the two types of change of flow change of flow that is that can be resulted in and that can be resulted in using the control structure. So, we will soon go into the details of the control structure and see how such control structures or change of the sequential flow can be achieved in any programming will exemplify as we are doing for all other examples using the constructs of C, but that does not mean that it is restricted only to C it can be there are similar control constructs for other languages as well we will come to that in the next lecture.