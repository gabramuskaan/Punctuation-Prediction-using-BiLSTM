 So, we are looking at a sample C program and as we had discussed in the last lecture, we have a structure as is shown here. You can see that there is a main function here, a main function is there and that main function is covered by two parenthesis. Now, we can see that we start with a header file that includes STD I O dot H and STD I O dot H stands for standard I O. That means, whenever we will get some instructions to carry out input or output that will be in reference to or with respect to the standard input that is a keyboard that means, the data will be taken from the keyboard and if anything is to be printed, it will be printed on the screen. So, that we that is a default thing for any C program, we have to put in STD I O dot H include hash include this is known as this red hash include STD I O dot H unless you want to take the file, do not want to take it from the keyboard or do not want to print on the screen. Next thing is that the main function which as I said in the last class that there must be a main function and the main function will have a place for the parameters you can see here for the parameters here which may or may not be empty. The third point is the structure the overall boundary of the main function or for that matter for any function there should be a boundary specified and that boundary specified with by these two curly brackets. Next we come to the statement as I had said that just like any other language C also has got some words which are understood by any by the compiler. PrintF is one such word which is a statement for printing the sentence that is given within these double codes. You can see the double codes here and so what will it print? It will print our first look at the C program here as is shown here that will be printed. PrintF within code here there is a code end code and here is a start code our first look at the C program. In addition there is I am sorry let me go up. We can see two special symbols which are these backslash ends. Let me just clear it up. Here you can see this backslash end something of this sort. This means go to a new line or end of line. Now suppose let us see suppose I had something like this I had printed something all right I had printed something there is a screen I had printed a brown fox. Now after I printed that means the computer printed you can see where the my pen is my pen is lying here right my pen is here. Now if I say backslash end this is this is no red as backslash backslash end that means my pen will come to the beginning of the new line and here I will write our first C program and by default my pen is here but since I have given another backslash end the pen will come here. So next time if I again start with the backslash end it will come to the new line and if I do not give a backslash end it will continue from here. You will understand this more when we look at more number of programs it will be much more clear to you. So this is a structure of a very simple C program we will see more of this. Now here is another program again now it is easier to understand you have got an include STDIO.H which has to be there for any C program there will be a main function as is being shown here and there are parenthesis between these two the program should be written this is the boundary of the main function. Now here there are some more new things which are being shown to you in the form of example. So you see the first line is INT A B C what is meant by that is that I am I will be using in this program three variables A B and C and each of them is of type integer. Now you are already acquainted with the term variables but you are probably not acquainted with the term type of a variable. So quickly let us go to that we have got variables variables variables and the variables can be of different type also constants can be of different type. For example the variables can be of type integer for example 7 17 all these things 256 1099 all these are integers another type of variable can be real numbers which are say 10.5 6.325 fractional numbers right these are real this is also known as in C as floating point numbers now integers of these reals or floating point numbers of these similarly I can have characters like say x y p whatever these are different characters or maybe and is a character. So each of any of these alpha numerics and all those can be characters now. So we know what is an integer what is a real what is a floating point what is a floating point what is a character now a variable is of type integer what does it mean as you know a variable is nothing but a memory location right it means and suppose this variable I say variable A is of type integer. So there is a memory location corresponding to A and this memory location can only hold values which are integers. So 57 I can store here but if I try to store 57.5 here it will not store 57.5 because it has been told to be an integer. Similarly if I say variable B is of type floating point I am in short I am writing float that means this variable B can store a floating point number so 57.5 can be stored here even if I try to store in B 57 in B if I store 57 just 57 then that will be stored as 57.0 all right. Similarly there can be types of characters now depending on the type of the variable the compiler assigns different sizes of memory for the different variables for example in standard C compilers and it is a convention that for an integer two memory locations are allocated. Now how big this will be say sometimes it it my each of these memory locations can be 16 bits in that case I am using two 16 bits that means 32 bits to store an integer whereas for a real number now this is a convention for locations are used for storing a real number all right. So 64 bits 16 16 16 16 so that will be for real numbers okay. Now so depending on what I write what how I define the type of the variable when I say A B C I also say what type of variabilities is it an integer is it a real or what it is. Now if you come here we will see that here I have written float and I did not write floating point number. Now in C in order to specify variable to be real we declare that to be float say P Q that means semicolon that means P and Q are two variables which are of type floating point number right and if I write int A B C that means A B and C are three variables which are of type floating integer type int. So we do not write integer we just write in C int okay. Now obviously then for P how many bytes how many depending on how many bits will be given how many memory locations will be given for P may be 4 Q it will be 4 but for A B C it will be only 2 all right. Now let us therefore go back to the program here here we find int A B C now this statement this is called a type declaration all right. This is known as a type declaration okay this is the first statement. So I have declared the variables now in C program before a variable is used it should be declared about its type okay. The other thing is you can see this. So here you can see A has been assigned 10 B has been assigned 20 that means what that means in the memory location A corresponding to A memory location corresponding to A 10 has been written and to the memory location corresponding to B 20 has been written all right and this statement C assigned A plus B I had explained in another lecture that that means this data this value 10 and this value 20 will be taken out on the left hand side from the corresponding memory locations they will be added and the result will be 30 all right the result will be 30 and the 30 will be written into the location C. So this will be 30 okay this much is clear now what about this line I know that a print of statement just tells me that I have to print whatever is there in the code. So how will the print look like please note the sum of percentage D and percentage D is percentage D this is equivalent to writing this the sum of dash and dash is dash there are three gaps one here one here and one here now how will these gaps be filled filled they will be filled by the values of A B and C respectively each of these dashes will be filled up by the respective values of A B C. Now this percentage D is a format statement it is saying that this gap can be filled by a digit or by an integer this gap can be filled only with an integer. Now here I A is an integer therefore this gap will be filled with the integer value 10 and percentage D and is being printed as it is because it is within this double code and dash this dash will be filled with another digit this will be filled with another digit and what is that digit the second space B and B is 20 so it will be 20 is what is A plus B is C and what is the value of C the value of C is 30 so this is what will be printed alright. So this is how we print a sentence where I want I have got some places for different variables and these places will be filled up by the values of the variables whose names are being specified here. I repeat these gaps will be filled by the values of the variables whose names or whose identifiers are being specified here and the type of this variable and the specification of this dash should match. So now so it will be printed some of 10 and 20 is 30 now coming to the third sample program. Now this is a little more complicated and this is trying to find out the largest of three numbers that means what we had done in a flow chart exercise finding the max of three numbers. Now that was discussed using flow charts and pseudo code and here we are discussing that using a program a C program how is that idea translated into C program again let us start with again even before that I would like to point out something again let us revise the structure of the program we start with a we start with a header stdi.h now we start we put in a comment what is this we saw in the last class it is a comment this comment is just telling us the compiler has got nothing to do with it is just telling us that this program finds the largest of three numbers then as usual we have got a main function which must be there and there should be a parenthesis which is delineating the boundary of this program. Now the and also we have seen this I am using three variables A B and C and I have put in the type of that the next new thing that is coming up is here scan F this is an input statement for reading three variables from the keyboard. Now recall that I said that for every language there are there is a vocabulary there is a set of words that the language understands. So in C in an earlier one we have seen in an earlier program we have seen the statement print F right we had seen the program print F. So print F is a particular word now we now encounter another word int is also another word int is another word which is specific to C and the meaning of this every word we will have a meaning. So this means that whatever follows are variable names of type integer whatever follows this word int are variable names of type integer okay. Next new word that we are getting is scan F just like we had seen print F earlier alright print F is a word that tells us that something is being printed here scan F is an is a word that tells that whatever is inside this parenthesis inside this parenthesis is a input statement. Now let us study this a little bit here. Here again you will see that there is a percentage D percentage D percentage D percentage D is within quote and you know that percentage D means it is a specified for an integer some integer is being will be read scan F means say assume it is reading. So therefore it is something like this I am going I am creating as if fee places because corresponding to each percentage D percentage D percentage D percentage D within the quote I am creating fee spaces and followed by that let us go back to this I am sorry here there should be no comma alright I am just giving 3 percentage D's. So let me go back here so it should be within the quote here is scan F within quote percentage D blank percentage D blank percentage D and the quote is closed comma that means as if just to understand I am creating fee spaces each of which are ready to accept an integer and where will those be stored here I am writing and a and B and C. Now here I will request you to just forget about this amperesand sign forget about this for the time being this will explain a little later just assume that A B and C but before that for any read statement we will have to put an amperesand before the variable names there is a reason for that. What is the meaning of this sentence the meaning of this sentence is that there are 3 places which are ready to hold 3 variables which will come to the locations A B C. When I am reading as if I am reading from the user 3 variables A B C. Now why I put that amperesand will explain a little later. So 3 spaces have been created and what are these spaces these spaces are nothing but these 3 memory locations which 3 memory locations whose names have been specified here. So this is something that you have to be a little careful and practice a little bit it will be very easy later on. So within the quote I specify the format, specify that is integer in this case percentage D and these are the variable names. Now let us go back through that anything that is new here. Now a new word we are encountering here if is a conditional statement you need not bother about it if you recall we had in the flow chart we had a thing called diamond where we are taking some decisions based on some conditions yes and no. We are doing that here we are looking at some condition here if A is greater than B and A is also greater than C if that is yes then I am printing that A is the largest number try to apply simple logic here if is a conditional word condition is a conditional word and this entire statement starting from if to this semicolon is one statement and where I check the condition whether A is greater than B and A is greater than C if that is so that is if the diamond comes out with that yes then I am printing that the largest number is A otherwise that means if the answer to this is no otherwise I am again checking again if again I am checking another condition I am checking another condition here what do I what am I checking is B greater than C yes if yes then I am printing the largest number is B otherwise this yes otherwise if it is no then I am printing the largest number is C. So we are encountering some new words if and else if means in if in the diamond result of this diamond box is yes then this statement will be executed otherwise that means if the answer to this diamond box is no then this part will be executed this part will be executed. Now here again the second block I am checking if B is greater than C again if this is true for this condition this will be executed when this condition is true or yes if it is false then this statement will be executed. So it is a little more complicated program but a very useful example all right. So we see the comments we have already mentioned now we are coming to another program. This is using what we earlier had said that a big machine can be divide into sub machines. So a big program of this one is not a big program but any program can be broken down into different functions here is the main function this one is main let me draw it a little nicely. Here we have got a main function and inside there is another function whose name is my function. Now let us look at this. Now first here there is another new thing we are introducing and that you should understand that is define pi to be defined pi to be 3.1415926 that means this wherever in this program this pi will appear there we will replace it with this value 3.1415926 but inside the program I will not write pi I am just defining it once for all and this means I am replacing pi by this value before the compilation is done. So this is again a pre-processors statement we will continue with this example in the next lecture.