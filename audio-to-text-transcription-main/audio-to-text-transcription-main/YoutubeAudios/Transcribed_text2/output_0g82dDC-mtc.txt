 In the last lecture, we had discussed about two new operations that is post increment and pre increment. Here, you can see that we are calling them as prefix operation because the operator is before the operand. Here, you can see also the operator is before the operand and what is the operator? Operator is implementation, but that is being denoted as plus plus twice the addition operation or twice the subtraction operation. And in this, here we are talking of we are calling it to be post-fix operation. Here, you can see that the operand is coming first and the operators are following. So, the operators are following that. So, that is why this is known as post-fix. Here also, you can see the operator operand to be I followed by the operator minus minus. So, that is why these are called post-fix of prefix. The significance of these as we discussed in the last class is that a particular variable will be first implemented here in this case. It will be first implemented and then used in the operation. Here, it will be first decremented, then will be used in the operation. While here, it will be first the operation will be done and then the decrement will be done. Here, first the operation will be done, then the increment will be done. So, we can so that is what we have written here first increment or decrement and then use it in the evaluation. Here, increment or decrement is done after being used in evaluation. So, it will be clearer when we come with some examples here was the examples that we have shown in the last class. P and m are two variables. M is initialized to 1 and when I am saying plus plus m that means, first I increment m. So, m will be here you can see so m will be here you can see as soon as I do that m will become 2 and then that is being assigned to t. So, t becomes 2 whereas, here you can see that m is 1 and we have done post increment. So, first the assignment operation will be done that means m was 1. So, sorry m was 2 here after this I am doing this. So, m will be so t will be 1. So, what will happen is m is 1. So, that m will be assigned to t. So, t becomes 1 and after that m will be incremented. So, ultimately m will be 2, but t will be 1. So, if you look at these two you will find the difference between them. Let us have a few more examples. Suppose we have got two variables A and B was initial values at 10 and 20. They are initialized to 10 and 20. Next we carry out look at this operation very carefully it looks a little clumsy. Here there are two operators one is this one another one is this one. So, this is pre increment. So, this is equivalent to x is assigned 50 plus as if I have put a parenthesis that is not required that first A will be incremented and then that will be added to 50. So, what result do we expect A was 10, A was 10. So, first that will be incremented. So, that will be 11 and that will be added to 50 and so x will be x will get the value 61. So, x will get 1 that is what will happen in this case. So, A is 11 and x is 61 as we have shown. Now, let us take this again this is the this is post increment. So, what do we expect here? Let us see what will happen in this case first here after the operation is done then A will be incremented. So, what will happen? x was 50 sorry I am sorry A was 10 and I am adding 50 and 10 and A that means 50 plus 10. So, that becomes 60 and that 60 is being assigned to x because the assignment operation is taking precedence over this post increment. So, we get x to be 60, but I have my job is not yet clear because after A is participation in this operation it will be incremented by 1. So, A was 10 then will be incremented by 1. So, it will become 11. So, consequently this is the result what we will get. Now, let us see what will happen in this case. Now, let us see what will happen in this case again here what do we expect to happen? A is 10 as usual A is 10 and B is 20. A is 10 as usual A is 10 and B is 20. What is being said here? A is post increment, but B is pre increment, pre decrement. So, first B will be decremented. So, B will become 19. Decrement means by 1. So, it will be decremented it will be 19. It will be added to A. What was A 10? So, these two will be added and what is that 29 and that 29 will go to x. So, x will be 29 and then my job is not yet clear and not it over. So, this will be incremented and A will be 11. So, this is how the thing will happen. So, the result that we get in this case will be B will be 19 because B has been decremented. x will be 29 and A will be 11. I hope you have understood the flow. So, now this is another one here we really do not know what to do because here I am implementing pre incrementing A post incrementing A here. Now, I will take this value of A. Now, what will happen? Suppose the problem here is suppose A is let us take the case here A to be taken as usual A. So, again now first I will decrement A. I will increment A. So, A will be 11 but A was this A is not incremented. So, A minus 11. So, 11 minus 11 will it be 0 and then this will be A will be 12 or which one will be done first. This is a particular scenario. For the same variable if the post incrementer, post incrementer given often that is implementation dependent and the compiler does not take it well. So, it often results in undefined value. So, you should try to avoid this as much as possible. Actually, you should not use this. You should use you can use this pre increment post increment. But as I said in the last class, I strongly suggest that the initial phase of programming you avoid using this pre increment post increment operation. Instead, although it will be a little laborious you write x assigned x plus 1 or x assigned x minus 1 for pre increment and pre increment. But it is good to know that C allows us with this phase. Now, here is another one which at the initial phase you should not try to use unless you are very confident. We know if condition then we do something else something. So, there are three things. So, this is the condition. If some condition then although we do not write the then, then we do some operation else we do some other operation. Now, the same thing can be written. So, it is call it a termed operation, conditional operation. Here we write it in a different way just to save space or now size I mean the size of the program. What we do here say grade greater than equal to 60 print a past otherwise print a field. So, this means here this is the part is the condition part and this part is the part that will be computed if the condition is true and this part will be computed if the condition is false. So, this is equivalent to writing if grade greater than equal to 60 print f is equal to 60. So, this is the past else print f failed. This is equivalent to that. So, what is happening here in this example. So, the general syntax is if there is an expression if there is an expression there is a condition expression then we carry out if that is true then we carry out expression to otherwise if it is false then we carry out if it is true then we carry out this part this part that is the condition expression. So, this is the condition expression if there is an expression if there is an expression then we carry out if that is true then we carry out this part this part that is following interrogation mark and we carry out expression see that is the expression that is following the colon mark for the else case or if the condition is false. So, this is again writing that if then else in a cryptic shorter way this is known as turn in turn a conditional operation. But again I say that this is a specialty of it is good to know that but initial phase at the initial phase of programming I discourage you to use this. So, here is an example what will this be can anyone tell me we are computing the interest on the amount of money you have got in bank this means here let us look at this part this is a turn ready operator if the balance is greater than 5000 then you compute balance times point 2 that means 20 percent of the balance or compute 10% of the balance if somebody has got a balance 6000 then have 20 percent of that computed and assign it to the interest part. So, you see a bigger statement if balance is bigger statement if balance is greater than 500 then interest equals balance multiplied by point 0 to else interest equal to balance multiplied by point 0 1 all these things can be done in one single sentence or one single statement using C. So, that is why some people prefer to use such turn ready operators and you will also certainly use it but when you are very confident about your program. So, this now we come to a new construct in order that is the switch construct now in order to understand thus let us quickly go to the flow chart for a while see I draw a flow chart like this I am evaluating some value here all right or maybe I get some value from the user here I read some value I make it clear I read some value from the user all right something read color now here depending on the color that the user supplies earlier in this decision box whatever you doing we were either going for true or for false now here what we are seeing if the color is red then we do something things here depending on the color that the user supplies earlier in decision box whatever you do and you are either going for true or for false now here what you are seeing If the color is red, then we do something. If the color is blue, we do something. If the color is magenta, we do something. If the color is orange, then we do something. If the color is violet, we do something. So, the same diagram I can draw in a different way. There is, I am reading color and then as if I am coming to a switch box. Think of this to be a switch box, where number of switches are there. And, number of switches are there. Now, depending on what value of the color is coming. So, this may be the red switch, this may be the blue switch, this may be the orange switch. Depending on which switch, which value is coming. So, let the value be V. If V is R, then this switch gets closed and we follow this path. If the V is blue, then this switch gets closed and we follow this path. If V is orange, then this switch gets closed and we follow this path. That is why, because of this analogy with switch, this statement is also known as switch statement. This is also very much used for branching. Branching we have seen with if L type of thing. And, here also we will see another variety of a C construct called switch using which we will do that. So, let us see here. Now, let us look at the construct of this. The syntax of the switch statement is switch expression, then case expression 1, expression 2. Let me give an example first, then it will be better. I will come back to this. So, here is the total switch structure. It is a multiple selection structure. So, I come to this point, switch if the case is A, if it is the case that the color is red like that. If the case is A, then I take the case A action and then come out. Otherwise, I take the case B actions. If the case B B, then only I will take the case B action and then come out. Similarly, if there may be different cases. So, what we are getting here is an example that we are showing here. What we are getting here is using this case construct multiple branching we are accommodating in one shot. Let us look at this. I was giving an example with color. Here it is an example with a later. So, I have read some later from the user. Some later has been now that later can be anything A to Z say A to Z. So, if the case is that the later is A, look at how it has been written, K A. Before that switch, what is my variable on which I am switching? Switch on variable later. In the earlier example, it was switch on the variable color. So, here we start with switch on the variable later and what are the possible switches? I encapsulate that in two places just as we do. Now, within this I am taking multiple decisions. Multiple possibilities are there. Multiple possibilities for example, if the later is E that means, if it is a case that the later is A, then we put a semicolon. Then I write down print a first letter. So, what will be printed? First letter and then there is a break statement. What this break statement does? That you execute this and then you come out of this entire switch box. Come out here. It means, join the next statement. If the later was B, then here it is not written. I am writing K S B print F. Second letter, backslash N and then break. That means, if the case is B, then I will print this and after that with a break, I will come out of this. Now, after that I have not written anything else, but I have written K S Z only this K S Z. Print F last letter as is shown here and then break. Now, if somebody this later was P, if this later was Q or some other alphabet, sorry, I mean anything small alphabet or capital alphabet X whatever, in that case, if it is B, then I will write this as K S Z. Now, if somebody this later was P, if this later was Q or some other alphabet, sorry, I mean anything small alphabet or capital alphabet X whatever. In that case, what do I do? This one only tells me what I can do if the later is A or if the later is Z or in my case, if the later is B. But, if it be something else otherwise, then we use this statement called the default statement. If anything is other than what has been specified here, then we will say that it is some other letter and then break. You see here, if the later is A, then only I entered here and then went out. If the later is B, then I only entered here. If the later is C, then I will come to default. If the later is C, it is not specified here. I will come here and I will F K. I will do it right. It is an intermediate letter and then come out. So, with this understanding, if we can go back to the earlier slide, the flow chart, then we can see that the flow chart will be something like this. If we start, then we evaluate expression. If we evaluate expression, then we come here. If it is equivalent to case A, yes, do something and then break. Otherwise, it will come here. I am just doing this. If K is Z, if true, then do something and then break. Otherwise, so this is true, this is false. Otherwise, default, I will come here, do something and then break. Now, all these breaks, all these breaks brings me to the next statement after the case statement. So, anything that is here, whenever I encounter a break, this brings me here. This also brings me here. And I continue following the sequential nature of program from here. So, we have seen. Here is another nice example. You can look at it. Here, switch, I am switching on an expression. What is that choice? Two offers. Now, this has got some multiple parameters into this. Let me take it up in the next lecture so that I can devote some time on this.