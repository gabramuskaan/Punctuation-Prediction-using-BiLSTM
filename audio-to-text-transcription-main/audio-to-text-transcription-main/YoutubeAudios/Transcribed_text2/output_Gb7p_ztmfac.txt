 We have seen functions in the earlier lecture and we have also seen we tried to solve a problem with where there were names of the students in one array and the marks in another array. And we tried to find out, tried to print out the name of the student who got the highest marks. So, for that we had two different areas. Now, the same thing I can do today, say I have 10 students and each of them have appeared for, each of them has appeared for four subjects. All right. So, let us say there are five students and each of them has appeared for four subjects. So, how do I what would be a convenient way of representing them? One convenient way of representing them would be to have a two dimensional matrix, two dimensional array where on this side I will have the role number of the students, which is an integer and I have got five students. So, one, two, three, four and five students and the marks as the columns. So, for any problem solving, we will have to think of how can we represent the data so that our computation is made easy. So, that our computation is facilitated. So, suppose there are five students say role number one, role number two, role number three, role number four, role number five and for each of them, we have got four columns for the four subjects. Suppose the subjects are say language, science, mathematics and say history, four subjects. And so, how would I read the marks? How would I first of all store the marks of the students? You can very easily understand now now I am not writing the program. I am leaving the writing of the program to you, but let us try to understand how it can possibly be solved. So, I will have a function, I can write a function of acquiring data. What will that do? For on this side, I can have an index i that will talk about the role that I am talking about that means, with student I am talking about. And another index may be j or instead of i j, you can say role and marks that is also fine. So, keeping i fixed and then you can fill up the row of the marks of the student. So, how would that program segment look like? That program segment will look like for i assigned 0 i less than equal to 4 because there are 5 students i plus plus that is for 1 row for j equal 0 j less than equal to 3 because there are 4 columns j plus plus scan F. Now, you know what to write within the scan F. So, in that way I can read the marks. What I was saying is that instead of this, I can say for I can be very clear about it for role equal to 0, role less than equal to 4 role plus plus sorry, role plus plus and for j similarly, I can make marks. So, marks 0, marks less than 3, marks plus plus etcetera in that way I can fill up the table. So, now in that way I can fill up the table and say I get the marks as 50, 25, 70, 35 like that some numbers. Now, I can have another function that will find out the total marks of each student. So, right now I do not have a space for that. So, I can keep that in mind when I am preparing my table then I can have the fifth column for the total marks, right. Now, I will pass on I have read this. So, first of all I in from my main program, I went to a particular function I called a particular function which acquired the data and filled up all these say 70, 20, 90, 15, 35, 75, 90, 80, 20, 25, 60, 30, 10, 20, 30, 40 like that that it has been prepared. So, quickly let us see what we did we had we entered into a main function and from the main function I called invoked a function which is acquired data and what should the type of that function be acquired data is it returning anything? No. So, it should be something like void acquired data d and what is it acquiring the data in the integer array, int say let us call that array a and there should be it is a two dimensional array. So, I should have something like this just I am writing clearly int a if that array was a that was the parameter. Now, so here that was array a and here it has been called like acquire data say my array and also the size has been specified the size is suppose globally specified. So, I get that array size suppose it is defined that role size is 5 and subject size is 4. So, I know but this this says subject size plus 1. So, I needed one more. So, I can I can go here and from there I returned here and then I can call another find total of my array. Then what will you do? Essentially, I come to this and what does that function do that piece of function that is finding out the total of each student. So, that will again be a for look like the one that we had done earlier and I will add keep I to be fixed and add this and write the total here. Now, I could have kept it here or I can have another array total. Let us do that. Suppose, I am not having I am just having the marks here and the total array is not here, but a separate array altogether. So, I have another array which is total. So, I can have the sum of each of them being passed to this. So, in that case when I am calling when I am calling when I am calling find total, then I am passing on this array as well as the total array 2 arrays because I want to put the sum on the total array. With that I can find the sum of this sum of this sum of this sum of this sum of this and then I can make another function where it finds the max or whatever I want to do. So, accordingly the point is that for each of the activities, I can make small small functions. One is for acquiring data, one is for finding the total, one is for finding the maximum number or maybe some other things also sorting and all those. I can do I can find out the failure list another function. So, I can have a complete set of small small functions each independently done say, did acquiring data, finding total, finding max all these and they are communicating through a main program and the main program my data is one array. So, let me let me draw the data using red. So, here I have got my array which was called my array, array which had the size 5, 5 and 4 and I had another array total, total which is a one dimensional array, how many 5 students. So, these two. So, the main function is invoking from different points for different tasks these functions and this function is working on this array shared array. This function is working on this array and generating the total, maybe this function is doing something else. So, the these arrays are being shared by the main function and the small functions that is how using functions I can divide a task into smaller short tasks and can do it very nicely. Now, with this now let us move to another problem one a version of which we had encountered earlier that is searching an array. When we have got an array for example, here when we found say suppose I found the total here I found the total and from there I find out which one is the maximum or is it that if there is any student whose total is less than 100 I want to test that. So, I have to search this array similarly I can search if there is any student who has got in science more than 90 I can search that along this array. I find if there is any 40 is the pass mark if there is any student who has not passed in maths I find here there is a failure case. So, for that I need to do a search so search is very fundamental search is absolutely fundamental to computation and so first we have already seen linear search but once again have a journey through that. So, we know that in a search we are given a key which we are searching for a particular key that we want to find out if the key is present in the array then we have to say that the key is present and also the position where the key is present. Now, we will consider two cases one is that the array is unsorted what do I mean by unsorted by unsorted I mean that the elements are not in any particular order for example, think of this array where the elements are 5, 3, 2, 9, 8, 17, 6. Now, this array is not in any increasing order not in some decreasing order it is decreasing here decreasing here again increased here decreased here again increased here decreased here on the other hand if the array was something like this say to 65, 5 65, 6, 8, 9 and 7. 17. Then this array is sorted in an increasing order that as I go from top to down it is in an increasing order it is sorted in increasing order. It could be sorted in the decreasing order also. Like say for example, I start with 17, then 9, then 8, then 6, then 5, then 3, then 2. So, this is as we go down the numbers are decreasing. So, these are ordered or sorted and this is unsorted. This is also sorted, but in a different order. So, I may have to search from an array that is either unsorted or sorted. So, first let us think of dealing with unsorted arrays. And we will look into the linear search algorithm for doing that. And if the elements are sorted we have got a more efficient search algorithm called the binary search. So, linear search we have already seen in an earlier lecture. So, the basic idea is we started the beginning of the array. So, if we come here we start say I want to search this. I start at the beginning of the array. I start here and I have got a key. A key is there say key is 8. So, I start from the top look for the availability of look for the element matching the key. 5 is not matching 8. Then I go on increasing this index and go on comparing till I find either if 8 is not there I will come to the end of the array. All the elements have been checked. I have not found the match or when I get the match I will say that at this position I have got the key matching. So, we will start at the beginning of the array and inspect every element to see if it matches the key. Now, if I want to do it in this way we often talk about time complexity it is a measure I am not going into the formal way of the measure the measure of how long an algorithm takes to run. So, as you can understand if there are any elements in the array then the best case would be let us you will find out what it will be. Say I start with this it may be suppose the key was 5. Suppose the key was 5 in that case that is the best case with one one comparison I find it how many comparisons how many inspections I needed only one. So, that is the best case the worst case could be if my key was 6 if my key was 6 then I would have to inspect every element and since there are 7 elements here I had to carry out 7 comparisons 7 inspections till I found the match. So, the best case would be first element 1 inspection 1 search operation and the worst case would be no match found either the last element or not at all found or even after that in that case I need n search operations. So, the best case is 1 the worst case is if the size of the array is n then n. So, the average would be n plus 1 by 2 search operations n plus 1 by 2 that is a cost how much time that gives a measure of the time the algorithm will take to run. So, now we are trying to write it we had explain this algorithm also earlier but now that we have done functions let us write a function for linear search why am I writing the function say again if I go to this case. Now, I may like to say my task is to find out whether I any student who has got more than 80. So, I will need to write this case. So, I will write this case. Now, I may like to say my task is to find out whether I any student who has got more than 80. So, I will need to write a function I have to search this in a linear way in a sequential way one of another and for that I have to write a function. So, how is that function how will that function look like let us see what are the things I need I have gotten at. So, I need to know which array I will be working with and that is this array a and what is the size of the array n whatever that is 7 may be in our case the example that I was showing was 7. So, that is so after I compare 7 elements if I do not find the key then I am unsuccessful in finding the search is not yielding in result the other thing is key the element for example, 8 which I am finding out in this which I am finding out in this array of numbers say something like this I am trying to find out 8. So, now let us look at the algorithm int pause equal to 0 pause means position. So, initially I am in this position that is this array is a so a 0. So, this is a 0 and while pause is less than size it is right now 0 it is less than size that means the pause is not has not exceeded the last element that means I have not yet checked the last element that is why this is said and the this pause the element a pause a pause pause the element a pause a pause pause is the index is 5 and suppose my key is 8 if a pause is not equal to key then I will increment pause I will check for the next element. Now, look at this this is an and here if either of these conditions fail that means if I have not found it fine, but I have exceeded the key exceeded the array size I mean limit then I will stop or if I have found the key 8 here although I have not reached the end I will stop. So, that is the condition then I go on increasing pause if pause is not less than n that means when I come out of this while loop when any of these conditions are not satisfied. So, if pause is less than n that means actually it should have been pause is less than size if I have come if still pause is let it should be pause is less than size if pause is less than size that means I have not come to the end of the array then obviously, why did I come out because this condition was false this condition was false means what I have already found the key right then I will return the position. So, pause increments from 0 to 1 to 2 to 3 then to 4 when I do that the same thing is size was 5 I have not exceeded 5 is still less than 5 and so pause could be but I have come out I have come out because I have found this so at pause position 4 I am getting the key so pause is returned otherwise if this is not true then I will return minus 1 I will return minus 1 minus 1 if it is returned that means that I have not found the key. So, this is the look of the linear search function very simple now I have found the function so the key appears in if the key appears within this limit then I will return the pointer P O S otherwise I will return the key. So, here is an example say this is the array x 12 minus 378 67 6 50 etcetera I want to trace the following calls I call so I will return the search so if you go up the linear search let me call this is linear search it should be written down as linear search I am calling with the array x the size of the array 8 and the key is 6 here what will happen size of the array is 8. So, I will start with the start from here 12 no minus 3 no my key is 6 right I implement pause from here to here no it is not matching pause is not the key a pause is not the key here a pause is the key so I come out with 0 1 2 3 4 pause value is 4 here what will happen for this I the same array x size 8 but my key is 5 you can see that I will go up to this and after that I will implement pause plus plus so it will be more than 8 and so the size is 8 so I will not be able to I will say that I have not got the key all right. So, that is so this one will return 4 and this one will return minus 1 that is how the linear search algorithm works. Now, let us stop here for today next we will look at another more efficient search but it that demands something more from us that the array must be sorted in that case we can apply the binary search algorithm to make it more efficient. So, today what we saw is how we can write small small functions to solve a big problem after I break down that big problem into smaller parts and also we found how we can the concept of linear search which we learnt earlier how we can write a function for that.