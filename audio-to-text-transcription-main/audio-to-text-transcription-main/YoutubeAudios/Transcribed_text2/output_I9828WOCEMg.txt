 Till now we have looked into we have seen different programming constructs using which we can implement repetition that means a set of statements will be repeated in a loop and in C such constructs where while do while and for loop right. Now also we have seen how we can branch out coming through a sequential one after another execution of the instructions depending on a condition we can go out to one path or another path through if else structures and we have also seen some examples by in which a combination of the if else structure as well as the while loose structure are combined together to give us more powerful and useful programs. Today we will start discussing about a new form of representation of data that is very useful and very fundamental that is called arrays. Arrays the word arrays simply means arrangement arrangement of data. So, we can think of for example for example an array of soldiers or array of people standing in line. So, people are standing in a line this is an array we can also have two rows of people standing. It is a very regular structure we can have three rows also. So, these are arrays of people now if I just have only one row in that case say for example I consider one row then it is a one dimensional array when I consider rows as well as columns then it is a two dimensional array. However, we will now initially concentrate on one dimensional array like this what is this? This is an array of people. Similarly, we can have array of numbers for example one seven zero five three that is again an arrangement of data arrangement of data. In a linear fashion this is the first element and this is the last element of this arrangement. So, this is also an array of some numbers. So, in an abstract way we can say that an array can be drawn in this form it can be an array of integer or an array of real numbers depending on what I want to store here. Suppose this be an array of integers then each of these places can have one integer stored in this two six five three three. Maybe again two and nine so this is an array. Now, how many elements are there in the array? Each of these are elements of the array. How many elements are there in the array? One two three four five six so this is the size of the array. And these are the elements of the array. Also another thing we need to know is how do I identify one element of the array? Say this element six of the array this array how do I identify that what is its identification? The identification is the position. So, this is the second position all right this is the first position this is the third position fourth position so and so forth. Now, this positions in the array is known as index. Index is the position in the array index determines position in the array. So, position of what position of an element in the array? So, for the time being we assume that arrays are linear structures linear arrangement of data. Now, one point to remember is one array can store data of the same type. For example, it is not possible to have an array in which there will be some integers some real numbers or some again characters. So, that is not possible that is not allowed. So, an array will is allowed to store data of only one type. We know that in float, care all these are defining different types of data or data type or data type. So, an array can store data of only one data type whatever that is it can be all floating point numbers it can be all characters it can be all integers whatever. So, these are two words of caution. So, what have we learnt? We have learnt that array is an arrangement of data of the same type and the array has is identified as a whole by a name and say for example, this array this is not a valid array. So, let us have a valid array of four elements say of real numbers maybe. So, this array will have a name let us say R we try to put a name A that means, A is the name to this array and this array has got a type what is the type of this array the type is float. So, array A is a float. So, A is an array of type float that means, it can store only floating point data also an array consists of different elements each of these are elements. And each element each element can be a floating point number and the particular element is identified by the index of an array. Now, and also we have we know that an array has got a size given this let us think of why are we talking about all these things why is this needed after all. We have encountered till now quite a few example problems for example, let us again come back to the old problem of finding the maximum of a set of integers. Now, in that case what did we do we read one integer we initialized a variable say first integer we read let me once again do it. So, if you recall we I am writing the flow chart I am not writing the C program read a number you know how to read a number by scan F then put that number to be max read again read number. And if number is greater than max then I am writing pseudo code. So, I can write then then max is getting the number again I read number. And in that way I go on or you can say that why should I write in this way I shall simply implement a loop while loop or fall loop. So, that this thing is carried on till I stop say for n numbers or for so here I can use for I assigned 1 to I less than equal to n I plus plus to implement the loop here. But that is possible when I know the total number of numbers if I did not know the number of numbers there are some other ways of doing it say for example, I am reading integers and I say when I want to stop I will enter a 0. So, here I could have put in something like this while norm is greater than 0 do so we do this as long as norm is greater than 0 I am going on doing this. And if norm is 0 or norm that we decide or some negative number I know that my job is done. So, but in this case if I want to remember what were the numbers already given to me suppose the numbers that were given were 5 initially here then 2. So, nothing was done max was 5 then 7 then here there has been a interchange. So, now here max becomes 7 then again it was 3 so nothing was done then it was 8 and max became 8. So, that will work for this sort of program but if I want to know what were the numbers you are saying max is 8 but what were the numbers that were input by the user we have not remembered them anywhere is it not we have not remembered them anywhere. So, here in my program I will not be able to say what was the second number entered what was the first number entered was there any 0 entered or was there any anything greater than 3 entered we cannot answer this questions because we read this and we operate it on this and we forgotten. Now, if you can think of that if I had used an array this sort of thing and I had as the user gave the numbers I stored them here 5 then 3 I stored 3 here then user gave 7. I stored 7 here then the user gave something maybe again 4 I stored 4 here and then user gave 9 I stored 9 here then even after or 8 here I even after reporting the max that this is the max I have got these in my array. See my name of the array is still a which is a is an array of integers then this is stored here I have remembered them in the array. So, I can now say what was my first element I go to the first element of the array using the index value and second I go to the this value. What is the fourth value first second third fourth I come to this point and I can say the fourth value was this. So, all these things I can remember because I have been able to store them in the form of an array. So, that is so array is again an arrangement in the memory. You know that every variable is stored in a memory location right. So, when we had num and the program that I had written that num initially I read num. And then I do this and then again read num if num is greater than max max assign num when I do this thing in a loop or whatever. What is happening whenever I have got variable num is a variable one location in the memory this is num and max is another variable I have declared all of them here in num in max. So, here there is another location which is known as max. So, when I did this read num and suppose some data 5 was read that 5 is stored here 5 is stored here. When I come here and I put max num assigned to max so it comes here. Now, I did num again so suppose num is 4 and no update in max next time I read it 7. So, this is updated here and this becomes 7. So, this is the process that goes on all right. Now, so every time I am losing the old value of num and storing the current value of num. And similarly whenever there is an update required I take the current value the max up to now. So, I am having 2 variables of integers. But if I had done it in the form of an array then I could have thought of like this that I have got suppose the array size is 5. So, suppose the array size is 5. So, that means conceptually I am talking of something like this that there are 5 positions in this array. And as I am getting the data it is coming over here 5, 3, 7, 2, 9 whatever. Now, actually internally what is happening internally this is being stored in the memory. The array size is 5 here. So, I have got 5 locations in my memory 4, 5. So, these 5 locations of the memory are being given to the array A. Suppose the name of the array is array A. So, for the array A. So, the first element is coming here when I am actually writing it here. It is coming here, second element is coming here, next element is coming here, next here, next here. So, these are the memory locations. So, an array is actually a representation in that memory which are contiguous and you know each memory location has got an address. So, suppose hypothetically the address of this is 1000 and each of them are integers and integer if I say integer is requiring 2 bytes. Then if this is 1000 location the next one will be 1000, 2, next one will be 1000, 4, then 1000, 6, then 1000, 8, 1000, 8, 2000, 9. So, 1000, 2001 is for the first element this one coming here, 2002, 2003 for this element, 2004, 2005 is this element, 6, 2007 is this element, 2008, 2009 will be this element. So, 1000, 2009 that means 10 locations we are requiring for these 5 elements of the array. Now, since also in my program I have got 2 other variables, 1 is the num or 1 is the max, I can manage it with 1 more variable. Max is a separate variable, suppose so that is here this variable is max, let me delete this variable, this is not required. Because this diagram is redundant because max is another variable which I have here, we will write a program we will show later how we can write a program to deal with this. So, since I have computed I have read the numbers, I have stored them in the memory locations and since I am going through an array I have not written over written. So, I can remember all the numbers, so this is one basic reason of usage of array where I want to remember the numbers in the memory. Given this let us quickly recapitulate what we have said till now. So, many applications require multiple data items that have a common characteristics. What is that common characteristics like whether they are integer or float or character whatever that is, it can be even more complex. So, we call say so that numbers that we are showing say we can in mathematics we often represent them as x 1, x 2, x 3, x 4, say up to x n. And that whole thing I can represent as an array x where x 1 is the first element x 2 is the second element x 3 is the third element like that. Now, here is an example finding the minimum set of numbers minimum of a set of numbers how we can find the minimum of a set of numbers. So, this is what I have already discussed but just for the sake of revision let us look at it once again. Say for three numbers you know we can this program must be familiar to you now you should be able to understand it quickly. If a is less than b and a is less than equal to c then a is the minimum I was showing the maximum here it is an example of the minimum else if b is less than c then b is the minimum else c is the minimum. So, far so fine as soon as I extend from three numbers to four numbers you see the program becomes a little bigger. If a is less than equal to b and a is less than equal to c and a is less than equal to d then minimum is a otherwise if you see everywhere I have brought in more number of comparisons and the program code has also been bigger. And I am not storing the numbers as yet I am not storing the numbers that is one issue the problem is so from three to four we need needed so much extension. Now, suppose we have got ten numbers to handle that will be even bigger 20 numbers even bigger 100 numbers so how do we do that. The solution is the solution to the problem is what is the solution the solution to the problem is use of arrays right using arrays right. Now, as I said that all the data items constituting the group shared the same name all these data items that I had shown say integers like 5, 7, 6, 3, 2 all these can share the same name x or may be let me give a meaningful name. Now, this one is number one this one is number two this one is number five. So, I have got just as we had shown x 1 x 2 up to x n so here n is five so I have got this five individual elements are accessed by specifying the index this is the index which is telling me in which position which number in this area of numbers I am looking at. We will look at this further the use of arrays and many more things are to come.