 So, till now we have looked at we have looked at how in C language how in this C language we can write the identifiers this is becoming a little too thick which identifiers are used for writing the variable names and the constant names. So, for example, pi or some variable names such as sum all those things. Now, we have seen what are the rules that the language C imposes on writing the names of variables or constants that is how we can write the identifiers. Also we have seen that there are different data types like int with stands for integer and float which represents floating point numbers or real numbers and care is used to specify some data which is of type character. We will see some more examples of this in the course of these lectures. Now, we also know that int means integer and whenever a particular variable A is declared to be an integer then typically it also varies from machine to machine and compiler to compiler to bytes or 16 bits are allocated for storing one integer. Each of these boxes are that I am showing here are 8 bits wide. So, there are two such 16 bits for float we will have two more real numbers are stored using 32 bits whereas, characters are typically stored in 8 bits. Now, this is not so sacrosanth as in some machine which is much more powerful and much more accurate having high resolution we can have 32 bits for storing integers 64 bits for storing floating point numbers and characters can be 8 bits or 16 bits. However, depending on what is the type declaration the amount of storage the amount of memory that is allocated to a particular variable varies. We just like int float care we also have got some more like short int all right long int or unsigned int these are also different data types. We will come across these in the course of this lecture short int means just if in an integer takes two bytes a short int will take one byte if a long int takes 16 by 16 bits that means, two bytes a long int can be made to consume 4 such bytes or 32 bits, but still that will be an integer. So, in these 4 bytes an integer that will be stored that means, the integer accuracy will be much larger. So, depending on the number of bits I allocate to a particular variable depending on the number of bits suppose I allocate n bits the range of values that I can represent varies. For example, if there be n bits then I can go from I can have 2 to the power n distinct values stored. For example, if there be 8 bits then the maximum value that I can store is when all these 8 bits are once and that is your knowledge of binary arithmetic will tell you that this will be 2 to the power 8 right that is 256 will be actually 255 right. So, 255 and if I make everything 0 if each of them are made 0s all 0s will be 0 right. So, I can have the range from 0 to 255 that means, total 0 to 255 that means, I can store any of distinct 256 values, out of 256 values distinct values I can store any one of them. Now, if this 8 would have become 16 then my maximum range would be 2 to the power 16 minus 1 all right that is a maximum value that I can store ok. Now, signed and unsigned means sometimes in our representation we keep one bit for the sign part in that case of course, the range decreases. But if we go for unsigned then we remaining within say 16 bits or 2 bytes I can have a larger representation. We will encounter these details as and when we need them ok. Now, let us come to some examples of the data types. You can see integer 0 25 minus 156 all these are examples of integers. Now, here I am for the first time showing some characters. Now, the character values are you see the character values have got something special. See I am declaring some variable care as type care my variable I name that my var. My var is of type character and I assign I want to assign to my var I want to assign that my variable will will hold the character a. Now, when I am assigning a character then I have to put a single quote around this. For example, I had another variable int your var your var is another variable which is of type int. So, if I assign into that in your var then I can straight away say an integer value 10. But when I write on to a character a character constant has to be always encaps I mean encapsulated within two single quotes right as here. Now, this single code within this single code is a character slash what about this this is just single code single code that means within that there is a blank. So, that means, I am say if I say my var is assigned this that means my var will be assigned a blank character. Now, you should remember that each of these characters that we type in have got an ASCII value each of these characters have got an ASCII value what is ASCII? ASCII stands for American standard code for information interchange American standard code for information interchange. Now, according to this table for every English character a b c d and capital A b c d and 1 2 2 everything up to 9 all of them have got some particular code American standard code and that is accepted in all the computers. So, whenever I type an a when I strike the key on the keyboard when I strike the key a whenever I strike a then actually when I as I press a what goes inside the computer is an ASCII code of a. Now, this ASCII code of a will be stored there for and the code for b the code for capital A are all distinct. So, whenever I type in a character from the keyboard a particular ASCII code goes in whenever I assign some value to a variable for example, as I did right now my var assigned a this means that my var will now have the ASCII code of a all right it will have the ASCII code of a. Now, the third variety that is these three are very common float for example, 23.54 or minus 0.00345 25.0 or I can also write it in this way 2.5 E 12 what that what does this mean this means it is 2.5 times 10 to the power 12 what does this mean this means 1.234 times 10 to the power minus 5 because it is E minus 5 here it is E 12 I can use capital E or small E that really does not matter these are the examples of floating point constants. So, if I have a variable like float X and I assign I can assign X to be say X is 1 Y is 1 Z is another one. So, I can assign X to be 23.54 semicolon or I can assign Y to be 2.5 E 12 and Z to be 1.234 E minus 5 all right that means now Z will have the value 1.234 times 10 to the power minus 5 that is how we represent the floating point numbers given this. So, this part is clear that is how we write the variables now and these are the examples of the data types now coming to constants. The constants can be integer constants on floating point constants just the ones that I was showing right now, but there is another type of constant character constants. So, we have already seen example of character constants of single character like like we had say A. Sorry what is happening here we can have a single character like A or say X all these within single quote a single characters and there is another type of character constant which is a string. For example, I can have a string which is another type of character constant which is not a single character, but a string of characters for example, I want to write down my name the name of a person. So, string type variable named name and I can assign some value to the string like say G O P A L all right. So, this is a number of characters taken together is forming a string of characters it could also be name to be X 1 2 Y double quote. Now, note that in this case I am using double quote whereas, for single characters I was using single quote. Now, these are some of the rules of defining character constants or numeric constants in C. Next we move to you have seen the integer constants. Now, couple of things to be just mentioned that the maximum and minimum minimum number of values that can be stored as an integer constant is dependent on how many bits are allocated for representation. For example, as I said that for 32 bit representation, I can have 2 to the power 32 different combinations all right. So, if you compute this you will find that on one side here is 0 when everything if I take one bit to designate positive 1 negative then I will be left with 31 bits. So, the maximum I can have on the positive side is 2 to the power 31 minus 1. So, for middle 1 is 0 and I can go up to this and on the other side I can go up to 2 to the power minus 2 to the power 31 right. So, this is the range there is a maximum integers and the minimum integers that I can represent. But, obviously we need not be so concerned about it because that varies with the number of bits representation in the machine. So, for a 64 bit representation obviously this size will be doubled will be much larger I am sorry it will be much larger. So, we have also seen shooting point numbers just now. So, I do not need to repeat this. And very why are we going for this this type of why are we going for exponential type of representation because that enables us to represent much larger numbers and very small numbers also using less number of bits because I can always write 0.123 into 10 to the power minus whatever. So, here minus 12 I could have written minus 15. So, it has got 2 numbed 2 parts one is the mantis apart that is this part I just put the decimal part 1 2 3 I represent in binary somewhere and on this side I put some bits for the exponents. So, it can be minus 15 plus 15 whatever. So, using less number of bits I can increase the range and can go for a much larger range of representation. This one we have already explained that single character constants. Now, here of course, you can see that this operator plus also has got an ASCII code every character has got an ASCII representation whatever we have we find on the keyboard has got an ASCII representation. Therefore, I can also have capital Z or plus as a character. Now, here is something that is a little new to you. We have already encountered one of these as our friend earlier. Here you can see that we are using a special character like backslash. This backslash means that whatever is following a backslash is not the normal nature of that. For example, if I write n it really does not mean a character n, but backslash n has got a different meaning. For example, suppose I was writing something print F, say I write you have seen that example earlier print F. Suppose I am just writing a, b, c and then I put backslash n. That means, I am I will be printing a, b, c, but after that I will not print n, but since it is backslash n it is some other information it is telling us that go to the new line. So, immediately we go to the new line. Similarly, we can see that backslash t, backslash t this one is the horizontal tab. So, if I have backslash t my cursor will move from here to some fixed tabular distances. Backslash now you know single coat or double coat, single coat if I put a, if I just want to print the character single coat, how do I do it? I will do it because any character I have to do within this coat. Now, if I put single coat here, then it will be confused, it will take these two and will take a blank character in between, because a blank character is represented as n with blank within two single coats. But I really want that here not blank, but I want to print the single coat. So, in that case what should I do? For this I should take a single coat and then backslash single coat, back I mean single coat. That means, this single coat is different from these two single coats. So, these are the boundaries of the character representation and what is the character that is the single coat. Similarly, for double coat you can now very easily reason that I must enclose it within single coat and then backslash double coat followed by single coat. Similarly, if I want to print backslash what should I do? Single coat then backslash that means, it is something different, backslash single coat. Similarly, backslash null is backslash 0. So, these are some special character constants that we may encounter during our programming practices. Then other new thing that we have learnt is string constant. Now, string constants are a sequence of characters. It is a sequence of characters, sequence of characters enclosed within double coats just like we wrote that. The characters may be the characters within the double coat may be letters, numbers, special characters, blank spaces like that. For example, nice good morning there is a blank here. Now, what will happen with this? When I put this as a string, don't think that it will be computed and printed as a 9. It is just a string that will be printed. So, if I write in this way within double coat within double coat, if I write 3 plus 6 then just 3 plus 6 that string will be printed. The difference between the with character constants is that backslash I mean the single coat C, this is a character, this is a string and they are not equivalent because their representations will see will be internally they will be represented in a different way. This one has got an equivalent integer value that is ASCII code whereas, this does not have an ASCII code. This is something different where they will be C and something more which we will see later. So, string constants are thing only thing to remember is string constants are a sequence of characters which can be letters, numbers, expressions whatever this sort of operator special characters enclosed within double coats. That is a string character. Now, we already know what variables are. So, we do not need to repeat that and we have seen the variables. We know that the variables are to be declared and the general syntax is a particular data type sorry it is it will be a particular data type followed by variable list. So, like examples we have already seen int velocity distance int A B C D, A B C D velocity distance are all integer variables. Temperature is a float temp is a floating point variable, flag option these are character type of variables we have already seen them. Now, we come to something that we evaded till now. Pointers have got a big role in C programming but we will just have a very simple look at the pointers here pointer means basically address. So, you please forget about the title for the time being a variable is assigned a specific memory location that we know and that memory location is assigned by the compiler. So, if we have some variable say when we find out int A B C then as we have discussed earlier A B C are three memory locations which are assigned by the compiler. Now, each of these memory locations actually have got an address right. So, the address can be say this is 1350 is an address just like our houses have an address just like your rooms have got some numbers just as your dryers may have some levels. So, similarly might be this is 1400 this is say 1450 or 1420 suppose A B C has got these three addresses all right. Now, when I read when I try to read something we know that I read to scan F. Now, in scan F what I did is percentage D and A that means I am trying to read a variable A but I did not explain to you earlier why I put this and this and means that and you know what is this percentage D. So, I have got some space space to hold an integer and that space is the in the variable A but when the you from the keyboard type in say the value 25 where will that value go the value will go to the address of the variable A what is the address of the variable A 1350. So, it will go to 1350 25 will come here. Similarly, when we write say scan F percentage D percentage D comma and A and B. Then I am going to read two values and two integers and the address of the first one suppose I type in 25 and 27. So, for the at 25 will go to the address of A that is at 1350 and 27 will go to the address of B that is 1400. Given this let us now read this a variable is assigned a specific memory location we know that for example, a variable speed is assigned memory location 1350 and assume that the memory location contains the data value 100. So, when we use the name speed in an expression it refers to the value 100. So, for example, when we write distance is speed into time then it will take this speed from this location 1350. Every variable has an address and its contents. So, we have seen A has gotten address A is a variable A has gotten address 1350 and when I write 25 into that 25 is the content. So, address and content we have earlier discussed also, but you see here integer speed I think you can read it and so, speed is this particular location that is in 1350 and when I write speed equals speed assigned 100 then 100 is written over here when I assign it. So, speed is getting the value 100 whenever, but when I say what is AND speed then I am asking the question what is the address of the variable speed what is the address of the variable speed and the answer would be 1350. So, this AND sorry this AND operation this AND operation is nothing, but asking for the pointer to speed or the address to the variable speed. So, this would be the answer. So, AND of suppose here time is given here if I just say AND time what will that be returned what is AND time AND time will be 1351 something of this sort all right. So, that is another thing that we needed to understand what is the purpose of this AND. So, here in C terminology speed refers to the contents of the memory location and AND speed refers to the address of the memory location corresponding to the variable speed. So, let us come to this example print F percentage F percentage F percentage F that means, I am going to print 3 floating point numbers and what are the variables see floating point values speed time and distance that means, what am I going to print look here I am going to print the contents of the memory location speed the content of the memory location time the content of the memory location distance and when I am reading percentage F percentage F AND speed AND time that means, what that I am reading where I am reading in the address of the variable speed I am reading in the address of the variable time. So, this is required to be understood. So, basically when I have a speed I once again repeat suppose speed is 25 and I print speed that means, I am printing the content of this location speed. But whenever I am reading into speed where am I reading the value I am reading into the address of speed that is this location that is the main difference between these two. All right let us stop here in the next lecture we will straight away move ahead to write some C expressions because, till now whatever we have learnt are the bits and pieces the tools of C that is how the how just like in a language how the words are written what are the sum of the simple rules. But then we will have to learn writing the real sentences in a language. So, that we will start from the next lecture. Thank you.