 So, we have started our discussion on a specific programming language that is C and once again I repeat that a C program will be constituted of some valid words of the C language just as the an English sentence must be constituted with valid English words similarly for C and must be every language has got a grammar. So, C has got a very strict grammar and in his statement that is written in C that is not adhering to that grammar will not be accepted by the compiler. The compiler will reject it saying that it is a syntax error or grammatical error. So, before going further into discussions on C briefly let us look at the history of C. It was originally developed in 1970 by Dennis Richie and his book Kiewals also referred to you at 80 anti bell labs and it become very popular by the mid 1980s because it was the compilers. Now, a language a computer language cannot be popular cannot be used unless there is a compiler for it. So, it took some time although it was developed in 70s but many compilers for different platforms for work stations for PCs for different platforms were made available by mid 1980s and this became very popular and there were some standardizations that also took place. Now, given that we the let us look at the structure of a C program let us look at the structure of a C program here every C program will consist of one or more functions one or more functions. One of the functions will be given the name main which is the function. Now, I in the last lecture I said that there should be at least one function if nothing else is there even if the program is so simple that I do not need any submachines. In that case I can do it with only one simple function and that function has to be named main and if there be a number of say for example sub functions or submachines in that case also there has to be one program which has to be called the main and the rest can be given some other names. The program will always begin by executing the main function. So, once again let us go to the diagram that we had used in the last lecture say I have got a program which has got only one function very simple then this function will be called main and no other sub functions are there it will take some inputs whatever the inputs are here will process that and the output will be made available. Now, suppose I have got two submachines required for this one here and after that another one. So, this submachine will do something then this submachine will do and then will come out and this is the output and there is some input coming in here these are the inputs and there are some submachines but I have got one machine which is the main this is again the main. So, although I am taking help of the submachines I have to first enter the main function and then from the main function I can enter here and go somewhere else and ultimately I will have to come out through the main function. So, we cannot escape the main function. So, the main will be there and typically we write the main any C body within two curly braces here whatever I am drawing as a diagram that is equivalent to these two curly braces inside this whatever is written is a C program whatever I write here whatever C program I want to write I have to write within these two curly braces I will come back to this in a moment. So, there has to be one function called the main and the program will always begin by executing the main function. Each function must contain a heading which consists of the function name followed by something application say followed by an optional list of arguments I will explain that later. Let us again come back to this that I have got a function I have got a program which has got one function whose name is main and I have got another function whose name is say add and there is another function whose name is find is a readable find average. Let me let me this is a little confusing let me rename this I name it as divide sum take the example of our simple finding average all right I want to find average. So, what are the subtasks one is I have to read the numbers say read say ABC that reading suppose I am doing here this read ABC is here one after that I am doing add ABC say adding ABC is being done by this submachine say and therefore, I have to give a name to this submachine that this submachine is inside the body of this submachine I will actually do the addition, but the name of the submachine should be expressive of what this submachine or the function is supposed to do. Similarly, after I do that then I divide sum right I will divide sum by 3 by whatever 3 here in this case. So, that is being done by this submachine this is too simple these are two simple submachine, but this is being done by this submachine. So, they each of them has to be given some name each of the functions including name has to be given some name. Now, along with that there is another point that has been mentioned here there is the argument each of these functions must have a space where I can write the arguments. Right now I am not writing anything on main, but say when I say what is these arguments if I just consider this separately all right any function separately any function if I consider separately now this function will have some inputs and some outputs what are the inputs and what are the outputs suppose the name of this function is my function. Then this function will have some arguments which are given within this parenthesis and suppose these are a and b are two variables which are read by this and c is a variable that is output by this. So, the name of this function should be associated with the names of the variables which are taken as input or is supplied as output by this function these are called arguments. We will come to this when we discuss some other very important properties of functions, but for the time being just remember that a function must have a name and there should be some place for writing the arguments often we will find that a function like main suppose I am writing a function which will simply print a particular line. So, then inside the body of the function I just want to print or say print my name is something something whatever. So, my name just say my name now this function whenever it is entered it will just print my name it is not requiring any values to be passed, but still then I will have to put this parenthesis with the name although I may keep the inside of this parenthesis blank. So, a function in order to a valid function in c there is a c rule that in order to have a valid function a function must have a name and a place for the arguments. So, a function heading is the function name followed by an optional list of arguments enclosed in parenthesis like this this optional because it can be blank and there are these other things that there will be some argument declarations etc will come to this particular part later, but before that we have to understand a compound statement. What is a compound sentence say simply in English if we consider you know that a simple sentence has got only one principle verb principle finite verb. However, I can have a compound sentence like a boy went to school and his father was happy say. So, here there are two sentences his father was happy and a boy went to school these are two simple sentences and we are connecting them with an aunt here alright. So, these are compound sentence similarly we can have complex sentence and all those here the idea is similar, but not exactly the same. I am saying that a function is a machine which has got a name like say add and some parameters a b c a b and the third parameter is some that means it will take a as input b as input and will produce some, but here I write a number of c statements a number of c statements are written over here. Each of these c statement is a statement and all these together are together forms a compound statement ok. Whenever we find more than one c statement working together that will be a compound statement. So, here the entire function add will be if it consists of a number of statements then it is a compound statement in the default case in the very trivial case when the program consists of only one statement then also we can call it a compound statement, but with only one statement ok. So, next each compound statement is enclosed within a sorry is enclosed within a pair of braces like this this is called braces this is called parenthesis and this is called braces right. The braces may contain combinations of elementary statements at single one or other compound statements ok. Now, once again let us see till now I was drawing the I was drawing the machine as this right I was drawing it as a rectangle now I will move towards more towards c. So, I will say that this boundary will be specified in c as this sort of boundary whatever is here is within this parenthesis. Now, each of them each this each of this braces I mean inside this braces we will have some statements it can be an elementary statement like say a as in 20 or maybe more number of statements. Now, each of the c statements are delimited by a semicolon this is very important this you must remember each of these are delimited by semicolon. If I do not write the semicolon the sentence is not completed just like in English we have to write a sentence and we have to complete it by a full stop right it rains very simple sentence it rains and then there is a full stop here. Similarly, in c the end of one single elementary statement or a set of statements is pointed out by semicolon all right otherwise it will be ambiguous can be a problem like for example, if I write a 20 b 15 and I forget the semicolon if I I can I am writing one of another because that is nice to write one of another. But, if I write them side by side that is also equivalent, but if I put semicolons here the compiler will understand that this is a one statement this is another statement. But, if I do not give the semicolon here for example, I write a 20 b 15 then the compiler will be in the problem because it does not know what it is supposed to assign 20 or 20 b or whatever is it possible to assign 20 b many things will come. So, we must be very careful about completing the statements with semicolon. So, the braces may contain combinations of elementary statements and other compound statements. Now, there is another very important thing called commands whenever you write programs you must be generous of writing comments. Now, what are these comments? Commensure statements which are not which are not converted by the compiler to machine language. But, then why do we write it? The reason is that whenever we write a complicated or a large enough program the presence of the comments enables us or enables suppose I have written a program it will enable somebody else to understand the program. So, if I write something like say I am again I am not going to a complicated example as yet I am remaining with that finding the average of the numbers. But, suppose I am doing I am doing it in two steps. Say I do I am writing I am just doing something like a assigned 20 b assigned 15 sum assigned a plus b and then c assigned 25 sum assigned sum plus c. Now, when I write this somebody may this rather too simple but somebody may say what am I doing here at both the places I am doing some. So, that somebody else does not get confused I can write something like this. Let me just check the syntax here yes I was right. So, I can write say a assigned 20 b assigned 15 note the semicolon that I am putting after every statement sum is equal to a plus b a plus b and here I can put in a comment say adding first two numbers. I am ending this with this symbol this is again I am doing a bad job here. Say I write numbers and then I put this sort of symbol. So, here you see I put this and here the reverse this whatever I write in between that is assumed by the compiler to be a common statement. So, the compiler need not convert this into machine code. So, here again I can write later say c s sorry c assigned 25 and sum equals sum plus c. Now, I can explain that adding whatever I want I can write in any form adding third number to sum and put this now I am sorry here always I am making I am not being able to manage the space it should be there should be a space in between. So, I will have to write third number to sum and I put this end of comment. Now, this part will not be compiled. So, for any program when we write as the program becomes more and more complicated we should be generous about writing the comments that will also help us say you have written a program today and you want to look at it after say one month and see what you did such comments will be will be helping you to understand what you did or somebody else of course to understand what you did right. So, for examples let us see here I have got a simple thing a assigned b plus c. So, here you see add two numbers between these two this and the end of comment is this all right ok. Now, let us look at a simple c program therefore, now this part I will be explaining separately, but before that let us look at this part of the code is a very simple program simplest possible program what it does it simply prints our first look at c program this line as is will be printed as is will be printed where will it be printed this will be printed on the screen or on the printer or on some other file where will it be printed. Here we are writing another statement hash include stdi.h this stdi.h means standard input output std for standard. So, it is stdi is standard input output. Now, if nothing is specified then the standard input is our keyboard by default it is the keyboard and the output by default is the screen. So, when I write this then when I write printf that means this line will be printed on the screen ok that is the meaning of stdi.h now this single piece of simple program has got many things to illustrate. This term hash include is an instruction to the compiler that you need not convert it to the machine language, but before you convert the program to the machine language please do this what is doing this please include stdi standard io.h now what is this stdi.h in order to understand this you have to know what a library is. Now any programming environment any programming environment provides you with a library of functions.c provides you a library of functions ok. Now this library of functions and library of other packages which are library of functions or codes that is already there already there. Now, so I am going to write a program here and here there is a library and in that library there are many things here all right. And one such thing is stdi and all these libraries files have got an extension dot h why that is that we will see later. Now when I am writing this part of the program if I say hash include within this corner brackets stdi.h that means whenever I am writing this program whatever program I have written that will be converted to the machine code that will be ultimately converted to the machine code while doing that this before doing that this stdi part must be included or must be included some of the information must be included that will tell me that well you see whenever you are doing this printf that printf will be done will have to be done on standard output and what is that standard output the print it is the printer ok. So, that is the purpose of hash include there is a pre processing statement compiler pre processing statement. Now, I had said that every language has got some of its own vocabulary. Now, in English we now you understand whenever I write print or write these words can be meaning to you in English in C we write it as printf this is a special word of C why this F that is a meaning for that that is in C wherever we write wherever we write we consider that as if we are writing in a file say in your office or in your work desk whenever you write something you write it on a piece of paper and put it in a file in C we consider every input or every output device to be a file and this F stands for file as if I am printing on the file which file the printer file ok. Now, the next class we will start with this and we will describe some of the other Hebrew like statements here which will from which we will go ahead ok. Thank you.