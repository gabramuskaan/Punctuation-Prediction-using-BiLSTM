 We have looked at arrays and their utility. We have in particular looked at one dimension array and today we will introduce another variety of array which is two dimension array. In fact, we can have multi-dimensional arrays in general, arrays can be we can have n dimensional arrays. For a particular value of n equal to 1, we are having this one dimension array where I have got some say one dimension array of integers. So, for n equal to 2, we can have two dimension arrays that means where they will length and they will be breadth of the array. So, that array can be considered of consisting of a number of one dimension arrays. For example, as I am showing in this diagram, I have got two dimensions. On this dimension I have got four rows and on this dimension, I am sorry this. Let me draw it a fresh. So, on this side, I have got four rows and on this side, I have got one, two, three, four, five, six positions. So, these are called columns and these are called rows. So, here I have got two dimensions. One is the length that is six or six columns and the breadth which is four rows. Since, there is two dimension. So, it is a two dimensional array. So, a two dimensional array like this can be considered to be consisting of say in this case, four one dimension arrays arranged one of two another. So, this is one array which we learnt till now. This is another array. This part is another array. This part is another array. So, we have got four different arrays. One, two, three, four, four different arrays arranged one of two another. So, I can have for n equal to two, I have got rows and columns. So, we get two dimension arrays. Similarly, for n equal to three, we can have three dimensional arrays. Like so, I have got one, two dimension array like this and we can think of another two dimensional array lying here. Another two dimensional array lying here. In that way, I can have an arrangement of say maybe three or four two dimensional arrays one of two another. That is also an arrangement. Each of these may be four rows and six columns. Sorry, maybe like this four rows and six columns. So, this row, this three dimensional array will be four rows, six columns and four such two dimensional arrays. This is one two dimensional array. This is another two dimensional array and this one two dimensional array and we have got four such two dimensional arrays arranged one of two another. If I had one more here, same array then this would be changed to five. In that way, I can extend my concept of arranging data as we had done for one dimensional array. We are extending it to two dimensions, three dimensions in that way. It will be difficult to show it on the screen. We can go up to n. So, n dimensional arrays which will have different dimensions altogether. But today, we will be just discussing about two dimensional arrays and the thing is quite general and can be extended to other dimensional arrays also. So, we are now talking about two dimensional arrays. You can see the most common example of two dimensional arrays a table. Table means an arrangement of data just like this. This arrangement of information is known as a table. Often, we see table in other forms also. For example, I can have a table of something like this. So, the first here, I put name of the boy, name of a student, then I stored age of a student, school to which the student goes and address of the student maybe. And I have got such scope of keeping it for say four students. One student number one, student number two, student number three, student number four and I want. So, this is this is known as table because I am organizing them in a organized in a tabular form. So, this is a table. So, what we were looking at now is another table where here I am showing that there are four students, student number one, student number two, student number three, student four. For each of the students, I have got some marks in the different subjects, subject one, subject two, subject three, subject four and subject five. So, I can consider that all the marks of student one in the different subjects are stored in a row, this row for the first student. Similarly, this row for the second student, right. Similarly, this row for the third student and this row for the fourth student. So, each row wise I get the information of all students and column wise if I look in this direction, what do I get in subject one, what are the different marks and who have got what marks. And most interesting part is the intersection say for example, this element of the array, what will this element tell me. This element has is identified by its row and column, which row it is in and which column it is in. This element is 75, and what is the meaning of this 75. 75 is the student two's subjects of subject two. It is in whatever we tell you, you can tell that is a subject to marks of student two. This is the subject three marks of student three. So, in that way I can represent any of these as identified by some row name, row number and column number. Recall that in the case of one dimension of one dimension array, when we are talking of one dimension array, there we had indices, index, so that index was telling us say for example, there are, suppose these are marks again out of 10, and I wanted to know what is the marks in subject one. So, the i value i equal to 0 was pointing me to this. Suppose, this is marks, i value was showing this, if I take the i value one, then I get the marks of this subject like that. Now, in that case in the case of one, if I wanted to have this element, that was identified by i value equal to 0, 1, 2, 3, 4. But in the case of a two-dimensional array, just as we are seeing here, we will be getting to a particular element again in the same way with index, but here say for example, this element, this element here. How do I identify this element? This element will be identified by this row and this column. So, my index while this was for one-dimensional array, the index was i, in this case the index will be i and j. So, any pair i j pair will identify which row and which column. So, this particular element is determined by the i value again just because it is c, I am saying that it is starting from 0, 1, 2, and here 0, 1, 2, 3, 4. So, say this element can be identified by i is equal to 1, 1. For example, this element, this element is identified by, sorry index value i j, I am sorry here, the index is 1, 1. So, the i j pair is 1, 1. For this i should be 1 and j should be 3. So, this pair is identified by 1, 3. Whenever I get, so suppose here this array was marks. Similarly, I will have a name for this two-dimensional array and I can access any element by this indexes. But in this case, since it is a two-dimensional array, I have got two pointers, two bit, two parts of this, the row part and the column part. So, here you can see that the subjects are organized in this way, subject marks are organized in this way and we can access any of these elements using the proper indexes, student number and the subject number. The table here, in the table that was shown here, showing how many elements, 1, 2, 3, 4, 5 into 4, 20 elements. So, the table contains 20 values, 5 in each line and it can be arranged, organized as a matrix, two-dimensional matrix, consisting of four rows and five columns. Now, C allows us to define such tables by using two-dimensional array. What does it mean? The general form is like this, type array name, row size, column size. Although as you compare with what we learned for one-dimensional array, it is just an extension of that. For example, marks 4, 5. So, in this case, which we saw just now, it is an array with and let us call this, say the name of this array is also marks. And marks has got, so let me write here, it is marks and it has got four rows and it has got five columns. So, that is how I can describe this array and then we can go on filling up the values of this array. So, array name, row size and column size. So, for example, in marks, similarly, I can have cells of 25 items over 12 months. Say, I can have something like, cellettes, try to see what this possibly can mean is that, suppose I have got a table where there are 12 rows. I will have 12 rows here and there will be 25 columns here. All right, that will be 300 items. So, I am not showing that. But, say each of these rows may mean, say this is January row, this is the February row, this is a March row, etc. And suppose here, there are different items, a shop has got different items and in that way, it has got 25 different items. And here, we write how many units of a particular, this say shirts, this row is shirts. This one says that, in the month of February, how many shirts have been sold and maybe this says, in the month of say, this is pen, in the month of January or in the month of January, how many pens have been sold. So, in that way, this entire matrix or this array can be named as the array cells, which will have 12 rows and 25 columns. Similarly, and another very important thing to note is, this type, this type that we declared, also in the case of one dimensional array is also applicable here. Because, each of these elements in this array will be of the same type. So, here, cells I am saying and I have said, cells is flowed. So, the way I wrote it is not correct, I should write it as, say, how many elements are there, how many, what it can be that in the month of January, what is the worth of not how many shirts were sold, but, shirts worth how many rupees were sold. So, it can be here 100.5, say, because each of these elements are floating point numbers. Similarly, matrix can be 100 by 100 matrix, where each of the elements will be a double precision number. So, we have got two places, two dimensions that we are specifying here. Unlike, what we did in the case of one dimensional array, where we did something like int max say 5. So, int max 5 is a one dimensional array with 5 elements, I can con say that, these are with 5 columns of this one dimensional array, which is one row. Had there been more rows like this, then immediately, I have to identify which row and which column, and if there be two such rows, then this array should be described as int max say here to 5. Because, there are two rows. Similar to that of one dimensional array, but, we use two indices, indices is the plural of index, index indices. So, the first one indicates the row, and the second one indicates the column, both the indices should be expressions, which evaluate to integer values. And that was the case for one dimensional array also. So, if I have something like max to 5, these integer, these values must be integers. I can write expressions, we will show there, later, but those expressions must evaluate to integer values. Examples are x m n 0. So, whatever m value is, m has to be an integer. Suppose, m here is 2 and n is 1. Then, in this array, whose name is x, we have got a number of rows, and a number of columns, which element am I referring to here? I am referring to row 2 0 1 2 3. So, I am referring to this row, and which column I am referring to 1. So, this was 0 1 2 3 4. So, I am referring to this column. Therefore, I am actually pointing at this particular element. Similarly, I can do operations like this. What does this mean? Let us try to understand this. This means I am referring to three different two dimensional arrays. One is A, which has got some rows and columns, and there is another array. This is A, this is B, and I have got another array C. Now, I am taking what is being done here? This means C i k. So, this C is being designated by an index i and another index k. This one is being done by referred by i and some j. This one by j and k. What is being done here? That is for different values of i, j and k. I am selecting. This has got a special application, but I am not going to that. I am looking at taking a particular value from here, that is C i and C k, k is pointing here. So, this one I am taking, and adding that with the product of A i and j, j might be pointing somewhere here. I am taking this element, and I am taking for B for B array, j row, j should be here, j row and k column. So, I am taking another element from here. So, I am taking this element, multiplied by this element here, and adding that with this element. That is taken from C. That is what I am doing. So, this simple example, but this has got a far more reaching implication. You realize that soon. Here you see what we have done. Here, why is this example shown? Here you see we are specifying the index in the form of an expression. Suppose j was 2, and here which one I am referring to A j into 2. So, that means A 6 followed by whatever value of k was might be 6 2. That means, I am referring to the element of the array A, A is an array whose sixth seventh row, and third column element is being taken. So, if this be like this, I am taking the seventh row element, and second third column element, I am taking that value, and finding the square root of that. And that is again being put to the corresponding value of that is coming to some other variable name. Actually, this should be since this is an array, this should have been kept as some other variable name B. So, how is a two-dimensional array stored in memory? We know that a one-dimensional array is stored in a memory, I mean in the contiguous memory location. So, just for the sake of recalling, if we had if I have a one-dimensional array say 3547, they were being mapped to the memory actual memory. Here is the memory location, the different memory locations, and I am storing them here 3547 in contiguous locations, but what happens to the case of two-dimensional? For example, if I have the array that I am drawing here with three rows, three rows, and two columns. So, what is the dimension of this array? A is 3, 2, three rows and two columns. Now, suppose it is 175320, say those are the values. In that case, if I store it in the memory, I can store it, now I am drawing how it can be stored in the memory. I need one, two, three, four, five, six locations in the memory. So, I will have six locations. So, I can store them 152730 or I can store them as 175320. Now, what is the difference between these two storages? This one is I am storing them column wise. I am storing them column wise, and in this case, I am storing them row wise, row after row. In C, the compiler stores the arrays row wise, which is often known as in the row major form. This is the column major form, column major form, but in C, we are doing it in row major form. There is a specific significance of this, because whenever I want to access an element, say A array, I want to find the particular element, say 2, 3, which element shall I find out? Here, for example, here, let us take this case, and let me try to find out the element, say, A, A, this is A, capital A. I want to find out the element, 2, 1. That means, I am actually trying to find out the row number 2, row number 2, and element number 1. So, I am trying to find this one out. Now, where will it be? If I do not know, so say this is accidentally I am coming to the same, let us say, let us make this one, 1, 1. That means, which one? Row 1, column 1. So, I am actually trying to find this element, 3. Now, what is the address of this element? Where is it stored? You can see that 3 has been stored here, if I store in the column major form, but if I store in the row major form, it is here. So, whenever I am trying to find this element out of this memory representation, I will actually have to fetch it from the memory. So, therefore, I have to find out the address of this, and for that I need to know where it is stored, row wise or column wise. Since I know it is row wise, so how should I go about it? Since there are two columns, so for the first row, I will say that if this big my starting address 1000, then the first row will take 1000 and 1000, this is starting from 1000, 2. This is the first row, this is the second row, and this means the second row part, and second rows, this is 1. What is this element? This is second row and 0th element, and this one is second row, and then the next element. So, it is 1, 1. So, using knowing that whether it is stored in the row major form or column major form is very essential, in order that I can find out the address of the element in a two-dimensional will continue this further, more explanations are required about this.