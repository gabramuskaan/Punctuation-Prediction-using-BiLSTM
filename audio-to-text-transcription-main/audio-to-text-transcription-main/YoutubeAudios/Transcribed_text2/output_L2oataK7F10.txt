 In the last lecture, we encountered a special notation as if like this, where we can put in amperesand and a variable name to denote the address of that particular variable. So, that is what we encountered in the earlier class. Next, we will be now, we will be moving ahead towards some statements which are absolutely essential for writing any C program. Just as in English, we write different types of sentences. Similarly, in the language C just as it is a language, there are again different types of statements that we can write and through which we can express what we want to do. The simplest type of statement that we have already encountered about is assignment statement. Assignment statement means I have got some contents in some register, some registers say X, some memory locations say variable X and has got some value 50. Now, how does this value come over here? Initially, it was not there. So, suppose I have got a memory location variable say speed and I want to put in some value into this location, all right say 500. So, what we do? We write speed assigned 500 semicolon. So, the general syntax for that is a variable name followed by the expression, the variable name followed by the expression. As you have written here, speed is the variable name and the expression here is nothing but the constant, all right. It could be something else. For example, I could have written speed assigned 2 times 500 or maybe V times Q whatever speed is assigned V times Q. I hear as some examples of such assignments. As you can see here, velocity is a variable, right. On the left hand side, the variable name is there. On this side is an expression. Now, what type of expression is this? 20 is nothing but a constant value. Please note that all the statements must be ended with a semicolon. Look at the second one, be assigned 15 again a constant. Look at the third one, temp assigned 12.5. So, what type of variable is temp? You will immediately answer temp must be a floating point variable or real number. Here you see a different type of expression, a variable a is being assigned the variable a plus 10. What does it mean? So, a assigned a plus 10. So, a being a variable a is a memory location and suppose it has got some value 25.7 if a is a floating point variable. Now, if I do a assigned a plus 10 that means whatever is there in the as the value of the variable a is taken out. So, we take out we read 25.7 add 10 with that and we get 35.7. And then this 35.7 comes in here and I get a new look of a the same location will now hold 35.7. So, you see the left hand side is the destination where the new value after computation of the expression will go and the left side sorry the right side can have the same variable as a source or might be the some other variable could be some other variable also like here this expression you see. I am using three variables here V is one variable, U is one variable I am sorry I am using four variables here F is another variable and T is another variable. Now, suppose you have U has got some value 20 F has got some value 0.5 and T has got some value 2. Then V is being computed as U is being taken 20 plus the product of these two 2 and 5. So, 2 and 0.5 will be 1 and 1 is being added to 20. So, these two being added is becoming 21 and this 21 is filling up this variable V. So, here you can see I can use more number of variables I am sorry this is let us be a little nice. So, it should be 21.0. Similarly, here you see it is a mix of variables how many variables are here S is a variable, U is a variable T is a variable F T T F T. So, 1 2 3 variables are there again U F T and S and there is a constant 0.5. So, this side entirely this side is the expression. Similarly, this is again an expression this is an expression this is also an expression. We will see more of these expressions in a moment. So, a value can be assigned to a variable when the variable is declared. For example, when I am declaring a variable just starting I want to declare a particular variable and so, I want to declare a variable may be acceleration acceleration. Now, when I and I say that acceleration is a real number. So, when I declare it I will write float acceleration and then at some point later on I can say acceleration assigned say 2.5. This is one way the other way is that I could have written it when I declared it as float acceleration assigned or initialized to 2.5. This is also allowed in C. So, a value can be assigned when it is declared. For example, here speed is an integer which is declared as an integer and along with that it is being assigned the value 30. Here you see the care is a type of another variable flag and when I am saying that it is a flag is a character I am along with that I am also assigning it to value y. Now, you understand you remember that within the single code means it is the integer it is a character string. So, I could have done it also like this care flag and then later on flag assigned y and this equivalent to what I did here. Several values can be assigned the same value using multiple assignment operators. What does it mean? As soon as we see the example it will be clear. For example, a, b, c all these are being assigned the value 5. Flag one and flag two both are being assigned the value y. Speed and flow both are being assigned the value 0.0. So, here say for example the correct thing would be to say float speed flow assigned 0.0. So, that is the simplest possible way we go about it. Now, when we write an expression first thing we have seen now is the assignment statement. Now, in the assignment statement if you have seen in the earlier slide we are using some operators for example, u assigned say v minus f times t or right. So, this is an assignment statement here is the assignment. But on this side I have written an expression. So, how can we write an expression in C? We have seen quite a few examples of such expressions in the earlier slides. We have seen different types of expressions like S assigned u times t plus 0.5 times f times t times t. So, this is we will immediately recall that this is our standard school formula S is equal to u t plus half f t square right. Now, this expression has got two components this well known expression in school has got two components. One side is the expression here which has to be computed and then that has to be assigned to another result or another variable. So, that is being written here. Now, this is the way an expression is written in C you cannot just write it in this way as we are doing in our school this is not possible we have to write it in this way. Now, here when we write this expression you please observe a couple of things look at these these these these these these are known as the operators you know that this is meaning multiplication this is meaning addition these are again multiplication symbols. Now, these they are sets of allowed operators in C just as every language allows some constructs to form sentence and some other are not some other constructs are not valid in a sentence formation similar to that in the programming language C or for that matter for any programming language there are some allowed operators by which we can form expressions. So, we have got three types of operators the type of operators that we have encountered till now we have seen till now are arithmetic operators, but besides arithmetic operators there are two other types of operators called relational operators and logical operators. So, let us see a little more of this arithmetic operators these are some of the very familiar arithmetic operators right you know that this is this means addition normal subtraction this is division. Remember unlike this sort of division that we use in school we use here this symbol for division. Unlike this symbol that we use for multiplication here we use this symbol and new symbol that we are of introducing here is this symbol like the percentage sign. Now, this does not mean percent computing percentage it means modulus what does modulus mean say if the modulus means finding the remainder for example, if I compute 15 modulus 3 that means, I am dividing 15 by 3 and whatever is the remainder is my result. So, what is my remainder here? Reminder is 0 ok. So, modulus is basically the remainder operator. So, another example let us look at say I have got 27 modulus 2 what would the result be 27 divided by 2 the quotient is 13 right quotient is 13 and the remainder is 1. So, this modulus will be 1 whereas, if I had done 26 modulus 2 that would be 0. Now, again observe if I instead of modulus operator if I had done 26 divided by 2 the result would be 13. So, this gives you the quotient whereas, this gives you the remainder all right. So, this is a new operator that we are coming across and you should keep that in mind. Next let us proceed. Now, here are some examples distance is rate or velocity or speed multiplied by time please note again as I have told earlier also that any expression must end with a semicolon as is being done here. What does it this mean can you read this variable? Can you read this variable is it meaningful net income is income minus tax. So, operator is minus and this is the arithmetic expression and this is the arithmetic operator. Speed is distance divided by time again ended with a semicolon. Speed is distance divided by time. How do we find the area of a circle? Pi you remember pi we can define pi we had seen this example earlier as define pi 3.1415 etcetera. We could have done that. So, pi is a constant times radius times radius. Here basically what I am computing is area is being assigned is the assignment operator and the expression is pi r square. Now, this expression I am writing in this way pi times r radius times radius. Here is another expression y assigned a x square what does it how do we write it typically in school. This is expression which is a x square plus b x plus c. This is a very familiar expression of a quadratic expression. Now, when we write it again here you see how many operators I have. I have got two multiplication operations three multiplication operations and two addition operations and one assignment operation. So, here again quotient is dividend divided by divisor. Now, this is exactly what I was telling a couple of moments back that this operator is actually returning you the quotient of a division operation. And, this is actually giving you the remainder of a division operation. So, here are some examples of arithmetic expressions. Suppose x and y are two integer variables and whose values are we know 13 and 15 then x added to y x plus y arithmetic operator plus will give me 18 x minus y 13 minus will give me 8. Now, the point to note here is that here again always try to think in terms of our memory location diagram x and y are two variables x is 13 and y is 5. So, x plus y means the content of the location x plus the content of the location y x minus y is the content of the location x minus the content of the location y. Similarly, when we multiply it is 65. Now, if I add an assignment with this operation with this operation I just add an assignment. For example, I write I am giving two variations z assigned x times y. That means, what there is another location z where the content of x and the content of y are taken and multiplied and 13 times 5 is 65 that is stored there and that is possible because I have assigned it here. Again I could have as an alternative could have done x assigned x times y. What would have happened in this case? The content of x would have been taken 13 multiplied with the content of y that is 5 13 and 5 would be 65 and this product 65 where would that be written it would be written in x y because it is being assigned to x. So, then this would be overwritten with 65. Similarly, you will recall now x divided by 2 this is a division. So, I am expecting the quotient 13 divided by 5 what will be the quotient 2 but x modulus y would be the remainder of when I divide 13 by 5. So, that modulus is 3. Now, in an expression we can have different operators. If more than one different operator occurs in a particular expression, how will that expression be evaluated? So, now we are concerned about how will evaluate or find the result of computing an expression ok. Now, here is a list in decreasing order of priority. So, if I have something like this say x assigned p plus q times z minus x divided by l plus m. Now, here you can see that I have got different operators what are those? Our well-known operators are plus multiplication minus division plus again. Here is another operator that is parent thesis. Now, as we learnt in school algebra that the parent thesis has got the highest priority alright. So, I will first compute the elements which are within the parent thesis. So, first p plus q will be computed then l plus and l plus m will be computed. Now, out of this p plus q and l plus m which one will be computed first whenever these two the these are of the same priority these parent thesis. Now, if there be more than one operator of the same priority they will be computed left to right. So, first we will have p plus q computed alright. Suppose that is something say let us call it a some value a times z minus x. Suppose this is computed to be some constant b. So, in that way it will be computed. So, the parent thesis has got the highest priority. Next after parent thesis it is unary minus. Unary minus means usually when we write something like x minus y then I have got two variables on which I am carrying out this subtraction. This is a binary operator in the sense that I am needing two variables or two constants two elements on which I am carrying out this computation. Unary minus means that particular variable is being operated on. For example, if I had something like this minus x plus 7.5 semicolon and suppose x was 2.5. So, what will be the value? x is 2.5. So, first this will be done. So, it will be minus 2.5 plus 7.5. So, the result will be then 5. It is not that I will first compute this 2.5 plus 7.5 and then do the negation alright. So, the unary minus so here I had shown a variable. It could be something constant also minus 2 plus 6. That means you all know that 6 subtracted by 2 although it is plus. So, because this has got the higher precedence. The next one is multiplication, division and modulus. These three will have the same priority, multiplication, division and modulus. These three operators will have same priority. Therefore, if I have an expression like say x division y multiplied by z modulus q. How will that be which one will be done first? This and this have got the same priority. Therefore, we will be carrying it out left to right. But if the expression was something like this minus x divided by y multiplied by z modulus q, then which one would be done first? First this unary minus will be done first followed by these three candidates which will be done left to right. Next comes addition and subtraction. So, if I have got an expression again like say x times y even before that let me put it p plus x times y divided by z minus q. Then in which order would it be computed? First plus will not be computed. Multiplication has got an higher priority. This also has got an higher priority. So, out of these two which one will be done first? Left to right. So, first I will do this. Suppose this is yielding a result A. So, it will be p plus A then divided by z minus q. And then this one will be done because left to right of the same precedence. Suppose it is b, then it turns out to be p, it turns out to be p plus b minus q. Now out of this plus and minus have got the same priority. Then which one will be done first? This part will be done first. Suppose that is c c minus q. This is how this entire operation will be done. For operators of the same priority the evaluation is from left to right. In the next class we will see some more examples of this and we will proceed further.