 So, we are looking at arrays and we have seen that all the data items constituting the array shared the same name. So, we can call an array to be A and array A or an array num. If the array be A, then the elements are A 1, A 2 like that up to A n, where n is the size of the array. And each individual elements are being accessed by this indices. These are the different indices. So, for example, here when we declare here comes a new thing. Suppose we have an array where the size is 10. So, there will be 10 elements of the array. 10 elements of the array just as are just like variables array as a whole is also a variable. So, suppose I name this array to be x. These are x 1, x 2, x 3, x 4, x 5 like that up to to x 10. Now, just like we had to declare the variables like in float here. Here also we need to declare the array and the way we declare the array is shown here in x 10. What does it mean? That means, x is an array of now I am introducing a term of dimension 10. Earlier, I was talking calling it size and here I am calling it dimension. For the time being assume that both these both of these are the same thing, but actually there is a difference. We will explain that in the course of discussion. So, we declare it first of all the type of the array. As I had said that an element all the elements of an array has to be of the same type. So, either all of them will be integers or all of them will be floats. Therefore, this entire array has is for type int which says that all the elements of this array are integers and x 10. So, let us quickly have a look at the memory scenario. Say in the memory this is my memory and this is the memory and in the memory some locations are kept for the array x. Let me start from here and maybe up to this. Now, how much space will be given to the array must be known to the compiler because the compiler just like the compiler allocates variables to different memory locations. The compiler will also have to allocate locations memory locations for the array elements. Now, when I said int x 10 that means the compiler will store space equivalent to 10 integers 10 integers in the memory. 10 consecutive places for 10 consecutive one of the another. No gap elements 10 consecutive integer places in the memory. Therefore, how many can you tell me how many bytes are required for that integers and I have assumed that any every integer is taking two bytes. Integer is taking two bytes. If I assume that then I will require 20 bytes here. So, there will be 20 locations each location consisting of two bytes in this way will go on. So, you must understand when I declared this what is the meaning of this. Dimension of the array means that I am storing I am I am reserving I am reserving the compiler reserves the space for 10 integers and that has to be done before the array is used. Therefore, it must be declared before so that the compiler while it is compiling the program can allocate enough space. So, and now individual elements are accessed by specifying the index. So, here x this x is a 10 element one dimensional array linear. Now, this is the index of the array element now comes a peculiar thing if you look at this we are saying that each of these elements are stored in this locations and which are identifiable and accessible by the indices. Now, in C language each index the index value is equal to the index value of the index value starts from 0. So, the first element although while discussing we are saying x 1 say I was I was drawing an array like this where I was saying that these elements are the first element x 1 x 2 that is true x 3 x 4 x 5. But in C these elements are the first elements are counted the counting is started from 0 there is a reason for that which will also be evident soon. Just remember for the time being that the first element therefore, x 1 is actually represented in C as x then this square bracket followed by the index and the first one will be x 0 second one will be x 1. Therefore, can you tell me what will be the last element of this array how do I represent that yes you are right x 5 will be nothing but x 4 since I am starting with 0 I can go up to 4 here in this example as you can see that I have got 10 elements in that a therefore, I start from 0 and go up to 9 that is what is followed in C language there is a reason for that let me just briefly mention the reason the reason would be this as I said that in the memory the array stored in a particular region when I declared it as int x 10 then 20 bytes have been given to me and the array starts from this point which has got some address may be 1000 and this address is starting is 1000 2. Now and I know that each one is of size 2 so, where then I say what is the address of x 1 what is x 1 x 1 means here and I know the starting of this array so, start address plus index times x 1 and x 1. So, this is the first number of bytes for integer will give me the actual address. So, for the first address what will be the index x 0 so, my start address is 1000 for the first one 1000 plus 0 times 2 so, that will be 1000 for x 1 1000 plus 1 times 2 so, that will be 1000 for x 5 in this will be 1000 for x 1 1000 plus 1 times 2 so, that will be 1000 for x 5 in this way is which element 6 element so, that one will be here 1 2 3 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 6 1 2 3 4 5 6 this element and what would be its address address will be 1000 plus 5 times 2 that means, 1000 10 it starts from 1000 10 so, 1000 2 1000 4 1000 6 1000 8 1000 10 here it will start so, this is basically the offset how much I shift from the top that is the reason the ease of computation of the address of any of the index any index any element with any element with a particular index can be done using this method this formula and therefore, we start with 0 that is a specific reason for starting with 0 so, these 10 element one dimensional added that we have seen let us move ahead so, like variables the areas that are used in a program must be declared before they are used the general syntax just like in integer or flow we had declared them as in flow before they are used why do I need to declare them before they are used because the compiler needs to allocate space for that otherwise the compiler does not know what type of variable it is therefore, we also have to do the same for the nary and the general syntax will be type array name size now again here the size I mean the dimension type specifies the type of the element that will be contained in the array it can be int, float, care or whatever so, I have a I have got fields like say here I can have an array I can dictate is float the array name can be my array and size may be 20 now this one specifies that this is the array of the this array can hold only floating point numbers and suppose floating point numbers are 4 by it is each then for how much memory will be reserved for this 80 bytes will be reserved for this because 20 is a size that means, the maximum size that the array can take and what is my array everything just like every variable must have a name this array my this array also has got a name called my array and so, the what will be the indices I am repeating the thing my array 0 so, I am writing m a for short 0 and what will be the last element here m a for size 20 it will be 19 is it all right so, this is the general syntax which I must put and also there should be a semicolon at the end just like other declaration there is no other major difference here. Size is an integer constant here I am calling it dimension that is is a maximum number of elements that can be stored inside the array suppose I have got so much space kept for storing an array so, much space many many elements can be stored I have received so much space but in my actual working I am using only some spaces and these are not touched that is allowed that means, but the reverse is not allowed unless I can I have got the space unless I have got space I cannot store them so, I must reserve the space beforehand but so, that is why I want to I was mentioning this maximum space as dimension and the actual number of spaces which you are using to be size of the array all right the reverse is not true because suppose I have and I have reserved so, much space for an array so, I have and I go I go beyond that then these marks the spaces for other variables like ABC their data will be destroyed by my data which I am taking as an array therefore, we must restrict to this but suppose out of this I am using only this much in my perlance I am calling its size and this to be the dimension you can call it in this example in the slide we are calling this to be the size of the array there is a maximum size of the array so, what is dimension dimension is the maximum size that the array can be off but in practice in actual running it can be less than that but not more than that so, I hope that part is clear to you so, here what did I write in marks 5 what does it mean it means I am storing marks 5 what does it mean it means I am storing marks and the marks are all integers right 50 55 60 100 I am storing integer marks and how many marks can I store 5 so, what will be the indices 0 marks 0 to marks 4 that is the index limit because I am starting from 0 I can have only 5 positions so, marks is an array containing maximum of 5 integers if a teacher decides that he will give fractional marks that somebody can get 62.5 somebody can get 70.2 somebody can get 59.7 then what change should we do the change that we should do is this will be replaced with float and if I say in my class there can be maximum 20 students then what else should I change I should change this and make it 20 that so, I should declare here a few examples in X 10 that means, X is an integer how do we read it X is an integer X is an array of integers of size or dimension 10 care line 80 that means, what that means line is a variable array of type character so, what will it be there will be 80 such positions usually when we take a print out usually when we take a print out of characters the lines were conventionally 80 characters in a line so, there will be the positions like this all through maximum 80 so, the size will be 80 and this variable is known as a line and what can it hold it can hold characters like A sorry A there can be a space space is also a character I denote space as a blank like this then maybe X is a character then there is a blank blank is also very very character then C then D all those things can be there so, it is an array of say ultimately say P is a last character something like this altogether 80 spaces for character I keep in my variable line and what is the type of the variable that type of the variable is an array array of character similarly I am saying that there are 150 points there can be 150 points and each of those points are floating point numbers C name I just store a name I want to store the name of a person say name S Revikumar is the name of a student and I want to store it in a computer how I can store it in the form of an array where each of the characters are in the form of the elements is a character first one is S then dot then R then A V I K U M K and I need one more space R. So, you see I needed one more space here why because I had taken I did not have enough space here now each of them is a character by the way you know that a character is denoted like this so and so forth. Now what this line says is I need one more space I need one more space I need one more space here why because I had taken I did not have enough space here now each of them is a character by the way you know that a character is denoted like this so and so forth. Now what this line says is that name is a variable which has got the capability of holding 35 such characters it has got the ability of storing 35 such characters at the most now how much space should we keep how much should I keep here here here here here here if we are not sure of the exact size of the array we can define an array of large size. Say if I think if I have got no idea of how the what are the typical Indian names for example or American names for example I can keep name 100 but is it advisable not always when I really do not have any idea I have got no other way but to do it but if I have an idea of how much the name length can be at the most I should keep so much size because if I keep an arbitrarily large size then what am I wasting I am wasting my memory space because each of these are a memory location ok suppose beyond this never a name can extend to then I should not keep this part in the name but when I have got no idea of course I have to a bigger large size. So, that is the difference between the actual dimension of the array how much is a we do and for S Ravik Kumar for example my actual size is 1 2 3 4 5 6 7 8 9 10 11 alright out of 35 35 was the available number of spaces. So, when I say it is a in marks 50 suppose in my class I have got say 10 students and I am going to store the marks of only one subject in that case there is no point storing so much space I mean reserving so much space for the variable marks if I know since I know only 10 students are there if I know beforehand then I could have written in marks 10 or if I had known that sometimes the number of students in a class are 10 sometimes 15 but never more than 20 then I could have kept marks 20 but I should not keep marks 50 I hope the point is earlier now I have already described this how an array is stored in a memory starting from a given memory just let us have a revision of this starting from a given memory location the successive array locations this is very important the successive array elements are created spaces in consecutive memory locations 1 after another so array A will have memory locations 1 after another like this let now the same computation let us do it again let X be the starting address of the array. So, let X be the starting address of the array address this address and K is the number of bytes allocated power array element I had shown it for an integer now I am showing it in a generalized form X was the first starting location say 1000 or whatever and K is the number of bytes allocated now then the next one will be plus K because it started with X and needed K locations the next one will start from X plus K the next one will start from X plus 2 K like that the Ith element therefore, will be as we had computed earlier will be X plus I K and since we started with 0 that will be perfectly okay element I will be located some I will be located the address say I here will be located starting at X plus I times K just a little bit of puzzle here I have written it here like this a common mistake could be that I what would have happened if I written it like this what is the problem of writing in this way the problem is what is I K I K is not I times K not I multiplied by K but I have written it here I will write I K is another variable name all right. So, these two are not the same thing whenever we go for programming we should be very careful okay now so first array index is assumed to start at 0 in C we are doing that so a particular element of an array can be accessed by specifying two things what are the two things name of the array index index is nothing but the relative position of the array okay we will continue with this discussion further.