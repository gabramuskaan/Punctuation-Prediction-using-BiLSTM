 So, we are looking at a new construct that is switch and case. So, here is another example, this example has got many more things embedded in it. For example, in order to understand this, you have to understand two things that are being introduced here. One is gate care. This is a construct we have seen scan F, we have seen Pint F as input output statements, but gate care is also another statement, another function actually. This is given by, since we have not considered function in detail, this is a built in library function or an operation, you can consider that to be an operation also, that gate care and then there is a parenthesis as if we want to have some value here. It means gate the character from the user. So, where from the user provide you the character, whatever the user types that will be captured by this function and this will get that particular character. That is why it is called gate care. There are other things that we have here is another function two upper and then you can see that there is another parenthesis. Two upper what it does is it converts any character variable to its upper. For example, if I type A as a character, say I have got a variable my care. Now, suppose I have declared my care to be a character type of variable and somewhere here I assigned my care to be a. Then what does my care get? My care gets a ASCII value of small A. Now, if I say two upper my care, then what it will do? It will take the ASCII value of small A and will return me the ASCII value of capital A to the upper A. So, this one will be returned. So, here you see two upper what not my care, but what we have written two upper then gate care character. So, what it means is that you will get the character from the keyboard. Suppose, it is small A and then that will be converted to capital A. So, it becomes capital A and then that is being fed assigned to choice. Let us look at it because it gives us the opportunity to look at look at nesting of functions also. There are two built-in functions which are being used here to get the character and assign it to choice. So, you can also have another example. Similarly, we have got two lower gate care something where if I had given capital A, it will be converted to small A and then I assign it to something else. Other things also I could do by suppose I get care my care and my care is assigned A. My care has been assigned A then I can see I can see again I can assign not my care. So, some other my care and suppose there was another variable my care 1, 2 upper my care that was also possible. Of course, my care 1 has to be also declared that is not declared here. So, this now that was the first part of the thing. Now, let us look at this. So, we take a choice. So, what is the choice? We are taking a choice and what is the choice? Choice is a character that is been given. If the user gives a lower case character, then suppose I want a choice between a multiple choice answer scenario type in the answer A, B, C. Somebody can type cap A, shift A or just A. Whatever you type internally I will convert it to capital. So, through my two upper function. So, now I take your choice. Now, based on the choice I go on checking. Is it R? If so, print red and then break. It is not R, then let us go and check whether it is green G. If it is G, then print green and then print green and for break you will come and meet here. It is not green also, not R, not green. I will come to this point. Is it blue? Yes, then I will print blue. But suppose somebody has printed, typed in gave the choice as Y. Why? Then neither it is R, nor it is G, nor it is B, then it will come to default and will print invalid choice. Here since that is the last statement and I am closing the bracket immediately after that, I may not give the break statement here. I am free not to give the break statement here. Otherwise, now suppose let us look at this break statement. Suppose I do not give the break statement. Suppose this is not there and my choice is R. My choice is smaller. So, at this point the smaller will be converted to capital R by this statement, by this. So, my choice will be capital R. Now, I go here and I will, my system will find that it is R. So, it will print F rate. I am sorry, why should I print F rate will be worked on. Let me do it again. My choice was R that was converted to capital R and by this and then I come to this point and I find that it is R. So, my system prints Rendt. Ray has been printed. Now, this break statement is not there. If the break statement is not there, then it will not go to check this condition. It will simply print all these things. Since it has followed this path, unless I force it to break, it will go on following this path. So, I will have green printed again, which is not what I desired. So, let us see. So, now let us see. So, now, let's see. Here, let us look at this flow chart. The switch statement, if the case is red, let's stick to the example that we are doing. Red, then I print red, then break. If the break was not there, then I would be following this path again. I mean, this path would be followed. That is why this break is essential. We will show the requirement of break in a moment. Now, let us look what the break statement is used for. The break statement is used to exit from a switch or terminate from a loop. We have just illustrated it for the switch statement. It can be also used for some other purpose. So, the break statement causes a break statement causes a transfer of control out of the entire switch statement to the first statement following the switch statement. So, I hope you have understood what is meant by the switch statement, how it can be used. We will see that through a number of examples later. We will see with the number of examples. So, we will see that the break statement can be used for exiting from loop also. We will see that, but what is the loop? Next, we come to see repetition. Till now, what we have seen is branching. But now, we are going to look at another important construct, which is repetition. Now, just for a moment, let us go back to our old friend example, that is finding the sum of n numbers for example. Now, how did we do that? What was the flow chart? The flow chart was something like this. Lead n, there is a number of numbers, then the flow chart is something like this. We make some equals 0. I am adding n numbers, then read number, I am giving a different variable name, num, then I am adding that to some, sum is assigned, sum plus num, then I am decrymating n. Now, I look at, is n 0, if yes, then I go and print some. So, if there be 3, then I first read one, add it. n actually shows how many numbers are yet to be added. So, print some, then stop, and then stop, and then stop. So, this is the number of numbers, and then stop, and then stop, and then stop, and then stop, and then stop. But, if n is not 0, then what I will do? I will go, and continue this path. This is another form of structure, that we see, that we have based on some decision, we have got some statement somewhere, and we are going back to that, and repeatedly doing this. This is, we are repeatedly doing this, this is known as loop. Now, what I will do is, this is what I will do. This is the formula that is, if PO is the formula, it is a formula, then stop, and then stop. This is we are repeatedly doing this, this is known as loop, this is known as repetition or loop. Unlike the earlier case of if then where we look at the condition and then we follow either this path or this path both in the forward direction. Here we are also taking of the backward direction. So this is a very important concept, we will need it at every step in our programming exercise. Now there can be different types of loops, we will discuss that later. But first let us take, let us look at counter. Now there are three types of loops briefly, let me tell you. One is loop is something that is repeatedly executed. There can be counter control repetition where we know that we know before and how many times I must repeat. Suppose I know that find the sum of N numbers, whatever that be N I know that this will have to be repeated N times, N times. But there is another case where we actually go on repeating a particular set of sentences, we go on repeating that until a particular condition occurs. That means some value has become negative or something that say for example I am taking the sum, I am adding that and the sum goes beyond 99999 and if it goes beyond that I will stop. That sort of situation is known as sentinel control or event controlled repetition. This will come later but most importantly we will look at this counter control repetition where we know how many times we should look, how many times we should look and for that we need a control variable. We will see what that is. So, counter control repetition requires name of a control variable or a loop counter. If you recall in when we added N numbers what was my counter variable? What was my control variable or what was the loop counter? How many times we need to N the number of numbers? Similarly I can have another sum other variable say I can just draw arbitrary flow chart for you say I is an integer initialized to 0. Then I come here do something and then I increment I let me use what we learnt I increment I do something and then I increment I let me use what we learnt I increment I I plus plus then I check I greater than 10 if it is yes I will again if it is no sorry if it is no I will again do that if it is yes I will come out. So, I am doing it as long as I is not greater than 10. So, this here what is my control variable my control variable is I or this is a loop counter based on which how many times I will be carrying it out is determined. So, I am doing it as long as I is not greater than 10. So, this here what is my control variable my control variable is I or this is a loop counter based on which how many times I will be carrying it out is determined. Now, we also had an initial value of the control variable what was the initial value that I did in this case the initial value of I was 0 it was initialized to 0 if you have seen the condition that tests for the final value of the control variable whether the loop should continue or not what was my condition test in the earlier case it was I greater than 10 is I greater than 10 if I is greater than 10 then I will come out otherwise I will go on continuing with the looping and another increment or decrement operation here I was 0. So, I incremented it until it comes to 10 or cost is 10 if you recall in the earlier example there was n. So, I had to read n numbers after reading one number I decremented n. So, depending on what I want to do I will have to increment or decrement the control variable and based on this condition I will come out. So, here is an example an initialization is done you can see here a counter has been set to 1 it is an integer counter that has been set to 1 while counter is less than equal to 10 while this is a statement that you are getting as long as counter is less than equal to 10. So, this is one new term you are learning while counter is less than equal to 10 do this print if the counter value and then increment the counter and then go on doing it. So, this is this really does not make any difference if I had written counter plus plus that be equivalent because this is a signal term here there is no assignment or nothing addition with this value. So, it is standing alone it really does not mean me does not matter whether it make it counter plus plus or counter minus minus. So, this one is so here is the condition check counter is my control variable and increment and decrement operation. Now, you are getting this while statement and now let us try to find the simple English meaning of while we often write something like this while it is raining stay home that means as long as it is raining stay home that means as long as it is raining stay home. So, this is the condition condition as long as the condition is true do this here you see while the counter is less than 10 as long as this condition is true do this if this condition is false then come here do not do this that is the meaning of the semantics of while. So, while is used for one of the methods by which we can achieve counter control repetition. Now, counter control this way of seeing so the while statement actually looks like this while some condition the statements to repeat it can be one statement or it can be multiple statements as is shown here within this block. This entire statement should be this entire thing should be repeated example here suppose here is weight loss program I mean as if you have been told to lose weight by following this while weight is greater than equal to 65 while weight is greater than equal to 65 that means as long as your weight is greater than 65 then pint F go exercise then come back again interior weight and then read the weight now show you the weight here there is a nice thing often we had encountered the scan F and pint F independently. Now, look at this statement print F interior weight scan F weight what does this to together mean? I have got my screen here I have got my screen here and I have got this in this state a program is running and it just says scan F percentage D and W say weight you do not see anything on the screen but suppose somebody who is little more helpful to the user writes print F enter your weight then here on the screen it is printed enter your weight enter your weight then here on the screen it is printed enter your weight and then since backslash is there you are here now scan F percentage D and W now here then when you type your weight say 65 then that is shown here you know what data you are supposed to give so this sort of thing makes it more interactive all right. So, here you see these two have made the program more interactive but what is the program do it checks at every point first it takes a weight if the weight is not greater than 65 it will simply come out here because this condition is false otherwise it will carry out all these statements and then it will read the weight again you see again the weight has been read and after the weight has been read it is coming back here and checking it again whether the weight is greater than 65 if by one day exercise you have reduced your weight then obviously you need not exercise more you can come out otherwise you will have to again go and do this. So, while is a very important statement you should understand the meaning of this and we will try to do a couple of more exercise and examples on this.