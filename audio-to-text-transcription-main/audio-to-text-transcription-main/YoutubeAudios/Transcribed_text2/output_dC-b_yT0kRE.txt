 So, we are looking at solving a quadratic equation and we have seen that there are three cases. One is if the discriminant is 0, we print the roots that the roots are real. Sorry, if the discriminant is greater than 0, then the roots are real. Otherwise, if it is equal to 0, then the roots are equal and if the discriminant is neither greater than 0, nor equal to 0, that means it is less than 0, then the roots are imaginary. So, next what we did is, we started with a program like this, where we declared the coefficients here and then the discriminant and the intermediate variable D and 2 roots, root 1 and root 2. Next we proceeded with this and we modified this part. If disk is greater than 0, print a roots are real and then I modified this part and replace this part with this. If discriminant is 0, print the roots are real and also compute the root. Now, if the discriminant is equal to 0, then the roots are equal, compute the root and print it. Now, I asked you to see how you will deal with the third case, if the discriminant is not equal to 0. So, this if, when this if comes, then it has already failed the condition that discriminant is greater than 0 and if the discriminant is not equal to 0, then we will come to just an else here right and let me go to the next page to write the else part of this. So, it will be else simply I am sorry here did I give the parenthesis yes I did. So, I am this is please note these are the points where we often make the mistakes. Else print F, the roots are imaginary, the roots are imaginary, backslash and fine and what are the roots. So, if you if the roots are imaginary, then the real part say one part one root is minus B by 2 A is a real part and the image plus I that is what we I d by 2 A is it clear. Another this is one root, another root is B by 2 A minus I d by 2 A what does so this d. So, basically you see what we are doing is x is minus B plus minus root over B square minus 4 A C by 2 A. So, this is my discriminant and I take the square root of that. So, plus minus root over d by 2 A right in my program what did I did D or discriminant square root of disk sorry disk. So, I should not use different name. So, it should be disk by 2 A and that square root of disk can be either imaginary. So, negative if this is negative, then I will find its absolute value and so this can be written as minus B by 2 A plus square root of disk by 2 A is one root, another root is B by 2 A minus root over disk by 2 A and since it is imaginary it should be I the imaginary part. So, I can print it as a real part to be B minus 2 A and imaginary part is square root of disk by 2 A and so square root of disk is nothing but D. So, minus B by 2 A plus I d by 2 A that is what I am writing here. So, this is the real part this is the imaginary part. So, I can print it in different ways. So, I can just say else print F roots are imaginary or rather I should have said this is wrong to say what should I have said you should have I mean I am doing a mistake here all through starting from this point you must have observed it here the roots are complex roots in that case not the imaginary roots because it has got a real part and the imaginary part. So, the roots are complex I should have written roots are I should written complex roots and then I could print real part percentage F back slash n I can put an expression here minus B divided by 2 A. Let me make it a little thinner looks very nasty here B divided by 2 A that is the imaginary part that is a real part and print F imaginary part as plus i percentage f comma minus i percentage f backslash n followed by what is my imaginary part imaginary part is d by 2 a. So, you see I have put this i part plus i and minus i here comma d divided by again d divided by twice a. So, this and then of course, everything is done. So, I come to the end of my program before that here there should be a parenthesis. So, this is the complex part. Now, as we will become little more conversion with programming, you can see that I have repeated many things. So, instead of doing it there are some common you can think of how you can write it in a much more elegant and shorter way. But, this is an example which gives you an exposure to the use of if then else statements e fail statements in c. Next well another example we can take up say for example, we are going to compute the income tax of a person. Suppose the if the income tax is less than 100,000 rupees, then income tax is nil. If it is between 100,000 to 200,000 rupees, then you pay 10 percent of the amount above 100,000. For income above this 200,000 if the income is above 200,000, then you pay 20 percent of the amount whole amount not how much is exceeding 10,000. Suppose this is our income tax policy, how can we do this. So, what is the input that I need from the user? I need this income from the user and what is the other variable that I want to compute the tax. So, here earlier I needed math.leab in this case, probably I will not need that, but I will not need that. If needed I can always add it later, and then you can say put a comment computation of income tax computation. Now I start my program, I can put the parenthesis above. Then print F, it is always better to do this. Please enter your income, because if you do that, then you make your program interactive. That means the user can see what you are doing. Please enter your income. Well, I have not yet declared the variables at all. So, here I should write float income tax, and tax. Then here scan F, percentage F, and income. So, I read the income here. Fine. Then what should I do? Let me come to the next page then, because there will be a number of if conditions. So, this part is okay. I have read the income here. Now, if income is less than or equal to 100,000 print F, no tax. What is my principle? 10, 1 lakh to 2 lakhs. 10 percent of the income, 10 percent of the income above 100,000. So, else if income is less than equal to 200,000. So, it is not when it is coming here, it is already greater than 100,000. So, if it is less than 200,000, then tax will be 10 percent. That means, 0.1 times the amount exceeding 100,000. So, income minus 100,000 print F tax equals percentage F, backslash N tax. Is this part clear? This part is. So, when am I coming here? This if condition has failed. So, I am coming here. That means, it is not less than 100,000. So, it is more than 100,000. But if it is less than 200, less than equal to 200,000, then I am in the second bracket. And I will be paying 10 percent of the amount that is exceeding 100,000. That is why I computed this. And then I am printing this. So, here it is more than one statement. I put a bracket. Here you see under if I had only one statement. So, putting a bracket is not mandatory, but here it is mandatory. Otherwise, it will mean something else. So, else this. Now, if this is also not true, that is if this if does not satisfy, then I am in the third bracket. That is here, what should I do? Else tax is 20 percent of the income. And print F tax assigned percentage F backslash n tax. Now, here then I come to the end. So, I come to this beginning point and I end the program here. Now, you can see that I can reduce this program a little bit. Now, I have written this printing the tax. This thing the same thing twice. I am sorry here. There should be another bracket for completing this. This should be completed and then the next bracket. Now, this I could have done later after these two years. But under this else under this else. So, you can also try to reduce it. And as an assignment, you should run this program and get yourself satisfied. So, this is another classical example of if then else usage. Given this, we will now move to some more examples of the other construct that is while and do while type of constructs. So, here is an example to show if a number is prime or not. Now, how do I go about it? Let us first think of the algorithm for finding out whether a number is prime or not. Say for example, I take a number 13. I want to find out whether 13 is prime or not. So, when is a number called prime? When the number is not divisible by any other number other than the number itself and one. So, in order to find out whether 13 is prime or not, what shall I do? I will start with two and I will try to see whether 2 is dividing 13. How do I know whether 2 is dividing 13? So, if there are 2 integers say 14 modulus 2, the modulus leads gives me the remainder. So, if 14 is divisible by 2, the remainder will be 0. 26 divided by 2, the remainder will be 0. But 13 divided by 2, the remainder will be 1. So, similarly, so I suppose I want to see whether number 15 is divisible by 3. I will do the modulus operation of 15 with 3 and the remainder will be 0. So, 15 is divisible by 3. So, now if I want to find out whether 13 is a prime or not, I will first try to divide c whether it is divisible by 2. If it is divisible, yes will tell me not prime. It will tell me not prime, but no. Then I will try to divide it by 3. If this is divisible by 3, then again not prime. No, I will divide by 4, then obviously not divisible. Then I will divide it by 5, so and so forth. I will go till I divide it by 12. Since of course, by 13 it will be divisible. So, if the answer continuously up to 12 is no, then we say it is not prime. So, here you see there are two things happening. One is I am taking a check, branching here. I am dividing it by 2. If it is divisible, I say it is not prime. If no, then I am taking another path. What is that path? That path is again trying with the next successor of this two. Yes, if the result is yes, I take this path. Otherwise, I will follow this path with a successor of this. So, the same thing trying with the successor, I am doing continuously repeatedly if the divisibility result is false. That means, if it is not divisible, I will continuously go on till I reach if this number is n till I reach n minus 1. Up to that I will try up to n minus 1 I will try. So, this is an example where there is a branching as well as looping. Another real life, mathematically important application. So, let us look at the program now. Let us try to understand the program here. This include stduiu dot h is known to you main. I am declaring two different variables. One is n another is i. n is an integer i is also an integer initialized to 2. I am reading the number here say 13. While i is less than n, that means i was 2. If you look at this page, we started with 2 and then went on. So, this is the value of i. So, this is the value of n. So, now while i is less than n. So, I had 13, I had 13 and I had 13. So, I had 13. So, I had 13. So, I had 13. So, I had 13. So, I had 13 and i is 2. This is n. I will go on up to 13, up to while i is less than n. That means up to 12. I will go on trying this thing. But if n is divisible by i, is n divisible by i? Yes, then print that the number n is not a prime. And then exit, we come out of this loop. Just like break, we come out of this loop. But break is not applicable in if statement exit, we can write. So, I come out of the loop. Otherwise, what I am doing still in the while loop. The while loop is starting from this point and going up to this point. I am incrementing i. So, i becomes 3. And again, I go and try to see if it is divisible with 3. No, then I come make it 4, make it 4. I again try this one fails. It is not divisible. So, I do not do this part. I do not do this part. I come here, make it 5 and go on in this way while i is 12, up to 12 by check. And then it becomes 13. So, I come here and ultimately, I come out of the loop. And till 13, I could see that no, I could find no number, no integer that is dividing it. So, we say that this is a prime number. Say for example, what would have happened if I had given the instead of n, 13, if I had given it 14, what would be the change in this flow. I would start with the 2, 2. And again, I divide it by 2, try dividing it by 2. It is divisible. I print that it is not a prime. And I exit and come out of this entire while loop. So, in the while loop, here I am exiting from the while loop altogether, not from the if loop. I am exiting from the while loop, if it is not a loop by the way. I am exiting from the while loop completely. So, this example also illustrates the use of if here and the while loop here. We will see a few more examples in the future lectures.