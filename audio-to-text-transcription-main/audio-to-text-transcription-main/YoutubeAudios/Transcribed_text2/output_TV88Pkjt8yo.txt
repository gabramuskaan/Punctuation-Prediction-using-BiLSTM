 So, we now know that an adic is identified by a name of the adic, some name like x, norm whatever and there is an index, norm i or say norm 4, norm 5 etcetera. So, by this index, by this index we identify which particular element of the adic, I am referring to. Now, in C also we have said that the array starts from 0, the index of the value of the index starts from 0. Next, so when we have an array defined as int x 10, the index r from 0 x x 0 to x 9. The first element can be accessed as x 0, first element can be accessed as x 0 and the fourth element as x 3, the tenth element as x 9. I hope this is clear to you by now that this one is array is x. So, this is x 0, this is x 1, the fourth element will be x 3 and the last element will be x 9. So, that is how the array elements are addressed, how they are referred to by the indices. Now, these indices must be integers. Now, the indices must be integers that is very important. So, if I have got an array defined as int x n, where n is the size of the array, then the value of this n, this index, value of this index must lie between 0 to n minus 1. So, if it were 20, then the value must lie between 0 to 19, where n is the number of elements in the array. Now, you can see here in this example that it is not the case that always I have to put a fixed integer as the index. Of course, I can write for an array say an array is a, I can always refer to some element of the array as say a 4 for the fifth element or I can have some other integer value x. And suppose x is 2 now and if I refer I can refer to the same thing as a x plus 2, that means this will also evaluate to 4 and this will also point to the fifth element of the array. Now, one thing that we have to be careful about that this value that is computed lies between in this range between 0 to n minus 1. So, here is another example, where the array index value has been computed through an expression 3 times x minus y is assigned. So, suppose here you can see that we are talking of 2 variables, 2 array variables. So, let us draw a picture a picture always clarifies the things much better. So, let us have an array a and array b a and b are 2 arrays. So, suppose x is 2 and y is 3 then this statement what does it do a assigned x plus a x plus 2 x is 2 plus 2 that means a 4. So, a 4 the fifth element is being assigned the value 25 and what is being done here x is 2 a 10 minus x. So, that is a 8 that means the 9th element let us have the fifth let me make it a little bigger. Suppose this is the 9th element a 9 a 8 sorry a 8 this is a 8. So, that was suppose 30 that is being taken plus 5 is being added to that. So, 30 plus 5 that is 35 now note this this part is being evaluated what is being done in evaluating this part I have got x to be 2. So, I am computing 10 minus x I get that to be 8 that means I want a particular variable which is stored in stored as a 8 that means in the 9th location of the array a and that is 30. I take that value 30 and add 5 to that. So, I get 35 and then what do I do I store it in the array b and where in the array b now I will compute this part 3 times x x was 2. So, 3 times 2 is 6 minus y y was 3. So, it will be 3. So, in b 3 so b 0 b 1 b 2 b 3 that means again in the 4th element of this array b 3 I will be storing the value 35. So, now the array b will have the value 35 here I hope this is clear. So, you have to be very clear about the distinction between the array index and the value of the array. So, this 30 that I got after computing the index a 8 that was telling me where in the array I should look at to get that value. And then that was just a value and with that value I had another value 5 I added them together I added them together and got the value 35. Now, I see where I am going to store that for that again I compute the index here and I compute the index the index must be within the range 0 to n minus 1 I compute that and I find that the index is 3 that means in b 3 I have to store the value I go to b 3 and store the value I hope this is clear. Now, in c there is a word of caution here that in the language c the array bounds are not checked for example, int I have got declared int max 5 that means I have got an array max whose size is 5 or dimension is 5 that means at base I can have 5 elements in that all right. Now, here what I am trying to do here what I am trying to do is I am trying to write 75 in max 8 but there is no space for max 8 it is 5 6 7 8 this is the place where I am going to trying to write 75. Now, it would be good if the compiler could give me any error that hey you had declared it that size to be 5 and you are going beyond the border all right you are crossing the border. So, be careful warning syntax error or whatever syntax error and you are not allowed to do that but unfortunately array bounds are often not checked. So, what can happen if you are not careful then it will not necessarily cause any error but will be writing something here all right it will be writing something at this point which might be when I allocated the compiler allocated the memory this part was for the max and this part were for other variables x y p and whatever value of p was there that is over written with 75. So, one must be very careful about this when writing the programs and running it suppose it is a very common thing that often you will find that there are some funny errors occurring and the reason for that maybe you have crossed the array boundary. So, it can result in unpredictable results. So, general form of initialization of arrays is the array name size with some list of values how do we so recall that we had done we can do initialization slight in text equal to 20. So, we can do 25 semical where I declare x to n integer and also initialize it to a particular value the same thing can be done for arrays for example, I can write int max 5 72 83 65 80 16 note that this initialization is within this to curly braces that means here is the array. I am creating an array whose name is max and the values are 72 for max 0 83 for max 1 65 for max 2 84 max 3 and 76 for max 4 0 1 2 3 4 5 elements. So, this is the array I can declare in this way this is one form of initialization remember that here here we are putting square brackets for declaring the dimension, but here we are putting a curly braces. Similarly, this one care name 4 I have just typed in a code for this an array. So, the array has got 4 elements and what is stored here a m i t, omith. So, basically the name is omith so that is coming as a string of 4 characters. Although I use the word string be careful about that because string has got a little more thing to it which is going to be a little bit more special describe later, but right now it is an array of characters of size 4. Now, there are some special cases the number of the if the number of values in the list is less than the number of elements the remaining elements are automatically set to 0 are automatically set to 0 for example, if you have a string of the number of values in this case I have got a variable what is the name of the array here the name of the array is total and what type of array is it it is an array of floating point numbers. And so there are 5 elements 1 2 I have got 5 spaces 3 4 and 5 there are 5. So, 5 is 5 spaces here and I have loaded initialize it to this value. So, here it is 24.2 the next one is minus 12.5 the next one is 35.1 the remaining elements which are not filled up are filled up with 0's automatically by the compiler if it is less. Now, be careful that sometimes some compilers behave in a are implemented without doing this bet. And therefore, if you must check whether your compiler usually the standard compilers do that, but you should be careful about it. So, total will be this as I have said here the size may be omitted in such cases the compiler automatically allocates enough space for the initialize variable. So, when I am initializing it then it is possible that I can write I can leave out this size because I am already writing it here in this form. Therefore, in this case what will happen flag and array will be created just for the initialized values. So, 4 element space will be given to you which will be 1 1 1 and 0 because I have not mentioned anything here, but I must give this symbol because just to distinguish it between in flag and in flag this because this is just just a variable integer variable this is an integer array. So, you must be careful about this too. So, similarly I could have done care name, but I do not put anything here and just write a my t. Now, let us come to this example finding the minimum of 10 numbers. Now, we are doing our first programming with arrays we are doing the first programming using the arrays. Now, here what we are doing is first we are reading the numbers I am reading the numbers I am reading the numbers. So, and then I am storing them in an array. So, let us look at this line by line let us look at the declarations in A 10 what does it mean that I have got an array of size 10 and the name of the arrays A. The space for 10 elements A 0 to A 9 next is a 10. So, this is the array of 10. I have got another variable I one variable another variable mean. So, that is my declaration part. Now, I am printing here give 10 values. So, on the screen I will find that give 10 values and then backslash n. So, now the user is entering 10 values and what am I doing I am reading those 10 values. Now, compare when you till now when we rate the different integers what did you do we wrote it like this right scan F percentage D meaning that is an integer amperes and num something like that we did to read an integer called num compare that with what we have done here. Here what we have done is scan F percentage D remains the same because whatever I am reading is nothing but an integer and amperes and A i that means this array is i th element I am reading this means A i means I am reading the i th element of this array A. What is the value of I I 0 initially. So, first time whenever I am I have asked 10 values so i is 0. So, first i is pointing here so i is 0. So, this that means this is pointing here I read a particular value 25 i store it here right then I go in the look what happens i plus plus i is incremented to 1 please observe this carefully this variable is incremented to 1 that means now the index shifts from here to here A 1 and I read and that is less than 10 typical for loop. So, I come here read the second value say 3 go back increment i it becomes 2 less than 10 I come here this means 2 means again this is change to the next element and I read the next value which may be 37 in that way I go on and read 10 values every time I am reading one particular integer and that is being where am I storing it that is the importance of this ampere sand that means that I am reading this at the address of A i so at this location. So, this is the first part first part of the program that has read the array now I want to find out the minimum of the array. Now, let me now so is this part clear how we read the array now so in this way suppose I have read the array some array like say 5 3 275 and this is the array of the array of the 1. Now, in this part of the program I am trying to find the minimum and that is typically what we did last time and then here in a little bit different way I am starting with the min min which is very large. So, I am assuming that there will be no data given at this point at this point at this point no data will be given which is as large as 9 9 9 9 9 I am assuming that. So, again in a for loop here I is starting from 0 that is I is pointing here I am comparing A i that means A 0 A 0 with min A 0 is less than min therefore, I can assign A 0 to min so my min becomes 5 I go back to the loop I is incremented so I is incremented and I comes here less than 10 so, I come here. What is i ai ai is Thankfully, we have a 800 that is and plus 400 and that is examples of Speed is limited today that is public says what is the total work for this particular function for this, the general work for this scheme and then we open, we open the vector which the supers紅 wall there and say this the And again compare AI, what is AI? AI is this value, 3 is 3 less than mean? Yes. So, then mean becomes 3. Again go back, increment the index. So, you see in this fall loop, I am incrementing the index. We will see how we can write it in different ways. Now, this is a very important exercise and you will have to program it yourself, meet with errors at several times, but then ultimately you will find it that is not that difficult. So, i is now 3, I again compare 200 with mean? No, 200 is not less than the mean. I go back to the loop, i is incremented. 75 is not less than the mean, I come here, 1 is less than the mean. So, this will be like this and this way it goes on. So, here we could find two distinct applications of this fall loop, one for reading the array and storing it in a set of locations and the other one is looking through that array for every element I am looking through this array and I am finding the minimum. Now, let us do a little bit of exercise before we conclude this lecture today. Say, I want to read an array of integers and I want to print that. So, what should I do? I am leaving out the standard include STDIO dot H declaration, declaration let me do int, let me call it an array m underscore a meaning my array and let the size be 10. Also, I and index i index need not be i, but it must be an integer variable and then I am starting to read that. I am trying to read that, so my program started here. For reading the array I am doing for i assign 0 i less than 10 i plus plus scan f percentage d and what am I reading? m a i. So, in a loop I will be reading m a 0 m a 1 m a 2 like that and then I want to print that. So, suppose I have read an array which is something like 3, 2, 4, 5, 1. Now, I want to print that. So, what shall I do? I will just simply again I will take 1 elements 1 by 1 and will be printing them. So, I can write for i assign 0 i less than 10 i plus plus that means I will be doing this. So, i is starting with 0 and will go up to this here I am assuming that there are 10 elements here. Other I have shown only 5. Then print f I can say that I am printing the value of m a this percentage d. So, these things will be as it is printed except for this is percentage d backslash n and backslash n and then is continuing m underscore a i. Let us see what will happen and then I conclude this. So, I have stored this now I am printing this. What will be printed? Some the printing will be something like this let me use another color for this. What will be printed is the value first iteration first iteration what will be printed the value of m a what is the value of i. I am sorry here here there should be another one written wrong there 2 percentage d. So, here should be i comma this. So, I will repeat again the value of m a then this then this part will come and this will correspond to the first variable that is i. What is the value of i? The value of i is 0 is then the second placeholder that is m a 0's value that means is 3 backslash n again it will go in the loop and what will it again print the value of m underscore a will be printed as it is percentage d the value of the index of m a 1 is then the value m a 1 is 2 is 2 like that it will be printed. So, these are two fundamental operations of reading an array and printing an array will continue for that we draw this.