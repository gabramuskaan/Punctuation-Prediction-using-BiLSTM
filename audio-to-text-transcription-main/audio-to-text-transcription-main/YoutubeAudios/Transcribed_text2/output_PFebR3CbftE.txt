 So, in the last lecture we had seen how a structure is defined. Now, we will see more examples of that in the course. So, today we will be concentrating on how a particular structure can be processed. In order to process a structure we can we have to process every field of the structure. We can operate on every field of the structure. So, we can see that a structure how can we access the member of a structure. Say for example, there is a variable like name. So, we can say overall name of this structure is say student. And in the inside student we have got name, role number etcetera. Now, I can so my variable is say all right. Let me say I have defined like this struct student then all these. Then the variables are a1, a2, a3. I am sure you are getting confused little bit. So, let us define it in the proper way as we are done in the last class. Suppose I define struct student care. Name 10 int role number. Suppose only two fields are there and I also say that the variable is variables are x1, x2. These are two variables of the type of this structure whose name is student. So, what is my variable name x1. So, here I can say x1, x1 dot this is a dot operator which tells about the member. Now, which member say I want to get the role number? x1 dot role number assign 720. So, this is how I can get access to a particular member of a particular structure. So, I can also simulate x2 dot name because that member's name is name name 3 is j. Because name has got a 10 field character. I could have written x2 dot name and I could have assigned a string to this. All these are possible. So, if this is clear then we go ahead a little bit. Where variable refers this variable is referring to is referring to the name of a structure structure type variable and member is the referring to the field or the particular member element. The examples are a1 dot name a1 dot role number a3 dot data birth etcetera. So, now here let us take the old example that we had seen that is a complex number and how we can perform complex number addition. Now, just to refresh your mind say I have got two complex numbers x and y and I want to perform x plus y. Suppose x is a plus i b and y is m plus i n then x plus y is the real parts are added separately. So, it is a plus m plus i then the imaginary parts are added separately b plus m that we know from our school level knowledge. Now, how can I perform this addition using the concept of a structure. So, here you see in the program we define a structure called complex and there are three variables a b and c of this structure type of type complex. Now, what are there that components are one is float sorry I am sorry one is real real part another is I should rename this this is actually the imaginary part. It is renamed in this way here in this program it will have been better if I had written float real part float imaginary part. However, now scan f I am reading the two numbers a is a variable a is real part is being read and a is complex part is being read note the format statements because both of them are float we are putting percentage f. And so, I read a so, you see normally I would have just done scan f amperes and a, but here I have to do separately I have to read the real part and the imaginary part. Then the sum is being stored in c. So, c is real will be c is the sum. So, it is real will be sorry it is real part will be the real part of a plus the real part of b and the imaginary part of the as it is written here complex part is the complex part of imaginary part of a plus the imaginary part of b. Then I am printing look how I am printing it printing percentage f the real part of c and plus then I put j and then the complex part of c. So, what is being done is suppose I have got two numbers 3.4 plus here I am using j something I usually use I I or j whatever you do. So, you write 7.2 that is a is real part is this and b is real part is say 4.6 plus j 3.8. Now, if I add them c will be these real parts are being added. So, it is 8.0 plus the imaginary part is added that is 11 j 11. So, what will be printed is 8 plus j then the complex part 11. So, this is I think this is clear to you this not very difficult to understand. Let us move ahead. So, you have seen here if you note here you have got the structure definition specified and here the very variable definitions and here we are doing the reading and adding them part by part how am I accessing the members I am accessing the members using this dot operator and whenever I am reading the member I am actually reading the members I am not reading the structure as a whole. Now, one thing to note is when I am declaring this structure inside the mean then the scope of these variables real and complex etcetera or this structure as such is a scope is within the mean. So, if a structure is defined within a function then as we exit that function the life of that particular structure will end at that point. Now, there are some things which we can do in a much more simpler way you remember that in the case of arrays we could not compare arrays together that array a 1 is equal to a 2 that was not possible if we had to compare then array I had to check them element by element. On the other hand in the case of a structure a structure variable can be directly assigned to another structure variable of the same type for example, here if a is a structure then I can assign another structure b to it directly. So, all the elements if there of course of the same type. So, here is one structure here is another structure. Now, if I do this operation that means assignment then this will be copied here this will be copied here this will be copied here this will be copied here but if a and b were arrays in that case that would not have been possible that a is an array and b is an array. So, the elements just by assigning a assign b I could not assign b elements to it that is not allowed in the case of an array however that is possible in the case of a structure. Secondly now here one important thing is that they must be of the same type otherwise of course, the members and the fields will not match. So, a 1 assigned a 2 I can do all the individual members get assigned two structure variables cannot be compared for equality or inequality. Now, this is important that two structure variables I cannot compare them that structure a 1 whether that is equal to a 2 that will have to do I mean what I said just a couple of minutes back was inadvertent that is wrong structures we cannot compare we can assign in a short but comparison of structures we cannot do as a whole alright two structure variables cannot be compared for equality and inequality. Now, for that what we have to do we can write a simple function say I can write and you can take it as an assignment that we can write struct comp struct C m p where you will take two structures as input and you will compare them and how do you compare them you will do say variable a 1 dot member 1 equals to is whether it is if it is equal to variable a 2 dot member 1 in that way if you do then it is possible. So, what we can do here is I have got two structures and there are two variables of the same type of the same structure type 1 is a 1 and 1 is a 2 and I have got some values here alright and say this is member 1 member 2 member 3 member 4th like that now in order to compare if I want to compare them what I have to do I will have to see if this is a 1 a 1 dot m 1 is this also m 1 is equal to a 2 dot m 1 and a 1 dot m 2 is equal to a 2 dot m 2 and and so on so forth if I do then return 1 that could be my function that means if all these are matching then only I will say that they have been compared to be the same otherwise it will return false. So, here other else return false you have to write it nicely you can take it up as an assignment areas of structures now once we know this we can now make an array of structure why is that useful let us take one problem let us say that I am trying to store the information of a class of students where maybe there are say 40 students and their information about each student has got different components name in a particular class role number and sit marks total marks. So, marks is an integer let me say role number is also an integer and name is a character array something all right now that so this box this can be also depicted as a box having three fields name role number and marks but I want to have that for all the 40 students so I will have 40 such small boxes each having three fields one of another so that can be represented as an array you know that in an array we can store data of only the same type. So, that is not causing any problem here because each of these boxes are of the type struct students therefore, I can very well consider them to be an array of such structures. So, if I call this class is this array then each of these boxes are an element of that array. So, if I say class 0 which element am I looking at this element right if I take class 0 dot name then which field am I looking at this particular field if I write class 2 dot role number which field am I looking at class 2 so it is an array 0 1 2 you know that just in C any array starts with 0 so 0 1 2 I come over here and which field am I looking at role number role number is the second field in that way I can access each element of this array either as a structure or as an individual member of that structure all right. So, in such cases or the same thing could be applicable if I want to represent a library. So, in that case what will happen a library will consist of books right. So, suppose suppose it is a small library where I have got a library of 20 books all right 20 books. So, books is an array of type what or let me let me name it differently. So, I am saying my library is consisting of 20 books at most and what is the type of library when we write any array we write int a 20 float a 20 like that. So, here what is the type of library type of library will be struct book. So, because every element of this library when I write int a 20 that means I am talking of an array where there are 20 elements and each element is of type int. So, when I am talking of this as struct book library 20 what will that mean that will mean that here is an array library having 20 such field 20 such positions elements and each element is a structure called book. I have not defined here the structure of book. So, I should have done it earlier suppose I do here struct book care name 10 semicolon that is the name of the book care author 10 the author of the book. Innt ISBM and I close that suppose this is a structure of the book having three fields only have it could have been more fields number of pages here a publication etcetera I am not showing that. So, each of these elements have got three fields here name which is itself an array of 10 characters author which is itself an array of 10 characters and an integer ISBM number. So, this is the whole element the first or one element of the array library and library is an array which houses 20 at the most such individual structures. So, if I say library 3 dot ISBM where am I going which one I am referring to 0 1 2 3 library 3 and the last element of that this is the ISBM number because there is a last one. So, therefore, using structure allows us to store different types of data together and again array of structure is a very powerful facility that has been given to us using which we can store many more things and we get much more flexibility. Let us go here once a structure has been defined like the structure book that was defined we can declare an array of structures for example, struct student class 50. So, note here that class is an array having 50 elements. So, it is something like this here is class with 50 elements 0 to 49 and what is each element each of these elements is a structure of type student must have been defined somewhere earlier. The individual members can be accessed by class whichever element I want to have say for example, struct student one field is in troll number there is a name there is marks and character. So, this is the student and I have got three variables say 1 a 2 a 3 the array element within the structure and I have defined an array earlier that is a class of 50. So, now I have got an array of which every every element is a structure like this and the structures are variable say 1 these are also the student variables also my class is consisting of the same structure. The array element within the structure can be accessed as now you can very easily guess if a 1 dot marks 2 now here here this example is telling us something more here this example is showing that any element of a and a member of the structure student can also be an array that we had defined earlier this is also an array. Now, suppose I have got this student a 1 his name is a roll number is say 1 and marks is itself an array where the marks of literature history, geography, math, science everything is stored and the rate of birth is a character array. Now, so it is say 0 7 0 7 2 0 0 7 so that is a character array. Now, when I am saying a 1 marks 2 that means I am going to this field is the marks field I am going to the a 1 structure a 1 variable and I am taking its structure and coming to the marks field or membership member and I am coming to the element 0 1 2 this particular element this particular element I am coming to by this this you must understand. So, I can have an array within a structure also I can have an array of structure till now what we are discussing was and here what we discussed was an array of structure and here what we have just now shown you is what we have just now shown you is an an example of that an array can also be a part of a structure. Next lecture we will be talking about a new thing that is that is also very important type that is very much useful for that facilitates us to create new type definitions and we can write much simpler programs with this we will take it up in the next lecture.