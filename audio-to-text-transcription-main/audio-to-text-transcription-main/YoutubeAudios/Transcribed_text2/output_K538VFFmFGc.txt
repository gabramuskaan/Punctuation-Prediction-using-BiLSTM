 In the last lecture, we had an idea of what control structures are. Control structures are some language structures by which we can change the flow of control which normally is sequential that means, one executed after another. Now, in a language we just as we had statements, arithmetic expressions, logical expressions all those statements in our language, C language you also have some control statements for achieving the control structures. What they do as I have said allow different sets of instructions to be executed depending on the outcome of a logical test. So, if we go back to the flow chart, we are coming in a sequential flow. At this point, we encounter decision point and at this decision point, we carry out some logical test. For example, is x greater than 0? Yes or no? If it be yes, there will be some flow and if it be no, there will be some other flow. Some other, not necessarily backward, it can go somewhere else etcetera. So, based on a logical test that means, this test which will result in a logical value and what are the logical values? Logical values are either 0 or 1 either true or false. So, whether true or false, this is called branching. So, again whenever I am coming to a decision box and from there I am branching out either in this direction or in some other direction. So, this is a branching branch point. So, that is the change of the control flow. Some applications may also require that a set of instructions be executed repeatedly. They will be going on, they will be executing as in the case of reading the numbers, three numbers. I will be repeating reading a number adding that with some decrementing count, checking whether count is equal to 0 and then again go back and read the number and this flow will continue. Based on some condition, how long? In the earlier example, how long are we doing that based on what condition? The condition was whether the count is 0 or not. As long as the count is not 0, we are going on doing this. So, this is also known as looping, doing the thing repeatedly, this is also known as looping. So, branching or if we go back to the earlier one, then it is called a loop. Now, how do we specify the conditions? By now I am sure you have guessed how we do that. We specify the conditions using relational operators or there are four relational operators we have seen less than equal to greater than greater than equal to. I had said not equal to also, but not equal to can also be seen as the negation of the equality operator. The equality operator is this double equal to sign and not equal to its exclamation mark followed by equal to. Now, so using this relational operators, we will get using one single any of these. One single relational operator will get one logical expression, one logical expression. And using logical operators and connectives, we will be able to connect a number of logical operations, logical expressions and another logical expression. In that way, we can carry out, we can generate the condition using this. Now, two logical operators we have seen and and or. Another unary negation operator we did not discuss earlier, but we are doing it now that is this means not. All right. For example, suppose x is 5 and at some point I compute x greater than 5, the result of this logical expression will be false. This is false. But if I take the negative of this, then this false will be negated and the negation of that will be taken. So, that will be 1, 2. That means, what is the meaning of this? Is it the case? I can read it in this way. Is it the case that x is x is greater than 5 is false? Is not true? Yes, that statement is true. I can state it in another way. Is it the case that x is not greater than 5? Yes, that is the case. Again, I tell the first one that is more complicated. Is it the case that the statement x greater than 5 is not true? That statement is true. That it is not true is true. So, that is not means whatever logical expression I have after this that will be negated. So, it is equivalent to not of the logical expression. So, if this logical expression, if this logical expression leads to this logical expression only is 1, then not of that will invert it and make it 0. Or if this logical expression was 0, then this not of this will make it 1. So, this is the unary negation operation. Let us say some examples count less than equal to 0. This is a logical expression, it will be either true or false. Maths plus physics that means here, math is the marks obtained by a student in math plus physics, class chemistry divided by 3 is greater than equal to 60. That means the average of these 3 marks is greater than equal to 60. Either the person, the sex of that person is male, sorry and let us look at this. It is an using a logical connective, the person this will be true. If the person is a male and his age is greater than or equal to 21. So, for a female of age 22, this will be false. For a male age 20, it will be false. A male age 25, it will be true. Here again another one with this connective, marks is greater than 80 and marks is less than 90. A sorry marks is greater than equal to 80 and marks is less than 90. That means what? Anything starting from 80 to 89, if the marks is between this, then this will be true. Another one with an OR operator, balance is greater than 5000 or the number of transactions is greater than 25. So, in a bank situation for example, you are making a lot of transactions. What is a transaction? When you deposit a money, that is a transaction. When you withdraw money, that is also a transaction. So, they are different transactions. So, what we are saying here, either I have got 5000 rupees, greater than, sorry, greater than 5000 rupees in my balance or I have done more than 25 transactions. If any on of them true, suppose you have got 6000 rupees in a balance and number of transactions is 26, then also this is true. If the balance is 6000 and number of transactions you have done is only 20, then also it is true. We have already explained the role of OR operator earlier. Now, this, if the grade of the student is A, if a student has got grade A, what will be the value of this logical expression, true or false? If the student has actually got the A grade, all right. So, this one, this part will be true, but my actual logical expression is this one, which is the negation of that. So, it will be false. Because the person has got grade A, what does it mean? It means that is it the case that the student has not got grade A, okay. Here is another little more complicated, X greater than 20 and Y less than 16. Now, the way we should evaluate this is, I will evaluate each of them separately. Suppose X is greater than 20, suppose 21. So, this is true and Y is 15. So, this is true. So, both these together is true. Then I take this one with this and so the result will become false, okay. Let me clear it again. Suppose X is 21. So, this part is true. Then I compute this, Y is 17. This part is false. Therefore, these two are connected by this amperes and that means logic is or not, I am sorry, very sorry. It should, it is not amperes and double ends that means and operator by logical end. So, these two will result in through the logical end, it will result in 0. But my actual expression is a negation of that. So, the result will be 1, okay. Clear? Okay. So, that is how we carry out, these are the examples of evaluation of logical expressions and logical expressions. So, each of them, each of these logical expressions can serve as a condition in our control structure, in our this loop, in our this diamond box, decision box where we test or let us call it the test box, in that any of these sort of logical expressions can recite. And the result of that can be either 0 or non-zero, false or true. Okay. Accordingly, we will branch out in either this direction or in some other direction. Okay. So, 0 indicates false and non-zero indicates true. Typically, the true is represented by the value 1 in most of the machines. Okay. This is something that we have already said, the decision symbol in the flow chart indicates the decision to be made. It contains an expression that can be true or false, test the condition and follow the appropriate path. That is how we will do. It is a single entry, single exit structure. That means, that means, in this diamond box, we will enter through any one point and we will exit from only one point either this or this simultaneously we cannot come out of this, because the thing cannot be true or false at the same time. Therefore, any one exit will take. The general syntax, syntax means what? Syntax means the grammar, the exact grammatical structure that we should write is if condition, then I carry out some operations. You have seen in an earlier lecture, when we were comparing two numbers x and y and would be printing x is large, if x is greater than y, then what did we write? We wrote something like this. We wrote if x is greater than equal to y, print f, what? We printed y, x is greater than equal to y, x is large or not in this form. We wrote down that x is large here. If this condition is true, then I will be doing this print operation. x is large, then backslash n, I am not being able to write very clearly here. I try again. If x is greater than y or greater than equal to y, this is the condition. You see this f, this is a reserve doer in c, then the condition. If the condition is true, then this is followed by a statement. Now, if it be a single statement, I do not need to give this curly bracket, but just I am giving it just to keep the parity. Here, I write print f, x is large, then backslash n, and we end this statement. If this condition is true, then this statement will be executed. That is my syntax. Otherwise, some other statement will be executed. This is something which takes some time to settle down. We will explain it repeatedly to some extent. If there is a single statement in the block, this braces can be omitted. I am sorry, this braces can be omitted. Now, let us come to this structure. If statement, first of all, we are looking at the first and very important control statement in c, that is the if statement. If some condition. So, we come here. The structure is, we carry out some test on some condition. Grade is greater than equal to 60. If it is true, then we do something. Here, I print past, otherwise, I write something else. So, this is a selection structure. What is it selecting? It is selecting which path should I go? Now, you see here, we have come, we were coming through this path. If this here, I carried out a test. If this test is true, I do this, do this, execute this statement and come back and continue. Not come back, I will come and then continue this path. If this statement is not true, that means, if this test fails, then I will not take this, I will not select this path, I will continue in the path in which I was going. So, that is why this is often known as a selection structure. So, our decision can be made on any expression. Here, you see, only thing that we are trying to do is test whether some condition is true or false. Now, if the result of an expression is 0, then we take it to be false. And if it be non-zero, then we will take it to be true. If I evaluate something to be true, like say for example, if x was 5 and I carry out, x is x equal to 5, this logical expression will evaluate to true. That means, 1. That means, it is non-zero. If I had written x less than 5, then it will have resulted in false, it will be 0. Now, suppose I simply do something different. I write in this decision box, I am coming like this and inside the decision box, I write and x was 6. Say, I do not write a logical expression here. I write an arithmetic expression, x or that means, x was 5. I carry out some expression, x plus 5. What will the result of this expression be? It will be 10, that is it is non-zero, then also it will be taken as true. Although we do not need it all the time, you need not bother about it. But in general, a decision can be made on any expression, typically and most conveniently, we will be using logical expressions. But if I carry out an arithmetic expression, something like A times B plus C minus D, then also this will give me a value and this value, if 0 means it is false and not 0, then it will be taken as true. Non-zero will be taken as true. However, this is just a matter of detail. You need not get too much bothered about it right now. We will try to keep as much as possible, relational expressions or logical expressions inside this test blocks. So, here if grade is greater than equal to 60, print pass 10, that means, this is the equivalent of this structure that we have shown here. This flow chart can be simply written as this statement. I think call of you will be able to read it now. If has been given in a different color because this is what we have introduced here, this if is the use of if the selection structure followed by a condition. If the condition is true, then this statement will be executed. If the condition is false, then this statement will not be executed, we will bypass this statement. Now, please remember this. When I write if some condition, some statements, these statements will be executed, only if this condition is true. I write it in a different way now. Say for example, I have got a number of statements, some statements are there and then here there is an if statement. If condition, then some statements here may be more than one statements are in a brace. Now, if the condition and after that there are other statements. Now, if the condition is true, then only these statements will be executed. Let us name this statements to be a, then this block a will be executed. This block will be executed. If this condition is false, then this block a will be bypassed and on false, I will come here and come to say this block b. If the condition is false, then the block b will be executed. If the condition is true, then this block a will be executed. Now, suppose let me explain in a little different way. I am drawing another diagram. Now, here is some block of statements. Let us call the block of statements to be a. Then I have one statement if condition, whatever the condition is, then within parenthesis, there is a block of statements b. Then there is a block of statements c. The flow of the flow will be that first a will be executed. Then if the condition is true, then if the condition is true, then b will be executed. After that what will happen? After that again will come here and c will be executed. Now, if the condition was false, I would have computed a. After that what would have been computed? Condition would be checked. b will not be evaluated, not be executed because condition is false. After that c will be executed. So, please note that in this structure, I am executing c either way. Now, the choice of whether b is being done or not is dependent on the condition. This gives you an idea of if the condition is false, then also this part will be executed. Here we will conclude today with this example, small example program. Let us try to understand each line of them. We start with include stdiu.h. I hope you have not forgotten that any c program must have a main program, main function and here is the main function. Inside the body of the main function what is being done? I have declared what is being done here? I have declared three variables a, b and c. Then what am I doing here? Observe this line scan f percentage d percentage d percentage d and a and b and c. So, I am reading three variables a, b, c. Now, what am I doing here? I am evaluating and if condition? If a is greater than equal to b and a is greater than c. So, you understand that if a is a number b is a number c is a number a is greater than b and a is also greater than c. That means, a is the largest number. So, then I print this. I print this only if this condition is true. Otherwise, I will do something else. Now, suppose a is greater than b. Suppose a is 20, b is 10 and c is 5. So, this one will be true. Then the largest number is a that we printed. Next statement will come to is another if statement. What is being done here? If b is greater than equal to a and b is greater than equal to c, b is not greater than equal to a. Therefore, this does not evaluate to be true. Therefore, this statement does not execute. Next, I come to this statement. I am flowing this. I am following this flow but only branch that I took is if this condition was true, then I printed this in this particular case of data. In this case of data for some other case it will be different. Now, if c is greater than a not true. So, this falls this will not be executed. So, the only thing that will be printed is the largest number is a. Now, if for example, a was 10 b is equal to c was 20 and c was 5. Then what would have happened? Let us see here a is greater than equal to b. I try to test this fail. So, this will not be executed. So, I come here and then I test this b is greater than a and b is greater than c. That is also right. So, this condition passes. Then I execute this. I print larger number is b. I print that and then I come to the next statement. What happens in this statement? c is greater than equal to a no falls. So, the only thing that is printed is the largest number is b. So, we stop here. We will continue our explanations in the next lecture. Further we will need to discuss it and also try it a little bit more because from this point onwards our logical constructs are big stuff have started becoming just a little more complicated. But is very interesting and it is very easy to understand if you just try to think about it logically. Thank you very much.