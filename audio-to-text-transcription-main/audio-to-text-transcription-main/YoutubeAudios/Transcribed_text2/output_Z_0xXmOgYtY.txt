 In today's lecture, we will look at a very important concept of programming. It is required to conceptualize and understand the thing very well, so that you can have more flexibility with programming. We have visited this idea, the concept of pointers earlier in the context of our discussions of call by value and call by reference. So, if you recall at that time, we had talked about the variables which are in the memory. So, suppose I am talking of a variable x, y, z is the name of a variable. So, that variable has got some address, that address may be say 5000 in the memory and who has allocated this address, that address has been allocated by the compiler. Now, if I have another memory location, another memory location, say part of this, part of this which I am not, I am just drawing separately, whose address is 7000, say this one, 7000. And inside this location 7000 as its content, I write 5000. And I say that whatever is the content of this location 7000, that is the variable I am interested in. So, can I say that if I now give a symbolic name P to this 7000, I can say or say this is P, that this P is pointing to x, y, z, because P is containing the address of x, y, z. Therefore, P is a pointer to a variable x, y, z. We also say that P, right now it is pointing to x, y, z. But if I just change the value of this location 7000 and make it say 6000, then it will probably point to some other location here. So, P is therefore, a pointer variable. But when I say that it is a pointer variable, then it is not pointing to any particular data, it can point to a type of data. So, instead of making this statement that P is a pointer variable 2 a variable x, y, z. Say this one is P, y, z. Now, as I change this now P is a pointer variable 2 a variable P, y. So, if I generalize it, I will say that P in this situation where I have got x, y, z at 5000 and P q r at 6000. I can say and 7000 is a pointer P, and I can say P is a pointer variable pointing to say x, y, z and P q r are both integers to an integer or it could be a float or it could be some other data type. So, pointer to a particular a particular data type, y I specify the data type will be clear in some time from now. So, we have got a pointer. The concept, the most important concept here is that P is a pointer P is a variable, that variable is holding some value and that value is nothing but an address of another variable. Address of another variable. So, now, let us look at this the basic concept. Every stored data items occupies one or more memory cells whenever we declared a variable the system allocates memory locations to that variable we know that variable. So, need not spend more time on that. The number of memory cells required now this is important you also already know that the number of memory cells required to store a data item depends on its type typically for care we need one byte for int we need two bytes for float we need four bytes etcetera etcetera etcetera. So, since every byte in memory has a unique address this location will also have its unique address, every element will have a unique address. So, let us see here the same example. Consider the statement int xyz assigned 50 this statement means that the compiler will allocate for this xyz some location and put the value 50 in that location. Suppose the address is address of xyz is 1380 here xyz is a variable and 50 is the value and 1380 is the address of that variable we know that we have discussed it earlier. Now, during execution of the program when the program is being executed the system always associates the name xyz with the address 1380. So, whenever in the program we find xyz the variable xyz being referred it will go to the memory location 1380 and fetch that. So, the value 50 can therefore, be accessed by going to the location 1380 and accessing it. Now, the variables which are holding these addresses are known as the pointers. Now, memory addresses are just numbers. So, I can also store them in some variables and these variables which are for example, the address of the variable that will hold the address of variable xyz is the pointer to xyz. So, it is also naturally stored in some memory location. So, this is just the example that I was discussing right now. Suppose we assign the address of xyz to a variable P then P is said to point to the variable xyz. Now, how do I I was just drawing this I was comfortably drawing this that there is 5000 here xyz and 5000 here and I was simply saying that this variable which was in location 7000 was pointing to this. That means, this was being loaded with 5000 how is that being done how is 5000 being written inside this location. The statement is just like any other assignment will be that this variable's name is P. P is assigned the address of xyz. So, P assigned and xyz right. Now, so here we can see that the variable xyz its address is 1380 value is 50. P is a pointer variable whose value is 1380 because it is pointing to xyz. In our diagram that I was drawing by hand this P was holding the value 5000 and its address here is say 2545 in my diagram it was 7000. So, this is a picture 1380 is the address of 50 and P which is located as 2545 is holding the address 1380. Now, this concept whenever you find difficulty in dealing with pointers my suggestion always to the students is draw a piece of diagram and then you make the whole picture clear in front of you. Tussing the address of a variable now you know that if I put the operator and amperes and immediately before the variable that will return the address of the variable like and xyz will give me the say the value 1380 which is the address of xyz. The address of xyz is assigned this operator and can be used only with a simple variable or with an array element. For example, and distance and x 0 that means the address of the first location of the array x and of x i minus 2 all these things are possible. Now, what is illegal? This is illegal the reason is obvious 235 is not a variable it is a constant. So, it does not have any fixed position in the memory. So, it is not a memory location therefore, it does not have any address that is meaningless pointing to at a constant that is not possible. Say int I cannot say and air because this shows that a r r is a particular variable but it is an array therefore, I have to I cannot show it like this it is just pointing at an array name is not pointing at the array we should we cannot also do this and a plus b that is also not possible because this will be say again if I have a as some value and b has some value then I add that and that will be a value and a value does not have any address that is pointing at an expression. So, here is a quick example I think I had shown this to you earlier say I have got three variables number of variables one character one double floats. So, if I put say I am assigning some values to these here I am putting some values and print F a particular variable A is stored in the address and B B is stored in address and B C is stored in address and C so and so forth. Therefore, if we run it will get the addresses coming out. So, 10 is stored in location so and so 2.5 is stored in location so and so. Now, here incidentally it is just incidental that just for the sake of example all these are contiguous locations but they may not be contiguous locations also all right. So, 10 is stored in location A is A was having the value 10 is stored in location so and so like that it goes on. So, pointer declarations when we declare some variable as a pointer the typical the standard form is this data type shown in red that is very important and this star this is something new that you also saw this in when we were discussing call by reference. For example, int is a type star x y z x what does it mean? It means that x is a variable of type integer x is a variable sorry sorry absolutely sorry x is a pointer which is point enabled or which is allowed to point to variables of type integer only only integers can be pointed out pointed to by x. So, this is similarly I could have said float star p that means p will be a pointer that can only point to floating point numbers only. All right. So, 3 things are specified in this in this declaration one is that this star tells that the variable pointer name or p whatever you call it is a pointer variable not a normal variable and asterisk is so is is telling that it is a pointer variable. Pointer name is a variable therefore, it needs a memory location and pointer name points to a variable of the specified data type. So, these 3 things you must remember when you are handling with a pointer. So, here is an example int star count what does it mean? That means, count is a pointer variable why a pointer variable because this is preceded with a star and where can this pointed variable point to to all data data variables of type integer. Speed is again a pointer because it has got this asterisk and where can speed point to speed can point to variables of type float. Once a pointer variable has been declared it can be made to point to a variable using an assignment statement like this in star p x y z. So, in star p is a point p is a pointer variable x y z is an integer. So, you see by the same declaration I have declared two things one is a pointer to an integer and an integer. So, if I make such an assignment like p is assigned and x y z. So, x y z is here and its location can be 5000 and p is a pointer variable and so, when I do this assignment this might be in the location 7000. But when I do this what it does is it loads this 5000 here. So, now p is pointing to x y z. I hope it is clear now. So, this is called pointer initialization. The things to remember is the pointer variables must always point to an item of the same type one pointer variable either it points to an integer or it points to a float or it points to an array of characters whatever it is. Assigning an absolute address now. So, here for example, this is an error why? Why is this an error? x is of type floating point x a variable and p is a pointer which is allowed to point to only integer. But here I have made an assignment where I am assigning to p the address of the floating point number that is not allowed. So, therefore, I am forcing p to point to x but the type of p and the type of x are different. So, assigning an absolute address to a pointer is prohibited you cannot do this you cannot you cannot do this. You cannot force a pointer to a constant value that you must keep in mind. So, how do I access a variable through a pointer? Once a pointer has been assigned the address of a variable the value of the variable can be accessed through the indirection operation. Now, here you have to think of again we are talking of star. So, let us give an example first. For example, a b are two integers let us draw this. I am sorry. Suppose a is a location, b is another location both of them are integers and p is a variable which is allowed to point to integers and what I do I assign to p the address of a. So, the address of a let us say it is 1000 or 100. So, 100 is written here. So, it comes here. Now, I say so this what did this statement to 100 was the address of a that has been assigned to p. Now, what is being done by this b is being assigned star p. That means, whatever is b is getting the content of where p is pointing at. Suppose this was 50 then b is getting 50. So, a little bit of confusion can occur because of these two star p's. Please understand that this star is just telling you that p is a pointer because it is coming in a declaration statement. On the other and here it is not a declaration statement it is an assignment statement. I have already declared p to be a pointer. So, p is a pointer. So, once a pointer has been assigned the address of a variable. Once a pointer has been assigned the address of the variable that is done in this step. The value of the variable can be accessed using the indirection operation. That means, which variable say I could have done this p assigned a. But, I am not doing this sorry, we have p assigned b assigned a. Instead of doing that what I am saying if I make just note my two English statements. One is the value of a is being assigned to value to b statement number 1. Statement number 2 is or b is being assigned the value of a statement number 1 statement number 2 is b is being assigned the value of the variable that is being pointed at by p. So, here one is b is assigned the value of a one statement. Here that is this statement and this statement is b is assigned the value instead of of a I am saying is being assigned the value of the variable pointed by by p. So, this is an indirect way of saying that. So, this is something that you must very clearly understand. Look at this once again. So, I can now say that this thing is equivalent to b assigned a but, I have done in indirect way. If you have understood this then pointers should be clear to you. Here look at one example. Integer a b c assigned 5 and p is a pointer to integers. Now, in this statement what has been done? a is being assigned 4 times c plus 5. So, c is being added to 5. So, it is becoming 10 and 4 times 10 is 40. 40 is being assigned to a. Here what is being done? p is being assigned c is address. So, wherever c was say address 1000. So, that is being assigned to a variable p. So, p is becoming 1000. Now, b what is b being assigned? b is being assigned 4 times star p plus 5 what is star p? star p sorry c is a star p is nothing but the variable c is pointing to that and whatever was its value. Suppose it was 10 it was sorry it was 5. So, that value is being taken and 5 is being added to that. So, it becomes 10 times this. So, these two are essentially equivalent. So, here is another example you have seen this example very similar to this that I am defining a pointer p t r is a pointer x is 10 you just think of what it should print. x is 10 p t r is the address of x p t r is the address of x here and y is being assigned star p t r what does this mean? p t r is pointing to 10 and y is being assigned to star p t r that means, y is being assigned to 10 or y is being rather I should say y is being assigned x and x was 10. So, y is becoming 10. Now, if I print person is stored x x x instead of x what will be printed? Instead of x the value of x will be 10 is stored in the address this. Similarly, now what is this? star and x what does this mean? And x is the address of x and where that is pointing to these two should be same. So, if you look at the result this is equivalent y and x is the address of x and star just like star p that means, the content of where the pointer is pointing to. So, these two are same right. So, p t r is and x p t r has is the same and x is nothing but p t r. So, these two are all equivalent if I say and x that means, I am taking the address of star p t r. So, this is something you can toy with yourself and you will get a print out like this. So, these two are the same. Now, here we are coming to something more which is known as pointer expressions and we will deal with that in the next lecture.