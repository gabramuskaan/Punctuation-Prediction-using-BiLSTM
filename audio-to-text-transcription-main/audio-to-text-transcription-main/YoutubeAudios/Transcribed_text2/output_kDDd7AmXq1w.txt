 Earlier, we had talked about storage of data in arrays. Now, what we found, what we mentioned in the case of arrays is that in an array, we can store data only of a particular type, particular say an array of integers or an array of floats or an array of characters, but we could not mix different types in the same array. For example, we had faced the problem of representing the students' database, where we will have the students name as well as the students' marks. So, we needed something like this, actually that is what was desired, that we will have the names here and names will be nothing but an array of characters. So, here will be some names, ABC and here will be the marks 56 say. Now, this representation requires two arrays, one is the representing the names as one array and representing marks as another array. Now, however, as the diagram is showing here, we are trying to represent them in an unified structure, in the same structure, but that is not possible in the case of an array. Here, we have got two different array types, this is an array of characters and this is an integer. For example, similarly, we can see that if I had stored something that say, for example, I want to store a graph, a graph where at every point 1, 2, 3 seconds, for example, this is time in second, and here I am measuring the temperature. And if I have a graph, which is something like this, I cannot say that at every point the temperature will also be an integer. Therefore, if I had tried, so suppose here at point number 2, the temperature is 50.34. At point number 3, the temperature can be 70.2. So, if I had tried to represent that in the form of a 2D array, in that case, it was not possible because a 2D array is also an array and therefore, is of only one type. We have to declare a 2D array as an array of integer or as an array of characters or array of float. So, I cannot represent that in a 2D array, where one side say, for example, one will be that one column, will be temperature and another column will be the time and temperature. So, that was not possible to be done in a 2D array because time while time will be an integer 1, 2, 3, temperatures can be something different 50.6, 70, 0.3 etcetera. So, an array is not possible. So, our question is, then what is the type of data structure? What is the type of arrangement by which I can represent data of different types together? And the answer to that is what we will be looking at today, that is structure. Structures in C allows us to represent a combination of different data types. For example, let me give an example of a structure. Say, I define, I want to define student data and student data will consist of the student name. Say, the department of the student, role number of the student, may be the CGP of the student, great point average of the student etcetera. Now, let us look at, if I want to store them in, store them together as a common piece, a student data, then this entire thing, this student data has got components of different data types. For example, what will be student name? Student name say for example, Amit will be either a string or an array of character. Department somebody can say mechanical engineering, that can also be a character, character string. Whereas, role number 748 will be an integer. And CGPA say 7.8 will be a floating point number. So, what we can see that in order to store the student data, we have to have a mixture of different data types. So, a structure allows us to do exactly this, where I can consider the student data as a structure. So, let me redraw it in a different way. So, I draw a box now, which is representing the student data. I name it stood data. And I have got different fields in this. One field and each field has gotten some identification. So, this field is storing the name. And this field is basically a character array, a type of type character array. So, another field is name is department and its type is also character array. Another field, remember that every time I am using the term field, field of student data. So, name department, what is it we have? Role number, which will be of type, integer and CGPA, which will be float. Suppose, there is no other field. So, we call this entire box to be a structure, this is a structure. And what is contained in this structure? There are four fields that define the structure. The four fields are name, department, role number and CGPA. These four fields are defining a structure. Now, C allows us to define structures of this type. And we will learn how we can define such things. And let us go ahead a little bit. What is a structure? It is a convenient tool for handling a group of logically related data items. Here of course, the logically related data items were the different information fields or information component that are related to a particular student. So, till now we saw very simple data structures like array. Now, here for example, I have got related components, student name, role number and marks or CGPA or for example, a real part and complex imaginary part of a complex number. For example, if I had tried this, say for example, if you know that a complex number is stored as a plus i b, that is a complex number. Having so, this is x, where x is a complex number, a plus i b. So, maybe x is equal to 4 plus i 3. All of you are aware of that. Now, how do I represent? I know how I can represent an integer. I know how I can represent a floating point number. But now, the question is how I can represent such a complex number. Now, obviously, I can immediately think of that well, let me have a structure like this, which will have two fields. One is the real part, this is a real part. So, I call it the real part. Another part is the imaginary part. And I can store this number simply as 4, 3. So, the imaginary part is 3 and the real part is 4. So, the complex number instead of being an integer or a float is essentially a structure. There is another very common and easy use of structures that you can see. So, whenever I refer to this variable x, which is of type complex, I will be referring to this structure and not neither at 4 or nor at 3. I will be looking at this whole thing. So, it helps us in organizing a complex data in a much more meaningful way. The individual structure elements that I was talking of, which is which I was mentioning as fields is also known as members. Now, you will find other names to structures also. So, structures are sometimes called records. And each of these horizontal boxes that we are drawing, where fields of that record or in terms of when we refer to it as structure, we call each of those smaller boxes as members of that structure. So, the composition of a structure can be defined as follows. Say a structure, I can put a tag. Now, this is very important. What is a tag that I am putting over here? Say for example, earlier I was talking of student data. So, my tag could be stood data as I had written. So, I have to write struct stood data. And inside that I have got several members. And what were my members? My member was name. My member was role number, department, role number and C G P A. So, I had four members of this. Now, each of these were of different types. That is something which is very important to understand. So, struct is the required keyword. I must write this word struct so that I can really show that it is what this tag is just the name is the name of the structure like stood data. So, that is a structure just as we had done for other variables. We had done say int x float y etcetera. So, here also instead of int or float, I have to say struct and what the struct is that is defined. So, first of all I have to define the structure. Int and float are defined by default. NEC compiler will understand what int or float is. But if I write struct, then by default the compiler will not understand what the structure is because there can be different structure. One structure for student names, one structure for book details. If I had thought of book detail, I want to store that in a structure. What will the components be? What will the members be? Can we just think of? The members will be of course, the title of the book, the author of the book, the publisher, year of publication, the ISBN number etcetera. So, therefore, each of these members will again be of different types. So, it will be a heterogeneous organization just as it was with the student data. So, we have to write if I want to define books. For example, I would have to write struct book followed by the definition of the members. So, this is equivalent to as if I am drawing a structure and its name is becoming book and I am defining what are the members of this structure. Let us move a little ahead. So, member 1, member 2 etcetera are individual member declarations. We will see more examples of this. The individual members can be of different types and that is the beauty of structure. The individual members can be ordinarily variables, pointers, arrays or other structures. It can even be other structure that is very important. It can be some variable just as name or it can be an array. So, name was a character array or it can even be a structure that means I can have a structure within a structure. So, it is possible that I will have something like this that I have got a structure. One field of the structure is a character array. Another field of the structure can be an integer variable or another field of the structure can be a structure itself. It can be another structure where there are more members inside. That is also possible. So, that is the beauty and the flexibility that we get from structures. So, the member names within a particular structure must be distinct from one another. We cannot put the same name to two different structures. Once a structure has been defined, individual structure type variables can be declared as struct tag variable one variable to variable name. I think it will be much more clearer if we go through an example. Let us look at this example. A structure definition. First I start with a structure definition. Struct student and then I put just two parenthesis to show that there will be some members defined inside. Now, how do I define the members? I say that name one member is name which is an array of character. The next one is role number which is an integer. So, role number is a variable. As I said that a structure can be a variable or can be the array or can be another structure. So, here is an example where you have an array and a variable of type int. Again, total marks can be integer. Data birth can be character and the sizes. So, data birth is again of type array character array because the data birth can be say 10, Jan, etc. 2010. So, like that it can be a character array. So, how do we so this is however structure is defined. Now, I am now defining the variables. I have defined the structures here. So, I know once the compiler reads this and finds that well I have got some character, some definition of some variable called student. I know that that is a structure and what is the constituent of that structure? This is these fields. Now, this is just a type just as we had int, float, etc. or care. Those were data types. Now, I am saying that I have got a structure of type this where there are four fields but the data has not been put. This is very important though there are four fields. One field is name and I say that is an array of 30 characters and there is a role number role which is an int. Total marks is an integer and data birth is an array. But you see that there is no data already put inside this array. Now, we have to name variables A1, A2, A3 are variables of type student structure and what is that student structure? This is a structure. So, A1 will just be a copy of this structure and A1, a variable A1 may have if I take this may have some name like Amit here. Role number may be 560 and total may be 700 and data birth can be something. That is one particular instance of this particular structure. This particular structure that has been defined. This part must be very clear to all of you. So, I have defined three variables, A1, A2 and A3 each of type type what? Type structure student. So, type is struct student. We have got these fields as its constituents. So, struct student tells us a new data type and these are the variables of the data type. So, it is also possible to write it in a much more compact form like struct tag and then. So, I write struct student and I declare care name 40 int role in total marks care, data birth, 10. And then I could have put the variable say 1, A2, A3 inside this note that here the semicolon is coming here that is the end of the definition. So, here I have done it in a much more compact form compared to the earlier one in this form of course, this tag is optional. So, what I mean is say I define once again give an example to you say a complex number. I can write it as struct complex and members are int need not be always integers. So, because if I want to store data of type say data of type 4.5 plus i 7.2 then I want to make float real float imaginary. And that is the end of the structure and I can say struct complex x 1 comma x 2 this is one way of representing structure. What does it mean? That I have first defined the structure called complex which will have these two components and then I define that x 1 and x 2 are two variables of type this complex or I could have written it also. Now, if I do it in this way I have got an advantage that later on I can also once I define it I can define some other variables also y 1, y 2 over here or I can also define it as struct float real part. Let me in order to that you do not face confusion let us write real part float imaginary part and then I can say x 1 comma x 2 note that here I have not written the thing complex I have not written that I could have written it would not have affected me in any adverse way but it is not necessary to write it over here. So, if I write this how will the compiler always you should think what will the compiler looks at it what will it think what will it possibly do. So, the compiler is trying to understand okay now it is there is no ambiguity because it knows that x 1 and x 2 are two variables of type structure and the structure is defined here itself I need not given in name but the advantage of giving a name is say I give the name complex here here I have defined x 1 and x 2 later on also say for example if I have done in this way I could have later on down the line in this program I could have written struct complex say y 1 z 1 is possible because I have already defined struct complex okay. So, there is a choice over here which you can think of let us go ahead a little bit. So, in this case the tag is optional so here is an example will conclude this lecture with this example. So, struct student character name 30 in troll number in total marks character data birth 10 a 1 a 2 a 3 that means a 1 a 2 and a 3 are 3 students student information 3 pieces of student information or I could have done it in the way I have just now shown the same thing without giving any tag over here these are equivalent okay. Now, next lecture we will talk about how do you process a structure that will come in the next lecture.