 In the last class, last lecture, we had discussed about variables and values and we explained that variables are mapped by the compiler to different memory locations. So, whenever we mention about any variable x, y or z, each of them corresponds to a memory location. Each of them corresponds to a memory location and each of them corresponds to a memory location and whenever we assign some value like say 22 x that means, in a particular memory location that value is written. So, we had done this example once again we quickly go through it that x is being assigned to n t. So, the memory location corresponding to x is getting the value 20 where as the memory location corresponding to y can be anything. When we assign in this statement the value 15 to y then 15 is written in the location corresponding to y. When we do y plus 3 and assign it to x that means, actually we are reading this value of y here reading the value of y which is 15 and we are adding 3 with that and we are getting 18 and that 18 is written into this location. This may appear to be very simple but this way of thinking or way of looking at the things will come in very handy as we will see at later during the later phases of programming. Now, here again when we are what is being meant by this statement that the value how will I read it? I will read it like this that the value of x value stored in x that is 18 will be divided by 6 and that result will be stored in y. So, x was 18, 18 has been divided by 6 and we get 3 and that 3 is written in y. Now, here there are a couple of things that what is this 18? What is this? This 20 these are values and whereas, these are variables these are also known as constants. Constance are the values which do not change during the execution of the program. Next, we can now we can think of the software. Now, you know any computer system consists of hardware as well as software. So, we will have some hardware as well as software. Now, the hardware is consisting of the CPU, the memory, the I O devices all those things are hardware and the software is the instructions that this hardware that is executed by this hardware. The instructions that are executed by this hardware constitute the software. Now, software can be of two types. For example, first one is the application software. Application software is a software that we write. So, you can we can just have an idea of this through this onion type of diagram. At the core we have got the hardware. The hardware is here and I am putting two layers around this and the user is standing somewhere here and the user is not directly interacting with the hardware. Why? Because the hardware merely understands 1 and 0s and it is very difficult for the user to write in 1 and 0s. So, the user will write in some high level language, high level language, HLL in which the user writes and the system automatically converts it into a way that is understood by the hardware. And what is that automatic way of converting it? We have seen that is compiler is a software. Compiler is again a software. A compiler is a software which converts. So, before coming to application software let me talk about system software. So, we know that when the user has written something in high level language that is converted by a program called compiler into the machine level language or high machine level language which the hardware understands. So, the compiler is let us mark it like this is a part of this layer which is the system software. Similarly, operating system is another very important software that is lying in this layer internal layer which enables the user to use the computer in a much more user friendly way and in a much more efficient way. So, operating system, compiler, etc are the core very important elements of the entire computer system without which we cannot we would not be able to use the computer in as efficient way as we do it nowadays. Now, given this hardware and this layer of operating system and compiler and other systems software. Now, we are in a position to write some programs for our day to day use. For example, a company wants to find out the salary information of the people they can use some payroll software here or for example, you want to design some data analysis software that will take some data and using a particular software will analyze the data statistically and give you some good insights. So, all those things the user is writing and they are forming the application software. So, most of the time the programmers who are not systems programmers not the system designers but just users they mostly use the application software. Given this, we come to a very important software which we just now mentioned that is an operating system. Now, you know that you are aware of the typical operating systems like windows, linux or unix. Nowadays appless becoming popular, macways all these things are operating systems. Now, what is the operating system? The operating system is a layer around the hardware which enables a user to use the software, use the computer system and sorry, use the system in a much more user friendly way. Now, there are different varieties of operating system, single user operating system, multi user operating system etcetera. Now, this operating system also activates another system software that we have talked about that is a compiler. The operating system will call or will activate the software system software called the compiler when you want to run a high level program. Given this background, let us now move to discussion on programming. We know by now that programming means we have to express our intention of solving a problem by executing a number of steps. And those number of steps once again, you know that by now, we start with the algorithm and that algorithm can be expressed in different ways like pseudo code or flow chart. And then the programmer actually writes them in a high level language, some high level language. Now, what we are going to discuss now is a particular high level language which is called C. We are taking C just as an example of an high level language. Because, we have to express the logic in the form of some high level language, we are taking C as an example. And as I have mentioned earlier that the logic, the style and the philosophy remains more or less the same across different programming languages like Java, C++ and others. Of course, C is the simplest to start with. Let us see. Now, we are using the term language. Think of a human language. Any language is constituted of some vocabulary. The vocabulary, say for example, in English, the vocabulary consists of some words. Different words like say bird is a valid word in the English vocabulary. Now, but if I had written RBID that is possibly not a valid word in the English language vocabulary. Now, we have got some valid words. Similarly, C will also have some valid words which we will see through which we can express the basic elements of a C program. Just as English sentence is built using English valid English words otherwise the meaning will not be understood. In the case of C programming language say C will have its own vocabulary. The words valid in C. Now, if I had written some word in English that is some string, some pattern in English like RBID that unless this has got some special meaning this will not be and if this is a part of a sentence this will not be very clearly understood by anybody. Now, when I have written a C program who is going to understand this for whom am I writing this C program? I am writing this C program for the compiler C compiler. I am writing it for the C compiler and the C compiler is responsible to understand this. And just as we understand an English sentence open the door. So, we understand the meaning of that sentence we go and execute that we open the door. Similarly, in C if we write something unless the compiler understands this it will not be able to convert it to the machine language which will be executed by the hardware or the computer. So, the C program must constitute of valid C words and we will see what are the valid words and what are the rules for that. Now, the next thing if I write a particular sentence I saw a bird that is a valid English sentence. Why is it valid? Because it is grammatically correct and also it is carrying a very clear meaning it is a meaningful sentence. So, this is both correct grammatically by grammar and also it is meaningful. Now, suppose I wrote it wrote something like I seize a bird. Now, this is grammatically wrong. However, it conveys some meaning I understand that the person who wrote this is weak in grammar he is not very much conversant with the subject verb agreement but still I can make a meaning out of it. On the other hand for a compiler if I write a C sentence let me call it not say sentence let me call it C statement. Now, a C statement that means the statement in the language C will consist of some valid words in C and also it will have to follow some grammatical rules of C. Unfortunately, here although it is grammatically wrong I could understand the meaning of this but a C statement if it is grammatically wrong grammatically according to the grammar of C. If it is not in tune with the grammar of C then it is grammatically wrong and since this C sentence will be interpreted not by a human being but by a machine a computer however smart it may look like is basically not as intelligent as human beings. So, that as of now so whatever we can make out the meaning out of it a compiler C program will not the compiler will not be able to make out correspondingly the correct machine language cannot be generated. Therefore, if there is something that is grammatically wrong according to C grammar that will be indicated marked by the compiler as a syntax error. So, unless we write something in the correct syntax there is always a chance of it will it not not there will there is always a chance it will obviously lead to a syntax error and the compiler will not produce the corresponding machine code. So, we are now supposed to learn what is therefore, we need to know what are the valid words in C and what are the correct grammatical structures in C. Now, if we learn both these we learn the C language. Similarly, if you want to learn any other language computer language you have to exactly know these things what are the valid words in that language and what is the correct grammatical structure in that language. So, given this we will start looking at C programs even before that we are once again recapitulate whatever we are expressing we are expressing them using some variables constant and constants right and the variables have got we have shown x, y, z etc etc variables. So, each of these variables which are nothing but memory locations are being given some names right. So, we have to give some names of the variables all right there are some rules for naming them just as in English we start a proper name of the variables all right there are some rules for naming them just as in English we start a proper noun with a capital letter Ravana all right Ceta we write them with a capital letter this is the rule of English however if you write in any Indian language say you write anything ummer you write that there is no question of any capital letter here, but it is a it is a property of English it is a rule of English that the capital first later of a proper noun must start with a capital letter similarly for naming the variables in C there are some rules. So, here we have seen x, y, z etc these are the variables. So, there are some rules for naming the variables we will come back to this again, but first of all any string of alphabets say let me introduce one word alpha numeric alphanumeric means what? Alphabets and what are the English alphabets? A, B, C up to z small letter A, B, C up to z that is alphabet and numerals we know 0 to 9 all right 0, 1, 2, 3 up to 9. Now, an alphanumeric means a union of both these either alphabet or numerals. So, a variable name in C can can consist of any alphanumeric character. Now, so it can be say apple is a valid variable name in C again if I start with small A this is also valid variable name in C, but although these two are same since I have put in different characters one one capital one small these two will be treated as two separate variable names all right. Similarly, I can write say apple one two that is also a valid variable name. Now, there are some special characters like underscore that is allowed like I could have written something like this apple underscore one two that is also a valid variable name. However, I cannot start a variable name with a digit or a number for example, one two apple is not a variable valid variable name other special characters like say apple percentage is not a valid variable name. So, these are some of the rules. So, the what are the rules of naming a C variable it can consist of any alphanumeric character any length, but it must start with an alphabet and only some specific special characters like the underscores allowed others are not. So, this is not allowed, but say apple bob three four this is a valid name. So, here I can use as again a p p a le b small o small b this is also valid name. So, in general what is the rule I can have a string of alphanumeric character starting with an alphabet and having no special characters except for this underscores. So, with that that is how we will name the variables and each variable I again repeat you know that a variable essentially consists of memory locations. A variable is nothing, but a memory location and we are putting the name to that particular memory memory location. So, if apple be this memory location may be a p p a le is another memory location. Now, which variable we will go to which memory location is decided by the compiler. So, might be bob is another one. So, these are separate memory locations. So, variables and naming of variables is a fundamental step in writing a C program because whatever we write we have to write them through variables. Now, quickly once again we look at this that whenever we are writing suppose again I am writing now suppose there are three numbers A B C or I want to find the average of that. So, I can write it in the form of say and say average you can see that average is a valid valid name in the case of a variable. So, I can say AVG is A plus B plus C whole thing divided by 3. Now, this one I can call to be a C sentence or I am saying sentence so that you can have an analogy with our English, but we will call it C statement. And this C statement consists of several things we will come to the other things, but you can see that we are it is consisting of 1 2 3 4 variables and one constant that is 3. And there are some special parenthesis and all these are also valid symbols in C and these are operators. So, we will see how our C statement is constituted, but whenever we write a C statement it will consist of a number of variables. Now, coming to a C program a C program consists of a set of in let me call it a number of maybe 1, but at least 1 number of functions. What are functions? There is a significance of this term functions, but for the time being let us simply try to visualize it in this way that I am trying to build a machine which will do something. What we will do? Say for example, it is a machine that will take say 2 or 3 numbers A, B, C and will produce the average. Now, this is a machine. It does something take some input and gives some output. Now, this entire machine can be built up with smaller sub machines. And one machine each of these sub submachines can do some specific task. For example, if I take a complicated say paper rolling machine then there are so many things to be done in order to roll out or prepare papers. So, similarly there can be different sub machines which are doing different functions. So, each of them each of these sub machines are carrying out different functions are carrying out different functions. This is doing one one, this is doing another and all these three together is doing something. Now, as I said in the worst in a special case just like for a simple case of average I may not need many sub modules because I can very well take A, B and C here A, B and C. And simply in this machine I can write a program like AVG is equal to A plus B plus C divided by 3 and that will be the output. So, here I do not need any sub machines because it is a simple problem. But nevertheless I need at least one function that is what is this task is being done. So, any C program will require at least one function and in many cases we will see it will require more number of functions. We will come to this in the next lecture.