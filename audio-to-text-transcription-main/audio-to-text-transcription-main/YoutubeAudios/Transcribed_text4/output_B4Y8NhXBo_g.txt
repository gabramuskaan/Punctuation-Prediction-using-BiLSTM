 In today's lecture we will start talking about a very important concept in programming and that is the notion of arrays. These are very useful for storing and manipulating large volumes of data. So, as an example to motivate the use of arrays let us consider the following two problems. The first problem is very simple you are required to read 10 integers and find their average. We know how we can do that we can write a simple loop and in each iteration of the loop we read them integer and add it to the sum and at the end of the loop we just simply divide the sum by the number of integers and that is the average. The important point is that in this algorithm we do not need to store all the integers that we have read at the same time what we need to remember or store is only the most essentially writing integer. Now, contrast that with this second problem where we are supposed to again read 10 integers find the average but now find out how many integers in the input were less than the average. Now, if you have to solve this problem we will have to first find the average as before but then we will have to look at each number again and compare it with the average to find out whether it is less than or equal to or more than the average and count the number of integers which are less than the average. This means that we cannot forget an integer soon after reading it we must remember this integer we must store its value in some variable so that later it can be retrieved. Now without the use of arrays we could solve this problem by having maybe 10 integer variables but then the problem will be that will have difficulty in writing the loop because the variable name will change for every iteration of the loop. The arrays allow us to solve this problem very elegantly as we will see soon. So as we have seen an array is essentially mechanism that allows us to store and systematically manipulate large number of values. An array is what is known as a structured type in contrast. So as I mentioned arrays are a mechanism that allows us to store and systematically manipulate large number of values. So in contrast to the simple type that we have seen so far an array is a structured type that is an array is composed of values of simpler types and this is how we declare an array will soon see number of examples. Here is the first what we have to write is the base type. The base type is the type of the individual elements of the array. An array is composed of a large number of individual elements which are of some type they have to be all of the same type. So this base type is the type of the elements of the array and then the next the variable name is the actual name of the variable that represents the array and then within the square brackets we have to mention how many elements of this base type will the array have. So the base type can be any type that we have seen so far the number of elements must be non negative integer constant that is the compiler at compile time must be able to figure out how much how many elements are there in the array and therefore how much space in memory is to be allocated for that array. So let us see some examples of array declarations. So here is the simplest example in here is the base type the name of the array or the variable name is number and 50 is the size of the array and this declaration essentially says that numbers is an array which will be comprising of 50 integers. There is another array so this time the array name is P number of elements is 20 and the type of each element is K. This shows that the base type can really be any type. This in this next example that base type is short and instead of giving the size as a literal constant we have used a symbolic constant which we define using this hash define which should be familiar to you already from earlier examples. So this size size of the array need not be literal constant but it has to be a constant value whose value can be determined by the compiler at compile time. Here is the next example in this case we have declared the size of the array to be capital n where n is declared to be a constant in a different way. This style of declaring constants is also something that we have already seen and the base type in this example is unsigned log. Here is an example in which the array declaration is invalid that is if we have generic declaration in the program and the compiler will give an error and the reason is that the size of the array has been declared to be n which is the name of a variable here. So this is not allowed because as I said the size of the array has to be a constant which is known at compile time. Let us now talk about how we can access and manipulate the individual array elements. So if an array we have declared to have n elements then these array elements can be accessed as a 0 a 1 a 2 up to a and minus 1. So essentially the array element is accessed by giving the name of the array a for example and then within the square bracket the number or the index of the array element that we wish to access and if an array has n elements then the index will range from 0 to n minus 1. So we can have expressions like this which denote array element and such expressions can be used both on the left and the right sides of an assignment. Here are some examples. So this assignment statement is assigning the value x minus y to the fifth array element. Remember that the array element starts from the 0th element and go up to the n minus 1 element where n is the size of the array. In this second example the array element a j plus 2 occurs on the right side of the assignment and the other thing we should notice about this particular assignment is that the array index which is being used here is not a constant. It is j plus 2 where j could be any variable whose value will be known only at runtime. So only while declaring the array the size has to be declared as a constant but while accessing individual elements of the array the indices used can be arbitrary expressions which result in an integer. Here is one more example showing how an array element can be read from the input. We are using the familiar scanf library function for doing that and the way we are doing that is very similar to the way we read a normal integer variable. When we read an integer variable we say scanf percent b m percent x. If we want to read in the value of the ira element then all we have to say is instead of m percent a x m percent a i. Now it is very important in programs to be careful about the indices that we are using for the array elements. As I have mentioned earlier if the array has been declared to have n elements then the array is range from 0 to n minus 1 and it is very important to ensure that the array element that we are accessing has an index between 0 and n minus 1. So for example suppose we have declared an array to have 100 elements. What will happen if the array index used in a particular expression is less than 0 or more than 99. Now answer is that in this case the results of the program execution will be unpredictable. We will not be able to say what will really happen this is an error because we are not allowed to use array indices less than 0 or more than 99 in this case where the array has 100 elements. But the C compiler does not check these kinds of errors and so what will happen at runtime is some unpredictable and unexpected behavior. Therefore it is the programmer's responsibility to ensure that the array bounds are not validated and violation of array bounds actually is a very common problem in many programs. Many programmers make the mistake of accessing array elements which do not exist and such errors do not necessarily always result in the program trash they can have other unexpected effects and so therefore and these errors are very hard to track down. Therefore we need to be very very careful while dealing with arrays that the expression that you are using for an array index is within the bounds for the array. So now here is our first simple example program using an array and this is the problem that I mentioned earlier while motivating the use of arrays. You have to read 10 integers and find the number of integers that are smaller than the average. So we start the declaration of the variables. The variable sum is the one that will use to store the sum of all the integers that we read. Numptem is the array which will use to store all the integers that we have read. Recall that once we have computed the average by summing up all the integers and dividing by the number of integers we will need to once again look at each integer that we read and compare it with the average to find out whether it is less than the average or not. The variable count will be used to count the number of elements which finally turn out to be less than the average and the variable AVG or standing for average will contain the average and this can in general not be an integer and so therefore we have used the float type to store the average. So this loop is as before so we are trying to read 10 integers and find their sum. So this for loop runs 10 times for values of i from 0 to 9 and each iteration of the loop we read the I's element of the array and also add it to the sum. After that once we have found out the sum the average is nothing but the sum divided by 10 but we have to be a little careful here because remember that the sum the variable sum is of type int and the literal constant 10 is also of type int which means that if we just divide sum by 10 we will get we will do an integer division which will mean that the fractional part of the result will be dropped and the final value that we get will always be an integer. So therefore to avoid that we are first type casting sum into a float so that one of the operands of the division is now a float and so automatically the other operand which is 10 will also be type cast to a float by the compiler before the division and the answer will retain both the integer and the fractional part of the result of the division and finally having found out the average this loop is being used to find out the number of elements in the array which are less than the average. Note that we have again used the comma operator from the previous lecture to make two initializations in the for loop we are initializing count to 0 remember count is the number of elements that we that are found to be less than the average and I is also assigned to 0 this is the loop variable this will run from 0 to 9 when I become equal to 10 the loop will terminate. So within each iteration of the loop if the I have element that we write all the I have integers that we write is less than the average we add 1 to the count and note again that this entire statement is a single if statement and therefore we do not need it need braces around it to make it the body of the for loop and finally this statement is outside the for loop this will be executed once the for loop finishes and this is simply prints the value of the variable count which is nothing but the number of integers that have been found to be less than the average. Next we come to array initialization as you know when we declare variables we can initialize them with the value at the same time the same thing can be done with arrays as well and array initialization is quite simple all we have to do is that the element values of the array in the order of their indices have to be placed in braces and they have to be separated by commands. So we will see an example of the use of such kind of an array initialization suppose we are writing a program that finds the day of the week for a given date. So what we need to do probably is to store the number of days in each month in an array and since these are constant values we can initialize this array right at the time of declaration. So our program might look something like this. So we define symbolic constants for the various months from January to December January is defined as 1 and December is defined as 12. The number of months is of course 12 and then we have this array month days which stores the number of days for each month. Now we want to refer to January month January with the index 1 in this array let us say we could of course also have used 0 for January and 11 for the summer and so on but that might have become a little unintuitive. So what we call that when we declare an array to be of size n and its indices range from 0 to n minus 1 and not from 1 to n and since we need indices from 1 to 12 in the array we will need to make the array size 1 larger than the number of months and so therefore the array size is number of months plus 1 which is of course 13. So that means that the array has elements at indices 0 to 12. The index the element at the index 0 will not be used so we are assigning it a value 0 and the rest are the number of days in the various months from January to December ignoring of course leap years. So as you can see these array values initial values of the array elements have been placed in the order of the array indices and they have been separated by commerce and they have been enclosed in these curlibe so this is how we can initialize an array. Next we come to higher level arrays or 2 dimension or higher dimension arrays these are very useful for manipulating structures like matrices and so on so forth. So as an example this is a very common engineering problem suppose you want to solve a set of n simultaneous linear equations and n variables then we need to store the coefficients occurring in the n equations. So these can be easily stored in mathematics we represent them as an n cross and matrix so in C they can be easily stored as a 2 dimension matrix or a 2 dimensional array and the solution vector can be stored as a 1 dimension array as usual. So let us see how we can declare and use 2 dimensional array. So conceptually 2 dimensional array is just like a matrix or a table with a certain number of rows and a certain number of columns and 1 value at each cell of the table or the matrix. So when we declare an array of 2 dimensions or indeed for higher dimension again what we need to is to specify the base type of the array elements the name of the array in this case matrix the base type in this example is int is int and then we have to give the number of rows and the number of columns both in square brackets one after the other the first is the number of rows and the second one is the number of columns. Again the number of rows and number of columns again have to be constant whose values can be determined at compile time. So in this example the number of rows in this matrix is m and the number of columns in this matrix is n and while accessing array elements of a 2D array we have to specify the indices for both the dimensions. So just like a matrix element is referred to as a ij if a is declared as a 2 dimensional array then we have to access its array elements as a ij in this particular notation. So we have to give both the indices for the 2 dimensions and in the first dimension the value of the index again should range from 0 to the size of that dimension and this is true for all dimensions. So the value of j in this example assuming the previous declaration where the number of rows was m and the number of columns was n the value of i should be between 0 and m minus 1 and the value of j must be between 0 and n minus 1. So the indices range from 0 to n minus 1 where n is the size of that particular dimension. So here are some examples of usage of array elements a ij assigned size. So again an expression denoting an array element can occur on the left inside or on the right inside. So this is initializing the ijth element of the array a to the value 5 and here the jth ijth element of the array a is being assigned to the value of the ijth element of another 2D array b. So this is simple enough let us now look at an example program using 2 dimensional arrays. So let us take a familiar problem from matrices. Suppose the problem is to read in take as input a square matrix from the user of size at most 10 by 10 that is the matrix that the user gives may be smaller than 10 by 10 but it cannot be larger than 10 by 10 and this limit has to be placed because recall that when we declare an array we have to declare the size of the array and so if it is declare the size of the array to be 10 we cannot store more than 10 elements in that array. So that is why we are saying that the matrix that we read from the user should be of size at most 10 by 10 where suppose to compute the transpose of the matrix and print the transpose matrix. So let us start developing this program this is the beginning part we define a symbolic constant representing the maximum size of any dimension of the array and here are the variable declarations and is the actual matrix size that we are going to read from the user. This remember may be less than 10 but cannot be more than 10. This a is the 2 dimensional array that we are declaring note that the size of both dimensions is max size which happens to be 10 I and J and T will use as temporary variables for looping and other purposes and so on. Okay so the first part is simple enough the first we have to read the matrix from the user and for doing that let us first ask the user for the matrix size we have to ask only the size in one dimension because we are assuming that it is always a square matrix that we are reading. So this should be familiar this do while loop should be familiar to you from the last lecture and we are using this to continuously prompt the user for entering the size of the matrix till he gives an appropriate size and the appropriate size for a matrix will be something which is at least one and at most max size. So as long as the value of n is less than one or greater than max size which is 10 we keep giving this prompt to the user to enter the matrix size and reading the value of n. So finally when we reach here we have read the matrix size n and it is known it is guaranteed to be between one and 10 and finally we have to read a matrix. So for reading a matrix we have to read each element a ij of the matrix in the usual matrix notation we write rows we write the matrix row y and so therefore we will expect the input in the same fashion and so for doing that we have used two nested for loops here. The first pair loop runs from i is equal to 0 to n minus 1. Note that n is the actual size of the matrix so the number of rows is n and number of columns is also n and so the row indices will use will be from 0 to n minus 1 and the column indices that will use will also be from 0 to n minus 1 and this kind of a nested loop structure is very common for manipulating structures like matrices because this allows us to individually process each element of the matrix 1 by 1. So this outer loop runs for every row of the matrix and for every row this inner loop accesses elements in every column of the matrix and together these loops will ensure that we access and process each element of the matrix 1 by 1 in the row order and for each element of the matrix right now all we need to do is to read it value so we use a scan of statement to read the value of the matrix. Let us before writing the program further let us think a little bit about how we are going to transpose the matrix so let us assume we have a matrix looking something like this. The transpose of the matrix is the matrix which has the rows and columns interchange so the transpose of this matrix will be this matrix so the question is how are we going to convert this array into this array. One simple answer could be that we use another array variable of the same size and assign values in the various elements of this array such that the value at a particular element is the value of the element at the mirror image with respect to the diagonal offset element in the original array that is this value should be placed at this position in the final thing. So that means that if this new array is called B and the original array was called A then we should set B ij to Aj i. So that is one way of doing this but suppose we want to do it in different fashion and we want to transform the original matrix itself so that it becomes a transpose of itself then we need to do something different let me write the matrix again and let us write the transpose again to. So let us look at these two matrices if you note the diagonal remains the same in the transpose and if you take any element other than the diagonal then that gets interchanged with the mirror image of that element on the other side of the diagonal. So we had 6 and 8 here and we have 8 and 6 here. So that means what we need to do is that for all elements on one side of the diagonal let us say this triangle or this triangle the lower triangle or the upper triangle for each element in let us say the lower triangle suppose we strapped with the corresponding element in the upper triangle that is Aij is strapped with Aji. If that happens let say for this and this this will become 4 and this will become 2 and similarly this will become 3 this will become 7 this will become 8 and this will become 6. So what we need to do for implementing this algorithm is to write a loop which excesses all elements in the lower triangle of the matrix and for each element in the slower triangle it straps it with the mirror image of that element in the upper triangle or upper triangle of the matrix the elements on the diagonal need not be modified at all because they remain at their original positions in the final matrix and the one final thing that we need to do is to find out how we strapped 2 array elements and the procedure for that is very simple suppose you have to strapped 2 variable values of 2 variables x and y then clearly strapping like this will not really work this will not work because let say x at the value 5 and y at the value 7 when x is assigned the value y it becomes 7 and the original value of x is lost. So when we do when we do the assignment y assigned x the value of y remains 7 instead of doing this what we need to do is to take a temporary variable and before we assign to x the value of y we have to store the old value of x into the variable t. So this is what it could look like so when we do this let us see what happens when t is assigned x the value of t becomes 5 this example and then x is assigned y so x becomes 7 but we have not lost the original value of x because it is still available in t and so the value of y is changed to the value of t which now becomes 5 and the same procedure can be used for swiping the array elements. So having understood this let us go on and see how we can write the program for implementing this algorithm. So coming back to the program having read the matrix let us not transpose this. So we have loop here and you will notice that it is slightly different loop the first outer loop is the same as before for i from 0 to n minus 1 so this will run once for every row in the matrix but for every column in the matrix we want to access only the elements in the lower triangle of the matrix. So the array elements in that row that should be accessed are the ones which lie before the diagonal and the diagonal element in the row i is at column i so therefore we should only access array elements at columns 0 to i minus 1 and so therefore you can see that this loop runs from 0 to i minus 1 it terminates when j becomes equal to i. So for each element in the row before the diagonal we have to swap a i j with a j i so we use the swiping technique that we just saw p assigned a i j a i j assigned a j i a j i assigned t. So this swap the i s j element with the j s i s element and that the end of the loop. Note that the inner loop has three simple statements body and so therefore they have been clubbed into a compound statement using these curly braces as far as the outer loop is concerned the body consists of this single four statement and therefore the braces are not required. So finally when the loop ends it is time to print the transpose matrix and we just print the matrix row wise so for each row we print all the elements one by one so this loop will print all the elements in the ith row one by one note that after the percent there is a blank space so that after printing one there is a blank space left in the output and then the next element is printed and so on and after this entire loop has finished so the first row in the transpose matrix has been printed. So let us say that was one two three and then after that we want to start printing the next row on the next line note also that there was no backslash n in the format string of the first print f so that will ensure that all these three values or all the n values of the same row are printed on the same line with the blank in between but at the end of the row we want to go to the next line so that the next row is printed on the next line in the familiar matrix notation therefore once this row has been printed using this inner for loop the print one new line character using the familiar put care function and note that now for the outer loop in the body there are two statements one is this four statement and one is this statement calling the library put curve function and so therefore we have enclosed these statements in braces for the outer loop and that is the end of the program. Okay let us now see how two dimensional arrays can be initialized that is again very simple a two dimensional array is essentially considered to be an array of one dimensional arrays that is if we have an array of size two cross three it is considered to be an array of two arrays of three integers each and so it can be initialized like that so we have to give the value of each row which itself is an array within the curly braces so this is row zero and this is row one within row zero this is the element at column zero column one and column two and so on so forth so this is fairly straight forward. Next let us quickly see how we can use arrays with dimensions higher than two or more than two and the ideas are very similar to what we have already seen for two dimensional arrays the natural generalization hold so we can declare and use arrays with any number of dimensions in very similar ways to what we have already seen for example a 3D array could be initial could be declared like this giving the sizes on all the three dimensions and when we access an element of the array we again have to give the indices at all the three array dimensions. So this is the end of today's lecture in the next lecture we will be talking about some special kinds of arrays which are known as strings and which are very useful in manipulating data which are which comprises of text rather than numbers so we will look at strings in the next lecture. you you you you you you you