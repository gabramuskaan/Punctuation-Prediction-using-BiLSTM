 In the last lecture we had talked about arrays and we saw how arrays can be used to store and systematically manipulate large number of data elements. Today we will see another very useful constructed data type that known as strings. Strings are useful for manipulating non-numeric information as we said in one of our earlier lectures one of the major powers of the computer drives from the fact that computers can deal not only with numeric information that is they can deal not only with numbers but they can also deal with information in a wide variety of other formats for example the text characters and sound and audio and so on. So, today we will look at strings which allow us to write programs that can deal with text characters in the input. So, essentially a string is a sequence of characters and in C when we want to declare a string variable we will declare it as an array of cars and the spatial property of the string as an array of cars is that it ends with an null character. That is after the number of characters that we want to store in the array the next character that is stored is a null character which has as we call 0 and is also represented in the programs with this notation which is within codes backslash 0 and constant strings are represented as a sequence of characters and closed in the double codes characters. So, I said string variable would be declared as array of characters the size for the array that we need to declare should be at least one more than the maximum expected length of the string and that one more is required because the string will store not just the characters that you want to store in the string but also the terminating null character and therefore, its length must be at least one more than the length of the maximum string that we expect to store in that array. So, here are a couple of examples of declarations of strings. So, the variable my name is a string width size 20 and so as you can see the theory is declared as an array of car of size 20. So, this means that I can use this variable to store any string which has at most 19 characters followed by one null character and of course, these variables can be manipulated just like other arrays can be but we will see that there are some special library functions and special notation for manipulating strings as a whole. Similarly, here is another string variable declared address which has the size 100 that means that it can have strings of length up to 99. Strings can be initialized just like arrays can be initialized as we saw in the last class. One way of initializing a string variable is to initialize it using the notation that we use for initializing arrays that is we enclose the characters in the string within curly braces. So, in this example what is being done is that this variable my name is being initialized to a string which is my name deeper Gupta. So, I have created an array in this notation comprising of characters from my name and plus character is the null character. Note that even though I have given the length of the array as 20 but the number of characters that will be specified here is actually much less the size of my name including the blank space is just 12 characters and including the null character that 13 characters. So, I have initialized only the first 13 elements of this array the remaining 7 elements are left uninitialized and here is another way of doing this this is special to strings this cannot be done with other kinds of arrays I could have initialized this to the string deeper Gupta by putting the string simply like this within double code and this has the same effect as earlier initialization. Another thing is that in both these kinds of declarations I can leave out the array size and the compiler will automatically compute what should be the correct size. In fact, that is a general rule for initializing arrays in general for example, if I declare an array as the following. So, in this case the compiler will automatically assign the size 2 to the array x and similarly in this case I could have initialized this variable in the following rotation without the following rotation without giving any size of the array over here and the compiler would automatically compute that there are 12 characters in the string plus one character is needed for the null character and so the array created would have size 13 characters. Note that in this case the string would have size 13 and later on we would not be able to store any string in this array which is of size more than 12 characters whereas, when we have explicitly declared the length as 20 then later on we can change this string and store in this variable a larger string up to the size of 19 characters. So, strings we have seen are the same as character arrays but with a difference you can have a array of characters with no null character anywhere in it. Now, the strings have a special property that they are character arrays but they are terminated by null characters that is the last character at the end of the string is a null character and this property is useful because this allows various library functions as we will see to find out what is the actual length of the string. The actual length of the string should be carefully distinguished from the declared length of the array. So, for example, when you want to print a string, you want to print the actual number of characters in the string and not the entire array because some part of the array may not be getting used. So, this null character at the end of the other characters in the string is helpful in determining the actual length of the string and so when we say a string we actually mean a character array which is terminated by the null character. As we will see there are several useful library functions for dealing with strings. All of them assume that the strings even to them as input contain the null character that is the end with the null character. So, let us start seeing some of these useful library functions for dealing with strings. Here is the first function which is the familiar scan F and we have seen how scan F can be to read integers and floating point numbers and so on so forth. scan F as a matter of fact can also be used to read strings and all we have to do to read strings using scan F is to use the percent S specifier instead of the percent D specifier as for an integer or percent F for a float and so on so forth. So, in this example we have declared a string of size 20 and we are using scan F percent S to read a value into the string. So, first of all note that there is no M percent before the variable name my name in the scan F call this is different from the notation used for reading integers and so on. The reason for this will become clear later on but the only thing you have to remember right now is that when you are reading strings you do not put the M percent here in the call to scan F. So, exactly what this scan F call will do is I will read characters from the input till a white space character is seen. We call that white space characters are the blank character the tab and the new line characters and so on and whatever characters have been read till the first white space character was seen they will be assigned to the string variable and of course, the scan F will also put it terminating null character after these characters in the string. Now, one question that you might ask is that what happens in this example if the world that is type of the user has more than 19 characters in it well in that case the string given will not fit in the string variable my name but will not the compiler will not be able to detect this happening at compile time or at runtime and therefore, it is really the programmer's responsibility to ensure that this never happens and the string variable is large enough to hold the largest expected input that the user might case because if the string is not large enough then the results are really unpredictable. So, as we just saw scan F with the format specified percent S can be used to read a world from the input. If you want to read an entire line from the input we can use the get S function instead and using the get S function is considerably simple simpler than using scan F all we need to do is to pass the string variable name as the argument to the get S function. So, this function will read an entire line of input and assign it to the string variable S and as usual it will put the null character at the end and once again the variable S must have enough space to hold the given input otherwise results are likely to be unpredictable. Printing strings can again be done with the familiar function print F with the same format specified percent S that we used for scan F. So, print F percent S some string variable name will print that string on the output we will see an example of this in the example program that we take up today. Alternatively, put S can be used with the string variable as an argument. So, here are a couple of examples one of printing the same variable print F on this on the string one using print F function and the other using the put S function. So, the print F function we have used the format specified percent S and the corresponding argument is the name of the string variable and for put S the only argument is the string variable. So, these functions it is important to realize print the string till the null character is seen in the string. So, that is how they determine how much data to be pray how many characters are there to be printed. If suppose the character array that is passed is argument be functions does not contain an in null character then again the result is going to be unpredictable and that should never be attempted. Let us now look at some functions which are useful for manipulating strings. There are no built in operators in C for dealing with strings for example, for integers we have the plus minus and comparison operators and even assignment. So, all those kinds of operators are not there for strings. Fortunately, there are number of useful library functions that can be used for performing all these common operations on string and we will look at some of these string functions. But first before using any of these string functions we need to put this statement at the top in our program just like we include S a D i O dot H to use the standard I O library functions we need to include the file string dot H in our program for using the string functions that we are going to look at soon. So, the first function that we are going to look at is the S T R length function, where it is which can be used to find simply the length of the string and again note that it returns the actual length of the string and not the declared size of the array and the actual length of the string is the number of characters before the first null character in the string. So, in this example we have again declared a variable my name of size 20 and it is initialized to the string D perk which as you can see has 6 characters in this. So, if you call S T R length on the string my name it will return 6. We can also compare strings and the way to do that is to use the library function S T R C MP. Now, what a string comparison really mean when do we say that a string is larger than another string we say that a string is larger than another string if the first string would appear later in a dictionary as compared to the first string. So, this order is called the dictionary order or the lexical graphic order and function string compare or S T R C MP compares to given strings in this order. So, the arguments to S T R C MP are the two strings S 1 and S 2 that we need to compare. This function returns 0 if S 1 is the same as the string S 2 and it returns a negative value if S 1 is less than the string S 2 meaning that S 1 would appear first in the dictionary as compared to S 2. Note that of course, in the dictionary all the words have only alphabet characters whereas, the strings S 1 and S 2 in general can have other characters as well. So, how do we compare two individual characters to determine which comes first in the lexical graphic order well a character is smaller than another character if it is F K code is smaller and as we have already seen that the F K codes of small a small b small c etcetera they are all contiguous they are one after the other. So, this ordering is consistent with the dictionary ordering and finally, string compare S 1 S 2 returns a positive integer if S 1 is greater than in the dictionary order or the lexical graphic order than the string S 2. So, this function can be used for comparing string there are some variance of this function for example, S T R K C MP compared to string ignoring case that is whenever it is comparing to alphabetical character it ignored the case that is small a and capital A are treated as the same whereas, the string compare function would treat them differently that is they would not be treated as equal. The other useful string comparison function is S T R N C MP function where you can specify a third argument which is an integer to the function and this says that compare at most the first n characters of the strings S 1 and S 2. So, here is a function which can be used to concatenate a string to another string the function name is S T R K C. The arguments are two strings S 1 and S 2 and the result of calling this function S T R K C is at is that the string S 2 would be offended at the end of the string S 1 that is a string S 1 would change and at the end of it the string S 2 would be offended and naturally for this operation there must be enough extra space in S 1 to hold the concatenated string otherwise again the result will be unpredictable. Here is a simple example. So, we have the variable X of size 20 containing the string just ABC which is of size length 3 of course and here is another variable string variable Y of size 10 which has a string D E F. Now, if you perform the operation S T R K at X comma Y then it will place the contents of the string Y which is the string D E F at the end of the string contained in X which is ABC. So, at the end of this operation the final value of X will be the string ABC D E F. So, if you note what is happening here is that the string X contained A followed by B followed by C followed by null character and the string Y contained the character T E F followed by the null character and the string concatenation operator would replace this null character by the first character with the string Y and then this will be followed by E F followed by F and then the null character will come at the end. So, finally, the value of X will be the string ABC D E F. We can also copy strings from one variable to another variable. We cannot simply use assignment to do that in the case of strings as we do it for integers and so on. We cannot say X assigned Y where X and Y are string variables. In fact, if you do that the compiler will give an error. So, if you want to copy strings from one variable to another you have to use the library function S T R C P Y which stands for string copies. So, S T R C P Y S 1 S 2 copies the string S 2 to S 1 and whatever the well whatever string the variable S 1 initially contained will be overwritten and S 1's length or S 1 size. Must be at least as much as the length of S 2 plus 1 plus 1 because the null character also has to be stored. And similarly, we have the function S T R M C P Y and this has an additional argument N which is an integer. This says copy at most N character from the string S 2 to the string S 1. So, at the end of this lecture let us take a simple and develop a simple program to understand and reinforce the concepts that we have learnt in this lecture. And this program is very simple what we are supposed to do is to read words from the input till the end of the input is reached and then we are supposed to the program is supposed to print the longest and the largest word in the input. The longest word is the one which has the largest length and the largest word is the one which is lexicographically large at among all the words in the input. So, the algorithm is reasonably straightforward as you can imagine as long as we keep getting more words in the input we read a word and we compute its length and we compare it compare the length of this word with the length of the longest word that we have seen so far. And if the length of this word is larger or long if this word is longer than the previous longest word then we replace the previous longest word with this word and we say it is length also. So, we say this word and it is length as the longest seen so far and similarly we maintain the largest word seen so far and if this word that we just saw is larger than the previous largest then we say this word as the largest. So, let us now put this algorithm into practice by writing a C program for this. So, here is the initial part of the program as you can see we have included the file string dot h as well because we are going to use some functions from the string library. We have defined a constant max size which is equal to 20 which we expect to be the longest word size actually the longest word size we expect is to be 19 because one character as you know is a needed extra of storing the null character and these are the variable declarations. This variable length we are going to use to store the length of the world that we have most recently seen. The variable max length is the length of the longest word that we have seen so far and this is initialized to 0. So, essentially what we are going to do is that we are going to compute the length of the world seen just now and compare it with max length and if length happens to be greater than max length then max length will become length and the longest word will become the one that we have seen so far. And there are three string variables that we are declaring these are all of the size max size. The first variable world will be used to store the world that we have most recently read in the loop. The string longest will be used to store the longest word that we have seen so far and largest will be used to store the largest word that we have seen so far. Recall how we are going to maintain the largest word seen so far we are going to compare every world with the previous largest word and if the current word is larger than the previous largest then the largest will become the current word. So, therefore, we need to initialize this to some world which is smaller than any other world. So, that the very first world that we see becomes the largest at the end of the first iteration. Now, the smallest possible string that you can think of is the null string which has no correctness inside it. So, it is just contains the two double codes without anything between them. And here is the rest of the program and you can see it is fairly straight forward all the way are using some new techniques in this program that I will explain. So, we are using scan F percent S to read a world as we already seen it reads a word from the input. Now, the question is that this loop must terminate when the end of the input has been reached. Recall that the end of the input is typically indicated by the user to the program by typing a control D. But how would our program know that there are no words, no more words to be read from the input. If we were using a function like get care that would have returned E O F on seeing the end of input. But with scan F we will do something different. In fact, so far whenever we have been using scan F we are assuming that scan F only has side effects and scan F expression has no value. In other words the scan F function does not return any value. That is not actually true. scan F function actually does return a value which we have been discarding so far in our program. And the value returned by scan F is nothing but the number of items successfully assigned to some variables or the number of values successfully assigned to some variables. So, if you look at this particular use of scan F what we expected to do is to assign some value to the string variable world. And therefore, if scan F succeeds we expect where it should return the value 1. Now if it does not return the value 1 that could only mean in this case that the input really ended. scan F actually returns E O F when the end of input is reached. So, we could have terminated this loop also by checking that the return value of scan F is not E O F which is actually minus 1. Note that when you are using scan F with some other format specified. For example, suppose you do scan F percent D ampersand X then scan F could return a value other than 1. In fact it could return 0 also which is neither 1 nor E O F and that would happen in the case when the input characters that were read actually did not form an integer that is they did not comprise of only digits and plus or minus sign. So, in that case also it would return something less than the number of items that we expect to be assigned. And that in fact is a very useful feature which we have not been using really in our program so far whenever we so far in our program, read an integer using scan F we assume that some integer was always read. But that is not actually true. Suppose instead of typing some integer the user types some arbitrary characters like X Y Z what happens in that case what is the integer value that is assigned to the variable. In fact no value is assigned by scan F in that case and scan F just indicates that the input was not appropriate for the format conversion specified by returning a value by returning a value which could be less than the number of X Y Z to scan F. And that is something that we should actually make a habit of checking that when we read an input integer from the input we actually successfully do read it. So, in the programs that will write from now on we will make a habit to put that into practice. Anyway coming back to this program if we have read a word successfully then we use the string length function to find its length and store that in the integer variable length. And if length is more than max length then as I said max length is assigned to length. So, that the next word whenever it is read its length can be compared to the new max length. And the longest word is now the word that we just read and so string copy is used to assign or to copy the current word into the longest word. So, that takes your longest word and we also have to compare the current word with the largest word so far. So, we used the string compare function to check that. So, if S, C, R, C, P word comma largest is greater than 0, the S value which is greater than 0 that means that word is greater than largest. And in that case we copy the current word into the largest word and at the end of this loop we simply print the longest word and the largest word using the familiar print F function note that we are using percent S to print these two string variables. So, that is the end of this lecture in the next lecture we will start looking at a very powerful facility in C and in fact in most programming languages and that is the ability to define our own functions. When programs get considerably more complex than the simple ones that we have been writing so far then we need certain amount of discipline in how we design the program and how we implement the programs and we will see that it then becomes useful to break down the problem into smaller sub problems and so on. And then define individual program units for each of those smaller sub problems these smaller program units are called functions and in fact we have been using library functions we will see how we can define our own function in the next lecture. Thank you. . . . . . .