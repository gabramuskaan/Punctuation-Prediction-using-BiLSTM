 Hello, we had ended the last lecture by writing a simple C program to compute the sectoral of a given non-negative integer. Today, what we will do is to start again with that program and I set it and try to understand how it works. The idea is to understand basic construct of the C language before discussing them in a more formal setting. So, let us look at this program again. This is a program that we had written last time with a few modifications. So, let us start examining it line by line and see what is happening in this program. So, what we have here is what is known as a command. A command is a piece of information which the machine will completely ignore and this is intended only as information for people who are going to read this program. Although not very important in this particular program because this is a particularly simple program but as we write more and more complex programs it will become increasingly more important to write command so that we ourselves and those others who read our programs can understand what our program is doing and how it is doing that. So, you see anything enclosed between a slash star and a star slash is a command. So, this entire thing is a command form here to here and this command basically just gives some simple information about what this program does. Let us come to the next line. This is hash include acdio.h. We will not explain the syntax in detail here in this lecture. But let me just explain what is the purpose of such a statement or line this program. Actually, there are a lot of useful library functions that are available to a C programmer to give some example we have functions to find a significant values for example the sign cosine, tangent etcetera of a given angle and so on so forth. Apart from that we have a number of useful functions which will start seeing slowly one there are two libraries particularly of interest to us in this course that is the standard C library and the math library the functions that I mentioned just now just like sign cosine etcetera the belong to the math library. In this program we are going to use two functions for input and output mainly Sennash which you can see here. This is for reading some input from the user and print S which you see here. This is used for writing some output to the terminals and these are not defined by the C language itself but our functions made available to us by the standard C library and this slide here include acdio.h basically tells the compiler that in our program we are going to use some functions I or related functions from the standard C library. So, let us now go to the next slide this main void and an opening curly base. It is not important to understand exactly the significance of main void at this point in time we will just say that at this point in time we will just say that this line signifies the compiler that here comes my program this is where the program begins and the entire program is between this opening base or the parenthesis and this closing curly parenthesis or the closing drain. So, this entire thing is the body of our program as it is called within the body of the program this first line declares two variables and results. So, this is known as a variable declaration this line says that I am going to use two variables in my program whose names are respectively n and result and both these variables are going to hold integer value. So, integer is a type which is denoted in C by n there are a number of other useful types in C as well which we will see later on right now the integer type is enough for us. So, essentially this sign saying that we will use two variables in our program their names are n and result and both are going to hold integer value in C as in most languages before you use any variable you must declare that variable and the program most of the time the variable declaration will be first followed by the actual actions that you want the program to perform. So, the next line is a call to a library function called canes as explained earlier the canes is a standard field library function which is used to read some data from the user. It has two what are known as arguments this percent D encapsulated within double code characters is the first argument and this m percent n is the second argument and this this this percent D within the double code characters is what is known as a string we will talk about strings in more detail later on in the course. But essentially this particular piece of information which you are supplying to sanafi saying that in the input we are expecting the user to give an integer value and the second argument m percent n says where we want this value given by the user to be stored in. So, essentially this this entire line is saying that we are expecting an integer to be input by the user and whatever integer he gives as input should be stored in the variable called n. This line we have already seen earlier this is just an assignment statement if you recall that by equal to sin m c is an assignment statement you call that this line is not stating that the result is equal to 1 on the other hand it is an action this is a nays the value of result to be equal to 1. So, it is an initialization we are setting the result to 1 you remember the algorithm for the factorial computing factorial from the previous lecture and remember that we have to repeatedly multiply the result by n as long as n was more than 1 and in each step also decrement the value of n by 1. So, this here is a while loop and this while loop says that some piece of code has to be repeatedly executed and along with the while we have to say two things how long that computation has to be repeated. So, this is the condition and greater than 1 which says how long the computation has to be repeated it has to be repeated as long as the value of n is greater than 1 as as soon as the value of n becomes less than 1 that is less than or equal to 0 then the computation has to be stopped and what has to be done in each step or each iteration of the while loop that is again and closed within this curly brace here and the proponing closing curly brace here. So, along with while we have to give a condition like this and you have to give a single C statement an assignment is a single C statement as we already see, but here as you know we want to do two things repeatedly in every iteration of the loop namely assigning result to result into n and decrementing the value of n. So, these are two statements by putting them within a curly brace we make these two simple statements into what is known as a compound statement. So, the result is that this and as thing is now a single C statement because it has been encapsulated in this opening brace and this closing brace and the compound statement itself as you can see is a number of simple statement and close in the brace square and finally, when this loop is done as we know the value of result contains the factorial of n. So, we need to print that. So, we are printing the value of result here in this statement using the C library function again called printer and again in printer we have to specify essentially what we want to print. We want to print an integer so that is what this person B denotes and this backslash n denotes that after this integer has been printed the cursor should move on to the next line the backslash n stands for the new line collector in C and of course, what integer should be printed is this value that is the value of the variable called result. Note that in SANF when we specify where the value that has been read from the user it is replaced the variable has to be preceded by an ampersand whereas, when printing we do not have to give this ampersand right now just remember this as a rule we will explain later why this is so. So, hopefully this program is correct and you have understood this let us now go ahead and make some minor modifications to this program to enhance it. The first simple enhancement that will make to this program is that when we run this program we want the user to be told that the program is expecting an integer as an input. As of now the user does not get this information let us compile the current program and see how it runs. You see the program just appears to solve and the user is supposed to type some number here so let us say it type 10 and the answer is printed but the user does not really know what is going on here then the integer is expected. So, as we could give some message saying that we want him to input a number then that will be useful. So, how do we do that? Well we already know how to print some message using the printf function. So, all we need to do is to add a printf statement before this kind of statement. So, that before the program stops and wait for the input it prints a message on the screen saying that some integer input is expected. So, let us add a printer statement. Note that we have not added a backflash and at the end of this string because after this message is printed we do not want the cursor to go to the next line. We will see in a minute what is going to happen when we run this program let us make another simple change. When we show the output let us also say that this number that we are printing is actually the factorial of the number that was input. So, we want something what we want to appear is something like 5 factorial is equal to 120. So, to do that we need to print another integer and therefore, another percent D and after this integer we want the factorial sign to come and then equals and then there the result of the factorial of the given number. And now this printer string contains 2 percent D and therefore, as the following arguments to the printer function call we should supply 2 integers. The first integer is n and the second integer is result. So, what is going to happen is that when this line is executed this string will be printed on the screen as it is except that the first percent D will be replaced by the value of n and the second percent D will be replaced by the value of result. So, let us save this program completely again and see how it works the same. You see that it is asking us to enter an integer n and because we did not end the string with the back layer n the cursor is on the same line and has not gone to the next line. So, let us enter again 10. There is an error. So, let us go back and correct this error. Why has this error occurred? This error has actually occurred because the value of n has decimented in this loop 10 times and 9 times and has finally become 1. Remember that in every iteration of the loop we are decimiting n by 1. So, at the end of the loop the value of n has actually become just 1 regardless of what the original value is. We want to frame the initial value of n here it has saved the old value of n. So, we can save that into another variable let us call that initial n and the initial value of this will be just n. Note that we are using a new variable now and so therefore, we need to declare this variable as well the tight is a real integer. So, here is the declaration of initial n and this n must be replaced by initial n. I think we are all done with these changes to the program. Let us write out again some pilot again and run it again 10 and we see 10 factorial is equal to the value of 10. So, here okay. Let us now make some more changes to this program. What happens if I when running this program is I give a negative value for 10 let us write that for n and sorry let us give minus 2. The result comes out to be 1 which obviously is wrong in fact the factorial of negative number is not defined at all. So, how did we get this result 1? Well issue examine this program suppose the value of n is minus 1 what is going to happen? The result is initialized to 1 initial n is initialized to minus 2 and then we execute this loop while n greater than 1 and what is the value of n? The value of n is minus 2 which is not greater than 1. So, the loop terminates right away and these two statements do not get executed even 1 and as a result the value of the variable result does not change at all it remains whatever it was before the execution of the loop which is 1 and therefore, we are getting this around me a result minus 2 factorial equal to 1. What we should have program do instead is that it is a negative value for n is given it should print a message saying that the factorial function is defined only for non negative integers. Well how do we do that? Well after it is quite easy after reading the value of n we have to check whether or not it is more than 0. If it is more than 0 or if it is greater than or equal to 0 we do all this computation otherwise we simply print a message saying that factorial is defined only for non negative integers and to do that we will need to use another statement of t which is an if-else construct which essentially does something if a condition is true and something else possibly if the condition is solved. So, what should be the condition here? The condition should be if n is greater than equal to 0. So, if n is greater than equal to 0 then we want to perform all the computation from here to here. So, therefore, this will be the then part of the if statement that is that is the part that will execute if this condition is indeed true that is if n is greater than equal to 0. Note how the greater than equal to condition is written in C with a greater than sign followed by n equal to sign and just like the while looks here along with the condition we are supposed to give a single C statement which says what should be done if the the single C statement which should be executed is the condition actually evaluate to true and since we have number of these statements here we need to include these statements again within basis to make a compound statement out of these and if the value of n is indeed less than 0 that is it is not greater than equal to 0 then we want to execute something else which is just printing a message saying that factorial is defined only for non-negative integers. Note that in the S part there is only a single C statement that we want to execute namely this printf function and therefore, we do not need to put this within basis even though if we did put them in basis it would be fine. So, this program will work but I am not quite satisfied with this because even though this is syntactically correct and it will actually work but this is hard to read. Note that so far we have been following a style of writing a program which we have not explicitly discussed but let me now illustrate what I am trying to say. These two statements consume the body of this while loop and because these two statements are indented to the left to the right and sorry by a certain amount that is we start here whereas, the while started at this location. So, it was quite clear that these two statements are within the while loop. This is called indentation and this is very necessary to make our program readable. Similarly, note that here since this printf is within the L we have started it at a horizontal location after the part after the case we are the S start. So, what is wrong with this program? Well, if you see this entire sequence of statement is within the if statement which is a kind of proper statement for all these statements and therefore, they should start further towards the right then the program will be much more readable. So, we need to insert some blank spaces here so that they start more to the right. In C actually you can liberally you know in the first are statements with number of spaces and blank lines as we wish but a certain programming style as I said is desirable so that the program is readable. Instead of inserting number of spaces it is usually convenient to just insert a tab character this is on the left top area of your keyboard. So, let us just press the tab character here and as you see the tab character is roughly equivalent to number of spaces. So, this statement has now gone to the left that is to the same thing with this statement with this statement what about these two these are actually within while so they should be further intended to the right. So, one more tab here one more tab here this brace is the ending of the while so it should be at the same level as at the while here and this printf again is at the same level as divide it is directly within the if so it should come here and now you can see the program is much more readable it is clear that these two statements for example are within if the while is within the if but these two statements are within the while this is within the if. So, let us now save this program again and try to compile it and hope that there are no errors. Let us try with a normal number non-negative integer for second 20 work fine let us try with a negative integer and we get what is expected namely a message thing that the factorial function is defined only for non-negative integers. So, there are two things that we have learnt by doing this simple enhancement to the program the first which is very important is that the program must check that all inputs given to the program by the user are within an acceptable range because if the inputs are not within the expected range the program is likely to behave in an unpredictable fashion and the output is only likely to confuse the user. So, therefore, we had to check that the value of n is indeed greater than equal to 0. The second thing we have learnt is the importance of indentation and we have seen how it makes the program much more readable and in all programs that we write from now on therefore, we will consistently use the indentation side that I have introduced in this lecture. Okay, we will now take another example problem and try to first develop an algorithm for it and then write a C program for solving that problem. The problem is a very famous one and it has to do with water known as Fibonacci number. The Fibonacci sequence of numbers is defined as follows these are the numbers in the sequence and as you can observe in this sequence any number is the sum of the previous two numbers in the sequence. So, we can define this in mathematical terms as follows. So, let us say F of i denotes the I Fibonacci number so F of 0 is 0 F 1 is 1 and for I greater than 1 F of i is nothing but F of i minus 1 plus F of i minus 2. So, let us say given this definition we are given and integer n greater than equal to 0 and we want to compute the value of F n that is the nth number counting from 0 in the sequence that we just saw. So, how do we go about solving this problem? So, as you can see for solving this problem what we need to do is to remember the previous two numbers in the sequence and then if we add up these two numbers we get the next number in the sequence. So, let us say at any point in time we want to maintain the value of A as the value of F i and B let us say as the value of F i minus 1. So, suppose at any point in time in our program for some value of i less than or equal to n the value of A is the same as the value of F i and the value of B is the same as the value of F i minus 1 and then what do we do in the next step? What we will do is to use these two values to compute the value of F i plus 1 which will simply be A plus C. So, let us say it is C as A plus C and in the next step we still want this invariant to hold that is A is F of i and B is F of i minus 1. So, what we will need to do is increment i to i plus 1 and the value of A will be C and the value of B will be the old value of A, but there is a problem where is the old value of A we have already over written it with C right. So, we can do these two in the reverse order practice erase this little bit and write. So, in every step of the program this is the conversation that we are going to perform as you can imagine this will be done repeatedly as long as i is less than n. So, this will be repeated as long as i is less than n because as soon as i becomes equal to n and this invariant tells us that the value of F n is nothing but A. So, we stop doing this computation at that point in time. So, note that if at this point in time it was the case that A is equal to F i and B is equal to F i minus 1 then at this point in time it will also be the case that A is equal to F i and B is equal to F i minus 1 why because we have instrumented i by 1, but the numbers A and B now are the old values of A plus B and the old value of A respectively that is if the value of i was i 0 to begin with A was a 0 to begin with and B was B 0 to begin with then after the end of this computation the value of i will be i 0 plus 1 the value of A will be A 0 plus B 0 because A is a sin T here which is A plus B and the value of B will be B 0. Now, the value of B will be A 0 and you can observe that A 0 plus B 0 is simply F of i 0 plus 1 and A 0 of course, is F of i 0 why is A 0 plus B 0 F of i 0 plus 1 because A 0 is F of i and B 0 is F of i minus 1 and by definition of the F of i plus F of i minus 1 is F of i plus 1. So, at the end of this particular computation we will again end up with these values which satisfy the invariant that at any point in time A is equal to F i and B is equal to F of i minus 1. Based on these ideas we can now easily develop a C program for computing the nth number in the F of i minus 1 using the tools that we have already seen by writing the factorial program. So, let us go and do it now. Okay, so let us now write a C program based on the algorithm that we just discussed to compute the nth F of nth number. So, let us start a editor window name of the program is going to be C dot C. So, let us start with a comment explaining what this program is going to do. So, this is a program to compute the nth F of nth number. And remember that this is the end of the comment the star and followed by the slash and again we are going to use the strain F and print F functions from the standard C so we include F v di O dot H as C 4 and here comes our program. We intend all statements remember by one task phase because we are all part of the main program and first thing if you remember is that we have to declare the variable set relevant to use. So, given to use variables n and will hold the number that the user has given to us. A and B will use as in the algorithm that is A will hold the I f of nth number F of i. They will hold F of i minus 1 and I itself of course is the current index of the F of nth number that we have computed and here remember we used for computing the sum of A and B. So, these are the variables that we are going to use. So, what do we do next? Well let us again prompt the user that a non-negative integer is expected. Using the print F statement and then we read the value of n as before. And again we need to check whether n is less than 0 or greater than equal to 0 because if n is less than 0 then that is not a valid input and you must terminate the program of telling the user that you must enter a non-negative integer. So, that check whether n is less than 0, if n is less than 0 and all you want to do is to print a message saying that the number you have entered that is n not a non-negative integer. So, let us just write not non-negative and since you use a percent D here you must specify what actual value should be replaced should replace this percent D in that of course is that right. So, for example, if the user enters minus 2 this print F statement will result in output saying minus 2 is not non-negative. And since this is the single statement that we want to execute if the value of n is less than 0 we do not need traces here. Otherwise that is if n is greater than equal to 0 you want to do or some patient of F n. So, that will require multiple statements and so therefore, we need to enclose them in traces and make them a compound statement for our own reference let us write the definition of the function F here as a comment remember. So, we are ready to start. So, we need to initialize the integer a, b and i the value n has already been read the c we do not need to initialize the variable c we do not need to initialize because the act will be initialize phase of the value of a and b in every iteration of the loop but a, b and i have to be initialize and remember because we have that we must ensure that at any point in time before starting a iteration of the value of k must be equal to F of i and the value of b must be F of i minus 1. So, let me slide i to 1 a to 1 which is F of 1 and b to 0 because that is F of i minus 1 since i is 1, i minus 1 is 0 and F of 0 is 0. So, therefore, b has to be initialize to 0 note that all these statements are within the L and therefore, they are admitted to the right by some phase after the L and next comes our though while i is less than m we need to do certain composition why we have to do them only as long as i is less than m because remember that if i become equal to m then we have already found the answer and the answer is A. So, while i is less than m remember what we need to do compute F plus C n let us say C then assign b to A and A to C and of course, increment i by i plus increment i by 1 that is make it i plus 1 and at the end of the body of the winding loop and now what do we do this again still within the L part this is the composition we are doing if n is less than if n is greater than equal to 0. Now, we have found f n so, we want to print the value of f n. So, let us just print again using the print statement F of n is equal to the f n that we have computed and what should go here the first person should be replaced by the value of n which in this program we have not modified anywhere as you can see after reading it from the user. We do not need to save it in some other variable we will just use n and this should be replaced by the answer which is F of n and F of n remember now is equal to A because i has become equal to n. So, that is all we need to do and then this is the end of the L block and this is the end of the n program. So, let us save this and compile this and the so, this forming is only because i did not add new line at the end of the program not that it matters too much. So, let us compile it again find this side. So, let us enter let say 2 F of 2 is 1 is that correct yes it is because F of 2 is F of 1 plus F of 0 which means 1 plus 0 which is 1. So, let us write for some more value 3 should be 2 4 should give us some of the last 2 values this 2 plus 1 3 that is correct 5 should give us 3 plus 2 which is 5 it seems to be working all right. Let us also try with the border cases. The border cases are the ones in which the loops will run at most ones or not at all and so on. So, let us first try with minus 1 in negative integer we get the correct message minus 1 is not non negative let us not try with 1 yes write answer let us try with 0 that is wrong because that is for 0 by definition by our own definition is 0 and not 1. So, what went wrong in the program. So, suppose n was equal to 0 then what happened it came here, initialize i to 1 a to 1 b to 0 while i less than n i is has been initialize to 1 and the value of n is 0. So, i is not less than n and in fact it is not even equal to n see here in the sprint statement we assume that at the end of the loop i will be equal to n and therefore, F of i will be equal to F of n which will in turn be equal to a. But here is a special case in which the value of i has not become equal to n at the end of the loop in fact i here is i here is wrong while n is 0. So, in this case we should print not the value of a as the answer but the value of b which of course, is 0. So, therefore, this sprint statement has to be changed. So, we want to the result is a only if n is equal to i otherwise the answer is c. So, therefore, we need another if l select at that if n is equal to i. This is the first time we are using the equality operator in c, note that this is different from the assignment which is a single equal to and this is equality or comparison between n lie whether n is actually equal to i or not. So, if n is equal to i then the answer that you are previously printing is indeed correct that is F of n is equal to F of i is equal to a but if it is not the case and this case number will happen only when n is 0. So, if n is 0 the answer of course, is 0. So, we can just print this or of course, we could have taken the longer form inside print F of pretend equal to pretend that place and comma n comma b not a or comma n comma 0. But because we know that in this case n is going to be 0 and after 1 is also going to be 0 we can just simplify it like this. And that should solve our problem, so let us combine this program again and let us try it this time with 0. It works with 1 still works 2 3 4 5 it works for all possible integer values. So, the program is finally correct. So, in this lecture we have had a general introduction to the basic elements of the C program in language. In the next lecture onwards we will start looking at the elements of C you will see bit more detail and somewhat more homily. But before we end to this lecture, I would like you to leave with an assignment that you should try out on your own very similar to the problem that we have already solved in this lecture based again on the Fibonacci number. So, the problem that we solved was that given an n we tried to compute the value of F of n. But suppose we are given a C and we want to write a program which says whether or not K is a Fibonacci number that is whether there exists an i such that F of i is equal to K. And if such an i does exist then the value of i should be printed otherwise the program should say that K is not a Fibonacci number. And to solve this problem there is a little hint that you might want to use and the hint is that this Fibonacci number sequence is monotonically increasing that is every number except in the beginning is more than the previous number in the sequence. So, the essential idea of solving this problem is to generate Fibonacci number 1 by 1 still we read a number which is either equal to K or more than K. If we get a number which is equal to K then we know that it is a Fibonacci number and by keeping track of i we should be able to say which Fibonacci number it is that is what is the corresponding i such that F of i is equal to K. On the other hand if we directly go from a number less than K to a number greater than K then clearly K is not a Fibonacci number and then the program should say that the given value is not a Fibonacci number.