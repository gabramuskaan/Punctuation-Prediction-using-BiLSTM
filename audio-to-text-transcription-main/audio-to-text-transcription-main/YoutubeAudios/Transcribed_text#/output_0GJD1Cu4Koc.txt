 In this session, we will learn about one more fundamental data type in C. So far, we have seen in and floats. Inns are supposed to represent integers and floats are supposed to represent real numbers. We will see the third most important data type which is character. So, it is called char in C or car. C allows a character data type to be 1 byte that is 8 bits wide and 1 byte can hold exactly 1 character. For example, a character may be a digit like 0, so on up to 9. It can be a lower case letter like A up to Z. It can be an upper case letter like capital A through capital Z and so on. Similarly, there are other characters question mark at sharp and so on. So, how do you declare a character variable, how do you assign it and how do you print or scan it. These are the basic operations that you can do with any data type. So, you declare a character variable using the data type CHAR, car CH will declare a variable of name CH and of data type car. In order to assign it to any particular constant, any particular character what you have to do is you write CH equal to A within single codes. So, this is how you would assign any character in constants. All the characters in constants are supposed to be enclosed in this single codes. For example, 0 within single codes stands for the character 0 and not the number 0. Similarly, A within character within single codes stands for the characters A. Now, how do you print a character? You can use the format specifier percent H C. So, recall that percentage D prints an integer and percentage F prints a float. We have the third fundamental data type which is character which can be printed using a percentage C. So, if you say print F percentage C CH it will print A and there is also the abbreviated notation where as soon as you declare the variable, you can initialize it using character CH equal to A. This is similar to saying in TIE equal to 0, it is the same concept. Now, what can we do with the character data type? For example, we can assign character constants to that character variables. Now, what does a character variable mean? And here is the first surprise the value of a character constant is an integer that the machine stores which is usually the ASCII set. What does this mean? The machine deals with fundamentally bits. So, you have a data field which is 8 bits wide and this is a sequence of bits say 1 0 1 1 0 1 1 1. Now, here is the bit pattern and if you say that this bit pattern is a car then the machine takes this integer takes this bit pattern as an integer and looks up a table known as the ASCII set table and sees which character it is. So, the value of a character constant is actually an integer and what does that integer represents? The integer represents a particular entry in an ASCII character table and what entry is in that particular location that is the character constant. So, think of it like the following the character is just an uninterpreted sequence of bits. If you tell the machine please read this as an integer it will read this as an integer. If you read this if you tell the machine please read this as a character it will take that integer go look up the ASCII table and see that this integer stands for the character C and prints that. So, by itself the bit pattern can be interpreted in multiple ways. So, here is a surprising thing which is different from natural language. There are certain natural languages where if you and this does not typically happen with Indian languages, but there are certain languages where you have a character and how you read it depends on where you saw it. So, if it was in the middle of a text then this is an alphabet. If you saw this in the middle of a number sequence then it is a number what happens in the machine is somewhat similar. You have a bit sequence and this thing is interpreted as a character by looking up the ASCII set. ASCII stands for American standard code for information interchange and it is one of the popular encodings for characters used in computers. So, the code chart looks something like this you have 256 characters and the characters can be looked up in a table. The table entries are in hexadecimal. So, base 16 we will call it as a table to that later in the course why base 16 is convenient, but there are 8 rows and 16 columns in the table. So, in base 16 notation AS stands for 10, B stands for 11, C for 12, so on up to F for 15. So, this is what is meant by the base 16 notation. So, let us look at what does the number 7a represent. 7a is row 7 column number 10. So, that is the number that I am interested in and what is 7a represent it means 7 times 16 plus 10. So, in base 10 notation the number 76 let us say. So, if I have this number in 7 in base 10 notation this obviously stands for the numerical value 7 into 10 plus 6. Similarly, in base 16 notation 7a stands for 7 into 16 plus 10 remember that A is 10. So, you have 112 similarly hexadecimal 23. So, row 2 column 3 for example, hexadecimal 23 means look up 2 times 16 plus 3 the 35th entry in the table. Now, here is the structure of the ASCII code set that you use in C. The first 32 characters basically from 0 0 hexadecimal to 1 F hexadecimal. So, these 32 characters which are shaded are what are known as special characters and they are not printable. They are required by the computer for certain special purposes. Code 20 that is decimal 32, 2 0 is 2 times 16 plus 0. So, this particular entry corresponds to the space character. So, it is just a blank space. Code 21 corresponds to the exclamation character and so on. So, the printable characters in the ASCII code are from hexadecimal 20 that is decimal 32 until 126. So, what is enclosed in this green pattern this is these are all printable characters. Now, out of this the capital letters start from hex 41 which is 65 in decimal and go on up till decimal 90 small letters start from 97 and go on until 122 and so on. So, digits 0 to 9 occur before any character. So, why do we need this information? I mean this is how the characters are stored in the computer and do we really need to know it. The point is not that you have to memorize this table. You do not need to memorize the table, but you need to remember certain abstract properties of the table. We will make that precise in a moment. We do not have to say that the ASCII code for A is 65 or 42 or that is a waste of memory. So, let us just see what can we do with this table without really remembering what the table looks like. So, there are some ideas behind the design of the table, how the table is structured which C programmers can use. There is no need to remember that a particular character had a particular ASCII value. So, let us just recall a character constant is an integer namely the ASCII code for that character. Now, which means that I will emphasize this with a very strange code. I can declare character CH and say characters CH equal to A within single code. So, that obviously, initializes the character to A. It assigns the value A to the variable CH, but I could also do the following character CH equal to 65. Why 65? The ASCII value for A was 65. So, instead of writing it as A within single code, I can write CH equal to the number 65 and it will be the correct ASCII character anyway. Now, this means that the same character can also be interpreted as an integer if you really want to think of it in that way. So, for example, I can say percentage C CH if I do it in print F, it will print it as. So, the first print F will print A, but I could also take a character variable and ask C to print it as an integer using percentage D, it will print 65. So, remember that the external form that we see in some sense is the letter A, the internal representation is the number 65, because 65 is the entry in the ASCII table corresponding to the character A. Now, the one more thing is that you can print arbitrary numbers. Even non printable characters, you can sort of print them using C. And one way to do that is I can print any 8 bit character with the hexadecimal representation like backslash ash, a backslash x followed by the hexadecimal digit. For example, backslash x followed by 7 is the bell character. So, let me go back a couple of times, couple of slides. So, if you look at the 7th entry in the ASCII table, it is represented as BEL, that is a small bell in your system. So, if you ask the system to print the 7th character in the ASCII table, what will happen is that your computer will make a small beep sound. So, there are certain non printable characters which can also be printed directly using. Similarly, let us say backslash x B is the 11th number in the ASCII table, it is a vertical space. So, if you print that character, it will print a vertical space. Similarly, if I ask it to print hexadecimal 41 using backslash x 41. So, hex 41 is 4 times 16 plus 1, which is 64 plus 1, 65. And we just saw that ASCII value 65 was the character A. So, if I ask it to print CH, which is hexadecimal 41 as a character, then it will print the value A. So, when you run this program, what it will do is first, because you asked it to print a bell character, it will beep once, it will ring a bell. And then it will print the second character, which is a vertical space. So, it will print a vertical space. And then the third character was a printable character A, it will print A. So, you can ask the system to print arbitrary entries in the ASCII table. If it is a printable character, it will print that corresponding character. If it is a non printable character, it might take a suitable action. So, just for information sake, there instead of printing it as backslash x followed by the hex code, you see provides certain escape characters, some special sequences as well in order to print these non printable characters. First of all, until now we have seen one such number, which is backslash n. So, backslash n is the new line character, it is a non printable character, but it corresponds to some ASCII character. Similarly, for the other non printable characters, C has some escape characters. For example, backslash A is a bell character and so on.