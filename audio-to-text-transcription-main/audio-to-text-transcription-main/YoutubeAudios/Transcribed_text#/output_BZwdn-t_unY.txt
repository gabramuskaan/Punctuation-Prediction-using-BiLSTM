 In this session, we will see one more feature that is present in C associated with loops. So we will motivate these statements using the concept of an infinite loop. Here is a drawing that is supposed to be a representation of an infinite loop. And, for example, the Apple headquarters, the address is one infinite loop. So let us see what is an infinite loop. So the basic, the simplest kind of infinite loop is when you have a wild statement and the test condition, you can see that it will never be false. So remember that one is true in C. So this statement means that you will enter the wild loop, you will test the condition, the test is true. So you will execute the statement, you will go back and test the condition again, it is again true, it has not changed, it is one. Therefore, you will enter the statement again. So you will have an infinite loop. If the test is executed, then the control enters the body of the loop and this happens without any change. So let us look at this simple wild loop, which is wild one, the statement is printf, I am an infinite loop. So if you will run this code, compile and run this code after you write the main function and all that, then the program will keep on printing the same message over and over again. And you cannot exit out of the program. If you are running a Linux system, you can press control C and the program will exit immediately. But here is an infinite loop, it executes an infinite number of times. So is there a statement which helps us to exit from a loop? Now this is useful not just to handle infinite loops, even when you write normal loops, it is important to have these constructs, they make your programming easier. So C allows a programmer to explicitly break out of a loop using a particular statement known as break. When the break statement is encountered, the execution breaks out of the innermost loop. So what is a loop? So far we have seen wild loop, do wild loop and for loop. Later we will see as construct calls switch. So whatever is the innermost loop, notice that we have talked about double loops. We have talked about a wild loop within a wild loop, we have talked about a for loop within a for loop. Whatever is the innermost for loop within which a particular break occurs, it will exit out of that. So let us write a very simple program which reads all numbers till minus 1 is seen and adds them up, minus 1 is excluded. So you can write a wild loop, we have written this before where the wild loops test condition was somewhat more sophisticated. Earlier we wrote something like wild if you recall, if we had written a loop saying wild not of a equal to minus 1. So this was the earlier loop that we had written and in this case let us write a similar program but with a simpler test expression which is just wild one. So you always enter the loop, no matter what number you read. So initialize the variable sum to 0, declare the integer variable A and then you enter the wild loop because the test is true, you scan a number and here is a use of the break statement. If the scanned number is minus 1, you break out of the loop. If it is not minus 1, you go to the next statement which is sum equal to sum plus A. So you add the number. Again you go back to the loop, the test condition is always true so you enter and read the next number. So the net effect of the loop is that whenever you see a minus 1, it immediately exits out of the loop otherwise it adds that number to the loop. So let us look at it using a sample input. Initially A is undefined, it is just declared so it has some garbage value and sum is initialized to 0. Let us say that the input is 532 minus 1. Wild one so one is true therefore we enter the wild loop, you scan the first number. So A becomes 5, A is not minus 1, therefore you go to sum equal to sum plus A. So sum becomes 5 and then you go back to the wild loop, the test condition is still true while 1. So you read the next number 3, 3 is not minus 1. So you add it to the sum, sum becomes 8 and you go back the same thing occurs. So you have the third number red which is 2, add it to the sum and sum becomes 10. Then you read the next number and now A is minus 1. So what happens? The if condition, the expression within the if statement is true and you execute the statement inside the if condition, the statement is break. So the recall that the rule of break says that exit out of the innermost loop. So in particular what is the innermost loop? You look starting from here and imagine that you are going out towards towards the top of the state towards the top of the program. The first loop that you will encounter on its way, that is the loop that you will exit out of. In particular break does not mean that exit out of the if condition. Break means that exit out of the first loop that you see when you start from the statement and work out towards. So that is this wild loop, break means you will exit out of the wild loop and print this statement. So you will print that the output is 1, the output is 10. So let us we have been dealing with integers for a long time. Let us write a small program using characters. So here is a problem and let us say that we are writing a very simple editor. Now the editor has the following property. There are a particular number of maximum characters that you can read. Maybe it is 1000. So you can type in a bunch of characters until one of the two conditions occur. Either you enter a blank line by itself which is indicating that I am done entering the text or you enter more than the maximum number of characters available. So recall there are two conditions for exiting out of our so called editor. You can type a lot of characters. If your limit was 1000 and you exit 1000 then you cannot type in any more characters and you exit. Otherwise if you are within 1000 characters but you entered a blank line that is indicating that you are done. You have nothing more to enter then also you should exit. So there are two conditions. Let us try to write this code. So you have maximum characters and let us say I scan that then I which counts how many characters I have read so far. So I should initialize to 0 and then there is a current character and then there is a previous character. So I will initialize current to the new line character. Now there is a particular reason for that which will become clear later. So you should initialize current to a particular character and then what I do is use the get-chare function. So get-chare function reads a particular character from the input and stores it in some variable if you need to. Instead you can also say something like scanf %hc and some into some variable. So you can do either of these two things and they are almost equivalent. So you read one more character. Now what should you do? You initialize by starting from 0. So you have read no characters until so until now and until you read maximum number of characters. So you execute this loop. Remember that I said that for loop is good when you know the number of iterations in advance. So we know that at most we will execute maximum number of character times because that is the maximum number of characters we are allowed to read. So for loop is slightly better than a while loop. You can also do it using a while loop if you want. So you say for i equal to 0 i less than maximum characters i equal to i plus 1. Now we will do this programming style that we should be familiar with right now. So previous becomes current and current becomes the next character. So previous equal to current. So this is will store the current character into the variable previous. Then you read the next character using get char. And as I said before you can also write equivalently scanf %hc and current. So both these are almost equivalent. There is a slight difference but we will be it is not important as of now. Now if current is new line and the previous was new line. So when will that happen? When suppose I write this is a sentence. I will explicitly repress in the new line. So when I press enter I will have a new line character here. And when will a blank line occur when the next character is also new line. So by a blank line what I mean is that the current sentence is over. So I press a new line and the next character on the next line is also a new line. That is what is actually meant by a blank line. So when that happens then we know that an empty line has been encountered and here is the important thing break. Because one of the conditions to exit out of that loop was that either maximum number of characters is encountered or a blank line is encountered. So you may not have encountered maximum number of characters but you have encountered a blank line. So you should exit out of the loop. Again the rule is that break out of the innermost for loop, innermost loop which in this case is this for loop. So you get out of that loop and print up a new line. Now as with many constructs in C you can avoid break all together. You can write code if you have used break you can write equivalent logic without using break. So here is a standard way to do it. So here is the code that we just dealt with. It had two exit conditions. One is that the number of characters that you read is greater than the maximum allowed. Another exit condition was that you had entered a blank line. So here we used the break statement. And now I want to write an equivalent loop without using the break statement. And here is a very standard programmatic type. These are known as flags. So flag is just a variable which indicates that a particular condition has occurred. Initialize flag to just 0. In our code what flag is supposed to do is that it will indicate whether a blank line has occurred or not. So let us first look at the body of the loop without looking at the loop head first. Let us just look at the body of the loop. So it is similar to what went before. Instead of the break statement what I will do is if I realize that an empty line has happened then I will set flag to 1. Notice that flag was initially 0. So flag equal to 1 will indicate that an empty line has been seen. Now I will modify the loop as follows. Remember that the test condition here is just that maximum number of characters has occurred. Instead I will check for two conditions in the for loop. I will check that maximum number of characters have not occurred and I will also check that flag is not 1 because flag is 1 means that a new line a blank line has been encountered. So I will check for both these conditions in the for loop itself. If either of them is true that is if either of them is false that is if I is greater than or equal to maximum characters or flag equal to 1 then the test condition will become false and you will exit out of the loop. So here is a standard way to avoid a break and notice that this condition is negated in the for loop because the condition in the for loop is the condition for entering the loop. So to exit out of the loop you need flag equal to 1. So the in summary what I want to say is that if you want to write a code using break you can also write it without using break. One of the standard ways to do it is by using a flag variable for whatever condition that we want to check. You can pick either of this style whichever suits you more. So how do we decide whether to use the break statement or not? Sometimes the use of the break statement can simplify the exit condition and on the other hand it could also make the code a bit harder to read. What do I mean by harder to read? When I see the for loop in the code on the right hand side it is clear that there are two ways to exit out of the for loop. One is I greater than or equal to maximum characters the other is flag equal to 1. Just by looking at the for loop I can say that here are the two conditions for which the loop will terminate. I greater than or equal to max caps or flag equal to 1. On the other hand if you look at this left hand side code I actually have to look at the body of the code to realize what are the ways of exit exiting out of the loop. So you have to understand the body of the loop in order to see what are the conditions for the loop to exit. It is not just I greater than or equal to max caps. So in that sense the code with break is harder to understand than the code without break. It is still recommended to use break when you have two or more exit conditions out of a for loop. So typically programmers do use break and it is just a matter of style whether you will use break or not. I myself prefer using a break. One final thing about the break statement when you use break statement initially it is important to notice that break causes and exit immediately out of the loop. So remember when you have a for loop the normal execution order is you initialize then you test. So this is step 1 this is step 2 then you execute the body of the loop that step 3 and then you update this is step 4 and then go back to the test condition. So this is the normal execution order of the loop. When you encounter a break you exit immediately out of the loop. In particular when you break you do not go back to the update statement. So let us examine what this code will do. You have I equal to 0, I less than 10 increment I. So you start with I equal to 0, I modulo 2 will be 0 modulo 2 which is 0. So it will say okay fine you need not get into the if condition. Then I equal to I plus 1 so I equal to 1, 1 is less than 10 you enter the for loop 1 modulo 2 is 1 so you will break. When you break you immediately get out of the loop. So when you print this then I will be 1. In particular I is not 2 which is what will happen if you go back and update I equal to I plus 1 before exiting out of the loop. So the important thing to notice is that it is not 2 since I equal to I plus 1 is not done when you break. When you break you get out of the loop immediately without doing the update statement.