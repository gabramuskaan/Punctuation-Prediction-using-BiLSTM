 In this video we will talk about initializing character arrays, which are a special kind of arrays and has more features than when it comes to initialization as compared to arrays of other type. So, they may be initialized just like any other array and suppose I want to initialize an array to the following values. The first is I, the second is a space character, then a, then m and so on and the final character is a null character, which will be given as backslash 0 within single codes. Now, we can write s, so character s equal to and without with just the empty pair of square brackets without specifying a size and then followed by the list of characters. Notice that each character is enclosed in single codes, so the space character is a space enclosed in a single code and so on until the last, which is a null character, which is backslash 0 enclosed in a pair of single codes. But, c also allows us to define what are known as string constants. So, in order to initialize an array, a character array, I can also write character s square brackets is equal to I am done, but this time within a pair of double codes. So, I am done is a string constant in a, every string constant that is a string enclosed in double codes, the null character is automatically added to the end. So, I want you to note this difference that here we explicitly gave a null character at the end, here you do not have to give that. Now, c string constants are specified by enclosing some text within double codes, for example, I am a string within double codes. Now, we will talk about how do we print strings, we have used string constants many times. So, just take a moment to think back to see whether you can figure out where we have used string constants. So, we have used for them for example, in printf and scanf. The first argument of a printer for a scanf was always a string constant, because if you recall we had some text, which involved special characters like new line, it involves format specifiers like percentage D, but whatever it was it was a bunch of characters. So, it was a text inside a pair of double codes, that is a string constant. So, the first argument is a string constant followed by what all arguments we want to print. Similarly, even for scanf we had some say format specifier enclosed in double codes. So, that is a string constant and then you say and value. So, strings are printed using the percentage S option. So, any of the basic data types in c can be easily printed using the printf statement if you give the correct format specifier. So, if you have a string constant you can print it using the percentage S option. For example, if I want to print the string I am done within double codes, then what I can do is I can say printf percentages I am done and this will print I space I am space done, which is exactly what I wanted to print. Now, what if I initialize a character array character SDR open close square bracket, without specifying the size. I initialize it using a string constant I am great done within double codes. Then I print it using printf percentages SDR. Will this work? And the answer is yes it will work because c will consider this as a string constant and it will print it using percentages and you will get the correct output. So, state of memory after definition of this string in example 2 is that it has a list of all these characters I space A M space and so on and node the implicit null at the end. So, even though the double codes ended just after N when you stored it in an array there is an implicit null that is inserted at the end of the array. So, when you print it it will print until the null character. So, the null character itself at the end of a string is not printed when you print it using percentages. Now, let us look at the following fragment to understand slightly in a deeper way what percentage S does when you print it using printf. So, suppose I declare a character array using character SDR square bracket equal to I am great done within double codes. So, this is initialized using a string constant which means that after the last N there will be a null character in the array. Now, I initialize I set SDR 4 equal to null. Note that there are 11 non null characters in the string constant. So, this goes from SDR 0 to SDR 10 followed by SDR 11 which is a null character. So, now I set SDR 4 equal to null. So, somewhere in the middle of the string I put a null character. What will happen if I print it using printf percentages. So, let us see what happens here I declare the array and initialize it using a string constant. So, it has all these letters followed by a null at the end. Then when I set SDR 4 equal to null what it does is it goes to the fourth location in the array and changes that to null. So, what that does is there was a space there before but now you insert a null character there. After the null character there are other non null characters and then there is a second null. So, what will happen when you print? It will just print I am and stop there. It will not print the remaining characters and why does that happen. So, a string of as far as C is concerned is a sequence of characters terminated by a null. This null is not part of the string. So, there may be non null characters after the first occurrence of null in SDR but they are not considered part of the string SDR. They are part of the character array but when you look at SDR as a string it is just the first null character. So, when you print it using percentage S only the part until the first null is printed. So, that is considered the string the character array is bigger. So, it will just print I am and stop there. So, do I lose the characters after the first null and where do they go? Well of course, they do not go anywhere they remain where they are. So, what is the new state of the array? The new state of the array is I space M and then there is a null and then there are some other characters. So, if I print it using percentage S it will only come up to I am and then stop there. So, is there any way to print the remaining characters? Of course, there is a way. So, if I print it using percentage S I will get I am but I could easily write a loop like this. I will say int I and then for I equal to 0 until 11 I plus plus and then put car SDR I. So, this will print the character SDR 0, SDR 1 and so on up to SDR 11 regardless of whether that character is null or not. If it is null it will do something but it will still go on to the next character. If you run this what you will see is it will print the first character which is I then it will print the second character which is space then it will print the third character which is A. So, these three are printed as they are and then M and the fifth is a null character. What do you mean by printing a null character? It may not print anything. So, it may be just skipped but then it goes on to the next character GR8 DON and there it stops because it does not print the 11th character. So, the null character in this example is not printed. Now, the way the null character is treated on different terminals may be different. So, on some Linux terminals if you ask to print null character it will just not print anything but other character terminals may print them in different ways.