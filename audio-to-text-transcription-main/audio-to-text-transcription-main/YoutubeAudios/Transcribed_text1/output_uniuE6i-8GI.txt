 In this video we will look at the last possibility with respect to multi dimensional arrays and pointers. This is known as an array of arrays. In order to understand this, let us just look at something we are comfortable with. If I had just a float array of 10 elements, then how would I read this? I will say that array is aarrr is an array of 10 floats. So, this is how I would read it. If I have more complicated declaration like aarrr star, a strings. So, notice that the precedence for the square blackheads is higher than that of the precedence for star. So, this would actually be read as strings is an array of 7 characters stars. So, that is how it would be read because 7 would bind closer to strings. So, strings will become an array of size 7 and what type is it? It is character star. So, you replace float with character star and it is roughly the same phenomenon. So, the pictorially you can think of it like this. So, you have 7 cells in strings and each entry is a character star. So, each entry is a character pointer. You can think of it as a string. You can think of it as a character array whatever. Here is the pictorial representation. Let us look at why we would need such a structure and what is the advantage of it? This is a very popular structure almost as popular as two dimensional arrays themselves. So, let us look at what it means for when we allocate character star an array of arrays. So, we may want to let us say store the names of several movies and one of the things is that there is no maximum limit to the name of a movie. I mean it can be as long as you want it can be as short as you want and suppose you want to store all of this in a data. So, let us say that we have character star movies and I declare it as an array of arrays and it contains the first array is done to the second is raven and so on. Now, how will we do this? So, one way to do this is you say that movies is pointing to an array of arrays. So, movies plus one is pointing to another character array movies plus two is pointing to another character array and so on. So, this is how you pictorially represent it. There are three entries and each entry is a character pointer. So, it can point to any character array whatsoever and here is the here you see the distinct advantage of this kind of representation over 2 D matrices. Why? Because in 2 D matrices the whole point was the number of columns was fixed that is how the pointer arithmetic worked. Here the number of columns in one row can be different from the number of columns in another row. So, this representation is actually more useful when you have what are known as a ragged arrays that is one row and the next row may have very different lengths and here is a natural situation of storing strings when you need such a facility. So, let us see what this means type of the variable movies is a pointer to a pointer to character or character star star. Now, type of star movies is character star because you dereference one level and type of star star movies is character. So, let us look at it once more. So, star movies has type character star. So, in particular star movies will be this array it is pointing to this array. So, star star movies will be what is it according to the general formula this will be star of star of movies plus 0 plus 0. So, this will be the pointer arithmetic version of accessing this cell which contains D. But instead you could also write movies 0 0. Similarly, in order to get to the last cell here you could say star of star movies plus 5. It is the particular application of the general formula. The second row will be star of movies plus 1 again try to think in whichever notion you are comfortable with because you can also write this as movies 1. It will you will get the same result. So, star of movies plus 1 will come to the second row and you have star of star movies plus 1 that would come to the first element in the second row and so on. So, star of movies plus 2 would be the third array in the in this structure and here is how you access different elements in the third array. So, notice the picture is slightly different here even the representation suggests that these rows need not be continuous in memory. So, then location after this row ends need not be this row. So, the second row can be located arbitrarily far away in memory. The advantage due to that is that these rows can be of different length they are not packed as in the 2D array. So, let us look at this particular thing in detail so that you get comfortable with it. So, suppose you have that array and I consider what is printf percentages movies 2. Movies 2 will be the third character array that is present in the structure. So, it will print Chris 3. Similarly, movie 0 will print the first string and if you say printf percentage as star of movies plus 1 by pointer notation this is the same as the subscript notation movies square bracket 1. So, that will print array dot 1. Now, what happens if you have put character put car star of movies star movies plus 1 plus 1. So, again if you are more comfortable with the subscript notation you can translate back into the subscript notation this will become movies of square bracket 1 square bracket 1. So, what it will print is this letter which is small a similarly for the last one. So, it will print yeah whatever it will print the i. So, here is a error. Ariefer is now allows us to have a two dimensional structure with different number of elements per row and this is the advantage that it has. Now, let us say that we want to write a very natural program which is it takes a number between 1 and 12 and it prints out what is the month name corresponding to that member. So, I want to store the months and here is the problem different months have different lengths. We right now saw a solution to this problem which is to store arbitrary length strings in one structure we would make an array of arrays. So, you can say that character star month names. So, this is an array of arrays of character and then you can just initialize it to the month names you do this and then I will write the code so, you can write the code in any way. So, you can say that 0 is January and so on up to 11 is December, but maybe it is more natural to say that 1 is January and so on up to 12 is December. So, I will check if the given month index is between 1 and 12 then I will print the month name month minus 1. So, if you give the month as 1 you will print month names 0 which is January. If you give month names if you give the month as 2 you will print month names 1 which is February and so on. Now, if the month is not in this range it is an invalid month. So, you just print that and so on. So, here is a very simple program which illustrates what advantage you get out of this kind of array of array structure. You can store within the same data structure different strings of completely different lengths. This is not possible in a 2 D array because all you have to calculate something like the maximum column length of the so, the maximum width month name for example, it could be September and then all the other names have to have exactly that width. So, let us look at this the array of arrays picture is like you have an array of character stars. Now, each of those character stars may be pointing to different months. In this every month is exactly 3 characters long but you get the picture basically in this these rows can be of different lengths. So, contrast this with two dimensional arrays where the chief feature of a two dimensional array is the following you have to specify the number of columns. So, the number of columns have to be specified and no matter what the exact string is it will occupy 7 characters long. So, the remaining will be null filled or something. So, also notice that pictorially I have tried to represent it the very next memory cell after the first row will be the beginning of the second row. So, after row 0 it will immediately start with row 1 whereas, in the case of array of arrays row 0 and row 1 may be located arbitrarily far apart in memory. The only connection is that the pointers to these rows are consecutively located in the array in the pointer array that is not the case here it is actually located together in memory and it is represented in row major fashion where each row will take exactly 7 letters. So, I hope the limitation of the two dimensional arrays in this case is clear. So, you can try a few exercises in order to understand this notation a little bit this concept of array of arrays a little bit better. So, let us look at the types of various concepts. So, if I have month, month is actually a character star star it is an address. So, if you want to print out month I mean it is very rare that you need to print out month you would use something like percentage LU which is long unsigned for printing the unsigned long end. What happens if you access star month now you are dereferencing one level below. So, it will be a character star. So, now if you print percentage's star month it will print January. If you print star star month you have dereference two levels and you will get the first letter of the first array which is j and you can try out a few other things you can say star of month plus 1. So, one way you can do it is you translate it to subscript notation and try to see what it will print and there are. So, I would encourage you to try out these examples in order to get the translation between arrays and pointers correct. So, in comparison between array of arrays two dimensional arrays on the one hand individual array sizes can be different in the case of array of arrays. In the case of two dimensional arrays all the rows must have exactly the same number of columns. So, array of arrays is useful in a lot of string processing routines in representing graphs and things like that. But two dimensional arrays are more advantages when you deal with matrices because mathematical matrices typically have a fixed number of columns. So, here is a wrong picture but it sort of gives you an idea of how to look at these structures. So, if I have int array two three you can think of it as the number of rows is fixed and the number of columns is fixed. This is not actually what happens in C. In C actually the number of rows does not matter the number of columns matters. But you can for the moment to make it easier to think about think that if you declare it in this way this is when the number of rows is fixed and the number of columns are fixed. So, in particular if you know beforehand that your data structure has a fixed number of rows and a fixed number of columns then it is probably better to use a two D array. Now, if you have in star a r r three then now this means that a r r is a pointer to an array of size three. So, here the number of columns is fixed but the number of rows is variable it you can have any number of rows. On the other hand the third case in star array three. So, it is an array of three elements each of type in star. So, you can see that this is one situation where you have three pointers but each of them can point to arrays of arbitrary length. So, this is a situation where the number of rows can be seen as fixed and the number of columns is variable. And the general case can be in star star which is where the number of rows and the number of columns are both variable. So, you can think of it in this way this is not a correct picture but when you want to model data this is probably and you know that you are in a situation where the number of columns is variable but the number of rows you know beforehand probably you should go for array of arrays. If you are in a situation where you know that the number of columns is fixed but you do not know how many data there are then you can go for in star array of size three. So, you can go for the second alternative and so on. So, this picture is not quite accurate but it is indicative of the usage.