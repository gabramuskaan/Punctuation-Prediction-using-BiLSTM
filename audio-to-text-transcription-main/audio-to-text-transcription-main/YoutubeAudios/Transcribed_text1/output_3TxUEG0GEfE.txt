 In the previous session, we were talking about ASCII character set and I said that we do not need to remember the ASCII table, but we need to remember some general properties of the ASCII table. So what are those general properties? First we know that the initial 32 characters of the ASCII table are non printable characters, then the remaining or rather from ASCII value 32 to ASCII value 126 are printable values. Among them you know that the integers, the digits are occurring together. Similarly, the capital letters occur consecutively one after the other and the small letters occur consecutively one after the other. So this is some abstract property of the ASCII code chart that helps us in writing some useful code. We will see in a minute what kind of use we can obtain using these general properties rather than knowing the specific thing like the character value of A is hex value 41 or decimal value 65. This kind of information we need not remember this. For example, let us write a small program that prints. In our previous session, we had said that we do not need to remember the exact ASCII code of certain characters. We just need to remember some abstract properties of the ASCII table. For example, abstract properties like all the digits occur together from 0 to 9. All the capital letters from A to Z occur together in the table in the alphabetical order. Similarly, all the small letters occur together in consecutive locations in the ASCII table. Also another property that you can observe is that the small letters occur after all the capital letters. Let us see how we can write some interesting code using these properties and not by remembering the exact ASCII code of certain letters. So let us write a simple program to print the alphabet. The ASCII codes of the uppercase letters are consecutive and the ASCII codes of the lower case letters are consecutive. This is the property that we will exploit in order to print the alphabet. So for example, let us say that we are going to print the letters of the alphabet in capital letters. So for that we can use the following program using a for loop. So what you have to do is to initialize a particular character variable to capital letter A. So the ASCII character A. So note that A within single codes stands for the character constant A. If you look at the integer value then it is the ASCII code for A. We are not particularly interested to know what exactly the number is. Now we can write the for loop in an interesting way. We can say that start from capital A and then print the characters until you hit capital Z. And the update statement is after printing go to the next ASCII letter. So what this is doing is starting from A and then it will go to A plus 1 which is the ASCII code for B. Then it will go to B plus 1 which is the ASCII code for C. So on up till Z. So once you reach Z it will print that character. It will update once more where it is the ASCII character one more than. So the ASCII character next to Z in the ASCII table we do not really need to know what it is. Certainly it will be greater than the ASCII value of Z and at that point we will exit the code. So the output of it will be consecutively A to Z. Let us look at what is happening here in greater detail. All the characters are stored as 8 bit integers. Now they can be assigned as integers, incremented, decremented etc. Because essentially they behave like integers. So suppose A has ASCII code 65. A has ASCII code 65 but we are not concerned about that. Now so CH equal to character constant A sets CH equal to 65. Now CH plus 1 is the number 66 which corresponds to the ASCII code of B. So addition, subtraction all these can be performed on character values because internally they are represented as 8 bit integers. Similarly relational operations like less than or equal to greater than or equal to all of these also make sense. So for example if we use the relational expression capital letter A ASCII constant A less than character constant B then notice that A is the ASCII value 65 and B is ASCII value 66. So A less than B is correct. Now for realizing that A is A less than B is correct. We do not need to know that A is 65 and B is 66. All we know is that the abstractly in the ASCII table the character code for A is less than the character code for 6 because B occurs after A. So if it is 65 and 66 or it is 0 and 1 the answer is still the same. Now let us write a few more interesting programs where the spirit is that we do not need to understand what the exact ASCII code of a letter is but just we want to remember the layout of the ASCII table. For example suppose I want to write a conditional expression and if condition which says that if the given character is capital letter then print that it is an uppercase. So all I need to do is if the character value is greater than or equal to the character constant A and less than or equal to the character constant Z then you print that the given letter is an uppercase. Again please remember that we did not need to know that this was 65 and this was whatever it is 90. And could as well have been 0 and 25 it would still have worked because all we need to remember in the ASCII table is that A through Z occurs in consecutive locations in the standard alphabetical order. From that we can understand that if I write this if expression it will print the message uppercase only if the given character CH is an uppercase letter. Similarly let us say that if you want to check whether a character is in lower case you can analogously write character is greater than or equal to A little A in single codes and it is less than or equal to little Z in single codes. If that is true then you print that it is in lower case. Now if you want to check whether a given character is a digit similarly you can say that it is greater than or equal to the character 0 and this is less than or equal to the character 9. Now here is a subtle point which I hope you notice the character 0 is the ASCII constant ASCII character constant 0. So it corresponds to some particular ASCII value it is different from the number 0. So this is something that so we are looking for the ASCII value corresponding to 0 it is greater than or equal to that and less than or equal to the character value corresponding to the character 9. So if that is true then the given character is a digit. Now here is a snippet that I would advise you to take a look at it and tell me what it actually it is. So take a moment yourself and try to figure it out. So what it does is the given character CH if it is a lower case letter remember this is the example that we just saw this condition checks whether the given character is a lower case letter a small letter between A and Z little A and little Z. If it is true then what you do is add capital A minus small A to the character. So what does it accomplish? So let us say that we actually had CH equal to little A. Now for the purpose of illustration let us say that little A was ASCII value 100. I do not know whether that is true but it is not important that is what I want to illustrate. Now what does capital A represent? It represents some ASCII value let us say 65. So if the given character was little A what I would do is I would say character equal to CH minus 100 plus 65. Similarly if CH was character constant B I would still add CH equal to CH minus 100 plus 65. So it is adding a constant difference to the given character regardless of whether it was A or B the additive constant that we are adding is still the same. If you think about what is happening it is adding exactly the difference between little A and capital A. Notice that the difference between little B and capital B is the same as little A and capital A. Why? Because all the capital letters occur consecutively and all the small letters occur consecutively. So suppose A minus Z little A minus capital A is let us say 35 then little B minus capital B will also be 35 because you advance one in each case. So if you think for a minute you will see that what this code does is take the ASCII code corresponding to the small letter and add a constant difference. What is that difference? That difference is what will take you to the capital letter corresponding capital letter. So in short what this does is to convert the given character in lower case letter to an upper case letter. So if it is a lower case letter it will convert it to an upper case letter otherwise it does nothing. Now let us think about what we mean by scanning a character versus scanning an integer. So let us say that I have two variables in number and character letter. So let us say that I am scanning now n which is a number and the input was 12. So when I say scan of percentage D and n I am trying to read 12 into an integer variable. Now on a typical machine an integer variable may occur may occupy 32 bits or 4 bytes. So it has 32 bits in it and if you know the binary notation you will see that 110 in binary is the number 12. So this is 8 plus 4 which is 12. So when you see that the input is 12 and then I ask the C program, in the C program I am doing scan of percentage D and n. What will happen is that n is an integer with 32 bits wide and it will have the following pattern encoded into it. This is what it means by scanning an integers and if you try to print it out it will try to interpret n as a decimal number and it will print the digit 12, the number 12. On the other hand for the same input and here is the difference I want to emphasize. If the code was saying percentage C and letter. So scan the input 12 using the scan of statement scan of percentage C and letter. What will happen is that the C program is looking at the first character which is the digit 1 and scanning it in. Now character 1 is ASCII 49, it is not important you remember that but it has some ASCII value and that ASCII value 49 is 31 in hexadecimal because it is 3 times 16 plus 1 which is 48 plus 1 49. So the character 1 is 31 in hexadecimal and hence what will be stored? Remember that a character ASCII character is 8 bits wide so it will store 31 in hexadecimal so it will be 3 this is the number 3 and this is the number 1. So when you scan the input into a character variable called letter what will happen is that letter will have the number hexadecimal 31 or ASCII value 49 which corresponds to the number which corresponds to the character constant 1. So this is the difference between scanning a given input as a number and scanning a given input using a character. So when you scan it using a number this entire thing will be scanned it will be converted into binary and you will store it in an integer variable. When you scan it as a letter it will scan the first digit only because that is the character and then store the ASCII value inside the letter variable inside the character variable. So this corresponds to the letter variable 1 within single codes the character constant 1.