 In this video we will see some more common file operations. These are by no means the only file facilities that C provides you, but in common programming practice these are the functions that people often use. So we have seen this in the code that we wrote. The first function is FeoF and then it takes a file pointer. What it does is it checks whether you have encountered end of file while operating on FB. So maybe you are trying to read the file and you have already reached the end of file. So if you have already reached the end of file that is if EoF is set then FeoF returns a non-zero value. If FeoF is not set that is you have not completed the file yet by seeing end of file then FeoF returns 0. So in order to check whether a file still has some data you can just say not of FeoF FB. So that will check for the fact that the file still has some data. Now another useful file function is F error. So the F error function what it does is it takes the input file pointer, it takes the file pointer FB and checks whether you have encountered some error while reading the file. So error may be of many kinds. For example you are trying to write to a read only medium like CD or maybe you are trying to write to a file system and the file system is full. You are trying to write to a hard drive and the hard drive is full. So then you might encounter an error. So there are various errors that you encounter in file operations and F error checks for some of these errors. So if the error indicator has been set for FB then F error returns a non-zero value. Otherwise it says 0. Now here are some couple more interesting functions who are very useful and quite commonly used whenever we deal with files. For example we can have something called Fseq. Now Fseq is a function which allows you to start reading from or start writing to arbitrary locations in the file. So often we may want to read into the 10,000 byte directly and we do not want to be bothered with reading the first 999 characters discarding them and then coming to the 10,000th character. And then coming to the 10,000th character this may be a lot of wasted time. It would be more convenient if I can directly jump to the 10,000th location in the file. So is there a function that allows you to do that? Yes there is this thing called Fseq. Now what it takes is the file pointer and it takes two arguments. One is known as an offset and the other is known as the origin. So let us look at the offset and the origin in greater detail. So suppose I want to read from the 10th byte of the file. So I could say Fseq and suppose my file pointer is Fp. I will just say let us say I want to read from the 10th point from the beginning of the file. What I can say is Seq set. So if I do this what will happen is that it will start from the beginning. Seat set is the beginning of the file. So it will add 10 bytes from the beginning of the file and it will start from there. So if I know that I want to read from the 10th byte then I can say that start from the beginning of the file. Seat set says origin of the beginning of the file plus 10 bytes. So this is 10 bytes from beginning. Now there are other situations. For example you might want to say that I want to start from the 10th byte from the current location. I have already read many bytes. Now I want to skip the next 10 bytes. So is there a way to do that? Then what you can do is if you say Fseq and let us say 10 itself but Seq current. So there is a typo here. This is just CuR. So if I say this then what I need to do is what it will be perform is it will say 10 bytes from the current position. So I have already read 100 bytes from the file and then I say Fseq 10 bytes from the current location. What it will do is jump to 110th location. Now I could also say something like here is a very common situation. I want to start reading from the 10th byte from the end. So I want to regardless of the size of the file I want to jump to the end and then rewind 10 bytes and start from there. So in that case I can say the origin is Seq end. That is the end of the file and where do I start from? Seq end plus something does not make any sense because it will refer to something that does not exist in the file. So you could say Seq end minus 10. So this is 10 bytes before the end of the file. So you can use Seq in several ways and it is a very convenient function because it allows you to jump to arbitrary locations in the file and it will work as long as the target location origin plus offset is a valid location in the file. Now there is also something called Ftell which will tell you the current position in the file. So if it will take a file pointer as the argument Fp and it will return you where in the file you are currently at. So with this let us take a look at a few more modes in file operations. So when you open the files we saw that you could open it in mode RWA. Now there are also some other special modes that Seq gives you. For example there is something called R plus. This says you can open a file for reading and writing. So this is essentially an update mode. W plus will be write and update. So create an empty file and update that file. And there is something called A plus which is append an update. This is somewhat strange. If you do any Fseq after you open the file in A plus mode then the read will be affected. So suppose I am at the 100th location I have read 99 bytes. I am at the 100th byte. If I read now do an Fseq to 10 bytes ahead. So now I will be at the 100th and 10th byte. Now there are two possibilities now. I can read from here or I can do an Fprintf. Fscanif will start from the 100th and 10th byte. It will obey the Fseq. Fprintf will always print at the end of the file. So that is the append part of it. So Fprintf is always, output is always at the end of the file and reading will be dependent on any Fseq that you do. So Fseq will never affect the where you print. It will always be at the end of the file. So A plus is a very special mode. These are some additional file operations that you might find useful while coding in C.