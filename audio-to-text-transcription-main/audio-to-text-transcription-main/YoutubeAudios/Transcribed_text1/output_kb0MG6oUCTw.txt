 Okay, once we have understood what algorithms are, we will start writing a few simple programs in the C programming language. Before we begin, we will give a brief introduction to the process of programming. When you are programming, you follow typically what is known as the programming cycle and this contains three parts. One is the process where you write the program or edit the program and after you are done editing the program, you save it and then you compile your program. If your compilation succeeds, you are ready to run the program. If your compilation fails, then you return to the editing step and correct the errors. And compile again. Once compilation process succeeds, then you can run the program and check whether the output is correct. If the output is correct, you are done. If not, you go back to the edit process. So this is why it is known as the edit compile run cycle. So you edit the program first, then compile it. If there are compilation errors, you go back and edit it again. Otherwise you run the program. If the logic is correct, then you are done. If your logic is incorrect, then you go back and make changes to the program. Compile it and run it again. So this is the process that we have to follow in the when we are program. We look at each of these steps one by one. In editing, it is typically done in what is known as an editor. Now editor is a program that lets you create a text file, make changes to the text file and update the text file and later save it. So in order to create a program, pick a particular editor of your choice. If you are on Linux, I would recommend a simple editor like G-Edit. If you are on Windows, there is a free editor called nodepad++. Be careful that this is not the usual nodepad that comes along with the system. Write your code in an editor of your choice and save it into a file. Let us call it sample.c. Once your code is saved, you have to compile a program. Now why do we have to compile a program? Why is this step necessary? The computer does not understand C per C. It cannot execute a C program or the individual statements in a C language correctly. For example, let us say that in C you can write G equal to A percentage B. The percentage operation stands for modelo. So this statement says that you take A modelo B and assign it to the variable G. The microprocessor or the processor in the computer cannot execute this statement because it does not understand this C programming language. So it translates into an equivalent piece of code consisting of even more basic statements. For example, this is just for the purpose of illustration and it is not important that you understand exactly what is going on. But a statement like G equal to A percentage B can be translated into a bunch of statements saying load data from a particular memory location into a particular register. Load the second piece of data from another memory location to the second register. Load the contents of these two registers, store the remainder in a third register and then finally take the result and store it into a third memory location. So the simple statement that we wrote G equal to A percentage B or G equal to A modelo B becomes a bunch of basic statements that the microprocessor can understand and then it executes these statements. So why not a program in the microprocessor language or an assembly language? Writing programs in machine language is very tedious. One line in a higher programming language like C translates into multiple lines of machine language. So writing machine language code is very long, it is very tedious and is particularly prone to errors. Also they are not portable. If you write machine code for a particular processor, let us say you are writing the code for an Intel processor and you translate it into an AMD machine, it might not work. Whereas if you take your C code and compile it in another machine, it will run on that machine. So compilers work as a bridge. What they do is take a high level C programming language and translate it into the equivalent machine code. So think of them as a translator. So the input is a C program and then you give it to a compiler. The output of the compiler will be the equivalent machine program for whichever machine you want to run it on. So compiler is a translator which translates from C to machine code. How do you compile? We have just seen why we bother with compilation. And on unique systems or Linux systems, you can compile the program using the GCC compiler. So GCC stands for GNUC compiler. So for example, if you have edited and saved your file as sample.c, you can just type on the command prompt, on the terminal GCC sample.c. If your code does not have any errors, then the system will silently say that the compilation is done and it will show you the prompt. If there are errors, the system will list the errors and so you can go back to the editor, edit your code to correct the errors and come back and compile again. As long as there are compilation errors, there will be no executable file created. So the executable file is the code, the file that you can finally run. And if there are compilation errors, the compiler will not produce executable code. So name your file as whatever you want. Let us call it your file name.c. And then GCC your file name.c, it will produce the executable file. If you are on Linux, the executable file that it creates is something called a.out. If there are no errors and you look at your directory, there will be a new file called a.out in your directory. We will explain the directory structures in another session. Let us look at a very simple c program. Open your editor, depending on which system you are in. So let us write a very simple program. It is very short. What it has is are three lines of code and some punctuation. This is known as the c syntax. Let us examine this code. What this code does is it prints a particular message, which is welcome to c. It has various components. You type it into an editor as it is. Make no punctuation mistakes syntax errors. Now if you compile the program and you have typed the program correctly, then a new file called a.out.out will be created. So if you type gcc sample.c and if there are no errors, it will just say nothing. If it says something, then there is a compilation error. Compilation creates an executable a.out. And now you can run the program by typing and this is important.forwardslash a.out. So the syntax is important. What you type is.forwardslash a.out. And then when you run the program, it will say welcome to c. Because that is what the program is supposed to do. Let us look at the program a little more carefully. What are its components? It had three lines. The first line said hash include stdi.au. So it has multiple components. One is the first symbol which is hash. The first symbol which is a hash, please do not forget to include that. And actually there is no space between the hash and the first i. So there is no space here. So hash include stdi.au. That is this line is supposed to tell c that please include the standard input output library. The standard input output library is what has the print routines which will print output messages on to the terminal. So if you want to have any input output component of your program, then you should include stdi.au. . Include this line routinely in the first line of your c file. Because in the course of this class, we will often need scan of and print of statements. So we will often need input statements and output statements. So include this by default. Now if you look at the second line, we will have a function called main and again note the parenthesis here that is also part of this syntax. So main is supposed to be a function. All c programs start by executing the main function and it starts from the first statement of the main function. Now what does the main function have? It has a single line which says printf welcome to c. So printf is the function called to output from a c program. So to print a particular message, you enclose it in double codes. So whatever is enclosed in the double codes will be printed. So to repeat again, please note the extra punctuation symbols which tell you that these are valid c statements. So all the underlying statements are, all the underlying symbols are important. So in the line printf welcome to c, this is what is known as a statement in c and statements in c and in a semicolon. So this semicolon is also important because it tells you that this is where the statement ends. So typical errors do we have when we code in c. Let's systematically enumerate a few common errors that could happen in even a simple program like what we have seen. For example, you could forget to include a stda of dot h. If you do not include the standard input library, then the compiler will give you an error message. You may forget to include the main function, then also you will get some error message. You could forget to include the semicolon in the statement. You could forget to include the braces, the curly braces in main or forget to close the double code, open or close the double code in the printf statement. So these are a few errors that you could make even in a simple code like what we have seen. We have only three lines but they could also have errors. I would advise you to try deliberately making these mistakes in your code, try compiling them and study the error messages. Once you are familiar with the error messages, this will help you later in your coding because when you see the error messages, you can guess what errors did you possibly make in your code. So go back to the code and correct it.