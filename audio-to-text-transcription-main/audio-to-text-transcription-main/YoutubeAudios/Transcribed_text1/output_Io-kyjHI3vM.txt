 In this session, we will look at loops in the C programming language and we will start with a very basic kind of loop which is known as the wild statement. So, the general form of a wild statement is similar to that of an if which is that there is an expression and you say while that expression then do the statement. So, the flow chart corresponding to the expression will be the wild expression will be you test whether the expression is true or false. If it is true, you do the statement. If it is false, you exit out of the loop and execute the next statement outside the loop. So, if the expression is true in C that is the expression is non-zero, then execute the statement and go to the step outside the loop. If it is false, then directly go outside the next statement after the wild loop. This is similar if you recall to the if block without the else. So, loops are a new thing that explicitly there was no loop construct in a flow chart. We just had this way of going back to the expression. But in programming languages, loops are such a basic programming need that in addition to the if block, you have a loop construct as well. So, a slightly different variant of the wild expression will be that wild expression statement 1 and then statement 2. So, the flow chart here is easy to follow. If the first test whether the expression is true, if the expression is true, then you execute statement 1 and then after you execute statement 1, then go to go back to the expression. If the statement is false, if the expression is false, then you go to statement 2. So, while the expression is true, execute statement 1 and if the expression is false, then execute statement 2. So, the difference in the if condition will be that if this was an if block, then if the expression is true, you do statement 1 and you exit out of the, exit out of the wild loop and that is not done in the case of a normal wild loop. After you execute the statement, you go back to the expression. So, as long as the expression is true, you keep executing statement 1 and if the expression becomes false, then you execute statement 2. So, let us illustrate the use of a wild loop with the help of a, a, a, a, program. So, we will introduce a very simple problem, which is read a sequence of integers from the terminal until a minus 1 is encountered. So, minus 1 signals that the input is at an end. Now, what I want to do is that sum up all the numbers until the minus 1 and output the sum. So, it is a very simple program. What you have to do is to read a sequence of numbers until you hit the first minus 1 and then add these numbers and output their sum. So, let us first introduce a very simple loop, which will do only the basic thing of reading the numbers until a minus 1 is encountered. So, how do you write the loop? You have a stdiot.h and then you declare an integer variable and read the variable. So, this is supposed to be the first number. If that number is minus 1, then you do not have to read any more numbers. So, if the number is not minus 1. So, if a equal to minus 1 is false, then you read one more number. After you read one more number, you do not finish the loop, you go back and test whether the loop condition is still true. So, you go back and check whether the second number you read was minus 1 or not. And then you keep on reading it until you hit a minus 1. At some point when you hit a minus 1, you go back to the loop and the condition that a equal to minus 1 will be true. So, not of that will be false and you will exit the loop. So, read the first number if it is minus 1, don't enter the loop. Otherwise, keep on reading numbers until you hit a minus 1. That is the meaning of the while loop. So, let us just trace the execution of the loop on a sample input to understand how it works. So, in a box, I will represent the memory location a and its current content. So, I run the program after compiling a dot out and let us say that I enter the number 4. Now, you scan the number 4. So, memory location a becomes 4. Now, 4 is not minus 1. So, you enter the loop. So, then and let us say that the next number is 15. You read the number into a. So, memory location a is now 15. 15 is not minus 1. So, you again enter the loop. You enter minus 5. Minus 5 is not minus 1. So, you enter the loop again. At this point, you scan the number into a and a becomes minus 1. So, you go back to the loop again and now the test that so a equal to minus 1. So, not of that is false. So, the while condition becomes false. At this point, you exit the program. So, this is a very simple part of the program that we want to write. Recall that we want to read a bunch of numbers and sum them. And the end of the numbers is represented by a minus 1. Until now, we have just read those numbers.