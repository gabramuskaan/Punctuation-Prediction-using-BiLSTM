 Let us do a sample program using continuous statements. I will introduce the problem initially. The problem is that of finding Pythagorean triples. By the way Pythagorean triples are numbers like a triplets of numbers like 3, 4 and 5 because you know that 3 square plus 4 square equal to 5 square. So, they are Pythagorean triples because there can be a right triangle where let us say the base is 3, the altitude is 4 and the hypotenuse is 5. So, 3, 4 and 5 could be the sides of a right triangle because they satisfy the Pythagorean identity. So, here is our problem. We are given a stream of numbers and let us say there are n numbers. So, the initial number says how many other numbers there are. So, 8 says that there are 8 numbers to process. After you read n, n is greater than or equal to 2, you have to read n integers and then you have to identify Pythagorean triplets occurring consecutively. By consecutively we will say that consecutive positive integers because in the middle there could be negative numbers. You have to just ignore them. For example, you have that 3, 4 and 5 are consecutive positive entries in this data because minus 3, minus 4 and minus 5 are negative numbers. So, consecutive in this context need not mean that they occur together. It just means that if you ignore the negative numbers in between then they are together. So, we have to identify all such Pythagorean triplets. So, in this case the Pythagorean triple in the input sequence is 3, 4 and 5. So, let us try to code it up. I hope you see how it can be done. So, let us try to do it by hand. So, let us say that I have and then some negative numbers in between and so on. So, some positive numbers, some negative numbers in between. Let us say that I have and then some negative numbers in between and so on. So, some positive numbers, some negative numbers in between. Till I find so I have let us say 4, 6 numbers. So, the input is of the following form. What I need to do is at any point I may have to remember some triple. So, for example, the first triple that I will find is the following. So, this is the first number, this is the second number and this is the third number. And this is the third number and what I have to do is to check with the first square plus second square equal to third square. So, this is what I have to check. Now suppose that 1, 3 and 4 are not it Pythagorean triple. They are not because 1 square plus 3 square is not 4 square. Then what do you have to do? You have to advance all these first second and third variables. So, let us try to advance the third variable. The next interesting number is 5 because that is the next positive number. So, the next iteration should check for the following. This should be the third number. 4 should be the second number. And 3 should be the first number. If you do that then you know that 3 square plus 4 square equal to 5 square and you will identify a Pythagorean triple. So, what we do is that we have to shift all these variables first, second and third by 1 positive entry. So, this is what we have to do. We have to remember 3 numbers. The current number that we have seen the previous number, previous positive number that we have seen and the previous to previous positive number that we have seen. So, this is one situation where you need to remember 3 variables. And once you check whether the current triplet satisfies it, if you satisfy it fine, if you do not satisfy it you have to advance the variables by 1. So, first we will take over second, second we will take over third and third we will go to the next positive number. So, this is the method of programming this. Let us try to code this up. So, we will write the code as follows. We need 3 variables, the current number, the code as follows. We need 3 variables, the current number, the previous number and the previous to previous number. Currently we will leave all of them undefined. N is the number of integers to read. I is we will eventually write a loop. So, for the for loop we need to count it. So, I will basically count from 1 to n to ensure that n numbers have been read. I will also have an extra variable called count. I is supposed to count the number of numbers seen so far and count will count the positive numbers seen so far. So, I need 2 of them in this code. I may need them. Now, after you do that you scan the n which tells you how many numbers are there in the input. Now, a for loop has to go here which will do most of the work in the code. So, let us see what that loop looks like. So, recall what we did by hand you will look at a you will look at the current number which is the next number to read. If the next number is 0 or less than 0 you say continue. So, this is the application of the continuous statement here. So, if says if the current number is not positive you just go on to the next iteration of the loop. Now, here is some logic which is not easy to read but we can motivate it the following. If the current number that I have seen is the first positive number then obviously that cannot they then this was the first number that I read. Therefore, there was no previous number and there was no previous to previous number. So, I will because this is the first positive number that I am reading then I will just said that the previous to previous number is the current number. Also I have seen one positive number. So, I will say increment count equal to 1. So, if I have seen if the current number that I have seen is positive and it is not the first positive number that means if count equal to 1 I have already seen at least I have already seen one positive number. Then what you do is you know that there is a previous to previous number you set the previous number to the current number and you continue the loop setting that count equal to 2 which says that I have seen two positive numbers. So, I have a previous to previous number and I have a previous number now I will read the next number. This is because in order to identify a triple you need at least three numbers. So, previous to previous and previous should already be to some positive values in the input. This is why we initially said that we need at least two inputs. So, we will go back to the loop if count equal to 1 otherwise let us say that count is at least two. So, it is two or more. So, in this case we will just say that as far as count is concerned I do not need to keep track of how many positive numbers are needed. It was used only to see that I have at least two positive numbers to begin with. So, I can add the next number as the possible third number in the triple. So, I will not update count from now on you can also do that but counts afterwards serves no purpose. So, I will say that count is two and I will just adopt the convention that it will remain two. So, I have seen at least two positive numbers. Now, I have also a third number in the current so you have previous to previous and you have current. So, these are the three numbers that you have. So, what you have to check is whether previous to previous squared plus previous squared equal to current squared. So, that is what we will say. So, this is the check. We will check whether previous to previous squared plus previous squared is equal to current squared. If that is true then you have found the Pythagorean triple. So, you will just say that I will print f that I have found the Pythagorean triple which is formed by previous to previous previous previous and current. Now, what I will do if the Pythagorean triple is found is that I will advance previous to previous by one. So, previous to previous will become previous previous will become current. So, recall the figure that I first true and then we will go back to the loop. So, this is the code for identifying the Pythagorean triple and it encodes exactly the logic that we did by hand.