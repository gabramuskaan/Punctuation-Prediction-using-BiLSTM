 In this session, we will discuss operators and expressions. So, we have already used C expressions in our programs before and expressions in C are similar to expressions in mathematics and they follow rules similar to what mathematical expressions also follow. They are a basic unit of evaluation and each expression has a value. We say that an expression returns a value of a particular type. So, let us consider a few example expressions. For example, I have the following A is 3, B is 4 and I have a variable C which is just declared to be a type int and then say that C equal to A times A plus B times B. So, the right hand side of the assignment operator, so this is the assignment operator and the right hand side is an expression and that expression has sub expressions A star A and B star B within parent this is. So, an expression can be made up of variables, it can be made up of constants. These are the atoms of the basic components of an expression and sub expressions can be combined into bigger expressions using operators. Now, operators can be unary that is they take one argument operation. For example, unary operators the examples can be minus which is the unary minus for example, minus 3 is a negative number. Similarly, not operator that we have seen in connection with logical operations. So, not of 0 for example, so the logical negation operator both of these operations take one argument. Now, there is also the binary operations like plus minus star etcetera. So, plus takes two arguments for example, an expression like 2 plus 3 and here is the binary minus. So, if I say 2 minus 3 this is actually a binary operator which takes two arguments which is which are 2 and 3. Similarly, the binary multiplication so, 2 star 3 would be the product of 2 and 3. So, notice the difference between it is the same sign for the unary minus and the binary minus. But, the unary minus takes only one argument and the binary minus takes two arguments. We have used the assignment operation many times and let us understand it in somewhat more detail. For example, if you consider the expression be equal to b plus 1. Now, if you remove the semicolon at the end so, the statement is b equal to b plus 1 semicolon and if you omit the semicolon what you get is an assignment expression b equal to b plus 1 without the semicolon. So, how does the assignment operation work? For example, consider an expression like a equal to and then on the right hand side within parenthesis b equal to 10 what does this do. So, assume that a and b are integer variables. Now, assignment assigns to the left hand variable, left hand operand the variable left hand operand the value of the expression on the right hand side. For example, in this assignment operation there are two assignment expressions one is the expression b equal to 10 and the second is the expression a equal to b equal to 10. So, the first assignment expression is supposed to do the following assign 10 to b. So, what it does is it assigns the value of the right expression which is 10 in this case to the left hand side operand that is one thing it does and also it returns the value after the assignment. So, 10 has been assigned to b and the return value of this expression is 10. So, we can now analyze a equal to b equal to 10 as follows. So, this is the first evaluate the expression in parenthesis. The expression b equal to 10 has an assignment operator. So, evaluate the expression on the right hand side and then assign it to b. Now, that operation returns so that expression returns a particular value which is 10. Now, the original expression can be thought of as just a equal to 10 right. This is evaluated as usual. So, you take 10 and assign it to a and the return value of the whole expression becomes 10. So, when executing this expression when evaluating this expression two variables are assigned their values. One is b which is assigned the value 10 and the second is a which is also assigned the value 10. The assignment operation can be used to initialize a number of variables in one shot for example, if I write a statement like a equal to b equal to c equal to d equal to e equal to 0 what does this mean. Now, here there is some big bit here because we do not know which order to evaluate this should be evaluate from left to right should be evaluate from right to left does it matter. So, should the assignment be treated as the following where a equal to b is done first then equal to c then equal to d and so on or should it be the opposite way right to left where equal to 0 is first done then d equal to that then c equal to that so on until a. So, the expression is evaluated from right to left in the case of the assignment operation assignment for example, the above expression that we just saw will be done as a equal to so, e equal to 0 first and then backward until a is assigned. Now, this is also the standard mathematical convention we are not introducing a new strange rule here why is this first we will evaluate the innermost expression which is e equal to 0. So, e will be assigned 0 then the return value of this sub expression. So, this sub expression will return the value 0. So, this becomes d equal to 0 d is assigned the value 0 and the return value of this sub expression becomes 0. So, then we have c equal to 0 and so on. Finally, every variable here will be assigned the value 0. So, the reason for doing this is that if you try to do it in the opposite way you will see that uninitialized variables are initialized to other uninitialized variables for example, if you go from left to right in the previous this simply does not make any sense because you have just declared a, b, c and so on and when you say a equal to b a and b are not initialized yet. So, this assignment hardly makes any sense the basic rule of assignment is that a left hand side equal to right hand side. So, the left hand side is some value that can be assigned to for example, this is a variable. The right hand side can be anything variable constant or it can be an expression. So, all these are valid assignments. So, what is an invalid assignment? So, a equal to 0 can be a valid assignment but 0 equal to a. So, the assignment operation is evaluated right to left. Now, we have the concept of associativity of operators. So, what does associativity mean? It is we have just argued that a equal to b equal to c equal to d equal to 0 and expression like that will be evaluated from right to left. So, it is as though we had parenthesis the expression as d equal to 0 in our most then c equal to that then b equal to that and so on. So, on the other hand if you take an operator on the other hand if you take an operator like binary plus the addition symbol then the usual custom is that you parenthesis from left to right. So, the evaluation is done a plus b first then that sum is added to c then that is added to t. So, the assignment operation goes right to left the addition symbol operates left to right. So, this concept of associativity of an operator tells us the order in which the evaluate the operations if there are multiple occurrences of the same operator. So, the first there are multiple occurrences of the equal to sign in the second there are multiple occurrences of the addition symbol. So, associativity rules tells you that if there are identical operators in an expression in which order do you evaluate them do you evaluate them from left to right. If you do then it is called a left associative operator if you evaluate from right to left in the case of for example, the assignment then it is called a right associative operator binary minus is also left associative for example, a minus b minus c minus d is evaluated as a minus b then c then minus c then minus d. So, for example, if you say 10 minus 5 minus 15 what will be done is 10 minus 5 and then minus 15. So, this is 5 minus 15 which is minus 10. Whereas, if the parenthesis had been in the opposite way it would be 10 minus 5 minus 15 which case it would be 10 minus this is minus 10 which is 20. Notice that this is not how you are supposed to do it even in mathematics. So, the way that c does handles the associativity of the binary operation is correct. So, the correct parenthesis is 10 minus 5 and then minus 10 minus 10 minus 15. In general for every operator c defines an associativity. So, let us see the part of the associativity operations of operations in c. There are several operations that we have seen so far the parenthesis the Boolean naught the logical naught and the unary the binary multiplication division and so on addition symbol comparison less than or equal to and so on equality logical and logical or and then the assignment operator. We have seen all these operations so far and of this the typical associativity is left to right there are couple of exceptions one we have already seen assignment operation is right to left. The unary operations are also right to left most of the other operations are left to right. So, if you think for a little bit you can see that the associativity for unary operations is also easily seen to be right to left that makes more sense. So, the idea is not that you should memorize this table but you should understand given the table can you correctly calculate what the value of the expression will be.