 In this session, let us look at a matrix problem and the problem is given as follows. You have a bunch of lines of input. The first line of the input consists of two numbers m and n. This line is followed by m lines each containing n integers. So, this is supposed to represent the matrix of size m time m cross n. We have to calculate the sum of the squares of the sum of numbers in each row. That is quite a mouthful. Let us look at the formula. So, what I want to do is summation j a i j. So, once you do the sum, you square that and then do the summation i. So, i is an index which goes over the rows. In C, we adopt the convention that the first row is starting with 0. So, it goes from 0 to m minus 1. Similarly, the first column starts with index 0. So, it goes on till n minus 1. So, the input will be given as follows. The first number m represents that there are three rows. The second number represents the number of columns in each row. Then, this is followed by a matrix of size 3 cross 4. Now, the numbering is as follows. For example, if you have a 2 0, this means second row 0 with column. Note that second row means we start with row 0, then row 1, then row 2 and 0 with column is this, the first column. So, a 2 0 is this number which is 2. Similarly, a 1 2 is first row, row number 1, column number 2 which is also 2. So, the desired output that we have is 4 plus 7 plus 11 plus 2 whole square and so on. So, how do we do this by hand? Let us just look at the calculation. So, we have 4, 7, 11, 2, 1, 1, 2, 4 and 2, 9, 0, minus 1. Notice that the formula that we have to calculate is I going from 0 to 2, j going from 0 to 3, a i j squared. So, how do we do this? First, we sum the numbers in each column. So, I will name that as j going from 0 to 3, a i j and then squared. So, if you sum all this, you see 11, 22, 24 squared which is 576 and similarly, this is 64, 8 squared and this is 10 squared which is 100. So, what I have tallied on the right hand side is for each row, you sum the numbers, take that sum and square it. And then finally, in order to compute what we want which is I equal to 0 to 2 of summation j equal to 0 to 3, a i j squared. In order to calculate this, all we need to do is to sum this number up and this turns out to be 740. So, notice when we did by hand, we did the following. We first calculated row wise, you summed over all the numbers in that row, take the sum square it, then you repeated the same operation for the next row and then for the third row. So, we have three numbers and then we added them in sequence. So, we will see how we will code this up. So, what we need here is something called an inner loop or a double loop. We need a loop inside a loop. Now, the inner loop is doing what we did first, it is taking a row and adding all the numbers in that row, then squaring it. So, we need one loop to do the row sum of each row. Once a row is finished, we squared the row sum. Once that is done, remember that once the we tallied numbers on the right hand side and squared them, we had to add those numbers up. So, we need another loop, an outer loop to add the squares of row sums. So, let us do this program in stages. First, let us write the inner loop. This is the loop so that for a given row, you sum up all the numbers in that row. Now, let us assume that we are at the beginning of a row and we have not read any numbers yet. Now, what we have to do is to start reading the numbers. So, we write a while loop, we declare four variables a column index, then we need something for the row sum and some integer variable for row sum squared. Now, what you do is you go along the row and add the numbers in each column. So, while the column index is less than n, recall that the matrix size was m cross n. You scan the next number, the next number is added to the row sum and then increment the column index until you hit n minus until you hit n, recall that the last column is n minus 1 because we start the column numbers from 0. Now, once you are done, you have the sum of the numbers in that row and what you need to do is to square that number. So, we have row sum times row sum will be row sum squared. That completes the inner loop, which is what we did when we added the numbers along a given row and then finally, square the sum. Now, what we need is an outer loop structure over this. So, we have a code that reads the next and integers from the terminal and sums them. Now, what we need is some further code that takes the output of the previous code and then sums all those numbers up. Remember, when we did this by hand, this was the second operation we did. We went over the right most column and added all those numbers up and that was the result that we wanted. So, how do we modify the code? So, let us what we need is something like this. Assume that we have the output available from the previous code in some variable called row sum squared and we need a loop over that, which is going from row index 0 to m minus 1 and tallying up all the numbers in row sum squared. So, for each row, you will end up with a row sum squared and you have to add all those row sum squares together. So, in this the row sum squared comes from the previous code. So, this is how we will visualize the outer loop. Now, note that this is not completely specified code. This is just a very intuitive picture that instead of row sum squared, it should come from some inner loop, which actually calculates it. So, we should plug in the output from the previous inner loop and this is the outer loop over it. So, here is how we put these two loops together. We have a while loop inside a while loop. Remember that this was the previous loop that we had written. So, this was the inner loop that we had written, where at the end of the inner loop, you have the row sum squared. Now, at the end of the code, what you will end up is the exact row sum square of a particular column. So, you can imagine that after this inner loop finishes execution, the row sum squared is the corrects, row sum is the corrects square of the sum of the elements in that row. Now, the outer index does the following. You start from row index 0 and sum the row sum square over all columns. So, this is the structure of the code. Let us look at the code in slightly more detail. We have a row index, a column index, a column sum, a row sum and a row sum squared. A is supposed to be the current number that we are reading. Suppose we know that the size of the matrix is m cross n. So, row index can go from 0 to m minus 1. So, the termination condition of this while loop is row index equal to m. Now, for all that, you are currently at a particular row. So, you have to initialize the row sum to 0 and the column index to 0, because for a given row, you have to start from row 0. For a given row, you have to start from column 0 and you go on until column n minus 1. Also, this previous row sum should not influence the next row. So, for every row, you have to initialize the row sum variable. Once that is done, you go over the columns of that given row and you scan the numbers, add the number to the row sum and increment the column index until you hit n columns, columns 0 through n minus 1. When you have read all the columns in that row, you have the correct row sum. So, that row sum squared can now be calculated. Once row sum square is calculated, you have the row sum squared for that particular row. So, add the row sum squared to the previously computed column sum. So, if you go back and think about how we did this by hand, you can convince yourself that, this is exactly the coding of the logic that we had earlier. So, let us try this on a small example to see exactly how the code works. Suppose, the input is 2, 3 followed by 2 rows of 3 numbers each. So, the input matrix sizes 2 cross 3 and the entries are 1, 0 minus 1 and 0, 1, 1. Let us see how the code executes on this. So, the output should be 4 if you do it by hand. And let us see the variables are n, n, a row index, column index, row sum, nth square sum. Finally, the result should be in square sum. You start with row index equal to 0, column index equal to 0 and you scan m and n. So, you already know the size of the matrix when you scan m and n. So, m becomes 2 and n becomes 3. Now, row index is 0 which is less than 2. So, we start the loop which reads the row 0. So, notice the arrow here, you are starting to read this particular row, the first row which is row 0. Now, you initialize row sum equal to 0, column index equal to 0 and while column index is less than n, you scan the next number which is 1. Add a to the row sum. So, row sum becomes 1 increment the column index. So, you reach column 1 row 0, read that number, add it to the row sum, go to the second column, add read the number and add it to the row sum. So, once you are done, now column index is 2, column index is 3. So, this means that we have read all the entries in the row 0. So, we have got the correct row sum, what we will do is add the row sum squared to the square sum. So, row sum is 0, 0 square to square sum. So, square sum remains 0. Now, you go to the second row. So, increment row index. Now, row index is less than 2, row index is 1. So, it is less than 2, we are reading row 1 and you repeat the same execution. We re-initialize row sum to 0, column index to 0 and then scan the next number which is 0, add it to the row sum increment the column index, scan the next number which is 1 and so on until you finish reading the second row as well. So, once you read the second row, you will find that the row the row sum is 2 and square sum would be square sum plus 2 squared which is 4. After you do that, you increment row index and row index becomes 3 which is greater than the given row index. So, you exit the loop. So, we have correctly computed the sum that we wanted.