 This lecture will continue our discussion of structures. So, if you remember our earlier lecture we were saying that user defined structures are user defined types which will be treated by C in pretty much the same way as the basic data types. So, we will continue on that theme and look at a topic on pointers to structures. You know that for a basic data type you can define a pointer to that type I can declare in star or character star and so on. Similarly, does it make sense to talk about struct point star for instance. Let us look at an example where it makes sense. So, let us go back to the example of struct point and struct rectangle from the earlier lecture. So, let us say that struct rectangle has two points which are left bottom and right top and both of them are struct point. Now, we want to calculate the area of a rectangle. So, you have a rectangle R which is initialized to 0 0 1 1. So, left bottom will be 0 0 and right top will be 1 1 and I want to compute its area. Now, the area function is defined as follows it is a function that returns an integer it takes as parameter a struct rectangle and it does the following it does R dot right top dot x minus left bottom dot x star right top dot y minus left bottom dot y. So, it does that particular function and it returns it. So, we know that we can pass structures as parameters and also return structures from functions. But is it efficient to pass structures or to return structures and the answer is usually no because copying a structure involves copying all its sub fields. So, generally when you call a function the value has to be copied on to the functions local scope and we have seen this when discussing functions. So, when you pass a structure the entire structure has to be copied. Similarly, when you return a structure the entire structure that was created inside the function has to be copied back this is usually an expensive operation. One way to get around it is to pass a pointer to the structure. So, what should be done to pass to pass structures as functions in an efficient manner. Now, one way to do it would be to define what is known as a pointer to a structure. How do you define a pointer to a structure you define it pretty much the same way as pointer to any other data type. At this pin an integer you would declare in star PR. So, if you want to declare a variable which is a pointer to a structure you would define struct rect star PR. So, PR is a pointer to struct rectangle. So, now how would you pass the argument you would say address of the rectangle R. So, you would say area and the parameter is address of R. Now, inside the function earlier you remember it was pr dot write top dot x. Now, PR in this case is just a pointer to rectangle. So, we have to access the variable in that address. How do you do it using the star operator. This is the same as addressing any basic data type. You would say that star PR would be the address would be the variable in that location. So, in this case it would be star PR. Star PR would be a struct rect and that struct rect dot write top dot x minus star PR dot left bound dot x and so on. So, the lesson here is that instead of passing structures you pass pointers to structures and now whatever be the size of the structure. So, you have a struct rectangle which inside has two points and so on. So, you may be copying a very large you may want to pass a very large structure and copying that will take a long time. But instead what you do is you pass just a pointer. Now, regardless of the size of the structure only one pointer is copied. So, the same principle goes for returning structures as well. When you are in a structure from a function what you would do is to return a pointer to that structure. Of course, now the structure has to be allocated on the heap rather than the stack. Now, let us see how the memory depiction of this looks like. So, PR when you define struct rect star PR PR is a pointer to a structure of type rectangle and then what is happening here is that if you want to access the y coordinate of the left bottom you would say star PR dot left dot y. So, it will come to the left bottom field of rectangle and pick its sub field y. So, star PR dot left dot y would refer to this location in the memory. Similarly, star PR dot right dot y would be this location in the memory and so on. So, you can address the sub fields of address the fields of a structure using pointer. There is one syntactic convenience that C provides you because addressing structures is a fairly common occurrence and because in this case by associativity you cannot omit the parenthesis. You cannot say star PR without parenthesis because it means PR dot left bottom and star of that. So, that is not what you want. You want to say that take the structure in the location star PR and take its left bottom. So, in this case by its associativity and precedence rules you have to include these parenthesis you cannot omit them and this is inconvenient. Therefore, C provides a syntactic convenience which is PR arrow. Arrow is actually two characters it is a dash and a left angle bracket. So, PR arrow left bottom is the same as within bracket star PR dot left bottom. So, there are two ways to address the fields of the location pointer to by PR. So, PR is a pointer to a struct rect you can access its left bottom by saying star PR dot left bottom or PR arrow dot left bottom. Notice that these two characters dash and left angle is just a single operator and they have so dash left angle that is the arrow operator and dot have the same precedence and both are left associative.