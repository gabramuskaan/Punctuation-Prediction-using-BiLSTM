 So, in this lecture we will talk about structures in C which is a syntactic feature that C provides in order to define new data types. So, let us look at the motivation till now we have used the data types that C language has already provided like int float character and also we have seen data types like arrays and we could define arrays of in arrays of character and so on. We have also seen pointers which can hold address locations of other variables. Now what if we want to define our own data types using the data types that are already available. So, if you want to define custom data types, does the language provide any feature to do it. Before we reach there, we will just take a look at why you would want to define such a data type. So, let us say that we are designing a geometry package and we want to define a point on the plane as having an x coordinate and a y coordinate. Now, there is a easy way to do it if you have arrays you could hold a point inside an array of size 2. Now, you would keep the first coordinate in the x coordinate as the 0th element in the array and the y coordinate as the first element in the array. This is one way to do it. Another way is to keep two variables point underscore x and point underscore y and these are the x coordinates and the y coordinate of a single point. This is another way to do it, but in both these solutions there is no way to indicate that these two are intended to be the x coordinate and the y coordinate of the same point. The programmer has to impose considerable discipline in coding in order to maintain this meaning. So, is there a more natural way to do it in C. So, we want to define a point data type and a point data type internally has two integers, one two floating point, one in x coordinate and another a y coordinate. So, now we will define a structure as a collection of variables with a common name. Now, the variables can be of different types. This is unlike arrays we know that in an array you can hold multiple values in a continuous sequence, but all the values have to be of the same type. So, what is different here with structures is that you can hold multiple values in the same data type. Also the same data type can hold multiple sub types within itself. So, structural variables are called fields. So, let us look at example structure. We define something called a struct point and it has an int x and the int y coordinate and how do you this is the data type. Notice that the data type declaration has a semicolon at the end. Now, how do you define a variable with this data type? You can say struct point p t. So, p t is one variable that is of data type. So, this is the struct point. You cannot say point p t. You have to say that it is a struct point. Now, how do I assign values to this data type? So, structure is a composite data type that has two internal components. One is x and the other is y. So, in order to say that the internal components will have certain values, I need to say how do you get to these internal components? And this is done by the dot operator. So, you can say p t dot x equal to 1 that would assign the x field inside the p t structure to 1. Similarly, p t dot y equal to 0, what it will do is it will take the y field of p t structure and assign it to 0. So, the internal memory representation after executing these statements will be that p t is a structure it has two sub fields x and y and x will be assigned to 1 and y will be assigned to 0. Struct point is the name of the data type and p t is the name of the variable. Now, as far as c is concerned, the structure data type that you define is just like a data type that it provides. So, user defined data types especially structures are treated more or less in the same way as an ordinary data type. And we will see that with an ordinary data type, there are multiple things that you can do with it. You can initialize you can declare a variable to be of that data type. We have seen already how to do it. You can initialize a variable of a particular data type, we will see how to do it. Similarly, you can pass a data of a particular type to a function and return a variable of that type from a function. You will see that all these are possible with structures as well. So, we will see these with examples. Now, struct point is just a type and it can be used like any other standard c data type even though you as a programmer have defined it. For now, how do you define a structure? Usually, you define all the structures that you need at the very top of the file just of the hashing rule. Now, you know that with a standard data type, you can define an array of that data type. If you have you can declare array of in array of characters and so on. Similarly, you can define a struct point array. C says that user defined data types are treated in the same way as the standard data types that it provides. So, here let us look at this example. So, we have struct point p t 1 p t 2. So, this says that p t 1 and p t 2 are two variables which are of type struct point. What about p t s 6? It is an array of size 6 where each element in the array is of type struct point. So, to visualize it, you would imagine that it is like this. There are six cells. Each cell contains a struct point. So, each cell will have two fields x and y. Now, how do I assign values to these elements in the array? So, you would write a loop for example of the following form. So, you would say for i equal to 0 i less than 6 i equal to i plus 1 and p t s i dot x equal to i. So, p t s i is the ith element in the array. The elements in the array are of type struct point. So, p t s i will be a struct point variable and that variable has two fields x and y. So, I can say p t s i dot x equal to something i and p t s i dot y equal to i. So, at the end of execution of this loop, the result will be of the following form p t s 0 is a structure and its x and y coordinate are 0. p t s 1 is another structure its x and y coordinates are 1 and so on. So, what is what are the characteristic features of an array that it contains cells which are continuously allocated. So, they will be allocated one after the other in memory and each cell is of the same type as the others in the same array. So, both those are maintained. These structures will be stored one after the other in memory also everything in the array is a struct point. So, an array of structs is similar to an array of in except for the fact that within a cell you will have values that can have sub fields. Now, we will see what else can you do with structures? Just like a variable of a int data type, you can return it from a function. If you declare an int x, you can say return x. Now, let us say can be write functions which can return struct point. So, the theme of this lecture is that user defined structures are treated by c pretty much the same way as the standard data types. So, the behavior should be consistent you should be able to return a value of a struct of type struct from a function. Let us see an example. So, here the user defines a struct point and then when you run the program a user can give two integer values x and y and I want to create a point struct with sub fields x and y which the user has input. So, I have written a function called make point, make point takes two arguments int x and int y and what it returns is a variable of type struct point. So, this is the return type of the this whole name is basically the return type of the function the name of the function is make point. Now, how do you define it? So, for example, you can define a variable temp of type struct point and then say temp dot x equal to x temp dot y equal to y and return temp. Now, if you forget about this code particular code if temp had been an int variable you would say return temp if the function was of return type int. Here it is the function is returning struct point and you would do it exactly in the same way as a function returning int. So, what else can you do with a normal data type? You could for example, pass it as a parameter to a function. So, if you have int variables you can pass functions taking int arguments. Similarly, can you write functions taking struct parameters and we will see that this can be done. So, we will take an example that is fairly easy to understand. So, you take a point p and calculate the norm of the point p. So, what is the norm of the point p? The norm of a point x y in the Euclidean plane is simply square root of x square plus y square. So, you just have to calculate a function which does this. For this we will use the math library in c. So, I will say include math dot h and then I will define a function norm of struct point p. So, let us call this norm 2 and let us ignore y it is called norm 2. So, it is just a function that takes a point p and calculates the norm of p. So, for this what do I do? I will say that return square root. So, sqrt is the square root function provided by math dot h. So, return square root of p dot x star p dot x plus p dot y star p dot y. So, the in the main what you would do is Euclidean gives an input x and an input y. You make a point using the earlier function that we wrote make point x y. So, p t will be a point with x coordinate x and y coordinate y. Now, for that point p t you define norm 2 of p t. So, norm 2 of p t here you would pass a point a struct point as a parameter and the function would calculate the norm of the point and return the norm. So, the way you pass a structure is the same as the way you would pass an int or a character or something. Now, let us take the game a bit further. You know that I can you know that you can define structures whose sub fields are standard c data types. Now, if Euclidean defined data types Euclidean defined structures are of the same category as standard data types, then I should be able to define structures whose internal fields are themselves structures. So, we have seen structures whose internal fields can be basic data types. Now, we will see structures whose internal fields are structures themselves. So, let us look at a very reasonable use case in which this can be occurring. So, suppose you want to extend your geometry package and you want to define a rectangle. Now, a rectangle is defined by 2 points, 2 diagonally opposite points. Let us say the left bottom and the right top these 2 points define a rectangle. So, the bottom and the right top are themselves points. So, they have sub fields which are x coordinate and y coordinate. So, this is how you would imagine the picture R is a rectangle. It has 2 points left bottom and right top and this left bottom and right top themselves have 2 sub fields x and y. So, this is the composite picture. Now, how do I manipulate this rectangle? How do I say that this rectangle is left bottom is the point 11? Suppose, I want to say something like this. So, again you would use the dot notation. So, it is a very consistent representation. So, I would say that in the inside the code mean I would say struct rect R and then I would say R dot left bottom dot x equal to 0. This says that the take the left bottom sub field of R. Now, since that is a structure R dot left bottom itself has sub fields which is x and y. It is x coordinate is assigned to 0. Similarly, R dot left bottom dot y equal to 0 and so on. So, I will say that this rectangle's left bottom is 0 and is 0 0 and its right top is 11. So, after running this code this is the state of the memory. So, I will have a rectangle R and it is left bottom dot x is 0. It is left bottom dot y is 0. It is right top dot x is 1 and it is right top dot x dot y is 1. Now, we will also see how to initialize structures. So, we know that normal basic data types like int, care and all that when you declare a variable you can also initialize it. Can you initialize a user defined structure in this way? So, the way you define it is similar to the way you define you initialize arrays. So, initializing structures is very similar to initializing arrays and close all the values of the fields in braces. And the values are given in the same order that you they are defined in the structure. Suppose you have struck point int x and in y how would I initialize it? I would say struck point p equal to 0 0. So, this means that the first field in point that is x is assigned 0. The second field that is y is assigned 0 as well. Similarly, if I say struck point q equal to 1 1 it says q dot x equal to 1 and q dot y equal to 1. Now, you can do the same thing with nested structures. So, this is very nice. So, if I want to define a rectangle remember that a rectangle has two fields which are themselves structures their points. So, if I say r equal to 0 0 within braces comma 1 1 within braces. What happens is that r first field which is the left bottom it will get the value 0 0 that means that it is the left bottom sub field x will get 0 and the left bottom are y will get 0. Similarly, r second field is the right top it will get 1 1. So, right top dot x will be 1 and right top dot y will be 1 as well. So, this is how you would initialize and initialize a structure as very similar to initializing an array. The only thing to remember is that the values must be given in the same order that they are declared in the type declaration. Now, we know that variables can be assigned to other variables. So, a natural question is can struck variables be assigned to struck variables and the answer is yes. Suppose you have a rectangle r whose left bottom is 0 0 you either initialize it or you assign the values and its right top is 1 1. So, I define another variable s which is also a rectangle and if I say s equal to r let us see what happens. So, before the assignment r is as follows. So, you have x 0 0 x y 0 0 and x y 1 1 left bottom and the right top and s is uninitiated it has just been declared but no value has been assigned to it. So, this is the state before the assignment. When you do s equal to r it is very nice what it does is s is left bottom dot x will be assigned 0 s is left bottom dot y will be assigned 0 s is right top dot x will be assigned 1 and dot y will be assigned 1. So, what happens is it goes into the structure r and copies it entirely in its full depth into s. So, it is not just that left bottom right top or copied its internal fields are also copied into s. s is left bottom dot x will be assigned 1 and dot y will be assigned 1 and dot y will be assigned 1 and dot y will be assigned 1 and dot y will be assigned 1 and dot y will be assigned