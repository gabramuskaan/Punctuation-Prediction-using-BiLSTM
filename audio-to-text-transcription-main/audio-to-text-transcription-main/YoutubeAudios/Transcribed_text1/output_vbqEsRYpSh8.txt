 In this video, we will start with a topic that is considered one of the trickiest concepts in C. These are what are known as pointers. We will just recap what we know about arrays because arrays and pointers are very closely related in C. Now, the memory allocated to any array has two components. First is there are a bunch of consecutively allocated boxes of the same type and the second component is there is a box with the same name as the array and this box contains the address of the first element of the array. So, that let us be clear with the help of a concrete example. So, let us consider a particular array of size 10 declared as int num 10. Conceptually, there are 10 boxes from num 0 through num 9. These are all containing integers plus there is an additional 11th box num. So, it has the same name as the name of the array and it contains the address of the first location of the array. So, it contains the address of num 0. So, these are num 0 through num 9 are located somewhere in memory. So, maybe this is memory location 1000. So, num contains the number 1000 which is supposed to indicate that the address of the first location in the array is 1000 or the ad num points to the memory location 1000. So, conceptually this gives 11 boxes which are 10 integer boxes plus 1 box which holds the address of the first box. Now, we represent the address of a box x by an arrow to the box x. So, addresses are referred to as pointers and this is all there is to see pointers. Pointers in some sense are variables which hold the addresses of other variables. That is an exact description of the concept of pointers. Now, we will see what that means and what can we do with pointers. Let us just step back a minute and say what can we do with a particular box or particular variable in memory which is an integer. So, that is very simple for example, you can scan in scan up into that box. You can print the value in that box. You can do arithmetic operations on that box like plus division, model row and so on. And you can do this for each of the boxes from num 0 through num 9 because each of them by itself is an integer. But we will also see a new operation which is that you can take the address of a box. So, we have already done this when we did scan up. So, we mentioned and of a variable. So, we will see this and operator in somewhat more detail. So, suppose I want to take the address of num 1 and store it in an address variable ptr. So, what I am essentially saying is that you can say ptr equal to and of num 1. So, num 1 is an integer box, it is an integer variable and of num 1 is the address of that integer in memory. So, you assign it to the variable ptr. But every variable in c needs to have a type. What is the type of ptr and how do you declare or define such a type such a variable. Now, ptr holds the address of an integer in c. You denote that by saying that the type of ptr is int star. So, here is a new type that we are seeing for the first time. We are saying ptr is of type int star. Just like you can say that if I have int a, you can say that a is of type int. In this case, we can say ptr equal to and of num 1. We have discussed right now. We have int num 10, int star ptr and ptr equal to and of num 1. So, ptr is the point of to an integer. But what does ptr equal to and num 1 really mean. So, let us look at the memory status once we declare this size or once we declare this array. So, we have num which is the address of the first location and then we have somewhere in memory. We have 10 consecutive locations corresponding to the array num 0 through num 9. Now, I declare int star ptr. So, I create a box. Now, this box is supposed to hold the address of some integer variable. So, ptr is of type address of an integer box or more commonly referred to as pointer to integer. The statement ptr equal to and of num 1 says that now points to num 1 or ptr continues the address of num 1. And pictorially we denote an arrow from ptr to num 1. Just like I denoted an arrow going from num to num 0 because the name of the array is a pointer to the first location of the array. The name of the array is a box which holds the address of the first location of the array. Similarly, ptr is a box which holds the address of num 1. So, we say that ptr points to num 1 and we denote it pictorally an arrow. The program status is like this, state is like this. Now, suppose I add one more statement after all these three statements. I say scanf percentage d ptr. Now, earlier when we declared an array and we read into an array directly, I said that you can do the following. I can write scanf percentage d and num 1. So, this will value whatever the user input into the first array using the and operator. Now, ptr equal to and num 1. So, it is a reasonable thing to ask scanf percentage d ptr. There is no and operator here because ptr is and num 1. This was our original statement and this is our new state. And the answer is yes, you can do it. Suppose the input is 5, does num 1 become 5. So, scanf percentage d ptr really does work like scanf percentage d and num 1. So, it reads the value input by the user and it looks up ptr. So, it is an address. So, it goes to that address and stores it there. So, now we can clarify a long standing mystery which is the and operator in the case of scanf. So, we can see that scanf's second argument is a pointer which says where should I put the input input by the user. For example, if I have float variable and scanf as percentage f and then some address of a float variable, it is done similar to reading an integer into an integer variable. What scanf takes is an address of int variable or float variable as it may be. If you have a percentage d, then it takes an integer, it takes a pointer to an integer variable and takes the input value by the user and puts it into that address. So, as far as scanf is concerned, it doesn't matter whether you give it as an num 1 or whether you initialize ptr to an num 1 and then give ptr. It is an address and it will put the integer input by the user into that location. So, num 1 indeed does become 5. So, the location of the num 1 is now containing the value 5. Now, what else can you do with a pointer? Num is an array. It is of type int square brackets, pair of square brackets and in C, the box num contains the address of the first location of the array, which is num 0. So, internally as far as C is concerned, the address of num 0 is just like address of any other integer location. So, the type int star can be interchange with int square bracket. So, you can think of num itself as just a pointer to an integer or you can say that it is a pointer to an array. So, which gives you the additional information that the next 10 values are also integers. If you just say pointer to an integer, the next location may be something else. But, internally as far as C is concerned, an array name num can also be treated as pointer to an integer. Now, here are some other interesting things that you can do with pointers. Whenever you declare a data type, you also define what all operations can you do with a data type. So, 2 and 3 are fairly simple. We have already seen it with integers, floating points and so on. You can do simple arithmetic plus and minus with pointers. You cannot do star and divide, you cannot do that, but you can do plus and minus. Similarly, if you have two pointers, you can test for equality, you can test for less than, you can test for greater than and so on as though you were comparing ordinary integers. So, 2 and 3 are what we have seen before except that in 2, you cannot do multiply and divide and model you. All these things are not done with pointers, but addition and subtraction can be done. But there is a new operation which is de-referencing a pointer. We have not seen this operation before with earlier data types. What is de-referencing? Let me pictorially represent what it does. Suppose you have instar ptr and int. So, a is an integer variable and ptr is a pointer point. If I want to store the address of a in ptr, I do it as follows. ptr equal to and d. So, this means that take the address of a and store it in ptr. So, now you can say that ptr points to a. Now, I can also think of a reverse operation which is ptr contains a reverse operation which is ptr contains some address. Go look up that address. So, that will be an int and store that value in a. So, that is what is known as the star operator a equal to star ptr. This means that ptr is an integer pointer. So, ptr will point to a location which contains an integer. Star ptr will take the contents of that location and store it in a. So, this is known as the de-referencing operator. So, the address operator takes an integer variable and stores the address in a pointer. The de-referencing operation takes a pointer, looks up that address and stores the value in a. So, you can visualize the and operator and the star operator as sort of reverse operations of each other and takes an integer and takes the address of that star takes a pointer and takes the value of the address pointed to that. De-referencing a pointer therefore, gives you the value of contained in the box pointed to by the pointer. The de-referencing operator is star. So, if I say print if percentage d star pointer what it will do is look up the location pointed to by ptr. In this case it is this integer box. The contents of that box is 5 and it will be printed. So, the output will be 5 not for example, the content of ptr. So, the content of ptr may be like 1000 and 4. It will not print 1000 and 4 but what it supposed to do is look up the location 1000 and 4. It contains a value 5 print that value. So, star ptr is the box number and printing it gives you the output 5. Now, can I consider a statement like star ptr equal to star ptr plus 5. This is perfectly legal. What this will do is star ptr is an integer value. It is equal to 5 because look up this location ptr that is an integer take that value which will be 5. So, this will be 5 plus 5 10 and where do you store it? You store it in the integer variable corresponding to star ptr. The integer variable corresponding to star ptr is number 1. So, I would have normally said number 1 equal to star ptr plus 5 but number is the same as star ptr. I can say star ptr equal to star ptr plus 5. So, this will look up that location add 5 to its contents and store it in that location. So, number 1 will now become 10. Similarly, you can consider other examples. For example, I can consider a statement like number 2 equal to star number star ptr. The novelty here is that, if you have a number