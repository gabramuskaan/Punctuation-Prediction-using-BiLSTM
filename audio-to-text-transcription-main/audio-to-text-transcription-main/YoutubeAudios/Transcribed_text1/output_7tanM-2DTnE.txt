 In this video, let me show some cool stuff which is pointer arithmetic which helps you to understand the relationship between pointers and arrays in C. So, let us consider an array declared as follows int num and then it has 5 numbers in the initialization list. So, the array will be initialized as follows. There are 5 consecutive integer locations in memory with the given elements plus there is a 6th cell which points to the first location in the array. So, num points to the first location in the array. If num points to the first location, then you can do the following operator num plus 1. So, num plus 1 would point to the integer box right next to the integer box pointed to by num and we also know that arrays are consecutively located. So, the integer box next to num is exactly num 1. So, num plus 1 points to num of 1 similarly num plus 2 points to num of 2 and so on until num plus 4 equal to num of 4. So, this particular box for example, num of 4 can be accessed in two ways. You can write num of 4 or you can write star of num plus 4. So, can you tell me the output of the following print of statement. So, think about this for a minute you have 3 integers to print using percentage d percentage d percentage d and what are to be printed are star of num plus 1 star of num plus 2 and star of num plus 3. So, think about it for a minute. Num plus 1 is the address which is the second integer box in the array num points to the first location. Therefore, num plus 1 points to the second location star is the dereference operator on a pointer. So, star of this pointer means go to that location which is this location and get the value in that location which is 22. Similarly, num plus 2 is the box 2 boxes away from the first box in the array. So, 2 boxes away from num. So, that happens to be num plus 2 which is the and then get the value there which is 16. Similarly, star of num plus 3 will give you minus 1. So, the output would be 22 16 minus 1. So, in this print of statement we have used two concepts. One is getting to a different pointer from a given pointer using pointer arithmetic operator plus. So, we have used plus here the second operator that we have used is star on a given on a given pointer. So, plus will tell you go to the next integer location and star will tell you for a given integer pointer give me the value in that location. Now, let us look at a slightly different array what happens if you have a character array. So, I have car STR array which is initialized to let us say given string 1 t is a nice girl and then I have a character pointer. So, car star ptr and it is assigned STR plus 6 it is initialized to STR plus 6 what will happen here. What is different about this example is that earlier I said that in an integer array plus 1 for example, would go to the next integer location in memory. So, wherever num was num plus 1 would go to the next integer location here STR is a character array. So, it has to go to the next character location and that is exactly what it does. So, what is printed let us first consider the state of the memory. So, you have an array which is a character array it starts from STR 0 and goes on up to STR 20. So, there are 19 characters followed by the null character. Why is the null character there because I initialized it to a string constant every string constant has a null character implicitly at the end. So, this is the state of the STR array. Now, I say that I declare a pointer the pointer is pointing to a car. So, it is a car star pointer and what is the location it points to it points to STR plus 6. STR is a pointer to the first location of the character array and this is the first location plus 6 would jump 6 character locations away from STR 0. So, you would reach this character the important difference between this example and the previous example is that if you declared an integer array plus 1 would jump 1 integer location plus 6 would jump 6 integer locations. Here since it is a character array STR plus 6 would jump 6 character locations. So, how the plus operator is interpreted in the case of a pointer depends on what array am I pointing to right now. Now, what will happen with the print up statement? So, if I say print up percentage as PTR what will happen? So, PTR points to STR 6. So, print up will print whatever string is starting from that location until the first null character. So, it will start printing from this I and then go on printing till it reaches the null character. So, the output will be just is a nice goal. So, when you want to print up it is not important that you start from the absolute beginning of the array. You can start from an arbitrary location in the character array and if you say print up percentage is it will start from there and go on and print until the first null character. So, let us look at it once more. So, here is the code that we had and let us say that the one dimensional array for the sake of convenience I will just show it like this it is actually a row, but here is the first part here is the second part and so on. So, when I see STR, STR is a character array and PTR plus 6 would go 6 locations away from the first location. So, STR is pointing to the first location in the array it will go to the sixth location in the array PTR and PTR is pointing to the sixth location. So, you can ask the first more expressions do they make sense can I say STR plus 5 is this location similarly can I say STR plus 10 is this location and so on. So, these are all correct expressions. Now, can you tell the output of print up percentage PTR minus 5 we have talked about plus operator on pointers. So, it will whatever the nature of the array that the pointer is pointing to it will jump n locations away from it. So, if I say PTR plus n it will jump n locations of that type away from it. So, by the same logic can I argue that if I do minus 5 PTR minus 5 can I say that it will go 5 locations previous to what PTR is pointing to right now and the answer is yes. So, it will behave exactly as you expect. So, PTR is pointing to this location here is the previous location. So, it will jump to 5 locations before the location pointed to by PTR and happens to be A. So, the location which is STR 1 that is equal to PTR minus 5. So, if you print up on that location it will say anti is a nice curve. So, that is the output. Before I proceed this 1, this is the output of the thing that I want to emphasize and it is often not emphasized when you see online material on pointer arithmetic. See pointer arithmetic is not supposed to be meant for navigating the array you meant for navigating arbitrary locations in the memory. So, you cannot take a pointer let us say character pointer and just say pointer plus 1000. It will give you some location in the memory, but the behavior of the program will be undefined. So, the C pointers are well defined pointer arithmetic using C pointers are well defined only when the pointers are pointing to locations within an array. So, within an array plus n will take you n locations away from the given pointer minus n will give you minus n away from the given behind the given pointer and so on of whatever type the character whatever type the given pointer is pointing to. For example, if you have int num 10 and then you have num plus 11 you know that num plus 11 is not a valid location in the array. Similarly num minus 1 the num array starts at num of 0 which is equal into num plus 0. So, num minus 1 is also out of the given array therefore, these two locations are actually undefined because C does not guarantee you that if you try to dereference these pointers you will get any meaningful information. So, plus and minus on pointers are well defined their behavior is easy to predict exactly when you are navigating within the bounds of an array. So, the main point of the lecture was that if you have let us say for example, an integer array int num 10 then num of i which is the array notation is exactly equivalent to star of num plus i and I am not saying this that you can think of num of i as num plus i. It is not an analogy this is exactly what C actually does. So, num of i is translated to star of num plus i. So, arrays and pointers in C are very intimately related.