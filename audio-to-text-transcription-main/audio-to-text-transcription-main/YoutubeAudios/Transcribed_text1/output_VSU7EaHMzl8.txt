 In this session, let us see another simple program and try to study what is going on in there. So here I have a slightly more complicated program than what we just saw. This has two print-up statements. One says welcome to and the second says see programming. So it is slightly more sophisticated than the code that we have seen. So to recap, the first line hash include stda of dot h tells the compiler to include the standard output library. Then we have the main function. The open and close brackets immediately after main show that main is a function. Then always begins at the first line of the main statement. Then the body of the function, the logic of the function is enclosed within two curly braces. The first curly brace signals the beginning of the function and the last curly brace says that the function is over here. This particular main function has two statements earlier we had just one statement. The each statement as I said before is terminated with a semicolon. So this is the first semicolon and this is the second semicolon. The first semicolon says that the statement print-up welcome to ends at that point and then followed by the second statement and the second statement is also terminated by a semicolon. Every statement in C is terminated with a semicolon. Curly braces enclose a set of statements and each statement in a sequence is executed in the exact sequence that we wrote in the code. Now once we edit this in an editor, save the file. Now compile and run the file. So let us call it sample.c or you may rename it any file you want. Then once the compilation is successful, you can run it using . forward slash a.out and then it will print welcome to C programming which was essentially the same message as we seen before. Let us trace what happens when we execute the program. By tracing we mean step by step looking at each statement and see what happens when the program executes. We have what is known as a program counter which says here is the currently executing line of program. The program counter starts executing at the first statement of main. For ease of reference, I have given line numbers in the code. Now this is given just for clarity. Now let us just see what happens when we run the program line by line. So first we execute the first line of the code. After we are done executing the line 4. So after we are done executing lines 3 and 4, the message welcome 2 will be printed on the terminal. This will be followed by the next line. The next line says C programming. So after the next line executes, it will print C programming percentage. I have given this in two different colors to highlight that one was printed by the first line and the other was printed by the second line. Otherwise the colors have no sense. No special meaning. The program terminates when the main finishes execution and this is what is typically known as returning from the function. We will see this terminology later in the course. Now when you code in addition to the statements which are actually executed, you may also give a few additional remarks. These are what are known as program commons. For example, the lines as simple C program, first print and second print, these are the comments in the code. So whatever is highlighted in red in the code is what are known as commons. Any text between forward slash star and then later followed by a star forward slash. So any text between successive slash star and star slash is a comment and it will be ignored by the compiler. So as far as the compiler is concerned, a code with commons is the same as a code without commons. Effect the logic of the code. So commons are not part of the program. However, it is highly recommended that any program you write, you should come in the code. This is so that other people can understand your code. Also you yourself looking at the code four months later or five months later. It may be difficult to understand what you wrote much before and commons help you understand the logic of the program. Now it is a very good idea to comment your programs and for larger programs it is a must to comment the programs. This is standard industry practice and even if you are participating in large programming projects like free software projects, commons are highly encouraged because it will understand other developers, other programmers to understand your code. So we will try to follow our own advice. Most of the programs that we will see in this code, we will comment it so that it is easy to follow the logic of the code. Now a few notes just as main is a function. PrintF is also a function. PrintF is a library function which means that it is given by the C programming language. We wanted to tell the compiler to include this library function. The statement which said that is this hash include stdio.json. So hash include stdio.json is a line telling that I want the standard input output library because that is the library from which I will get the function printF. Now what does printF do? If takes two arguments just like arguments to mathematical functions. So it takes an input argument which in our first case was welcome to. So this was the printF, first printF statement in the program that we just saw. Now this was enclosed in double codes. So it was enclosed in an open double code and then ended with a closed double code. The sequence of characters in double codes is what is known as a string constant. Now we can call the functions that we define or we can call the functions that the libraries provide. This is how once you define a function you can call a function. Now we will see an additional concept. The printF statements that we have seen so far we will print a message and it will print there and then the terminal prompt will come immediately after the print. Now typically what we want to do is we will print a message then tell the prompt to appear on the next line. So for this we need what is known as the new line character. For letters digits comma punctuation symbols these are all called characters in the C programming language. There are a total of 256 characters in C, 256 is 2 to the 8. So for example the small letters 8 to z, capital letters 8 to z, 0 to 9 the at symbol, other punctuation symbols like dot comma exclamation mark and so on are all characters in C. Now in addition to this there are certain things called special characters. So there is a special character called new line in the C programming language it is denoted as backslash M. So there are notice that there are two kinds of slashes forward slash and backward slash on your keyboard and the new line character is denoted as backslash M. So even though it is a single character it is denoted by two letters. When used in print if it causes the current output line to end and then printing will start from the new line. So it is something which says the current line has ended. Now whatever you have to print print it on the next line. The new line character backslash M is like any other letter and can be used multiple times in any particular line. For example if you have something to print followed by backslash M followed by C followed by something to print. Now this will be treated as so many characters and then a new line followed by C. So let us see a particular example. If you have the old program that we just wrote but we end each message with a backslash M. So we have printf welcome to backslash M printf C programming backslash M. When we compile and execute we will see something new. So when we run this as dot slash a dot out it will print welcome to and then the next thing to print is a backslash M which is a new line. So printing will start from the next line and then it will print the next message which is C programming. So it will print that followed by a new line. So the prompt will appear on the line afterwards. So a new line character is something that is used to make your output messages a little more prettier. So let us just conclude by saying one more thing about new lines. The new line character backslash M is like any other character and you can use it multiple times even within a single message. For example if I do the same program but let us say I have welcome to backslash M, backslash M and C backslash M. So I have repeated occurrences of backslash M in the same message. What it will do is if we will print the message welcome to then it will print a new line and then it will print another line and then it will print C followed by a new line. So when you run the program you will have welcome to new line then the blank line then C and then another line. So new lines are just like any other characters. The difference is that because it is a special character it is represented by two letters. So it is not represented by a single letter it is represented by backslash M. So they are together one character in C called the new line.