 In this session we will learn about arrays in C. Now, what does the word array mean? It means grouping or a collection of objects. So, for example, you could say that he could not dismiss the array of facts. So, that means a collection of facts and it also implies regular order or arrangement that is in the case of a series. So, what do we mean by an array and why do we need it? So, let us consider that I have a bunch of numbers say 1, 2, 3, 4 and I want to consider them as being part of a sequence. Let us say 1, 2, 3, 4. So, the first element is 1 and so on. Now, I want them to be stored and one way I can do it is that I can store them into separate variables. For example, I can say that a is 1, b is 2 and c is 3 and d is 4. But when I do it in that way, they are separate variables and the relationship between those variables, the fact that b comes after a and things like that is something that the programmer knows, but it is hard for somebody else looking at the code to figure out. Often we need to store a sequence as a sequence itself. So, an array has the following properties. One, it is a collection of objects of the same type. Second is that it has some size, some finite size say n. There are n elements in the array and the third is that I should be able to selectively update, update only a single element in the array by which I mean suppose I have four elements in the array. I should be able to say that I want to replace the third element by 5. So, 3 will be replaced by 5 without touching the other elements. That is what the third thing is about. The first thing says that I want a collection such that it is a collection of objects of all of type integer and not of any other type. The second says that it has some finite size. So, it is not an infinite collection. So, that is what an array is supposed to do. Now, let us see how we can define arrays. We will try to motivate why arrays are needed by introducing certain problems and I will try to convince you that it is easy to do using arrays and whereas it was difficult to do without using arrays using only the facilities in C that we have seen so far. So, an array is defined in C similar to how we define a variable. If we had an integer variable we would say int a semicolon instead of that when we declare an array we have int a 5. So, this would declare that it is an array containing 5 integers. Now, one thing that is certain about arrays in C is that the 5 integers which make up the array will be allocated consecutively in memory. So, they will happen one after the other. Also one thing to note is that arrays in C start with index 0. So, the first element is a 0. So, if we have an array of 5 elements it will go from a 0 to a 4. So, have we seen arrays in mathematics for example, you can think of vectors similarly matrices these are all arrays and C arrays will have similarities to mathematical vectors and mathematical arrays. But note that in mathematics it is customary to start from index 1 here it is from index 0. So, the boxes are addressed as a 0 up to a 4. So, the boxes are addressed as a 0 up to a 4. These are called the elements of the array. The array is the whole collection of boxes and each box in it will be called an element of the array. Now, let us consider a simple program using an array. So, I mentioned that the third requirement that I want for an array is that the so, the first requirement was that all elements of the array are of the same type. The second requirement is that it has a finite size and the third requirement is that I should be able to selectively update only one element of the array without touching the other elements. So, let us see a program where we can do all that. So, here is a simple program it declares an integer I an integer array a 5 and then a for loop. So, let us see what the for loop is suppose to do. So, the for loop starts from I equal to 0 and then goes from I equal to 0 to 5. So, filling in the elements by using the statement a I equal to I. So, let us see what that is suppose to do. So, this is the notation a I is the notation used to address the elements of the array. So, notice the similarity here a 5 when you declare it it says that it is an array of size 5 a of I is saying that I want the I th element in the array. So, when I equal to 0 it will refer to the 0 th element in the array until I equal to 4 it will go on until the fourth element of the array. So, a of I similar to a of 5 the way we wrote declared the array says I want the I th element of the array. So, the variable I is being used as an index for a that means if I say a of I I will pick the I th cell in the I th element in the array. Now, this is similar to the mathematical notation a is subscript I which is what we normally use for vectors and matrices. So, let us run through the program once to see what is doing. So, first we declare a 5 which is 5 consecutively allocated integers in the memory and we have also have a variable I. I starts with 0 and for the 0th iteration a of I is allocated let us say I plus 1. So, a 0 will be 1 then we update I. So, this statement becomes a of 1 equal to 1 plus 1 which is 2. So, and then we execute it a 2 becomes 3 a 3 becomes 4 and a 4 becomes 5. So, notice that because we have indices and indices can be numbers they can also be replaced by integer expressions. This is the trick that we have used here. So, a of I goes from a 0 all the way up to a 4. Now, it is only required that a single array can be objects of the same type. So, we have dealt with integer arrays so far. Now, we can also deal with floating arrays and float arrays and character arrays and things like that. So, in general you can declare an array of any data type in C. For example, you can say float num 100. So, that will declare array of 100 floating point numbers. Similarly, car S 256 will declare a character array of size 256. So, you can declare a floating point array and you can visualize it as 100 floating point boxes allocated consecutively that is the important part. The consecutive locations in the memory 1 after the other will be allocated for the same array. Now, for character array similarly 100 boxes are allocated 1 after the other. Now, depending on the size of the data type involved, obviously the size of the array will be different. So, the float array will be of size 100 times the size of a single float and the character array will be of size 256 times the size of a single character and so on. So, one thing is we have to take care of the size of the array. For example, if we have an integer array of size 5 x. This means that 5 integer variables named x 0 to x 4 are allocated. So, this is the size of the array. Now, so the variables x 0 to x 4 are integers and they can be assigned and also they can be operated on they can be part of other expressions and so on. Now, what about arbitrary integers? Can we know that 0 to 4 are valid indices. What about 5 and so on? What happens to x 5 x 66 something like that? Similarly, what will do? What will happen if I write x of minus 1? What are these valid? So, the answer is no, you cannot in general assume that indices other than 0 to 4 make any sense. Your program may crash and this is the most important thing in C programming when you use arrays. It is the may part of it because it is not even guaranteed that your program will crash. So, you may run the program once with x of 5. Let us say and the program will work fine. And you will be under the false impression that everything is correct in your program. But the next time you run it may be your program will crash. So, it is not even guaranteed that it will crash. If it is guaranteed that it will crash then of course, you can know that there is an error and you can go back to the code. In this case you just have to be careful when you write the code. So, x 5 x 6 and so on are undefined. These are names but there are no storage locations that they correspond to. So, you should not access them. So, if you ask a very specific question should not I access them or can't I access them. So, what will happen if I write a code like this where I declare an integer array of size 5 then I know that x 0 to x 4 are valid locations. They are the first 5 locations. But the problem comes with statements like x of 5 equal to 5 or x of 6 equal to 6. 5 and 6 do not refer to valid locations in the array. So, what will happen? So, the initial statements up to x of 4 are all fine. But the last two statements x of 5 equal to 5 x of 6 equal to 6 lead to errors. Will it compile yes if you just give the source code with these erroneous locations it will compile. But the because the C compiler does not check that the indices are within the proper range. So, it will compile and the compiler will not tell you that there is anything wrong with it. But when you run a program the program will give something called a segmentation fault. It may or may not give that. So, this is one of the most notorious errors when you program in C. So, we will see this error greater detail when we understand something called pointers. But in general when you exceed the bounds of the array when you go beyond the location locations permissible in the array your code may crash and the code will crash usually with the error segmentation fault. So, if you run the program and if you see a segmentation fault this is a good indication that may be you are referring to locations in your array that do not exist. So, you should go back and rectify the code. But the danger is that it may not always crash. So, the only way to be really sure is to go through your source code and examine it your program may crash. So, we have seen certain aspects of a race in C so far. So, for example, let us say that I declare a character array STR of size 5. So, it has 5 characters inside it and let us say that I use the variable i as an index into the array. So, STR of 0 to 4 can be addressed using the index i. So, if I have the index I know that I can set particular values as STR of i equal to a since i is 0 this will set the 0th element in the array to character a. Similarly, if I say CH equal to STR i plus 1 it will take whatever is in the first cell in STR of 1 and assign it to the variable CH. So, we can set a particular element in an array like this. Similarly, we can also read the value in an element and then assign it to something else. So, these are possible with help of an array. Now, let us consider a particular example which is the problem is as follows. We want a character array let us say of size 100 and then we have to read input which is from the keyboard and store them in the array. After we store it we should stop once at least 100 characters have been read because that is our array size or when the user pressed end of file. Remember that you can press control D to enter the end of file. Now, what we have to do is take the array and print it in the reverse order. Now, if you think for a little bit you can see that it is difficult to do this without an array. Instead of an array if you were storing it in a single character there is no way to store 100 characters in one variable and then print them in the reverse order. Because the first character has to be printed at the end the last character entered has to be printed first. So, you need to remember all the characters this is an intuitive reason why arrays are important for this problem. So, what is an example problem let us say that we have M e O R then new line and then M O O followed by control D. So, when you reverse it you will have O O M then the new line then O R E M and so on. So, you have to reverse everything input. Similarly, if you have a string what you have to output is the exact reverse of the string including the spaces. So, let us design the program we will just try to write the program using main. Now, there are two parts in this program the first is just to read what has been input into the array and the second part is to print the array in reverse. So, the read into array that part of the program will read the input character by character until one of two events happen. The first is 100 characters have been input because you have declared the array of size only 100. So, you can read only 100 characters. So, once you reach that you should stop otherwise before you reached 100 characters may be the user pressed a control D to say that I am done with the input. In that also you have to say that I have done by reading the input. Now, print reverse will print the characters in reverse. So, let us design the program for reading into the array. So, keep the following variables one is to keep the count of how many characters I have read so far and then I will keep a variable to store the currently read character. Now, we have touched upon this topic once I am going to declare it in CH instead of care CH. So, I am not going to do this this is because get CHAR will give you whatever character has been read just now from the input. So, in particular the characters that can be entered can be an ASCII value which is from 0 to 255 or something and then it can also enter the E OF character. The end of file character which is actually minus 1. So, minus 1 does not correspond to an ASCII character. So, get CHAR can also read an end of file character this is the reason why if you are reading characters through get get care and we are doing this because the user can also enter a minus 1. Then in order to hold that value you need an int CH rather than a character CH. So, this is what we just mentioned the end of file character is usually minus 1. So, it is not a valid ASCII value. So, the code at the top level looks like this we have the logic to read a next character into the CH using get CHAR. And then we have a let us say a while loop which says that while the character is not end of file and the number of characters read count is less than 100 you store the character into the array increment count and then read the next character. So, please look at the structure of the loop very carefully the S is a character array. So, technically it cannot hold an end of file, but then if you think about it a little bit you will see that we will never encounter a situation where you will store end of file into the S array because suppose the first character is end of file then we will not even enter the loop. Now, at any point when we enter end of file it will be at this point we will read the character only here before storing it into the array we will actually check whether it is end of file. So, we will not accidentally set the array to minus 1 at any point. So, the array to minus 1 at any point so character array suffices. So, think carefully about the way this loop has been written in particular if I had just done this as the last line before the loop ended then you would run into problems because you could store the end of file character into the S array by mistake. So, just think about that issue. Now, here is a initial design and so the overall design is that first you have to read into the array and then you have to print in reverse. So, let us make the read into array a little bit more precise. So, we have CH equal to get char and because you are using the get char function we have int CH because it could also be an end of file. Now, the while loop says that while the CH is not end of file and the number of characters read is strictly less than 100 you increment. So, if first set S count equal to the character read increment count and then get the next character. So, this loop keeps on filling characters into the character array until you see either end of file or you have entered 100 characters. Now, let us design the remaining thing which is print in reverse. So, suppose the input is let us say to be concrete H a L p and then control D the end of file character. So, once you run the read into array part it will lead to the array looking like this S 0 will be the character H S 1 will be E S 2 will be L S 3 will be p. At this point you will read end of file and you will not store the end of file in the array. So, S 0 to S 3 are valid characters and at this point if you go back to the code count always keeps track of how many characters have been read. So, in particular count will be 4 when you exit the array. Now, to print in reverse all you have to do is to start printing from S 3 then S 2 then S 1 and then S 0. So, you read in this direction and you print in the reverse direction. So, we should be somewhat careful at this point. Suppose you have read the array before you enter this part then you declare I which is the array index that we are going to use. Now, I should be set to the index of the last character read. So, here is the tracky part notice that count is 4. So, 4 characters have been read therefore, the last character read is at index count minus 1. So, it is not a count index if you say S of 4 that is an invalid index whereas, S of 3 is where we should start from. So, start from I equal to count minus 1 that way we will start at this character. Now, while I is greater than or equal to 0. So, we will start from S of 3 then print S of I. So, we will print S 3 then decrement I because you have to go back to the next to the previous character. So, I becomes 2 I is still greater than or equal to 0. So, you will print S 2 decrement I. So, I becomes 1. So, you will print E then decrement I you will come to I becomes 0 and you will print H you decrement once again I becomes minus 1. So, you will exit the while loop. So, this is the array that we were doing and so, here is the code for printing the characters and reverse. So, here is the pseudo code where we said print S of I instead of that in C we have a particular function which will print the character which is put care. So, this is the dual function of get share. So, put share takes a character as an argument and prints it on to the standard output. So, you have int I I is said to count minus 1 because that way we will get the last index of the character in the array and then you start counting down until you print the first character and until the end of the array. So, putting these 2 together you have the read into array part and then you have the reverse part print in reverse part. So, when you put these 2 together the first thing you do is bring all the declarations together. So, this is the declarations for read into array as well as print to put together. Similarly, first you have to print you have to put the code for the read into array part and then the code for the print in reverse part. So, let us trace the execution for a small sample input. So, when we have the input is hello and then the user presses control D for end of file. Let us see what will happen. So, you start reading into the array. So, S count with count equal to 0 starts setting the array. So, S 0 will be H and then H S 1 will be E and so on. So, once CH becomes control D the end of file character you will exit the loop. So, the character array is hello. So, once CH becomes control D the end of file character you will exit the loop. So, the character array is hello. So, the first thing you have to do is, you have to do this.