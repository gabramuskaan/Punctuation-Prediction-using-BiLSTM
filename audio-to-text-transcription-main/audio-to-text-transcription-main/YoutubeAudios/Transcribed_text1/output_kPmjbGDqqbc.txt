 So, in this session we will continue the program that we were writing, recall that we were writing a while loop which will read a bunch of numbers and is supposed to sum them up until you hit a minus 1. In the loop that we have seen so far we just read the numbers until a minus 1 was encountered. So, let us now complete the program and compute their sum as well. So, for computing their sum how do we normally do it we will add numbers 2 at a time. So, the first two numbers will be added then that sum will be added to the third number and so on until you hit a minus 1. So, let us try to do that in the course of a while loop what I will declare is I will declare a new variable s. So, here is the new variable s that I have declared s is supposed to hold the sum of the variables that I have read so far. Now, it is very important that when you declare a variable you should initialize them properly. In the case of a we did not initialize it because we were reading the first number as soon as a was declared. But in the case of a sum you would start to you would use s to maintain the sum as you read numbers. So, it is important that you start with s equal to 0. So, the initialization step marked by this arrow is quite important. If you do not initialize it properly then the sum may not be correct as we will see so. So, you keep a variable s which is supposed to hold the sum of n numbers sum of these numbers and initialize the sum to 0. Then the difference from the loop that we have seen so far is highlighted in red. So, earlier recall that we were reading the number and just testing whether the number is minus 1. If it was not minus 1 you read one more number. So, that was the loop. Now, inside the loop what we will do is we will keep a running sum of the numbers that we have seen so far. So, initially s sum is initialize to 0. Then if the first number is not minus 1 you add the first number to s. So, s will now be the first number. Now, read the second number. If the second number is not minus 1 you will enter the loop again. So, you will add the second number to s. So, s is now first number plus second number and this keeps on going until you hit a minus 1 in the input. So, let us continue with this. Let us try to trace the execution of this program on a sample input and try to understand how it works. Let us see that I compile the program successfully and run the program. So, I run a dot out and let us as before let us the first number be 4. So, after initialization a when you declare the variable a is undefined and s is also undefined after the initial statement s equal to 0 s is now 0 and then you scan the variable a. So, a becomes 4 because 4 was the input and some is still 0. You enter the loop and you say s equal to s plus a. So, some become 0 plus 4 which is 4 and you read the next number. Let us say the next number was 15. So, a becomes 15 a is not minus 1. Therefore, you enter the loop again and some is now 4 plus 15 which is 19. So, some at any point of time is some of the numbers that we have read so far. So, we have read 4 and 15. So, the sum is 19. Now, you read the next number. Let us say the next number was minus 5 minus 5 is not minus 1. Therefore, you enter the loop again s equal to s plus minus 5. So, s becomes 14 then you read the next number and let us say the next number was minus 1. So, since the number red is minus 1 you go back to the loop and this condition becomes falls. So, you exit out of the loop and then print that the sum is minus 1. So, you have 1 is let us say 14. So, and when you verify it by hand you would see that 4 plus 15 plus minus 5 is 14. So, you have the program has executed correctly. The important thing to note is that the final minus 1 is not summed up. So, that is it is used as the end of the input and you should not compute the sum of the numbers including minus 1 minus 1 is excluded and the program executed correctly. We will introduce a few terminology associated with the notion of a loop. Each execution of a loop is known as an iteration. So, in the above loop when the input was 4 15 minus 5 minus 1 the loop runs for 3 iterations corresponding to the inputs 4 15 and minus 5. So, for input minus 1 the loop is broken. So, you do not enter the loop. So, you do not count an iteration corresponding to minus 1. So, you entered 4 numbers including the minus 1 and the loop executed 3 times. So, you say that the loop had 3 iterations. So, this is a technical term associated with loops and here is a concept that I will introduce to help you argue about the correctness of a loop. So, there is a notion known as a loop invariant. Now, a loop invariant is a property relating values of the variables that hold at the beginning of each loop. So, that is a bit abstract. Let me just illustrate with the example that we just saw. So, loop invariants are a good way of thinking about the correctness of the loops that you have written. So, in our program what will be the loop invariant? Let us look at the property of that we are interested in. There are two variables in the program S and A and both of those variables are involved in the loop. But the interesting property that we have relates to S. What is the property that S holds with respect to the loop? So, we can see that S holds the sum of all values red so far except the last value is that true the first time that we enter the loop. Remember the loop yes because S was initialized to 0 and you had actually read the number. So, it is true that S holds the sum of all values except the first one. So, that is true when you first enter the loop and at any point when you enter the loop you sum the last value that was red and read one more number. So, you will see that S still holds the sum of all values red so far except the last one. So, this is the loop invariant in the program and loop invariants help you argue about the correctness of the loops. So, if the loop invariant is correct and the program maintains the loop invariant then the value of S when the program stops will be correct. Why is that? Because the loop terminates because the last value red was a minus 1 and the invariant says that S holds the sum of all values except the last value. So, this means that S holds the sum of all numbers except the minus 1. Therefore, when the program ends that is you exit out of the loop S holds the sum of all numbers that you were supposed to add. So, here is how arguing about a loop invariant and seeing whether loop invariant holds in the loop that you have written helps you argue that the program is correct.