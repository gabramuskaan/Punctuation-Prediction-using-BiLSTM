 In this lecture, we will just talk about how to initialize arrays. So, recall that we have defined arrays as follows. If we declare an array float W 100, it will declare an array of floats of 100 floats consecutively allocated in memory. And we have also mentioned the fact that there is a separate box W which will point to the first location in the array. So, it contains the address of the first location. In num 10, we will declare an integer array of 10 integers plus one box which will hold the address of the first location and so on. So, the arrays names the cells of the array or the elements of the array are indexed from sub W 0 through W 99. The indices start from 0. We have also mentioned that conceptually there is a separate variable called W the name of the array which stores the address of W 0. Now it is not important that we use numbers as the size of the arrays. We can also use constant expressions. For example, we can say float W 10 star 10. So, instead of saying 100, we can give an arithmetic expression which evaluates to 100. And this has the same effect, it will allocate an array of 100 elements starting from W 0 through W 99. And there is a separate box called W which will see address of the first location. But what about using variables or variable size arrays? This is a feature that we often wish we had. So, what do I mean by that? I could declare the following code int size and then float W size. And I could say scan F percentage D and size. So, a user enters the size of the array and then I can enter 10 elements into the array for example. But here the size of the array itself is a variable which depends on the user input. And we often wish that we would be able to allocate variable size arrays. But this is not allowed in an CC. It is allowed in the latest versions of CC 99, C 11 and so on. We will avoid this feature for the purposes of this course. Let us assume that array means they are declared to be of constant size. By constant size you can give the size as a particular number or you can give it as a constant expression. That is an arithmetic expression involving constants, but not general expressions. Now let us just look at how can we create an integer array in num and also initialize it to particular values. For example, I want the num array to look like the following. It contains 7 cells having the values minus 2, 3, 5, minus 7 and so on. Now I know that if C did not allow me to initialize arrays when I declared it, I could declare the array as int num 7. And then I will just write num 0 equal to minus 2 num 1 equal to 3 and so on until num 6 equal to 11. So, here is a way that I can create an array and ensure that this state is reached. But is there a more convenient way of doing it? Can I start off the array with these contents? So C allows you two ways to do it. The first is I declare an int num and then specify what are the initial values. So, minus 2, so on up to minus 11 within curly braces. So, this is one way that C allows you to do this. The initial values are placed within curly braces and separated by commas. The size of the array need not be specified. So, I did not say that num has size 7. It will allocate an array with enough space to hold 7 integers. Array elements are assigned in the order that you specified. So, num 0 will be minus 2, num 1 will be 3 and so on. So, it is done in a reasonable manner. There is also another way to do it which is slightly different from the way above. I can declare the size of an array. So, I declare an array of size 10 and then give these initial values. What will happen in this case is that it will make sure that the size of the array is at least equal to the size of the list that I have given. So, I have given 7 elements and I have declared an array of size 10. 7 is less than 10. So, it is fine. So, I can declare an array of size 10. I should give a value, I should give values at most 10 in number. So, I can give 10 or below. In this case I give 7 numbers. So, what happens is that array is initialized in the order of elements given. NUM 0 will be minus 2, num 1 will be 3 and so on until num 6 will be 11. 7 elements are filled. The remaining 7 elements are unspecified. So, they will be initialized to 0. Now, let me just remind you that if I had just declared an array in num 10 and then put a semicolon. So, I have just declared an array without saying any initialization at all. Then you should assume that the array contains arbitrary values. You should assume that the array contains junk values. But if you initialize an array of size 10 and give only 7 initialization values, then the C standard gives you the guarantee that the remaining elements are initialized to 0. So, they are not junk. The recommended method to initialize an array is to give the list of initial values and let the compiler decide what the size of the array should be. So, if you give 7 initial values, it will decide that the array is of size 7. Now, is the following code correct if I declare an array of size 100 num and give 4 initial values. So, this is correct. It creates num as an array of size 100. The first 4 entries will be initialized as given. So, num 0 will be 0. num 1 will be minus 1. num 2 will be 1. num 3 will be minus 1. And then num 4 until num 99, they are all set to 0. So, after the initialization, the array will look as follows. The first 4 values are what we give and the remaining values are 0. Now, is the following code correct num 6 equal to and then you give a list of 7 values to initialize. Is this correct? The answer is no. It will not compile. So, if you write this code and compile it using gcc, you will get a compilation error. Why is that? We have declared an array of size 6, but we have given 7 initial values. So, there is no way to do this. So, the rule of thumb is that either give no size for the array and let the compiler figure out. Or if you do give a size, it has to be at least 7, which is the number of values that you gave. It can be 10, it can be 100, but it cannot be less than 7. Now, just like size can be not just numbers, it can also be constant expressions. We can also have constant expressions as initialization values. So, for example, I can give num equal to 109. Then the character value a, character value a means it will take the ASCII value of a, 65 or whatever it is. So, the first number will be 109, the second number will be 65, let us say, if the ASCII value of a is 65. And the third value will be 7 star, 25 star, 1023 plus the character constant 1. So, whatever the ASCII value of the character 1 is, let us say 90 or something. So, it will be added to this constant expression and it will be initialized to that value. Num 2 will be the result of evaluating this expression. So, the type of each initialization constant should be promotable or demotable to the array element type. So, each value in the initialization list should be compatible with, let us say, integer, because we have declared the array of type integer. So, what do I mean by that? For example, I can initialize an array num with the initialization list 1.09, then comma a, comma 25.05. So, this is okay, because the floating point values can be downgraded to integers. So, maybe this will be initialized to 1, then whatever the ASCII value of a is, let us say, 65 and then 25. Now, these are about constant expressions. What about expressions involving variables when we initialize an array? So, can we do something like this? Int CURR equal to 5 and then the num array is initialized with 2, current star current plus 5. Will this work? The answer surprisingly is that it will work on most compilers. So, the MCC allows constants expressions and simple expressions for initialization values. Now, simple is of course, dependent on which compiler you are using. So, if you write your code and compile using GCC with such an initialization, maybe your code will compile. And the moment you compile your code with a different compiler, it may not compile. So, earlier I had said that the size of the array cannot be initialized using variable expressions. In MCC that is forbidden. But the initialization value, so the value that goes into the array can involve variable expressions. This may or may not be supported. So, it is safe to assume that both the size of the array and the initialization value can be done only using constant expressions. Even though some compilers allow simple initialization values using variable expressions. Now, how do we initialize character arrays? Character arrays can be initialized like arrays of any other type. Suppose, we want the following array s equal to i space a space m space etcetera. So, I can initialize it just like I initialize the other array. I will not specify the size of s and then give these characters i am done. So, this is another way to specify it and the last character is a null character. But, c also allows you to define what are known as string constants. So, we can also write s equal to i am done, but now within double codes. So, this is known as a string constant. The null character is an implicit ending character inside a string constant. So, it is automatically added to the end. Now, the string constants in c are specified by enclosing it in double codes.