 In this session, we will see slightly more sophisticated programs. Recall that in our discussion about flow charts, we talked about variables, which were conceptually seen as little boxes in which you can hold values. So, let us see how to write simple C programs in which we make use of variables. So, we will illustrate with the help of a sample program. So, we have this following program, which is very simple, read a Celsius temperature and convert it into the equivalent Fahrenheit temperature. This is something that all of you must know. So the flow chart is very simple, you have an input C, which is the current Celsius that you want to convert. Then you apply the formula F, which is 9 C upon 5 plus 32. In this session, we will see how to write simple C programs, which make use of variables. Recall that in our discussion about flow charts, we talked about variables, which were conceptually seen as little boxes in which you can hold values. So, let us illustrate a simple C program making use of variables with the help of a program. So, we have a small problem, which is convert a Celsius temperature into the equivalent Fahrenheit temperature. This is a formula that all of you must know. So, let us write a C program for it. So, we will draw the simple flow chart for doing the program, you input the temperature in C in Celsius, convert it into Fahrenheit according to the formula 9 by 5 times Celsius plus 32. Once you have done that, the variable F holds the Fahrenheit value, so you output the F. So, here is the simple flow chart that we want to implement. Now, how do we write the equivalent C code? So, in the flow chart, we have seen that we have two variables C and F. These are the variables that we would want to implement in the C code. So, let us see how to do it. So, we write the following C program, in which now we have two more components. One is the variable declaration float centigrade and then the second is another variable float Fahrenheit. So, centigrade correspond to C in the flow chart and Fahrenheit corresponds to F in the flow chart. So, I write the following code, which is supposed to implement the flow chart on the left. So, let us say that the input is 50 degree Celsius and then you can in the Fahrenheit the formula is exactly the same as what we have in the flow chart. We have 9 times centigrade divided by 5 plus 32. Notice here that these are arithmetic operators. So, the star arithmetic operator is stands for multiplication, forward slash stands for division and plus stands for addition. So, this is exactly as in the flow chart except that here in the flow chart multiplication symbol has been swallowed, but in C you have to specify it using a star operator. So, Fahrenheit equal to 9 times centigrade divided by 5 plus 32 is exactly similar to the analogous line in the flow chart. And finally, for outputting we will use the print up statement. So, here is something new in the print up statement. We use what are known as format specifiers. These percentage F symbols are new and we will describe them shortly. So, let us look at the program in a little more detail. So, we have two statements which are of interest in the beginning of the code which are what are known as the definition of the two variables. Recall from our discussion on flow charts that variables are boxes and each box has a name associated with it. So, you have two concepts associated with a variable as far as flow charts were concerned. One was the box and the second was the name of the box. Now, when we come to see we will associate the third concept with a variable which is the type of the box. So, if you look at the first statement it says float centigrade semicolon. Now, this defines a variable centigrade. It creates a box capable of storing a real number and names the box as centigrade. So, the box is of type float that type float means that that box can hold a real number. Similarly, Fahrenheit is also a box which can hold a real number. So, you declare that the type of that variable is float. So, these are supposed to be the first two lines of the code. Now, centigrade is equal to 50 that is the line which assigns the value 50 to the variable centigrade. So, once you execute that code the box associated with the name centigrade will hold the value 50 followed by the line which computes the value of the Fahrenheit. So, Fahrenheit equal to 9 times centigrade divided by 5 plus 32. It is an arithmetic expression. So, it evaluates an arithmetic expression takes its value and stores it in the box associated with Fahrenheit. And as we just saw before start is the multiplication operator. Forward slash is the division operator and plus is the addition operator. Now, the brackets in an arithmetic expression are just like brackets in mathematics. So, the group together a particular things. Now, let us just trace through the program. Let us see what happens step by step when we run the program. Let us say that we save the file in sample 2.c and then run it as dot slash a dot out. So, this is the function of the program. So, first we will have 2 boxes created one for centigrade and one for Fahrenheit. These can store float numbers. Now, what are float numbers? Basically they are real numbers which are saved by the microprocessor. Now, the microprocessor has can store variable real numbers only using finite precision. So, this is different from the actual real numbers that we encounter in mathematics. So, we have only a limited number of digits after the decimal point. But other than that you can think of them as real numbers. We will see floating point numbers later in the course in greater detail. For now, think of them as the machine representation of a real number. So, once you finish the declaration statements what you have are 2 boxes one for centigrade, one for Fahrenheit and because you declare their types to be float it is understood that those boxes will hold real numbers. So, let us execute the first executable assignment here. Sintegrate is equal to 50 and you will see that the box contains 50.000 something even though we specified it as an integer it will convert it into a real number of floating point number and store it. Then this is followed by the calculation of the Fahrenheit value and let us say that you compute 9 times 50 divided by 5 plus 32 it comes out as 122. After that line is executed the box associated with Fahrenheit will contain 122. Then the next line says print print f the temperature there is no new line. So, the next print f will start from where this print f ended and here you see something new which is the percentage f symbol. So, these are what are known as format specifiers. So, the percentage f symbol says that take the corresponding variable which is given centigrade here and print it as a float print it as a real number. So, notice the difference between the first print f and the second print f. The first print f just had a string between double codes. The second print f has two arguments one is a string between double codes and the string is percentage f and then the second argument is centigrade. So, it says take the value of centigrade and print it as a floating point number. So, it does that and you see 50.000 in the output there is no new line. So, the next print f starts from the previous line where the previous print f left off 50 Celsius equals. So, it prints that and now you have another format specifier it says print f percentage f fan night. Fan night is 122 and it will print it as a floating point number or as a real number. So, it will print it as 122.000. So, print f fan night. So, the final message that will be printed will be the temperature 50 centigrade 50 Celsius equals 122 fan night. So, the new thing that we have seen in this program include variable definitions, how they have an associated type and similarly how do we print these variables. So, we do not want to print the names of the variables we want to print the content of the variables. We want to print what is stored in the box for that we use these format specifiers like this percentage f. So, let us briefly introduce what are types in C. So, variables are the names of the boxes in which to store the values. But these boxes are special certain boxes can hold only certain kinds of values. So, all boxes are not the same there are different kinds of boxes. Now, types are basically saying that a particular box can hold a particular kind of data. So, variables are defined with associated type and we will use some basic types during the course of this programming language to to it. One of the two common type two of the common types that we see in this program are int which stands for an integer and float which stands for a floating point number. So, it stands for a real number notice that machines can hold only a fixed number of bits. So, int does not mean that the integers can go from minus infinity to infinity. It goes from a certain very very small negative number to a very large positive number. Similarly, floating point also is limited by a particular range. This is because machines cannot represent arbitrary values. The type of integer can store all numbers from minus m plus 1 through 0 to plus m. So, there will be some large m for which defines the upper limits and the lower limits of the particular machine. Now, that limit may depend on which particular machine that you use. On a on a 32 bit machine it will be 2 to the power of 32, 2 m will be 2 to the power of 32. A few final words about variables just like in a cooking recipe you will never mention a step which involves an ingredient without mentioning that ingredient is needed in the first place. So, you will never say that you salt and if you look at the list of ingredients you will see that there is no salt in the list of ingredients. Such recipes are considered bad. So, when you write a typical recipe you list out all the ingredients first and then write the steps for the cooking. Similarly, in a program you define whatever variables that you need before those variables are used by any statement in the program. Always define a variable before use. Now, a word about names of variables in the C programming language the names are consisting of numbers, letters and an underlying symbol and underscore symbol. And there is a particular convention that a variable cannot start with a number. So, the initial letter has to be a letter or an underscore it cannot be a number, but further letters can be either capital letters small letter or numbers or an underscore. So, there are valid names like C underscore S q, C S q 1, C underscore S q underscore one. So, all these are valid. One thing to note is that the names are sensitive to upper and lower case. So, for example capital C centigrade is different from a centigrade with a small C. So, these are two distinct variables that is a common source of errors when you start programming. Another thing to note to watch out for is that the assignment operation which is equal to is not the same as the mathematical equal. So, when mathematically we say a equal to b it means that a and b are the same quantity. So, a equal to b is the same as saying b equal to a this is not true in C. For example, let us say that you have the statements b equal to 3 semicolon and then later you have a equal to 2 semicolon and further you have the statement a equal to b semicolon. So, the statement a equal to b will set a to b's value. So, b's value is 3 and that value will be copied to a. So, it will set a to 3 and b will be unchanged. So, watch out for this if the statement if you are expecting the mathematical operator after the operation a equal to b a and b will have the same value, but that is not the case. The meaning of the symbol equal to is that take the value on the right hand side of the expression and copy that into the box specified by the left side. So, copy the value on the right hand side to the variable on the left.