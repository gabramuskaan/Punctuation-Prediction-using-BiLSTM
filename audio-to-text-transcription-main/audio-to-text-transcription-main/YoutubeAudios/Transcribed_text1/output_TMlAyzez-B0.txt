 With the concepts we have seen so far, let us design a sample program. So, the problem that we want to solve is, we want to write a program that reads the input line by line and counts how many lines has the user input. Program should terminate when the end of file character is encountered. So, we will try to solve this problem. By the way the end of file is a character which you can enter using control D if you are running Linux. So, the flow chart at the very top level can be envisioned as follows. So, we will just check as the end of file been reached. If the end of file has not been reached, you read the next line. If it has been and check again, if the end of file has been reached then you have halt otherwise you read another line. So, here is the very top level picture of what we want to do. So, this design is just meant to read the input line by line. So, it is a very vague flow chart, but at the top level this is what we want to do. So, let us say more details about how we are going to accomplish this. In particular we want to see how we can read and put line by line. So, here is the top level design and now we are going to essentially expand this box. We want to say how do we read the next line. So, let us design the read next line box. So, the read next line box first you read a character and then you check whether the character read is new line character. That means that the user has pressed and entered. So, the line is entered at that point or the user can enter a bunch of characters and instead of pressing enter press control D. So, the user can enter end of file. If either of these are true then the line has ended. So, you hold. Otherwise if the character is neither new line nor end of file then you read the next character. So, here is the design for the function to read the next character, the next line. So, you read character by character after every character you check whether a new line or an end of file has been encountered. If either of them happen then the line has ended otherwise you go back and read another character. So, let us start by writing the top level function. So, let us translate the top level function into code. So, here we will introduce a new concept called what is known as a forward declaration. So, when you define a function you can either give the logic the full function body when you define the function or you can just say that here is what the function will look like. Here is the type signature basically it is taking no arguments and it will return an integer value. And I will terminate that statement by using a semicolon which says that this function I will currently just say the type of the function I will define the function later. This is done so that we can write a function which uses this particular function. So, when we write a function which uses that function the type of the function should be known for that we can just declare the type of the function this is what is known as a declaration of a function. Unless you define the function you cannot use it but in order for another function to just see what the function looks like the declaration is sufficient. So, let us design the top level function. So, we declare this function that we will use in this function that we are about to write. So, this user function will be called read all lines. Now, in that we will keep a line count initialized to 0 and then I will keep a flag called ease line. Now, what this will do is we have to check for whether an end of file has been reached or not for that I will use the function F e o f S T d I n we will see that in a minute. While the end of file has not been encountered you say that read next line. Read next line will return a 1 if a line has been encountered otherwise it will return a 0. So, line count will be incremented by 1 if I read another line otherwise it will remain as it is. Finally, you return the number of lines read. So, this is a realization of the flow chart on the left. Now, there are a couple of things that require explanation. This is that even though the read next line function has not yet been defined just based on the declaration I can say that it is going to return an integer and I can use the integer here. The other thing is what do we mean by F e o f S T d I n. So, what do we mean by the function so what do we mean by the function F e o f. So, F e o f S T d I n is a function that is part of the S T d I a a a a a a a a a a a a a a a a a a a a a a a a a a already used other functions from that a a a a a a a b for example, print a f and scan a. Now, the F e o f function what it does is it returns a function it returns a value 1 if If the end of file has been encountered in the input argument. So, STDIN means that I am using the standard input which is the keyboard input. So if an end of file has been entered via the keyboard then FeoF STDIN will return 1. So STDIN is usually the keyboard input and if usually if the user enters the control D character then FeoF will say 1 because end of file has been entered. Now let us design the function to read a line. The earlier wrote a function which assume that there is a function which will read the next line and based on that I will keep on reading lines until the end of file is encountered. So we are now about to write the bottom function. So we want to read a line. So we have already drawn the flow chart for that. Now let us try to make it into code. So we have to define a few variables. We will have int CH for reading a character. We will come to that in a minute. Then we will keep account of how many characters have been read. And let us write the basic loop. So we will just write the loop corresponding to the flow chart. CH will be get chart. So get the next character and while CH is, while the red character is neither end of file nor new line you should keep reading characters. So if neither of these is true then you should read the next character which is what the flow chart says. A small point here is that get chart returns an integer. This is a technicality because end of file is negative 1. So if you remember go from 0 until 127 or something like that whereas end of file is defined to be minus 1. So because of this minus 1 you cannot keep the return value of get chart as a character. It technically has to be an integer. This is a technicality. So keep that in mind. Now we need to do something further in the loop. So we will complete this in a minute. So what should we do inside the loop? This should be character. So what is this function supposed to do overall? We have to return a 1 if the number of characters in the current line that we have read is at least 1. So if the current line contains at least a character then we have to return 1. For example if the user just entered a new line which is just press the enter key then it is a blank line. In that case we will not say that we have read a line because it was a blank line. So if there is at least one character which is neither new line nor end of file in that line we have to return a 1. Otherwise let us say we return a 0. So one way to do that is to keep account of the number of characters we have read. So for every character read we will keep account of every character which is neither end of file nor a new line we will keep account of characters. So notice the way that the loop has been written. So if the first character is a new line it will not enter the loop hence count remains 0. At the same time the way the loop is written count will count exactly those characters which are neither new line nor end of file. So now let us decide what should be the return value. We have to return a 1 if the number of characters in the current line including new line is at least 1. So if count is greater than 0 we can return a 1. If exactly 1 if the last character was end of file without having any other characters then we return a 0. So how do we do that? We can check whether at least a character has been read by just checking the value of count. So if count is greater than 0 then at least one character has been entered. Otherwise for example we can also say that if the user has just entered a blank line then also we can say that one more line has been entered. So that is up to the way you want to do it. You can also take the stands that may be a blank line does not count as a line. If that is the case then you do not have to do it. But in this case let us just assume that if at least a character has been entered which is either a normal character on a new line we will say that return 1. If the only character entered in that line is end of file we will say that there is no more new line. So what we have to do is return count greater than 0 this tells you how many non-new line non-end of file characters have been entered. So this should be at least at least 1 or there is exactly one character entered which is a new line. So in either these characters cases we will return a 1 otherwise we will return a 0. So we can put these program together by concatenating all the code that we have written. Notice one thing that declare the function first we use the function here. So here is a top level function which will use a read next line. And read all lines uses read next line. Read next line has not been defined yet. So you can go here after read all lines has been defined you can define read next line. So here is the function here. So this is function 1 this is function 2 and finally you have made. Read all lines does not need any forward declaration because when main uses read all lines it has already been defined. That was not the case here when read all lines used read next line read next line was not defined yet that is why we needed a forward declaration. In this program you can reorder the code such that read next line code can be written before in which case you do not need the forward declaration but the concept of forward declaration is useful for later discussions. So I am just introduce that.