The Basics of C Programming
Marshall Brain
Last updated: October 30 <sil=0.593> ,COMMA 2013
The C programming language is a popular and widely used programming language for creating computer programs <sil=0.928> .PERIOD Programmers embrace C because it gives maximum control and efficiency to the programmer <sil=0.925> .PERIOD If you are a programmer <sil=0.633> ,COMMA or if you are interested in becoming a programmer <sil=0.346> ,COMMA there
are a couple of benefits you gain from learning C:
• You will be able to read and write code for a large number of platforms – everything from microcontrollers to the most advanced scientific systems
can be written in C <sil=0.917> .PERIOD • Because of the performance and portability of C <sil=0.632> ,COMMA almost all popular crossplatform programming languages and scripting languages <sil=0.564> ,COMMA such as C++ <sil=0.574> ,COMMA Java <sil=0.573> ,COMMA Python <sil=0.387> ,COMMA Objective-C <sil=0.313> ,COMMA Perl <sil=0.411> ,COMMA Ruby <sil=0.432> ,COMMA PHP <sil=0.522> ,COMMA Lua <sil=0.335> ,COMMA and Bash <sil=0.424> ,COMMA are implemented in C and borrowed syntaxes and functions heavily from C <sil=0.965> .PERIOD They share the similar operators <sil=0.320> ,COMMA expressions <sil=0.584> ,COMMA repetition statements <sil=0.628> ,COMMA control structures <sil=0.494> ,COMMA arrays <sil=0.417> ,COMMA input and output <sil=0.330> ,COMMA and functions <sil=0.923> .PERIOD Furthermore <sil=0.443> ,COMMA almost all languages can interface with C and C++ to take advantage of a large volume of existing C/C++ libraries <sil=0.932> .PERIOD In this article <sil=0.420> ,COMMA we will walk through the entire language and show you how to
become a C programmer <sil=0.607> ,COMMA starting at the beginning <sil=0.953> .PERIOD What is C <sil=0.978> ?QUESTIONMARK C is a computer programming language <sil=0.923> .PERIOD That means that you can use C to create
lists of instructions for a computer to follow <sil=0.906> .PERIOD C is one of thousands of programming languages currently in use <sil=0.962> .PERIOD C has been around for several decades and has won widespread acceptance because it gives programmers maximum control and efficiency <sil=0.954> .PERIOD C is an easy language to learn <sil=0.913> .PERIOD It is a bit more cryptic in its style than some other languages <sil=0.318> ,COMMA but you get beyond that fairly quickly <sil=0.922> .PERIOD C is what is called a compiled language <sil=0.986> .PERIOD This means that once you write your C program <sil=0.427> ,COMMA you must run it through a C compiler to turn your program into an executable that the computer can run (execute) <sil=0.935> .PERIOD The C program is the human-readable form <sil=0.606> ,COMMA while the executable that comes out of the compiler is the machine-readable and executable form <sil=0.975> .PERIOD What this means is that to write and run a C program <sil=0.400> ,COMMA you must have access to a C compiler <sil=0.922> .PERIOD We will start at the beginning with an extremely simple C program and build up from there <sil=0.993> .PERIOD I will assume that you are using the Linux command line and gcc as your environment for these examples <sil=0.366> ;SEMICOLON if you are not <sil=0.612> ,COMMA all of the code will still work fine – you will simply need to understand and use whatever compiler you have available <sil=0.983> .PERIOD The simplest C program <sil=0.626> ,COMMA I
Let’s start with the simplest possible C program and use it both to understand the
basics of C and the C compilation process <sil=0.929> .PERIOD Type the following program into a
standard text editor <sil=0.969> .PERIOD Then save the program to a file named samp <sil=0.966> .PERIOD c <sil=0.997> .PERIOD If you leave
off <sil=0.916> .PERIOD c <sil=0.960> ,COMMA you will probably get some sort of error when you compile it <sil=0.598> ,COMMA so make
sure you remember the <sil=0.964> .PERIOD c <sil=0.999> .PERIOD Also <sil=0.508> ,COMMA make sure that your editor does not automatically
append some extra characters (such as <sil=0.964> .PERIOD txt) to the name of the file <sil=0.905> .PERIOD Here’s the first
program:
#include <stdio <sil=0.924> .PERIOD h>
int main ( void )
{
printf ( " This is output from my first program <sil=0.995> !EXCLAMATIONMARK \ n " ) <sil=0.383> ;SEMICOLON return 0 <sil=0.323> ;SEMICOLON }
Spacing and indentation
When you enter this program <sil=0.631> ,COMMA position #include so that the pound sign is in column 1 (the far left side) <sil=0.953> .PERIOD Otherwise <sil=0.376> ,COMMA the spacing and indentation can be any way you like it <sil=0.951> .PERIOD On some Linux systems <sil=0.314> ,COMMA you will find a program called indent <sil=0.496> ,COMMA which will format code for you <sil=0.903> .PERIOD The spacing and indentation shown above is a good example to follow <sil=0.955> .PERIOD Compilation and run
When executed <sil=0.505> ,COMMA this program instructs the computer to print out the line “This is output from my first program <sil=0.866> !EXCLAMATIONMARK ” – then the program quits <sil=0.968> .PERIOD You can’t get much simpler than that <sil=0.884> !EXCLAMATIONMARK To compile this code on a Linux machine <sil=0.475> ,COMMA type gcc samp <sil=0.997> .PERIOD c −o samp
This line invokes the C compiler called gcc <sil=0.619> ,COMMA asks it to compile samp <sil=0.936> .PERIOD c and asks it
to place the executable file it creates under the name samp <sil=0.915> .PERIOD To run the program <sil=0.314> ,COMMA type <sil=0.972> .PERIOD / samp
You should see the output “This is output from my first program <sil=0.938> !EXCLAMATIONMARK ” when you run
the program <sil=0.903> .PERIOD If you mistype the program <sil=0.578> ,COMMA it either will not compile or it will not run <sil=0.943> .PERIOD If the program does not compile or does not run correctly <sil=0.614> ,COMMA edit it again and see where you went wrong in your typing <sil=0.917> .PERIOD Fix the error and try again <sil=0.948> .PERIOD The simplest C program <sil=0.561> ,COMMA II
Let’s walk through this program and start to see what the different lines are doing:
#include <stdio <sil=0.984> .PERIOD h>
int main ( void )
{
printf ( " This is output from my first program <sil=0.958> !EXCLAMATIONMARK \ n " ) <sil=0.489> ;SEMICOLON return 0 <sil=0.576> ;SEMICOLON }
• This C program starts with #include <stdio <sil=0.918> .PERIOD h> <sil=0.972> .PERIOD This line includes the “standard input/otput library” into your program <sil=0.908> .PERIOD The standard I/O library lets you read input from the keyboard (called “standard in”) <sil=0.494> ,COMMA write output to the screen (called “standard out”) <sil=0.474> ,COMMA process text files stored on the disk <sil=0.506> ,COMMA and so on <sil=0.910> .PERIOD It is an extremely useful library <sil=0.988> .PERIOD C has a large number of standard
libraries like stdio <sil=0.513> ,COMMA including string <sil=0.551> ,COMMA time and math libraries <sil=0.996> .PERIOD A library is simply a package of code that someone else has written to make your life easier (we’ll discuss libraries a bit later) <sil=0.943> .PERIOD • The line int main(void) declares the main function <sil=0.914> .PERIOD Every C program must have a function named main somewhere in the code <sil=0.981> .PERIOD We will learn more about functions shortly <sil=0.931> .PERIOD At run time <sil=0.396> ,COMMA program execution starts at the first line of the main function <sil=0.941> .PERIOD • In C <sil=0.327> ,COMMA the { and } symbols mark the beginning and end of a block of code <sil=0.912> .PERIOD In this case <sil=0.532> ,COMMA the block of code making up the main function contains two lines <sil=0.988> .PERIOD • The printf statement in C allows you to send output to standard out (for us <sil=0.580> ,COMMA the screen) <sil=0.952> .PERIOD The portion in quotes is called the format string and describes how the data is to be formatted when printed <sil=0.902> .PERIOD The format string can contain string literals such as “This is output from my first program <sil=0.873> !EXCLAMATIONMARK  <sil=0.561> ,COMMA ” symbols for carriage returns (\n) <sil=0.614> ,COMMA and operators as placeholders for variables (see below) <sil=0.984> .PERIOD • The return 0 <sil=0.464> ;SEMICOLON line causes the function to return an error code of 0 (no error)
to the shell that started execution <sil=0.915> .PERIOD More on this capability a bit later <sil=0.905> .PERIOD Variables
As a programmer <sil=0.466> ,COMMA you will frequently want your program to “remember” a value <sil=0.967> .PERIOD For example <sil=0.501> ,COMMA if your program requests a value from the user <sil=0.395> ,COMMA or if it calculates a value <sil=0.421> ,COMMA you will want to remember it somewhere so you can use it later <sil=0.962> .PERIOD The way your program remembers things is by using variables <sil=0.986> .PERIOD For example:
int b <sil=0.622> ;SEMICOLON This line says <sil=0.303> ,COMMA “I want to create a space called b that is able to hold one integervalue <sil=0.955> .PERIOD ” A variable has a name (in this case <sil=0.618> ,COMMA b) and a type (in this case <sil=0.634> ,COMMA int <sil=0.574> ,COMMA an integer) <sil=0.934> .PERIOD You can store a value in b by saying something like:
b = 5 <sil=0.539> ;SEMICOLON You can use the value in b by saying something like:
printf ("%d " <sil=0.488> ,COMMA b ) <sil=0.352> ;SEMICOLON In C <sil=0.627> ,COMMA there are several standard types for variables:
• int - integer (whole number) values
• float - floating point values
• char - single character values (such as “m” or “Z”)
We will see examples of these other types as we go along <sil=0.980> .PERIOD Input and output
printf
The printf statement allows you to send output to standard out <sil=0.971> .PERIOD For us <sil=0.591> ,COMMA standard out is generally the screen (although you can redirect standard out into a text file or another command) <sil=0.967> .PERIOD Here is another program that will help you learn more about printf:
#include < stdio <sil=0.960> .PERIOD h>
int main ( void )
{
int a <sil=0.634> ,COMMA b <sil=0.493> ,COMMA c <sil=0.315> ;SEMICOLON a = 5 <sil=0.370> ;SEMICOLON b = 7 <sil=0.490> ;SEMICOLON c = a + b <sil=0.515> ;SEMICOLON printf ("% d + %d = %d \ n " <sil=0.390> ,COMMA a <sil=0.555> ,COMMA b <sil=0.383> ,COMMA c ) <sil=0.501> ;SEMICOLON return 0 <sil=0.446> ;SEMICOLON }
Type this program into a file and save it as add <sil=0.922> .PERIOD c <sil=0.957> .PERIOD Compile it with the line gcc add <sil=0.903> .PERIOD c -o add and then run it by typing <sil=1.000> .PERIOD /add <sil=0.902> .PERIOD You will see the line “5 + 7 = 12” as Output <sil=0.902> .PERIOD Here is an explanation of the different lines in this program:
• The line int a <sil=0.540> ,COMMA b <sil=0.390> ,COMMA c <sil=0.331> ;SEMICOLON declares three integer variables named a <sil=0.639> ,COMMA b and c <sil=0.941> .PERIOD Integer variables hold whole numbers <sil=0.932> .PERIOD • The next line initializes the variable named a to the value 5 <sil=0.945> .PERIOD • The next line sets b to 7 <sil=0.947> .PERIOD • The next line adds a and b and “assigns” the result to c <sil=0.911> .PERIOD The computer adds the value in a (5) to the value in b (7) to form the result 12 <sil=0.443> ,COMMA and then places that new value (12) into the variable c <sil=0.993> .PERIOD The variable c is assigned the value 12 <sil=0.980> .PERIOD For this reason <sil=0.415> ,COMMA the = in this line is called “the assignment operator <sil=0.918> .PERIOD ”
• The printf statement then prints the line “5 + 7 = 12 <sil=0.969> .PERIOD ” The %d placeholders in the printf statement act as placeholders for values <sil=0.916> .PERIOD There are three %d placeholders <sil=0.361> ,COMMA and at the end of the printf line there are the three variable names: a <sil=0.558> ,COMMA b and c <sil=0.990> .PERIOD C matches up the first %d with a and substitutes 5 there <sil=0.987> .PERIOD It matches the second %d with b and substitutes 7 <sil=0.943> .PERIOD It matches the third %d with c and substitutes 12 <sil=0.927> .PERIOD Then it prints the completed line to the screen: 5 + 7 = 12 <sil=0.910> .PERIOD The + <sil=0.450> ,COMMA the = and the spacing are a part of the format line and get embedded automatically between the %d operators as specified by the programmer <sil=0.959> .PERIOD Let’s look at some variations to understand printf completely <sil=0.902> .PERIOD Here is the simplest printf statement:
printf ( "Hello " ) <sil=0.429> ;SEMICOLON This call to printf has a format string that tells printf to send the word “Hello” to standard out <sil=0.983> .PERIOD Contrast it with this:
printf  ( "Hello \n" ) <sil=0.368> ;SEMICOLON The difference between the two is that the second version sends the word “Hello” followed by a carriage return to standard out <sil=0.957> .PERIOD The following line shows how to output the value of a variable using printf <sil=0.934> .PERIOD printf ("% d " <sil=0.512> ,COMMA b ) <sil=0.633> ;SEMICOLON The %d is a placeholder that will be replaced by the value of the variable b when
the printf statement is executed <sil=0.984> .PERIOD Often <sil=0.553> ,COMMA you will want to embed the value within some other words <sil=0.918> .PERIOD One way to accomplish that is like this:
printf ( " The temperature " ) <sil=0.623> ;SEMICOLON printf ("% d " <sil=0.510> ,COMMA b ) <sil=0.548> ;SEMICOLON printf ( "degrees \ n " ) <sil=0.363> ;SEMICOLON An easier way is to say this:
printf ( " The temperature %degrees \ n " <sil=0.602> ,COMMA b ) <sil=0.414> ;SEMICOLON You can also use multiple %d placeholders in one printf statement:
printf ("% d + %d = %d \ n " <sil=0.440> ,COMMA a <sil=0.447> ,COMMA b <sil=0.386> ,COMMA c ) <sil=0.377> ;SEMICOLON In the printf statement <sil=0.571> ,COMMA it is extremely important that the number of operators in the format string corresponds exactly with the number and type of the variables following it <sil=0.999> .PERIOD For example <sil=0.348> ,COMMA if the format string contains three %d operators <sil=0.519> ,COMMA then it must be followed by exactly three parameters and they must have the same types in the same order as those specified by the operators <sil=0.968> .PERIOD You can print all of the normal C types with printf by using different placeholders:
• int (integer values) uses %d
• float (floating point values) uses %f
• char (single character values) uses %c
• character strings (arrays of characters <sil=0.435> ,COMMA discussed later) use %s
You can learn more about the nuances of printf on a Linux machine by typing man
3 printf <sil=0.957> .PERIOD scanf
The previous program is good <sil=0.417> ,COMMA but it would be better if it read in the values 5 and
7 from the user instead of using constants <sil=0.959> .PERIOD Try this program instead:
#include<stdio <sil=0.903> .PERIOD h>
int main ( void )
{
int a <sil=0.460> ,COMMA b <sil=0.318> ,COMMA c <sil=0.391> ;SEMICOLON printf ( " Enter the firstvalue  : " ) <sil=0.385> ;SEMICOLON scanf ("% d " <sil=0.550> ,COMMA &a ) <sil=0.598> ;SEMICOLON printf ( " Enter the second value : " ) <sil=0.533> ;SEMICOLON scanf ("% d " <sil=0.497> ,COMMA &b ) <sil=0.317> ;SEMICOLON c = a + b <sil=0.580> ;SEMICOLON printf("% d + %d = %d \ n " <sil=0.580> ,COMMA a <sil=0.497> ,COMMA b <sil=0.332> ,COMMA c ) <sil=0.407> ;SEMICOLON return 0 <sil=0.481> ;SEMICOLON }
Make the changes <sil=0.478> ,COMMA then compile and run the program to make sure it works <sil=0.927> .PERIOD Note that scanf uses the same sort of format string as printf (type man scanf for more info) <sil=0.946> .PERIOD Also note the & in front of a and b <sil=0.937> .PERIOD This is the address operator in C:
It returns the address of the variable (this will not make sense until we discuss pointers) <sil=0.942> .PERIOD You must use the & operator in scanf on any variable of type char <sil=0.328> ,COMMA int <sil=0.462> ,COMMA or float <sil=0.373> ,COMMA as well as structure types (which we will get to shortly) <sil=0.927> .PERIOD If you leave out the & operator <sil=0.432> ,COMMA you will get an error when you run the program <sil=0.903> .PERIOD Try it so that you can see what that sort of run-time error looks like <sil=0.922> .PERIOD The scanf function allows you to accept input from standard in <sil=0.401> ,COMMA which for us is
generally the keyboard <sil=0.956> .PERIOD The scanf function can do a lot of different things <sil=0.384> ,COMMA but it
is generally unreliable unless used in the simplest ways <sil=0.967> .PERIOD It is unreliable because
it does not handle human errors very well <sil=0.983> .PERIOD But for simple programs it is good
enough and easy-to-use <sil=0.983> .PERIOD The simplest application of scanf looks like this:
scanf ("%d " <sil=0.550> ,COMMA &b ) <sil=0.645> ;SEMICOLON The program will read in an integer value that the user enters on the keyboard (%d
is for integers <sil=0.332> ,COMMA as is printf <sil=0.321> ,COMMA so b must be declared as an int) and place that value
into b <sil=0.917> .PERIOD The scanf function uses the same placeholders as printf:
• int uses %d
• float uses %f
• char uses %c
• character strings (discussed later) use %s
You must put & in front of the variable used in scanf <sil=0.972> .PERIOD The reason why will become clear once you learn about pointers <sil=0.992> .PERIOD It is easy to forget the & sign <sil=0.474> ,COMMA and when you forget it your program will almost always crash when you run it <sil=0.930> .PERIOD In general <sil=0.539> ,COMMA it is best to use scanf as shown here – to read a single value from the keyboard <sil=0.945> .PERIOD Use multiple calls to scanf to read multiple values <sil=0.968> .PERIOD In any real program <sil=0.630> ,COMMA you will use the gets or fgets functions instead to read text a line at a time <sil=0.905> .PERIOD Then you will “parse” the line to read its values <sil=0.961> .PERIOD The reason that you do that is so you can detect errors in the input and handle them as you see fit <sil=0.935> .PERIOD The printf and scanf functions will take a bit of practice to be completely understood <sil=0.438> ,COMMA but once mastered they are extremely useful <sil=0.952> .PERIOD Programming exercise
1 <sil=0.947> .PERIOD Modify the following program so that it accepts three values instead of two
and adds all three together:
# include < stdio <sil=0.961> .PERIOD h>
int main ( v oi d ) {
int a <sil=0.566> ,COMMA b <sil=0.331> ,COMMA c <sil=0.614> ;SEMICOLON printf ( " Enter the first value : " ) <sil=0.385> ;SEMICOLON scanf ("% d " <sil=0.571> ,COMMA &a ) <sil=0.421> ;SEMICOLON printf  ( " Enter the second value : " ) <sil=0.361> ;SEMICOLON scanff ("% d " <sil=0.455> ,COMMA &b ) <sil=0.475> ;SEMICOLON c = a + b <sil=0.360> ;SEMICOLON printf  ("% d + %d = %d \ n " <sil=0.634> ,COMMA a <sil=0.605> ,COMMA b <sil=0.640> ,COMMA c ) <sil=0.612> ;SEMICOLON return 0 <sil=0.590> ;SEMICOLON }
2 <sil=0.956> .PERIOD Try deleting or adding random characters or words in one of the previous programs and watch how the compiler reacts to these errors <sil=0.975> .PERIOD For example <sil=0.402> ,COMMA delete the b variable in the first line of the above program and see what the compiler does when you forget to declare a variable <sil=0.976> .PERIOD Delete a semicolon and see what happens <sil=0.978> .PERIOD Leave out one of the braces <sil=0.952> .PERIOD Remove one of the parentheses next to the main function <sil=0.985> .PERIOD Make each error by itself and then run the program through the compiler to see what happens <sil=0.928> .PERIOD By simulating errors like these <sil=0.338> ,COMMA you can learn about different compiler errors <sil=0.402> ,COMMA and that will make your typos easier to find when you make them for real <sil=0.950> .PERIOD Branching and looping
if statement
Here is a simple C program demonstrating an if statement:
#include < stdio <sil=0.916> .PERIOD h>
int main ( void )
{
int b <sil=0.410> ;SEMICOLON printf ( " Enter a value : " ) <sil=0.508> ;SEMICOLON scanf ("%d " <sil=0.521> ,COMMA &b ) <sil=0.392> ;SEMICOLON if ( b < 0 )
{
printf  ( " The value is negative \ n " ) <sil=0.606> ;SEMICOLON }
return 0 <sil=0.650> ;SEMICOLON }
This program accepts a number from the user <sil=0.964> .PERIOD It then tests the number using an if statement to see if it is less than 0 <sil=0.990> .PERIOD If it is <sil=0.607> ,COMMA the program prints a message <sil=0.976> .PERIOD Otherwise <sil=0.528> ,COMMA the program is silent <sil=0.920> .PERIOD The (b < 0) portion of the program is the Boolean expression <sil=0.968> .PERIOD C evaluates this expression to decide whether or not to print the message <sil=0.904> .PERIOD If the Boolean expression evaluates to True <sil=0.312> ,COMMA then C executes the single line immediately following the if statement (or a block of lines within braces immediately following the if statement) <sil=0.926> .PERIOD If the Boolean expression is False <sil=0.490> ,COMMA then C skips the line or block of lines immediately following the if statement <sil=0.919> .PERIOD Here’s slightly more complex example:
#include <stdio <sil=0.984> .PERIOD h>
int main (void)
{
Int b <sil=0.534> ;SEMICOLON printf ( " Enter a value: " ) <sil=0.594> ;SEMICOLON scanf("% d " <sil=0.382> ,COMMA &b ) <sil=0.541> ;SEMICOLON i f ( b < 0 )
{
printf ( " The value is negative \ n " ) <sil=0.455> ;SEMICOLON }
else if ( b == 0 )
{
printf ( " The value is zero \ n " ) <sil=0.341> ;SEMICOLON }
else
{
printf( " The value positive \ n " ) <sil=0.469> ;SEMICOLON }
return 0 <sil=0.415> ;SEMICOLON }
In this example <sil=0.557> ,COMMA the else if and else sections evaluate for zero and positive values as well <sil=0.920> .PERIOD Boolean expressions
Here is a more complicated Boolean expression: 
i f ( ( x == y ) && ( j > k ) )
{
z = 1 <sil=0.520> ;SEMICOLON }
else
{
q = 1 0 <sil=0.535> ;SEMICOLON }
This statement says <sil=0.487> ,COMMA “If the value in variable x equals the value in variable y <sil=0.524> ,COMMA and if the value in variable j is greater than the value in variable k <sil=0.345> ,COMMA then set the variable z to 1 <sil=0.566> ,COMMA otherwise set the variable q to 10 <sil=0.931> .PERIOD ” You will use if statements like this throughout your C programs to make decisions <sil=0.959> .PERIOD In general <sil=0.629> ,COMMA most of the decisions you make will be simple ones like the first example <sil=0.392> ;SEMICOLON but on occasion <sil=0.642> ,COMMA things get more complicated <sil=0.964> .PERIOD Notice that C uses == to test for equality <sil=0.458> ,COMMA while it uses = to assign a value to a variable <sil=0.977> .PERIOD The && in C represents a Boolean AND operation <sil=0.981> .PERIOD Here are all of the Boolean operators in C:
equality ==
Less than<
Greater than >
<= <=
>= >=
inequality <sil=0.869> !EXCLAMATIONMARK =
and &&
or | |
not <sil=0.979> !EXCLAMATIONMARK = vs == in boolean expressions
The == sign is a problem in C because every now and then you may forget and type just = in Boolean expression <sil=0.946> .PERIOD This is an easy mistake to make <sil=0.542> ,COMMA but to the compiler there is a very important difference <sil=0.962> .PERIOD C will accept either = and == in a Boolean expression – the behavior of the program changes remarkably between
the two <sil=0.365> ,COMMA however <sil=0.996> .PERIOD Boolean expressions evaluate to integers in C <sil=0.594> ,COMMA and integers can be used inside of Boolean expressions <sil=0.952> .PERIOD The integer value 0 in C is False <sil=0.526> ,COMMA while any other integer value is True <sil=0.905> .PERIOD The following is legal in C:
# include <stdio <sil=0.990> .PERIOD h>
int main ( v oi d )
{
int a <sil=0.368> ;SEMICOLON printf ( " Enter a number : " ) <sil=0.553> ;SEMICOLON scanf ("% d " <sil=0.452> ,COMMA &a ) <sil=0.461> ;SEMICOLON if ( a )
{
printf ( " The value is True \ n " ) <sil=0.428> ;SEMICOLON }
return 0 <sil=0.371> ;SEMICOLON }
If a is anything other than 0 <sil=0.322> ,COMMA the printf statement gets executed <sil=0.907> .PERIOD In C <sil=0.483> ,COMMA a statement like if (a = b) means <sil=0.378> ,COMMA "Assign b to a <sil=0.416> ,COMMA and then test a for its Boolean value <sil=0.920> .PERIOD " So if a becomes 0 <sil=0.648> ,COMMA the if statement is False <sil=0.608> ;SEMICOLON otherwise <sil=0.562> ,COMMA it is True <sil=0.921> .PERIOD The value of a changes in the process <sil=0.988> .PERIOD This is not the intended behavior if you meant to type == (although this feature is useful when used correctly) <sil=0.485> ,COMMA so be careful with your = and == usage <sil=0.951> .PERIOD while loop You’ll find that while statements are just as easy to use as if statements <sil=0.954> .PERIOD For
example:
while ( a < b )
{
printf ("% d \ n " <sil=0.555> ,COMMA a ) <sil=0.484> ;SEMICOLON a = a + 1 <sil=0.569> ;SEMICOLON }
This causes the two lines within the braces to be executed repeatedly until a is greater than or equal to b <sil=0.975> .PERIOD The while statement in general works as illustrated to the right <sil=0.952> .PERIOD do-while loop
C also provides a do-while structure:
do
{
printf ("% d \ n " <sil=0.363> ,COMMA a ) <sil=0.566> ;SEMICOLON a = a + 1 <sil=0.522> ;SEMICOLON }
while ( a < b ) <sil=0.370> ;SEMICOLON for loop
The for loop in C is simply a shorthand way of expressing a while statement <sil=0.963> .PERIOD For example <sil=0.345> ,COMMA suppose you have the following code in C:
x = 1 <sil=0.578> ;SEMICOLON while ( x < 1 0 )
{
blah blah blah
x ++ <sil=0.644> ;SEMICOLON / ∗ x++ is the same as saying x = x+1 ∗ /}
You can convert this into a for loop as follows:
f o r ( x = 1 <sil=0.599> ;SEMICOLON x < 1 0 <sil=0.307> ;SEMICOLON x ++)
{
blah blah blah
}
Note that the while loop contains an initialization step (x=1) <sil=0.365> ,COMMA a test step (x<10) <sil=0.620> ,COMMA and an increment step (x++) <sil=0.942> .PERIOD The for loop lets you put all three parts onto one line <sil=0.347> ,COMMA but you can put anything into those three parts <sil=0.952> .PERIOD For example <sil=0.559> ,COMMA suppose you have the following loop:
a = 1 <sil=0.503> ;SEMICOLON b = 6 <sil=0.577> ;SEMICOLON while ( a < b )
{
a ++ <sil=0.344> ;SEMICOLON printf ("% d \ n " <sil=0.556> ,COMMA a ) <sil=0.358> ;SEMICOLON }
You can place this into a for statement as well:
for ( a = 1 <sil=0.630> ,COMMA b = 6 <sil=0.570> ;SEMICOLON a < b <sil=0.358> ;SEMICOLON a ++)
{
printf ("% d \ n " <sil=0.485> ,COMMA a ) <sil=0.543> ;SEMICOLON }
It is slightly confusing <sil=0.605> ,COMMA but it is possible <sil=0.909> .PERIOD The comma operator lets you separate several different statements in the initialization and increment sections of the for loop (but not in the test section) <sil=0.994> .PERIOD Many C programmers like to pack a lot of information into a single line of C code <sil=0.332> ;SEMICOLON but a lot of people think it makes the
code harder to understand <sil=0.594> ,COMMA so they break it up <sil=0.983> .PERIOD Looping: an example
Let’s say that you would like to create a program that prints a Fahrenheit-toCelsius conversion table <sil=0.995> .PERIOD This is easily accomplished with a for loop or a while
loop:
# include < stdio <sil=0.985> .PERIOD h>
int main ( void )
{
int a = 0 <sil=0.547> ;SEMICOLON while ( a <= 100 )
{
printf ("%4 d degrees F = %4d degrees C\ n " <sil=0.534> ,COMMA a <sil=0.485> ,COMMA ( a − 3 2 ) ∗ 5 / 9 ) <sil=0.565> ;SEMICOLON a = a + 1 0 <sil=0.410> ;SEMICOLON }
return 0 <sil=0.356> ;SEMICOLON }
If you run this program <sil=0.617> ,COMMA it will produce a table of values starting at 0 degrees F and ending at 100 degrees F <sil=0.987> .PERIOD The output will look like this:
0 degrees F = −17 degrees C
10 degrees F = −12 degrees C
20 degrees F = −6 degrees C
30 degrees F = −1 degrees C
40 degrees F = 4 degrees C
50 degrees F = 10 degrees C
60 degrees F = 15 degrees C
70 degrees F = 21 degrees C
80 degrees F = 26 degrees C
90 degrees F = 32 degrees C
100 degrees F = 37 degrees C
The table’s values are in increments of 10 degrees <sil=0.953> .PERIOD You can see that you can easily change the starting <sil=0.385> ,COMMA ending or increment values of the table that the program produces <sil=0.988> .PERIOD If you wanted your values to be more accurate <sil=0.456> ,COMMA you could use floating point values
instead:
# include < stdio <sil=0.928> .PERIOD h>
int main ( v oi d )
{
float a = 0 <sil=0.457> ;SEMICOLON while ( a <= 1 0 0 )
{
printf ( "% 6 <sil=0.962> .PERIOD 2 f degrees F = %6 <sil=0.909> .PERIOD 2 f degrees C\ n ") <sil=0.489> ,COMMA a <sil=0.497> ,COMMA ( a − 32 <sil=0.919> .PERIOD 0 ) ∗ 5 <sil=0.927> .PERIOD 0/9 <sil=0.961> .PERIOD 0 ) <sil=0.331> ;SEMICOLON a = a + 1 0 <sil=0.425> ;SEMICOLON }
return 0 <sil=0.638> ;SEMICOLON }
You can see that the declaration for a has been changed to a float <sil=0.446> ,COMMA and the %f symbol replaces the %d symbol in the printf statement <sil=0.951> .PERIOD In addition <sil=0.648> ,COMMA the %f symbol has some formatting applied to it: The value will be printed with six digits
preceding the decimal point and two digits following the decimal point <sil=0.920> .PERIOD Now let’s say that we wanted to modify the program so that the temperature 98 <sil=0.962> .PERIOD 6 is inserted in the table at the proper position <sil=0.983> .PERIOD That is <sil=0.424> ,COMMA we want the table to increment every 10 degrees <sil=0.409> ,COMMA but we also want the table to include an extra line for 98 <sil=0.992> .PERIOD 6 degrees F because that is the normal body temperature for a human being <sil=0.948> .PERIOD The following program accomplishes the goal:
# include < stdio <sil=0.954> .PERIOD h>
int main ( void )
{
float a = 0 <sil=0.583> ;SEMICOLON while ( a <= 100 )
{
if ( a > 98 <sil=0.942> .PERIOD 6 )
{
printf ( "% 6 <sil=0.996> .PERIOD 2 f degrees F = %6 <sil=0.915> .PERIOD 2 f degrees C\ n " <sil=0.483> ,COMMA 98 <sil=0.913> .PERIOD 6 <sil=0.539> ,COMMA ( 98 <sil=0.976> .PERIOD 6 − 32 <sil=0.951> .PERIOD 0 ) ∗ 5 <sil=0.957> .PERIOD 0 / 9 <sil=0.970> .PERIOD 0 ) <sil=0.379> ;SEMICOLON }
printf ( "% 6 <sil=0.982> .PERIOD 2 f degrees F = %6 <sil=0.966> .PERIOD 2 f degrees C\ n " <sil=0.443> ,COMMA a <sil=0.360> ,COMMA ( a − 32 <sil=0.991> .PERIOD 0 ) ∗ 5 <sil=0.915> .PERIOD 0 / 9 <sil=0.997> .PERIOD 0 ) <sil=0.546> ;SEMICOLON a = a + 1 0 <sil=0.349> ;SEMICOLON }
return 0 <sil=0.480> ;SEMICOLON }
This program works if the ending value is 100 <sil=0.481> ,COMMA but if you change the ending value
to 200 you will find that the program has a bug <sil=0.930> .PERIOD It prints the line for 98 <sil=0.939> .PERIOD 6 degrees
too many times <sil=0.984> .PERIOD We can fix that problem in several different ways <sil=0.981> .PERIOD Here is one
way:
# include < stdio <sil=0.974> .PERIOD h>
int main ( void )
{
float a <sil=0.357> ,COMMA b <sil=0.376> ;SEMICOLON a = 0 <sil=0.617> ;SEMICOLON b = −1 <sil=0.425> ;SEMICOLON while ( a <= 100 )
{
if ( ( a > 98 <sil=0.996> .PERIOD 6 ) && ( b < 98 <sil=0.938> .PERIOD 6) )
{
printf ( "% 6 <sil=0.979> .PERIOD 2 f degrees F = %6 <sil=0.913> .PERIOD 2 f degrees C\ n " <sil=0.647> ,COMMA 98 <sil=0.910> .PERIOD 6 <sil=0.609> ,COMMA ( 98 <sil=0.973> .PERIOD 6 − 32 <sil=1.000> .PERIOD 0 ) ∗ 5 <sil=0.931> .PERIOD 0 / 9 <sil=0.937> .PERIOD 0 ) <sil=0.371> ;SEMICOLON }
printf ( "% 6 <sil=0.972> .PERIOD 2 f degrees F = %6 <sil=0.964> .PERIOD 2 f degrees C\ n " <sil=0.531> ,COMMA a <sil=0.579> ,COMMA ( a − 32 <sil=0.975> .PERIOD 0 ) ∗ 5 <sil=0.910> .PERIOD 0 / 9 <sil=0.911> .PERIOD 0 ) <sil=0.393> ;SEMICOLON b = a <sil=0.413> ;SEMICOLON a = a + 1 0 <sil=0.355> ;SEMICOLON }
return 0 <sil=0.632> ;SEMICOLON }
Programming exercise
1 <sil=0.993> .PERIOD Try changing the Fahrenheit-to-Celsius program so that it uses scanf to accept the starting <sil=0.472> ,COMMA ending and increment value for the table from the user <sil=0.926> .PERIOD 2 <sil=0.968> .PERIOD Add a heading line to the table that is produced <sil=0.964> .PERIOD 3 <sil=0.922> .PERIOD Try to find a different solution to the bug fixed by the previous example <sil=0.930> .PERIOD 4 <sil=0.961> .PERIOD Create a table that converts pounds to kilograms or miles to kilometers <sil=0.923> .PERIOD Arrays
In this section <sil=0.561> ,COMMA we will create a small C program that generates 10 random numbers and sorts them <sil=0.957> .PERIOD To do that <sil=0.365> ,COMMA we will use a new variable arrangement called an array <sil=0.950> .PERIOD An array lets you declare and work with a collection of values of the same type <sil=0.905> .PERIOD For example <sil=0.458> ,COMMA you might want to create a collection of five integers <sil=0.915> .PERIOD One way to do it would be to declare five integers directly:
int a <sil=0.516> ,COMMA b <sil=0.543> ,COMMA c <sil=0.960> ,COMMA d <sil=0.642> ,COMMA e <sil=0.426> ;SEMICOLON This is okay <sil=0.424> ,COMMA but what if you needed a thousand integers <sil=0.951> ?QUESTIONMARK An easier way is to declare an array of five integers:
int a [ 5 ] <sil=0.366> ;SEMICOLON The five separate integers inside this array are accessed by an index <sil=0.941> .PERIOD All arrays start at index zero and go to n-1 in C <sil=0.911> .PERIOD Thus <sil=0.642> ,COMMA int a[5] <sil=0.329> ;SEMICOLON contains five elements <sil=0.996> .PERIOD For example:
int a [ 5 ] <sil=0.554> ;SEMICOLON a [ 0 ] = 12 <sil=0.424> ;SEMICOLON a [ 1 ] = 9 <sil=0.435> ;SEMICOLON a [ 2 ] = 14 <sil=0.327> ;SEMICOLON a [ 3 ] = 5 <sil=0.424> ;SEMICOLON a [ 4 ] = 1 <sil=0.527> ;SEMICOLON One of the nice things about array indexing is that you can use a loop to manipulate
the index <sil=0.987> .PERIOD For example <sil=0.447> ,COMMA the following code initializes all of the values in the array
to 0:
int a [ 5 ] <sil=0.597> ;SEMICOLON int i <sil=0.503> ;SEMICOLON for ( i = 0 <sil=0.464> ;SEMICOLON i < 5 <sil=0.420> ;SEMICOLON i ++)
{
a [ i ] = 0 <sil=0.311> ;SEMICOLON }
You declare arrays by inserting an array size after a normal declaration <sil=0.306> ,COMMA as shown
below:
int a [ 10 ] <sil=0.420> ;SEMICOLON / ∗ array of integers ∗ /
chars [ 100 ] <sil=0.549> ;SEMICOLON / ∗array of integers ∗ /
floatf [ 20 ] <sil=0.483> ;SEMICOLON / ∗ a r r a y o f r e a l s ∗ /
structurer [ 5 0 ] <sil=0.471> ;SEMICOLON / ∗ array of records ∗ /
Programming exercise
• In the first piece of code <sil=0.413> ,COMMA try changing the for loop that fills the array to a single line of code <sil=0.984> .PERIOD Make sure that the result is the same as the original
code <sil=0.958> .PERIOD Take the bubble sort code out and put it into its own function <sil=0.962> .PERIOD The function header will be void bubble_sort() <sil=0.969> .PERIOD Then move the variables used by the bubble sort to the function as well <sil=0.469> ,COMMA and make them local there <sil=0.925> .PERIOD Because the array is global <sil=0.442> ,COMMA you do not need to pass parameters <sil=0.976> .PERIOD • Initialize the random number seed to different values <sil=0.972> .PERIOD The following code initializes the values in the array sequentially and then prints
them out:
#include < stdio <sil=0.935> .PERIOD h>
int main ( void )
{
int a [ 5 ] <sil=0.518> ;SEMICOLON int i <sil=0.500> ;SEMICOLON for ( i = 0 <sil=0.603> ;SEMICOLON i < 5 <sil=0.527> ;SEMICOLON i ++)
{
a [ i ] = i <sil=0.371> ;SEMICOLON }
for ( i = 0 <sil=0.568> ;SEMICOLON i < 5 <sil=0.326> ;SEMICOLON i ++)
{
printf ( " a [%d ] = %d \ n " <sil=0.315> ,COMMA i <sil=0.343> ,COMMA a [ i ] ) <sil=0.486> ;SEMICOLON }
}
Arrays are used all the time in C <sil=0.943> .PERIOD To understand a common usage <sil=0.542> ,COMMA start an editor and enter the following code:
# include < s t d i o <sil=0.956> .PERIOD h>
# define MAX 10
int a [MAX] <sil=0.570> ;SEMICOLON int rand_seed = 10 <sil=0.358> ;SEMICOLON / ∗
∗ from K&R − p r o d u c e s an i n t e g e r random number
∗ between 0 and 3 2 7 6 7 <sil=0.977> .PERIOD ∗ /
int  rand ( voi d )
{
rand_seed = rand_seed ∗ 1103515245 + 12345 <sil=0.618> ;SEMICOLON return ( unsigned int ) ( rand_seed / 65536 ) % 32768 <sil=0.503> ;SEMICOLON }
int main ( v oi d )
{
int i <sil=0.519> ,COMMA t <sil=0.356> ,COMMA x <sil=0.639> ,COMMA y <sil=0.503> ;SEMICOLON / ∗ fill array ∗ /
for ( i = 0 <sil=0.427> ;SEMICOLON i < MAX <sil=0.586> ;SEMICOLON i ++)
{
a [ i ] = rand ( ) <sil=0.570> ;SEMICOLON printf ("% d \ n " <sil=0.430> ,COMMA a [ i ] ) <sil=0.428> ;SEMICOLON }
/ ∗ more stuff will go here in a minute ∗ /
return 0 <sil=0.357> ;SEMICOLON }
This code contains several new concepts <sil=0.908> .PERIOD The #define line declares a constant named MAX and sets it to 10 <sil=0.922> .PERIOD Constant names are traditionally written in all caps to make them obvious in the code <sil=0.954> .PERIOD The line int a[MAX] <sil=0.638> ;SEMICOLON shows you how to declare an array of integers in C <sil=0.904> .PERIOD Note that because of the position of the array’s declaration <sil=0.636> ,COMMA it is global to the entire program <sil=0.936> .PERIOD The line int rand_seed=10 also declares a global variable <sil=0.617> ,COMMA this time named rand_seed <sil=0.441> ,COMMA that is initialized to 10 each time the program begins <sil=0.971> .PERIOD This value is the starting seed for the random number code that follows <sil=0.942> .PERIOD In a real random number generator <sil=0.563> ,COMMA the seed should initialize as a random value <sil=0.334> ,COMMA such as the system time <sil=0.978> .PERIOD Here <sil=0.484> ,COMMA the rand function will produce the same values each time you run the program <sil=0.944> .PERIOD The line int rand(void) is a function declaration <sil=0.901> .PERIOD The rand function accepts no
parameters and returns an integer value <sil=0.974> .PERIOD We will learn more about functions later <sil=0.937> .PERIOD The four lines that follow implement the rand function <sil=0.942> .PERIOD We will ignore them for
now <sil=0.996> .PERIOD The main function is normal <sil=0.967> .PERIOD Four local integers are declared <sil=0.521> ,COMMA and the array is filled with 10 random values using a for loop <sil=0.944> .PERIOD Note that the array a contains 10 individual integers <sil=0.924> .PERIOD You point to a specific integer in the array using square brackets <sil=0.915> .PERIOD So a[0] refers to the first integer in the array <sil=0.480> ,COMMA a[1] refers to the second <sil=0.367> ,COMMA and so on <sil=0.989> .PERIOD The line starting with /* and ending with */ is called a comment <sil=0.960> .PERIOD The compiler completely ignores the line <sil=0.923> .PERIOD You can place notes to yourself or other
programmers in comments <sil=0.923> .PERIOD Now add the following code in place of the more stuff <sil=0.906> .PERIOD  <sil=0.909> .PERIOD  <sil=0.933> .PERIOD comment:
/ ∗
∗ bubble sort the array
∗ /
for ( x = 0 <sil=0.523> ;SEMICOLON x < MAX−1 <sil=0.430> ;SEMICOLON x ++)
{
for ( y = 0 <sil=0.594> ;SEMICOLON y < MAX−x−1 <sil=0.352> ;SEMICOLON y ++)
{
if ( a [ y ] > a [ y + 1 ] )
{
t = a [ y ] <sil=0.645> ;SEMICOLON a [ y ] = a [ y + 1 ] <sil=0.322> ;SEMICOLON a [ y +1 ] = t <sil=0.421> ;SEMICOLON }
}
}
/ ∗
∗ print sorted array
∗ /
printf ("−−−−−−−−−−−−−−−−−−−−\n " ) <sil=0.544> ;SEMICOLON f o r ( i = 0 <sil=0.590> ;SEMICOLON i < MAX <sil=0.527> ;SEMICOLON i ++)
{
printf ("% d \ n " <sil=0.596> ,COMMA a [ i ] ) <sil=0.302> ;SEMICOLON }
This code sorts the random values and prints them in sorted order <sil=0.963> .PERIOD Each time you run it <sil=0.538> ,COMMA you will get the same values <sil=0.988> .PERIOD If you would like to change the values that are sorted <sil=0.591> ,COMMA change the value of rand_seed each time you run the program <sil=0.916> .PERIOD The only easy way to truly understand what this code is doing is to execute it “by hand <sil=0.991> .PERIOD ” That is <sil=0.534> ,COMMA assume MAX is 4 to make it a little more manageable <sil=0.466> ,COMMA take out a sheet of paper and pretend you are the computer <sil=0.975> .PERIOD Draw the array on your paper and put four random <sil=0.435> ,COMMA unsorted values into the array <sil=0.908> .PERIOD Execute each line of the sorting section of the code and draw out exactly what happens <sil=0.951> .PERIOD You will find that <sil=0.582> ,COMMA each time through the inner loop <sil=0.558> ,COMMA the larger values in the array are pushed toward the bottom of the array and the smaller values bubble up toward the top <sil=0.955> .PERIOD Variable Types
There are three standard variable types in C:
• Integer: int
• Floating point: float
• Character: char
An int is a 4-byte integer value <sil=0.979> .PERIOD A float is a 4-byte floating point value <sil=0.990> .PERIOD A char is a 1-byte single character (like “a” or “3”) <sil=0.922> .PERIOD A string is declared as an array of characters <sil=0.932> .PERIOD There are a number of derivative types:
• double (8-byte floating point value)
• short (2-byte integer)
• unsigned short or unsigned int (positive integers <sil=0.403> ,COMMA no sign bit)
Typecasting
C allows you to perform type conversions on the fly <sil=0.990> .PERIOD You do this especially often when using pointers <sil=0.934> .PERIOD Typecasting also occurs during the assignment operation for certain types <sil=0.946> .PERIOD For example <sil=0.598> ,COMMA in the code above <sil=0.419> ,COMMA the integer value was automatically converted to a float <sil=0.935> .PERIOD You do typecasting in C by placing the type name in parentheses and putting it in front of the value you want to change <sil=0.996> .PERIOD Thus <sil=0.422> ,COMMA in the above code <sil=0.643> ,COMMA replacing the line a = 10/3 <sil=0.451> ;SEMICOLON with a = (float)10/3 <sil=0.327> ;SEMICOLON produces 3 <sil=0.978> .PERIOD 33333 as the result because 10 is converted to a floating point value before the division <sil=0.982> .PERIOD Typedef
You declare named <sil=0.393> ,COMMA user-defined types in C with the typedef statement <sil=0.917> .PERIOD The following example shows a type that appears often in C code:
# define TRUE 1
# define FALSE 0
typedef int boolean <sil=0.570> ;SEMICOLON int main ( v oi d )
{
boolean b <sil=0.602> ;SEMICOLON b = FALSE <sil=0.586> ;SEMICOLON Blah blah blah
}
This code allows you to declare Boolean types in C programs <sil=0.920> .PERIOD If you do not like the word “float” for real numbers <sil=0.440> ,COMMA you can say:
typedef float real <sil=0.330> ;SEMICOLON and then later say:
real r1 <sil=0.373> ,COMMA r2 <sil=0.312> ,COMMA r3 <sil=0.479> ;SEMICOLON You can place typedef statements anywhere in a C program as long as they come prior to their first use in the code <sil=0.956> .PERIOD Operators
The operators in C are similar to the operators in most languages:
+ − addition
− − subtraction
/ − division
∗ − multiplication
\% − mod
The / operator performs integer division if both operands are integers <sil=0.360> ,COMMA and performs floating point division otherwise <sil=0.956> .PERIOD For example:
int main ( v oi d )
{
float a <sil=0.309> ;SEMICOLON a = 10 / 3 <sil=0.395> ;SEMICOLON printf ("% f \ n " <sil=0.447> ,COMMA a ) <sil=0.547> ;SEMICOLON return 0 <sil=0.326> ;SEMICOLON }
This code prints out a floating point value since a is declared as type float <sil=0.643> ,COMMA but a will be 3 <sil=0.934> .PERIOD 0 because the code performed an integer division <sil=0.952> .PERIOD Operator precedence <sil=0.438> ,COMMA I
Operator precedence in C is also similar to that in most other languages <sil=0.925> .PERIOD Division
and multiplication occur first <sil=0.381> ,COMMA then addition and subtraction <sil=0.950> .PERIOD The result of the
calculation 5+3*4 is 17 <sil=0.308> ,COMMA not 32 <sil=0.646> ,COMMA because the * operator has higher precedence
than + in C <sil=0.913> .PERIOD You can use parentheses to change the normal precedence ordering:
(5+3)*4 is 32 <sil=0.934> .PERIOD The 5+3 is evaluated first because it is in parentheses <sil=0.934> .PERIOD We’ll get
into precedence later – it becomes somewhat complicated in C once pointers are
introduced <sil=0.974> .PERIOD Incrementing
Long Way Short Way
i = i + 1 <sil=0.643> ;SEMICOLON i ++ <sil=0.491> ;SEMICOLON i = i − 1 <sil=0.497> ;SEMICOLON i −− <sil=0.633> ;SEMICOLON i = i + 3 <sil=0.528> ;SEMICOLON i += 3 <sil=0.528> ;SEMICOLON i = i ∗ j <sil=0.573> ;SEMICOLON i ∗= j <sil=0.538> ;SEMICOLON Programming exercise
• Try out different pieces of code to investigate typecasting and precedence <sil=0.977> .PERIOD Try out int <sil=0.530> ,COMMA char <sil=0.473> ,COMMA float <sil=0.604> ,COMMA and so on <sil=0.933> .PERIOD • Create an array of records and write some code to sort that array on one
integer field <sil=0.966> .PERIOD Functions
Most languages allow you to create functions of some sort <sil=0.922> .PERIOD Functions let you chop up a long program into named sections so that the sections can be reused throughout the program <sil=0.927> .PERIOD Functions accept parameters and return a result <sil=0.967> .PERIOD C functions can accept an unlimited number of parameters <sil=0.987> .PERIOD In general <sil=0.393> ,COMMA C does not care in what order you put your functions in the program <sil=0.622> ,COMMA so long as a the function name is known to the compiler before it is called <sil=0.903> .PERIOD We have already talked a little about functions <sil=0.941> .PERIOD The rand function seen previously is about as simple as a function can get <sil=0.965> .PERIOD It accepts no parameters and returns an integer result:
int rand ( void )
/ ∗
∗ from K&R − produces an integer random number
∗ between 0 and 32767 <sil=1.000> .PERIOD ∗ /
{
rand_seed = rand_seed ∗ 1103515245 + 12345 <sil=0.537> ;SEMICOLON return ( unsigned int ) ( rand_seed / 65536 ) % 32768 <sil=0.599> ;SEMICOLON }
The int rand() line declares the function rand to the rest of the program and specifies that rand will accept no parameters and return an integer result <sil=0.996> .PERIOD This function has no local variables <sil=0.646> ,COMMA but if it needed locals <sil=0.454> ,COMMA they would go right below the opening { (C allows you to declare variables after any { – they exist until the program reaches the matching } and then they disappear <sil=0.998> .PERIOD A function’s local variables therefore vanish as soon as the matching } is reached in the function <sil=0.937> .PERIOD While they exist <sil=0.598> ,COMMA local variables live on the system stack <sil=0.988> .PERIOD ) Note that there is no <sil=0.371> ;SEMICOLON after the () in the first line <sil=0.985> .PERIOD If you accidentally put one in <sil=0.608> ,COMMA you will get a huge cascade of error messages from the compiler that make no sense <sil=0.925> .PERIOD Also note that even though there are no parameters <sil=0.579> ,COMMA you must use the () <sil=0.937> .PERIOD They tell the compiler that you are declaring a function rather than simply declaring an int <sil=0.980> .PERIOD The return statement is important to any function that returns a result <sil=0.996> .PERIOD It specifies the value that the function will return and causes the function to exit immediately <sil=0.904> .PERIOD This means that you can place multiple return statements in the function to give it multiple exit points <sil=0.953> .PERIOD If you do not place a return statement in a function <sil=0.407> ,COMMA the function returns when it reaches } and returns a random value (many compilers will warn you if you fail to return a specific value) <sil=0.981> .PERIOD In C <sil=0.451> ,COMMA a function can return values of any type: int <sil=0.616> ,COMMA float <sil=0.467> ,COMMA char <sil=0.502> ,COMMA struct <sil=0.540> ,COMMA etc <sil=0.923> .PERIOD There are several correct ways to call the rand function <sil=0.958> .PERIOD For example: x=rand() <sil=0.497> ;SEMICOLON  <sil=0.325> .PERIOD The variable x is assigned the value returned by rand in this statement <sil=0.971> .PERIOD Note that you must use () in the function call <sil=0.458> ,COMMA even though no parameter is passed <sil=0.985> .PERIOD Otherwise <sil=0.568> ,COMMA x is given the memory address of the rand function <sil=0.368> ,COMMA which is generally not what you intended <sil=0.929> .PERIOD You might also call rand this way:
if ( rand () > 100 )
Or this way:
rand () <sil=0.457> ;SEMICOLON In the latter case <sil=0.562> ,COMMA the function is called but the value returned by rand is discarded <sil=0.949> .PERIOD You may never want to do this with rand <sil=0.468> ,COMMA but many functions return some kind of error code through the function name <sil=0.359> ,COMMA and if you are not concerned with the error code (for example <sil=0.488> ,COMMA because you know that an error is impossible) you can discard it in this way Functions can use a void return type if you intend to return nothing <sil=0.975> .PERIOD For example:
void print_header ( )
{
printf ( " Program Number 1 \ n " ) <sil=0.466> ;SEMICOLON printf ( " by Marshall Brain \ n " ) <sil=0.474> ;SEMICOLON printf( "  version1 <sil=0.903> .PERIOD 0 <sil=0.538> ,COMMA released 12 / 26 / 91 \ n " ) <sil=0.477> ;SEMICOLON }
This function returns no value <sil=0.912> .PERIOD You can call it with the following statement:
print _header ( ) <sil=0.343> ;SEMICOLON You must include () in the call <sil=0.963> .PERIOD If you do not <sil=0.565> ,COMMA the function is not called <sil=0.379> ,COMMA even though it will compile correctly on many systems <sil=0.911> .PERIOD C functions can accept parameters of any type <sil=0.976> .PERIOD For example:
int fact ( int i )
{
int j <sil=0.451> ,COMMA k <sil=0.486> ;SEMICOLON j = 1 <sil=0.558> ;SEMICOLON for ( k = 2 <sil=0.398> ;SEMICOLON k <= i <sil=0.396> ;SEMICOLON k ++)
{
j = j ∗k <sil=0.613> ;SEMICOLON }
Return j <sil=0.488> ;SEMICOLON }
returns the factorial of i <sil=0.602> ,COMMA which is passed in as an integer parameter <sil=0.913> .PERIOD Separate multiple parameters with commas:
int add ( i n t i <sil=0.599> ,COMMA i n t j )
{
return i + j <sil=0.367> ;SEMICOLON }
C has evolved over the years <sil=0.940> .PERIOD You will sometimes see functions such as add
written in the “old style <sil=0.502> ,COMMA ” as shown below:
int add ( i <sil=0.446> ,COMMA j )
int i <sil=0.559> ;SEMICOLON int j <sil=0.435> ;SEMICOLON {
return i + j <sil=0.410> ;SEMICOLON }
It is important to be able to read code written in the older style <sil=0.980> .PERIOD There is no difference in the way it executes <sil=0.600> ;SEMICOLON it is just a different notation <sil=0.965> .PERIOD You should use the “new style <sil=0.505> ,COMMA ” (known as ANSI C) with the type declared as part of the parameter list <sil=0.518> ,COMMA unless you know you will be shipping the code to someone who has access only to an “old style” (non-ANSI) compiler <sil=0.947> .PERIOD Programming exercise
• Go back to the bubble sort example presented earlier and create a function
for the bubble sort <sil=0.935> .PERIOD • Go back to earlier programs and create a function to get input from the user rather than taking the input in the main function <sil=0.990> .PERIOD Function prototypes
It is considered good form to use function prototypes for all functions in your program <sil=0.998> .PERIOD A prototype declares the function name <sil=0.492> ,COMMA its parameters <sil=0.510> ,COMMA and its return type to the rest of the program prior to the function’s actual declaration <sil=0.907> .PERIOD To understand why function prototypes are useful <sil=0.513> ,COMMA enter the following code and run it:
# include < stdio <sil=0.966> .PERIOD h>
int main ( v oi d )
{
printf ("% d \ n " <sil=0.509> ,COMMA add ( 3 ) ) <sil=0.548> ;SEMICOLON return 0 <sil=0.619> ;SEMICOLON }
int add ( int i <sil=0.362> ,COMMA int j )
{
return i + j <sil=0.643> ;SEMICOLON }
This code compiles on many compilers without giving you a warning <sil=0.559> ,COMMA even though add expects two parameters but receives only one <sil=0.976> .PERIOD It works because many C compilers do not check for parameter matching either in type or count <sil=0.941> .PERIOD You can waste an enormous amount of time debugging code in which you are simply passing one too many or too few parameters by mistake <sil=0.904> .PERIOD The above code compiles properly <sil=0.531> ,COMMA but it produces the wrong answer <sil=0.962> .PERIOD To solve this problem <sil=0.474> ,COMMA C lets you place function prototypes at the beginning of (actually <sil=0.425> ,COMMA anywhere in) a program <sil=0.926> .PERIOD If you do so <sil=0.346> ,COMMA C checks the types and counts of all parameter lists <sil=0.915> .PERIOD Try compiling the following:
# include <stdio <sil=0.957> .PERIOD h>
int add ( int <sil=0.560> ,COMMA int ) <sil=0.545> ;SEMICOLON / ∗ function prototype for add ∗ /
int main ( void )
{
printf ("% d \ n " <sil=0.368> ,COMMA add ( 3 ) ) <sil=0.517> ;SEMICOLON return 0 <sil=0.591> ;SEMICOLON }
int add ( int i <sil=0.433> ,COMMA int j )
{
return i + j <sil=0.605> ;SEMICOLON }
The prototype causes the compiler to flag an error on the printf statement <sil=0.956> .PERIOD Place one prototype for each function at the beginning of your program <sil=0.970> .PERIOD They can save you a great deal of debugging time <sil=0.399> ,COMMA and they also solve the problem you get when you compile with functions that you use before they are declared <sil=0.997> .PERIOD For example <sil=0.456> ,COMMA the following code will not compile:
# include <stdio <sil=0.950> .PERIOD h>
int main ( void )
{
print f ("% d \ n " <sil=0.553> ,COMMA add ( 3 ) ) <sil=0.349> ;SEMICOLON return 0 <sil=0.424> ;SEMICOLON }
float add ( int i <sil=0.631> ,COMMA int j )
{
return i + j <sil=0.352> ;SEMICOLON }
Why <sil=0.360> ,COMMA you might ask <sil=0.553> ,COMMA will it compile when add returns an int but not when it returns a float <sil=0.899> ?QUESTIONMARK Because older C compilers default to an int return value <sil=0.929> .PERIOD Using a prototype will solve this problem <sil=0.932> .PERIOD “Old style” (non-ANSI) compilers allow prototypes <sil=0.528> ,COMMA but the parameter list for the prototype must be empty <sil=0.993> .PERIOD Old style compilers do no error checking on parameter lists <sil=0.957> .PERIOD Structures
Structures in C allow you to group variable into a package <sil=0.938> .PERIOD Here’s an example:
struct rec
{
int a <sil=0.427> ,COMMA b <sil=0.483> ,COMMA c <sil=0.563> ;SEMICOLON float d <sil=0.455> ,COMMA e <sil=0.511> ,COMMA f <sil=0.493> ;SEMICOLON } <sil=0.307> ;SEMICOLON struct rec <sil=0.503> ;SEMICOLON As shown here <sil=0.569> ,COMMA whenever you want to declare structures of the type rec <sil=0.328> ,COMMA you have
to say struct rec <sil=0.957> .PERIOD This line is very easy to forget <sil=0.442> ,COMMA and you get many compiler
errors because you absent-mindedly leave out the struct <sil=0.979> .PERIOD You can compress the
code into the form:
struct rec
{
int a <sil=0.515> ,COMMA b <sil=0.561> ,COMMA c <sil=0.338> ;SEMICOLON float d <sil=0.596> ,COMMA e <sil=0.598> ,COMMA f <sil=0.365> ;SEMICOLON } r <sil=0.612> ;SEMICOLON where the type declaration for rec and the variable r are declared in the same
statement <sil=0.929> .PERIOD Or you can create a typedef statement for the structure name <sil=0.961> .PERIOD For
example <sil=0.402> ,COMMA if you do not like saying struct rec r every time you want to declare a
record <sil=0.326> ,COMMA you can say:
typedef structrec rec_type <sil=0.493> ;SEMICOLON and then declare records of type rec_type by saying:
rec_typer <sil=0.421> ;SEMICOLON You access fields of structure using a period <sil=0.468> ,COMMA for example <sil=0.531> ,COMMA r <sil=0.998> .PERIOD a = 5 <sil=0.368> ;SEMICOLON  <sil=0.557> .PERIOD Libraries
Libraries are very important in C because the C language supports only the most basic features that it needs <sil=0.983> .PERIOD C does not even contain I/O functions to read from the keyboard and write to the screen <sil=0.946> .PERIOD Anything that extends beyond the basic language must be written by a programmer <sil=0.984> .PERIOD The resulting chunks of code are often placed in libraries to make them easily reusable <sil=0.907> .PERIOD We have seen the standard I/O <sil=0.558> ,COMMA or stdio <sil=0.636> ,COMMA library already: Standard libraries exist for standard I/O <sil=0.642> ,COMMA math functions <sil=0.594> ,COMMA string handling <sil=0.410> ,COMMA time manipulation <sil=0.551> ,COMMA and so on <sil=0.959> .PERIOD You can use libraries in your own
programs to split up your programs into modules <sil=0.978> .PERIOD This makes them easier to understand <sil=0.609> ,COMMA test <sil=0.439> ,COMMA and debug <sil=0.356> ,COMMA and also makes it possible to reuse code from other programs that you write <sil=0.977> .PERIOD You can create your own libraries easily <sil=0.926> .PERIOD As an example <sil=0.380> ,COMMA we will take some code from a previous article in this series and make a library out of two of its functions <sil=0.919> .PERIOD Here’s the code we will start with:
#include <stdio <sil=0.950> .PERIOD h>
#define MAX 10
int a [MAX] <sil=0.538> ;SEMICOLON int rand_seed = 10 <sil=0.463> ;SEMICOLON int rand ( void )
/ ∗
∗ from K&R − p r o d u c e s an i n t e g e r random number
∗ between 0 and 32767 <sil=0.970> .PERIOD ∗ /
{
rand_seed =  rand_seed ∗ 1103515245 +12345 <sil=0.499> ;SEMICOLON return ( unsigned int ) ( rand_seed / 65536 ) % 32768 <sil=0.378> ;SEMICOLON }
int main ( void )
{
int i <sil=0.509> ,COMMA t <sil=0.314> ,COMMA x <sil=0.339> ,COMMA y <sil=0.418> ;SEMICOLON / ∗ fill array ∗ /
for ( i = 0 <sil=0.616> ;SEMICOLON i < MAX <sil=0.607> ;SEMICOLON i ++)
{
a [ i ] = rand ( ) <sil=0.562> ;SEMICOLON printf ("% d \ n " <sil=0.337> ,COMMA a [ i ] ) <sil=0.565> ;SEMICOLON }
/ ∗ bubble sort the array ∗ /
f o r ( x = 0 <sil=0.629> ;SEMICOLON x < MAX−1 <sil=0.622> ;SEMICOLON x ++)
{
for ( y = 0 <sil=0.333> ;SEMICOLON y < MAX−x−1 <sil=0.413> ;SEMICOLON y ++)
{
if ( a [ y ] > a [ y + 1 ] )
{
t = a [ y ] <sil=0.582> ;SEMICOLON a [ y ] = a [ y + 1 ] <sil=0.504> ;SEMICOLON a [ y +1 ] = t <sil=0.585> ;SEMICOLON }
}
}
/ ∗ print sorted array ∗ /
printf ("−−−−−−−−−−−−−−−−−−−−\n " ) <sil=0.395> ;SEMICOLON for ( i = 0 <sil=0.444> ;SEMICOLON i < MAX <sil=0.553> ;SEMICOLON i ++)
{
printf ("% d \ n " <sil=0.650> ,COMMA a [ i ] ) <sil=0.342> ;SEMICOLON }
return 0 <sil=0.498> ;SEMICOLON }
This code fills an array with random numbers <sil=0.501> ,COMMA sorts them using a bubble sort <sil=0.365> ,COMMA and
then displays the sorted list <sil=0.998> .PERIOD Take the bubble sort code <sil=0.346> ,COMMA and use what you learned in the previous article to make a function from it <sil=0.957> .PERIOD Since both the array a and the constant MAX are known globally <sil=0.545> ,COMMA the function you create needs no parameters <sil=0.585> ,COMMA nor does it need to return a result <sil=0.932> .PERIOD However <sil=0.641> ,COMMA you should use local variables for x <sil=0.355> ,COMMA y <sil=0.363> ,COMMA and t <sil=0.999> .PERIOD Once you have tested the function to make sure it is working <sil=0.596> ,COMMA pass in the number
of elements as a parameter rather than using MAX:
#include<stdio <sil=0.930> .PERIOD h>
# define MAX 10
int a [MAX] <sil=0.415> ;SEMICOLON int rand_seed = 10 <sil=0.303> ;SEMICOLON / ∗
∗ from K&R − produces an integer random number
∗ between 0 and 32767 <sil=0.938> .PERIOD ∗ /
int rand ( void )
{
rand_seed = rand_seed ∗ 1103515245 + 12345 <sil=0.458> ;SEMICOLON return ( unsigned int ) (rand_seed  / 65536 ) % 32768 <sil=0.448> ;SEMICOLON }
void bubble_sort ( int m)
{
int x <sil=0.501> ,COMMA y <sil=0.517> ,COMMA t <sil=0.387> ;SEMICOLON for ( x = 0 <sil=0.546> ;SEMICOLON x < m−1 <sil=0.536> ;SEMICOLON x ++)
{
for ( y = 0 <sil=0.608> ;SEMICOLON y < m−x−1 <sil=0.349> ;SEMICOLON y ++)
{
i f ( a [ y ] > a [ y + 1 ] )
{
t = a [ y ] <sil=0.607> ;SEMICOLON a [ y ] = a [ y + 1 ] <sil=0.647> ;SEMICOLON a [ y +1 ] = t <sil=0.515> ;SEMICOLON }
}
}
}
int main ( v oi d )
{
int i <sil=0.580> ,COMMA t <sil=0.546> ,COMMA x <sil=0.509> ,COMMA y <sil=0.386> ;SEMICOLON / ∗ fill array ∗ /
for ( i = 0 <sil=0.352> ;SEMICOLON i < MAX <sil=0.531> ;SEMICOLON i ++)
{
a [ i ] = rand ( ) <sil=0.312> ;SEMICOLON printf ("% d \ n " <sil=0.634> ,COMMA a [ i ] ) <sil=0.531> ;SEMICOLON }
bubble_sort (MAX) <sil=0.646> ;SEMICOLON / ∗ print sorted array ∗ /
printf ("−−−−−−−−−−−−−−−−−−−−\n " ) <sil=0.324> ;SEMICOLON for ( i = 0 <sil=0.574> ;SEMICOLON i < MAX <sil=0.585> ;SEMICOLON i ++)
{
printf ("% d \ n " <sil=0.434> ,COMMA a [ i ] ) <sil=0.546> ;SEMICOLON }
return 0 <sil=0.630> ;SEMICOLON }
You can also generalize the bubble_sort function even more by passing in a as a parameter:
bubble_sort ( int m <sil=0.353> ,COMMA int a [ ] )
This line says <sil=0.381> ,COMMA “Accept the integer array a of any size as a parameter <sil=0.955> .PERIOD ” Nothing in the body of the bubble_sort function needs to change <sil=0.992> .PERIOD To call bubble_sort <sil=0.474> ,COMMA change the call to:
bubble_sort (MAX <sil=0.592> ,COMMA a ) <sil=0.304> ;SEMICOLON Note that & a has not been used in the function call even though the sort will change a <sil=0.974> .PERIOD The reason for this will become clear once you understand pointers <sil=0.958> .PERIOD Making a library
Since the rand and bubble_sort functions in the previous program are useful <sil=0.474> ,COMMA you
will probably want to reuse them in other programs you write <sil=0.946> .PERIOD You can put them into a utility library to make their reuse easier <sil=0.906> .PERIOD Every library consists of two parts: a header file and the actual code file <sil=0.918> .PERIOD The header file <sil=0.307> ,COMMA normally denoted by a <sil=0.928> .PERIOD h suffix <sil=0.491> ,COMMA contains information about the library that programs using it need to know <sil=0.984> .PERIOD In general <sil=0.351> ,COMMA the header file contains constants and types <sil=0.635> ,COMMA along with prototypes for functions available in the library <sil=0.937> .PERIOD Enter the following header file and save it to a file named util <sil=0.914> .PERIOD h <sil=0.949> .PERIOD / ∗ util <sil=0.964> .PERIOD h ∗ /
extern int rand ( ) <sil=0.449> ;SEMICOLON Extern void bubble_sort ( int <sil=0.578> ,COMMA int [ ] ) <sil=0.414> ;SEMICOLON These two lines are function prototypes <sil=0.978> .PERIOD The word “extern” in C represents functions that will be linked in later <sil=0.939> .PERIOD Enter the following code into a file named util <sil=0.947> .PERIOD c <sil=0.919> .PERIOD / ∗ util <sil=0.959> .PERIOD c ∗ /
#include "util <sil=0.902> .PERIOD h"
intrand_ seed = 10 <sil=0.446> ;SEMICOLON / ∗
∗ from K&R − produces an integer random number
∗ between 0 and 32767 <sil=0.935> .PERIOD ∗ /
int rand ( void )
{
rand_seed = rand_seed ∗ 1103515245 + 12345 <sil=0.470> ;SEMICOLON return ( unsigned int ) ( rand_seed / 65536 ) % 32768 <sil=0.361> ;SEMICOLON }
void bubble_sort ( int m <sil=0.633> ,COMMA int a [ ] )
{
int x <sil=0.372> ,COMMA y <sil=0.462> ,COMMA t <sil=0.304> ;SEMICOLON for ( x = 0 <sil=0.590> ;SEMICOLON x < m−1 <sil=0.487> ;SEMICOLON x ++)
{
for ( y = 0 <sil=0.624> ;SEMICOLON y < m−x−1 <sil=0.308> ;SEMICOLON y ++)
{
if ( a [ y ] > a [ y + 1 ] )
{
t = a [ y ] <sil=0.383> ;SEMICOLON a [ y ] = a [ y + 1 ] <sil=0.550> ;SEMICOLON a [ y +1 ] = t <sil=0.569> ;SEMICOLON }
}
}
}
Note that the file includes its own header file (util <sil=0.952> .PERIOD h) and that it uses quotes instead of the symbols <and> <sil=0.331> ,COMMA which are used only for system libraries <sil=0.915> .PERIOD As you can see <sil=0.367> ,COMMA this looks like normal C code <sil=0.948> .PERIOD Note that the variable rand_seed <sil=0.444> ,COMMA because it is not in the header file <sil=0.430> ,COMMA cannot be seen or modified by a program using this library <sil=0.913> .PERIOD This is called information hiding <sil=0.909> .PERIOD Adding the word static in front of int enforces the hiding completely <sil=0.905> .PERIOD Enter the following main program in a file named main <sil=0.938> .PERIOD c <sil=0.919> .PERIOD # include < stdio <sil=0.901> .PERIOD h>
# include " util <sil=0.976> .PERIOD h "
# define MAX 10
int a [MAX] <sil=0.380> ;SEMICOLON int main ( v oi d )
{
int i <sil=0.639> ,COMMA t <sil=0.303> ,COMMA x <sil=0.526> ,COMMA y <sil=0.373> ;SEMICOLON / ∗ fill array ∗ /
for ( i = 0 <sil=0.611> ;SEMICOLON i < MAX <sil=0.626> ;SEMICOLON i ++)
{
a [ i ] = r a n d ( ) <sil=0.645> ;SEMICOLON printf ("%d \ n " <sil=0.361> ,COMMA a [ i ] ) <sil=0.520> ;SEMICOLON }
bubble_sort (MAX <sil=0.415> ,COMMA a ) <sil=0.573> ;SEMICOLON / ∗ print sorted array ∗ /
printf ("−−−−−−−−−−−−−−−−−−−−\n " ) <sil=0.356> ;SEMICOLON f or ( i = 0 <sil=0.529> ;SEMICOLON i < MAX <sil=0.471> ;SEMICOLON i ++)
{
printf ("%d \ n " <sil=0.414> ,COMMA a [ i ] ) <sil=0.556> ;SEMICOLON }
return 0 <sil=0.443> ;SEMICOLON }
This code includes the utility library <sil=0.927> .PERIOD The main benefit of using a library is that the code in the main program is much shorter <sil=1.000> .PERIOD Compiling and running
To compile the library <sil=0.400> ,COMMA type the following at the command line (assuming you are using UNIX) (replace gcc with cc if your system uses cc):
gcc −c −gutil <sil=0.935> .PERIOD c
The -c causes the compiler to produce an object file for the library <sil=0.903> .PERIOD The object file contains the library’s machine code <sil=0.930> .PERIOD It cannot be executed until it is linked to a program file that contains a main function <sil=0.915> .PERIOD The machine code resides in a separate file named util <sil=0.995> .PERIOD o <sil=0.999> .PERIOD To compile the main program <sil=0.618> ,COMMA type the following:
gcc −c −g main <sil=0.901> .PERIOD c
This line creates a file named main <sil=0.988> .PERIOD o that contains the machine code for the main program <sil=0.996> .PERIOD To create the final executable that contains the machine code for the entire program <sil=0.364> ,COMMA link the two object files by typing the following:
gcc −o main main <sil=0.922> .PERIOD outil <sil=0.995> .PERIOD o
This links main <sil=0.908> .PERIOD o and util <sil=0.933> .PERIOD o to form an executable named main <sil=0.959> .PERIOD To run it <sil=0.552> ,COMMA type main <sil=0.960> .PERIOD Makefiles
It can be cumbersome to type all of the gcc lines over and over again <sil=0.524> ,COMMA especially
if you are making a lot of changes to the code and it has several libraries <sil=0.966> .PERIOD The make facility solves this problem <sil=0.906> .PERIOD You can use the following makefile to replace the compilation sequence above:
main : main <sil=0.980> .PERIOD outil <sil=0.962> .PERIOD o
gcc −o main main <sil=0.982> .PERIOD outil <sil=0.912> .PERIOD o
main <sil=0.919> .PERIOD o : main <sil=0.995> .PERIOD cutil <sil=0.915> .PERIOD h
gcc −c −g main <sil=0.951> .PERIOD c
util <sil=0.961> .PERIOD o :util <sil=0.987> .PERIOD cutil <sil=0.959> .PERIOD h
gcc −c −gutil <sil=0.906> .PERIOD c
Enter this into a file named makefile <sil=0.397> ,COMMA and type maketo build the executable <sil=0.969> .PERIOD Note that you must precede all gcc lines with a tab <sil=0.928> .PERIOD (Eight spaces will not suffice – it must be a tab <sil=0.986> .PERIOD All other lines must be flush left <sil=0.991> .PERIOD )
This makefile contains two types of lines <sil=0.946> .PERIOD The lines appearing flush left are dependency lines <sil=0.978> .PERIOD The lines preceded by a tab are executable lines <sil=0.419> ,COMMA which can contain any valid UNIX command <sil=0.963> .PERIOD A dependency line says that some file is dependent on some other set of files <sil=0.925> .PERIOD For example <sil=0.437> ,COMMA main <sil=0.924> .PERIOD o: main <sil=0.966> .PERIOD c util <sil=0.925> .PERIOD h says that the file main <sil=0.954> .PERIOD o is dependent on the files main <sil=0.950> .PERIOD c and util <sil=0.944> .PERIOD h <sil=0.973> .PERIOD If either of these two files changes <sil=0.585> ,COMMA the following executable line(s) should be executed to recreate main <sil=0.968> .PERIOD o <sil=0.914> .PERIOD Note that the final executable produced by the whole makefile is main <sil=0.329> ,COMMA on line 1 in the makefile <sil=0.988> .PERIOD The final result of the makefile should always go on line 1 <sil=0.534> ,COMMA which in this makefile says that the file main is dependent on main <sil=0.984> .PERIOD o and util <sil=0.928> .PERIOD o <sil=0.939> .PERIOD If either
of these changes <sil=0.519> ,COMMA execute the line gcc -o main main <sil=0.912> .PERIOD o util <sil=0.922> .PERIOD o to recreate main <sil=0.904> .PERIOD It is possible to put multiple lines to be executed below a dependency line – they must all start with a tab <sil=0.928> .PERIOD A large program may have several libraries and a main program <sil=0.933> .PERIOD The makefile automatically recompiles everything that needs to be recompiled because of a change <sil=0.988> .PERIOD If you are not working on a UNIX machine <sil=0.319> ,COMMA your compiler almost certainly has functionality equivalent to makefiles <sil=0.927> .PERIOD Read the documentation for your compiler to learn how to use it <sil=0.988> .PERIOD Now you understand why you have been including stdio <sil=0.911> .PERIOD h in earlier programs <sil=0.970> .PERIOD It is simply a standard library that someone created long ago and made available to other programmers to make their lives easier <sil=0.926> .PERIOD Pointers
Pointers are used everywhere in C <sil=0.595> ,COMMA so if you want to use the C language fully you have to have a very good understanding of pointers <sil=0.929> .PERIOD They have to become comfortable for you <sil=0.986> .PERIOD The goal of this section and the next several that follow is to help you build a complete understanding of pointers and how C uses them <sil=0.957> .PERIOD For most people it takes a little time and some practice to become fully comfortable with pointers <sil=0.591> ,COMMA but once you master them you are a full-fledged C programmer <sil=0.903> .PERIOD C uses pointers in three different ways:
• C uses pointers to create dynamic data structures – data structures built up from blocks of memory allocated from the heap at run-time <sil=0.986> .PERIOD • C uses pointers to handle variable parameters passed to functions <sil=0.965> .PERIOD • Pointers in C provide an alternative way to access information stored in arrays <sil=0.986> .PERIOD Pointer techniques are especially valuable when you work with strings <sil=0.913> .PERIOD There is an intimate link between arrays and pointers in C <sil=0.953> .PERIOD In some cases <sil=0.624> ,COMMA C programmers also use pointers because they make the code slightly more efficient <sil=0.948> .PERIOD What you will find is that <sil=0.365> ,COMMA once you are completely comfortable with pointers <sil=0.372> ,COMMA you tend to use them all the time <sil=0.969> .PERIOD We will start this discussion with a basic introduction to pointers and the concepts surrounding pointers <sil=0.438> ,COMMA and then move on to the three techniques described above <sil=0.973> .PERIOD Especially on this article <sil=0.463> ,COMMA you will want to read things twice <sil=0.938> .PERIOD The first time through you can learn all the concepts <sil=0.941> .PERIOD The second time through you can work on binding
the concepts together into an integrated whole in your mind <sil=0.969> .PERIOD After you make your way through the material the second time <sil=0.620> ,COMMA it will make a lot of sense <sil=0.942> .PERIOD Pointers: why <sil=0.963> ?QUESTIONMARK Imagine that you would like to create a text editor – a program that lets you edit normal ASCII text files <sil=0.607> ,COMMA like “vim” on UNIX or “Notepad” on Windows <sil=0.939> .PERIOD A text editor is a fairly common thing for someone to create because <sil=0.558> ,COMMA if you think about it <sil=0.394> ,COMMA a text editor is probably a programmer’s most commonly used piece of software <sil=0.977> .PERIOD The text editor is a programmer’s intimate link to the computer – it is where you enter all of your thoughts and then manipulate them <sil=0.924> .PERIOD Obviously <sil=0.503> ,COMMA with
anything you use that often and work with that closely <sil=0.374> ,COMMA you want it to be just right <sil=0.963> .PERIOD Therefore many programmers create their own editors and customize them to suit their individual working styles and preferences <sil=0.925> .PERIOD So one day you sit down to begin working on your editor <sil=0.942> .PERIOD After thinking about the features you want <sil=0.585> ,COMMA you begin to think about the “data structure” for your editor <sil=0.901> .PERIOD That is <sil=0.550> ,COMMA you begin thinking about how you will store the document you are editing in memory so that you can manipulate it in your program <sil=0.986> .PERIOD What you need is a way to store the information you are entering in a form that can be manipulated quickly and easily <sil=0.931> .PERIOD You believe that one way to do that is to organize the data on the basis of lines of characters <sil=0.959> .PERIOD Given what we have discussed so far <sil=0.582> ,COMMA the only thing you have at your disposal at this point is an array <sil=0.926> .PERIOD You think <sil=0.318> ,COMMA “Well <sil=0.425> ,COMMA a typical line is 80 characters long <sil=0.515> ,COMMA and a typical file is no more than 1 <sil=0.384> ,COMMA 000 lines long <sil=0.936> .PERIOD ” You therefore declare a two-dimensional array <sil=0.544> ,COMMA like this:
char doc [ 1000 ] [ 80 ] <sil=0.355> ;SEMICOLON This declaration requests an array of 1 <sil=0.384> ,COMMA 000 80-character lines <sil=0.907> .PERIOD This array has a total size of 80 <sil=0.338> ,COMMA 000 characters <sil=0.938> .PERIOD As you think about your editor and its data structure some more <sil=0.331> ,COMMA however <sil=0.974> ,COMMA you might realize three things:
• Some documents are long lists <sil=0.907> .PERIOD Every line is short <sil=0.301> ,COMMA but there are thousands of lines <sil=0.937> .PERIOD Some special-purpose text files have very long lines <sil=0.985> .PERIOD For example <sil=0.420> ,COMMA a certain data file might have lines containing 542 characters <sil=0.623> ,COMMA with each character representing the amino acid pairs in segments of DNA <sil=0.980> .PERIOD • In most modern editors <sil=0.411> ,COMMA you can open multiple files at one time <sil=0.967> .PERIOD Let’s say you set a maximum of 10 open files at once <sil=0.562> ,COMMA a maximum line length of 1 <sil=0.306> ,COMMA 000 characters and a maximum file size of 50 <sil=0.478> ,COMMA 000 lines <sil=0.949> .PERIOD Your declaration now looks like this:
char doc [ 50000 ] [ 1000 ] [ 10 ] <sil=0.387> ;SEMICOLON That doesn’t seem like an unreasonable thing <sil=0.374> ,COMMA until you pull out your calculator <sil=0.484> ,COMMA multiply 50 <sil=0.560> ,COMMA 000 by 1 <sil=0.648> ,COMMA 000 by 10 and realize the array contains 500 million characters <sil=0.930> !EXCLAMATIONMARK Most computers today are going to have a problem with an array that size <sil=0.962> .PERIOD They simply do not have the RAM <sil=0.423> ,COMMA or even the virtual memory space <sil=0.380> ,COMMA to support an array that large <sil=0.959> .PERIOD If users were to try to run three or four copies of this program simultaneously on even the largest multi-user system <sil=0.481> ,COMMA it would put a severe strain on the facilities <sil=0.965> .PERIOD Even if the computer would accept a request for such a large array <sil=0.612> ,COMMA you can see that it is an extravagant waste of space <sil=0.965> .PERIOD It seems strange to declare a 500 million character array when <sil=0.637> ,COMMA in the vast majority of cases <sil=0.315> ,COMMA you will run this editor to look at 100 line files that consume at most 4 <sil=0.591> ,COMMA 000 or 5 <sil=0.629> ,COMMA 000 bytes <sil=0.927> .PERIOD The problem with an array is the fact that you have to declare it to have its maximum size in every dimension from the beginning <sil=0.992> .PERIOD Those maximum sizes often multiply together to form very large numbers <sil=0.952> .PERIOD Also <sil=0.301> ,COMMA if you happen to need to be able to edit an odd file
with a 2 <sil=0.405> ,COMMA 000 character line in it <sil=0.369> ,COMMA you are out of luck <sil=0.983> .PERIOD There is really no way for you to predict and handle the maximum line length of a text file <sil=0.636> ,COMMA because <sil=0.424> ,COMMA technically <sil=0.449> ,COMMA that number is infinite <sil=0.903> .PERIOD Pointers are designed to solve this problem <sil=0.920> .PERIOD With pointers <sil=0.426> ,COMMA you can create dynamic data structures <sil=0.965> .PERIOD Instead of declaring your worst-case memory consumption upfront in an array <sil=0.605> ,COMMA you instead allocate memory from the heap while the program is running <sil=0.925> .PERIOD That way you can use the exact amount of memory a document needs <sil=0.623> ,COMMA with no waste <sil=0.972> .PERIOD In addition <sil=0.319> ,COMMA when you close a document you can return the memory to the heap so that other parts of the program can use it <sil=0.934> .PERIOD With pointers <sil=0.528> ,COMMA memory can be recycled while the program is running <sil=0.904> .PERIOD Pointer Basics
To understand pointers <sil=0.456> ,COMMA it helps to compare them to normal variables <sil=0.938> .PERIOD A “normal variable” is a location in memory that can hold a value <sil=0.922> .PERIOD For example <sil=0.568> ,COMMA when you declare a variable i as an integer <sil=0.486> ,COMMA four bytes of memory are set aside for it <sil=0.921> .PERIOD In your program <sil=0.470> ,COMMA you refer to that location in memory by the name i <sil=0.955> .PERIOD At the machine level that location has a memory address <sil=0.983> .PERIOD The four bytes at that address are known to you <sil=0.351> ,COMMA the programmer <sil=0.632> ,COMMA as i <sil=0.507> ,COMMA and the four bytes can hold one integer value <sil=0.921> .PERIOD A pointer is different <sil=0.978> .PERIOD A pointer is a variable that points to another variable <sil=0.913> .PERIOD This means that a pointer holds the memory address of another variable <sil=0.947> .PERIOD Put another way <sil=0.328> ,COMMA the pointer does not hold a value in the traditional sense <sil=0.598> ;SEMICOLON instead <sil=0.564> ,COMMA it holds the address of another variable <sil=0.962> .PERIOD A pointer “points to” that other variable by holding a copy of its address <sil=0.950> .PERIOD Because a pointer holds an address rather than a value <sil=0.582> ,COMMA it has two parts <sil=0.981> .PERIOD The pointer itself holds the address <sil=0.918> .PERIOD That address points to a value <sil=0.990> .PERIOD There is the pointer and the value pointed to <sil=0.915> .PERIOD This fact can be a little confusing until you get comfortable with it <sil=0.330> ,COMMA but once you get comfortable it becomes extremely powerful <sil=0.992> .PERIOD The following example code shows a typical pointer:
#include <stdio <sil=0.919> .PERIOD h>
int main ( void )
{
int i <sil=0.458> ,COMMA j <sil=0.522> ;SEMICOLON int ∗p <sil=0.314> ;SEMICOLON / ∗ a pointer to an integer ∗ /
p = &i <sil=0.560> ;SEMICOLON ∗p = 5 <sil=0.584> ;SEMICOLON j = i <sil=0.305> ;SEMICOLON printf ("% d %d %d \ n " <sil=0.573> ,COMMA i <sil=0.595> ,COMMA j <sil=0.475> ,COMMA ∗p ) <sil=0.365> ;SEMICOLON return 0 <sil=0.612> ;SEMICOLON }
The first declaration in this program declares two normal integer variables named i and j <sil=0.924> .PERIOD The line int *p declares a pointer named p <sil=0.901> .PERIOD This line asks the compiler to declare a variable p that is a pointer to an integer <sil=0.988> .PERIOD The * indicates that a pointer is being declared rather than a normal variable <sil=0.970> .PERIOD You can create a pointer to anything: a float <sil=0.336> ,COMMA a structure <sil=0.339> ,COMMA a char <sil=0.546> ,COMMA and so on <sil=0.974> .PERIOD Just use a * to indicate that you want a pointer rather than a normal variable <sil=0.958> .PERIOD The line p = &i <sil=0.447> ;SEMICOLON will definitely be new to you <sil=0.988> .PERIOD In C <sil=0.368> ,COMMA & is called the address operator <sil=0.923> .PERIOD The expression &i means <sil=0.577> ,COMMA "The memory address of the variable i <sil=0.907> .PERIOD "
Thus <sil=0.376> ,COMMA the expression p = &i <sil=0.395> ;SEMICOLON means <sil=0.393> ,COMMA "Assign to p the address of i <sil=0.993> .PERIOD " Once you execute this statement <sil=0.511> ,COMMA p “points to” i <sil=0.913> .PERIOD Before you do so <sil=0.616> ,COMMA p contains a random <sil=0.356> ,COMMA unknown address <sil=0.527> ,COMMA and its use will likely cause a segmentation fault or similar program crash <sil=0.981> .PERIOD In the program above the three variables i <sil=0.532> ,COMMA j and p have been declared <sil=0.601> ,COMMA but none of the three has been initialized <sil=0.911> .PERIOD Once p points to i <sil=0.487> ,COMMA the memory location i has two names <sil=0.997> .PERIOD It is still known as i <sil=0.642> ,COMMA but now it is known as *p as well <sil=0.958> .PERIOD This is how C talks about the two parts of a pointer variable: p is the location holding the address <sil=0.432> ,COMMA while *p is the location pointed to by that address <sil=0.933> .PERIOD Therefore *p=5 means that the location pointed to by p should be set to 5 <sil=0.969> .PERIOD Because the location *p is also i <sil=0.505> ,COMMA i also takes on the value 5 <sil=0.952> .PERIOD Consequently <sil=0.302> ,COMMA j = i <sil=0.484> ;SEMICOLON sets j to 5 <sil=0.381> ,COMMA and the printf statement
produces 5 5 5 <sil=0.902> .PERIOD The main feature of a pointer is its two-part nature <sil=0.977> .PERIOD The pointer itself holds an
address <sil=0.909> .PERIOD The pointer also points to a value of a specific type - the value at the address the point holds <sil=0.983> .PERIOD The pointer itself <sil=0.352> ,COMMA in this case <sil=0.361> ,COMMA is p <sil=0.980> .PERIOD The value pointed to is *p <sil=0.957> .PERIOD Pointers: Understanding Memory Addresses The previous discussion becomes a little clearer if you understand how memory addresses work in a computer’s hardware <sil=0.948> .PERIOD All computers have memory <sil=0.567> ,COMMA also known as RAM (Random Access Memory) <sil=0.941> .PERIOD For example <sil=0.463> ,COMMA your computer might
have 16 or 32 or 64 megabytes of RAM installed right now <sil=0.999> .PERIOD RAM holds the programs that your computer is currently running along with the data they are currently manipulating (their variables and data structures) <sil=0.999> .PERIOD Memory can be thought of simply as an array of bytes <sil=0.961> .PERIOD In this array <sil=0.445> ,COMMA every memory location has its own address – the address of the first byte is 0 <sil=0.624> ,COMMA followed by 1 <sil=0.452> ,COMMA 2 <sil=0.579> ,COMMA 3 <sil=0.372> ,COMMA and so on <sil=0.921> .PERIOD Memory addresses act just like the indexes of a normal array <sil=0.923> .PERIOD The computer can access
any address in memory at any time (hence the name “random access memory”) <sil=0.968> .PERIOD It can also group bytes together as it needs to to form larger variables <sil=0.519> ,COMMA arrays <sil=0.512> ,COMMA and structures <sil=0.975> .PERIOD For example <sil=0.427> ,COMMA a floating point variable consumes 4 contiguous bytes in memory <sil=0.983> .PERIOD You might make the following global declaration in a program: float f <sil=0.562> ;SEMICOLON This statement says <sil=0.303> ,COMMA "Declare a location named f that can hold one floating point value <sil=0.993> .PERIOD " When the program runs <sil=0.587> ,COMMA the computer reserves space for the variable f somewhere in memory <sil=0.931> .PERIOD That location has a fixed address in the memory space <sil=0.986> .PERIOD The variable f consumes four bytes of RAM in memory <sil=0.930> .PERIOD While you think of the variable f <sil=0.611> ,COMMA the computer thinks of a specific address in memory (for example <sil=0.621> ,COMMA 248 <sil=0.622> ,COMMA 440) <sil=0.977> .PERIOD Therefore <sil=0.460> ,COMMA when you create a statement like this:
f = 3 <sil=0.989> .PERIOD 14 <sil=0.637> ;SEMICOLON The compiler might translate that into <sil=0.420> ,COMMA “Load the value 3 <sil=0.967> .PERIOD 14 into memory location 248 <sil=0.492> ,COMMA 440 <sil=0.910> .PERIOD ” The computer is always thinking of memory in terms of addresses and values at those addresses <sil=0.917> .PERIOD There are <sil=0.400> ,COMMA by the way <sil=0.440> ,COMMA several interesting side effects to the way your computer treats memory <sil=0.958> .PERIOD For example <sil=0.372> ,COMMA say that you include the following code in one of
your programs:
int i <sil=0.513> ,COMMA s [ 4 ] <sil=0.512> ,COMMA t [ 4 ] <sil=0.478> ,COMMA u = 0 <sil=0.540> ;SEMICOLON for ( i = 0 <sil=0.370> ;SEMICOLON i <= 4 <sil=0.621> ;SEMICOLON i ++)
{
s [ i ] = i <sil=0.431> ;SEMICOLON t [ i ] = i <sil=0.552> ;SEMICOLON }
printf ( " s : t \ n " ) <sil=0.380> ;SEMICOLON for ( i = 0 <sil=0.307> ;SEMICOLON i <= 4 <sil=0.646> ;SEMICOLON i ++)
{
printf ("% d:%d \ n " <sil=0.511> ,COMMA s [ i ] <sil=0.505> ,COMMA t [ i ] ) <sil=0.547> ;SEMICOLON }
printf ( " u = %d \ n " <sil=0.637> ,COMMA u ) <sil=0.631> ;SEMICOLON The output that you see from the program will probably look like this:
s : t
1: 5
2: 2
3: 3
4: 4
5: 5
u = 5
Why are t[0] and u incorrect <sil=0.894> ?QUESTIONMARK If you look carefully at the code <sil=0.398> ,COMMA you can see that the for loops are writing one element past the end of each array <sil=0.915> .PERIOD In memory <sil=0.412> ,COMMA the arrays are placed adjacent to one another <sil=0.926> .PERIOD Therefore <sil=0.521> ,COMMA when you try to write to s[4] <sil=0.339> ,COMMA which does not exist <sil=0.611> ,COMMA the system writes into t[0] instead because t[0] is where s[4] ought to be <sil=0.960> .PERIOD When you write into t[4] <sil=0.305> ,COMMA you are really writing into u <sil=0.991> .PERIOD As far as the computer is concerned <sil=0.510> ,COMMA s[4] is simply an address <sil=0.486> ,COMMA and it can write into it <sil=0.995> .PERIOD As
you can see however <sil=0.431> ,COMMA even though the computer executes the program <sil=0.414> ,COMMA it is not
correct or valid <sil=0.943> .PERIOD The program corrupts the array t in the process of running <sil=0.967> .PERIOD If you
execute the following statement <sil=0.470> ,COMMA more severe consequences result:
s [ 1 0 0 0 0 0 0 ] = 5 <sil=0.562> ;SEMICOLON The location s[1000000] is more than likely outside of your program’s memory space <sil=0.999> .PERIOD In other words <sil=0.450> ,COMMA you are writing into memory that your program does not own <sil=0.996> .PERIOD On a system with protected memory spaces (UNIX <sil=0.305> ,COMMA Windows 98/NT) <sil=0.321> ,COMMA this sort of statement will cause the system to terminate execution of the program <sil=0.958> .PERIOD On other systems (Windows 3 <sil=0.978> .PERIOD 1 <sil=0.399> ,COMMA the Mac) <sil=0.478> ,COMMA however <sil=0.937> ,COMMA the system is not aware of what you are doing <sil=0.937> .PERIOD You end up damaging the code or variables in another application <sil=0.906> .PERIOD The effect of the violation can range from nothing at all to a complete system crash <sil=0.948> .PERIOD In memory <sil=0.485> ,COMMA i <sil=0.381> ,COMMA s <sil=0.574> ,COMMA t and u are all placed next to one another at specific addresses <sil=0.946> .PERIOD Therefore <sil=0.369> ,COMMA if you write past the boundaries of a variable <sil=0.492> ,COMMA the computer will do what you say but it will end up corrupting another memory location <sil=0.960> .PERIOD Because C and C++ do not perform any sort of range checking when you access an element of an array <sil=0.415> ,COMMA it is essential that you <sil=0.553> ,COMMA as a programmer <sil=0.412> ,COMMA pay careful attention to array ranges yourself and keep within the array’s appropriate boundaries <sil=0.990> .PERIOD Unintentionally reading or writing outside of array boundaries always leads to faulty program behavior <sil=0.964> .PERIOD As another example <sil=0.564> ,COMMA try the following: 
# include<stdio <sil=0.965> .PERIOD h>
int main ( void )
{
int i <sil=0.429> ,COMMA j <sil=0.575> ;SEMICOLON int ∗p <sil=0.346> ;SEMICOLON / ∗ a pointer to an integer ∗ /
printf ("% d %d \ n " <sil=0.342> ,COMMA p <sil=0.390> ,COMMA &i ) <sil=0.403> ;SEMICOLON p = &i <sil=0.488> ;SEMICOLON printf ("% d %d \ n " <sil=0.396> ,COMMA p <sil=0.515> ,COMMA &i ) <sil=0.618> ;SEMICOLON return 0 <sil=0.361> ;SEMICOLON }
This code tells the compiler to print out the address held in p <sil=0.451> ,COMMA along with the address of i <sil=0.929> .PERIOD The variable p starts off with some crazy value or with 0 <sil=0.943> .PERIOD The address ofiis generally a large value <sil=0.974> .PERIOD For example <sil=0.402> ,COMMA when I ran this code <sil=0.319> ,COMMA I received the following output:
0 2147478276
2147478276 2147478276
which means that the address of i is 2147478276 <sil=0.980> .PERIOD Once the statement p = &i <sil=0.543> ;SEMICOLON has been executed <sil=0.514> ,COMMA p contains the address of i <sil=0.934> .PERIOD Try this as well:
#include<stdio <sil=0.942> .PERIOD h>
void main ( void )
{
int ∗p <sil=0.463> ;SEMICOLON / ∗ a pointer to an integer ∗ /
printf ("% d \ n " <sil=0.579> ,COMMA ∗ p ) <sil=0.484> ;SEMICOLON }
This code tells the compiler to print the value that p points to <sil=0.975> .PERIOD However <sil=0.577> ,COMMA p has not been initialized yet <sil=0.340> ;SEMICOLON it contains the address 0 or some random address <sil=0.949> .PERIOD In most cases <sil=0.413> ,COMMA a segmentation fault (or some other run-time error) results <sil=0.582> ,COMMA which means that you have used a pointer that points to an invalid area of memory <sil=0.903> .PERIOD Almost always <sil=0.450> ,COMMA an uninitialized pointer or a bad pointer address is the cause of segmentation faults <sil=0.998> .PERIOD Having said all of this <sil=0.368> ,COMMA we can now look at pointers in a whole new light <sil=0.929> .PERIOD Take this program <sil=0.526> ,COMMA for example: 
#include<stdio <sil=0.945> .PERIOD h>
int main ( void )
{
int i <sil=0.556> ;SEMICOLON int ∗p <sil=0.352> ;SEMICOLON / ∗ a pointer to an integer ∗ /
p = &i <sil=0.629> ;SEMICOLON ∗p = 5 <sil=0.554> ;SEMICOLON printf ("% d %d \ n " <sil=0.411> ,COMMA i <sil=0.405> ,COMMA ∗p ) <sil=0.528> ;SEMICOLON return 0 <sil=0.625> ;SEMICOLON }
The variable i consumes 4 bytes of memory <sil=0.966> .PERIOD The pointer p also consumes 4 bytes (on most machines in use today <sil=0.459> ,COMMA a pointer consumes 8 bytes of memory <sil=0.924> .PERIOD Memory addresses are 64-bits long on most today) <sil=0.960> .PERIOD The location of i has a specific address <sil=0.377> ,COMMA in this case 248 <sil=0.548> ,COMMA 440 <sil=0.913> .PERIOD The pointer p holds that address once you say p = &i <sil=0.430> ;SEMICOLON  <sil=0.618> .PERIOD The variables *p and i are therefore equivalent <sil=0.938> .PERIOD The pointer p literally holds the address of i <sil=0.935> .PERIOD When you say something like this in a program:
printf ("% d " <sil=0.577> ,COMMA p ) <sil=0.433> ;SEMICOLON what comes out is the actual address of the variable i <sil=0.940> .PERIOD Pointers: Pointing to the Same Address
Here is a cool aspect of C: Any number of pointers can point to the same address <sil=0.980> .PERIOD For example <sil=0.468> ,COMMA you could declare p <sil=0.536> ,COMMA q <sil=0.332> ,COMMA and r as integer pointers and set all of them to point to i <sil=0.608> ,COMMA as shown here:
int i <sil=0.467> ;SEMICOLON int ∗p <sil=0.426> ,COMMA ∗q <sil=0.606> ,COMMA ∗ r <sil=0.627> ;SEMICOLON p = &i <sil=0.454> ;SEMICOLON q = &i <sil=0.526> ;SEMICOLON r = p <sil=0.533> ;SEMICOLON Note that in this code <sil=0.323> ,COMMA r points to the same thing that p points to <sil=0.328> ,COMMA which is i <sil=0.900> .PERIOD You can assign pointers to one another <sil=0.353> ,COMMA and the address is copied from the right-hand side to the left-hand side during the assignment <sil=0.913> .PERIOD The variable i now has four names: i <sil=0.436> ,COMMA *p <sil=0.606> ,COMMA *q and *r <sil=0.976> .PERIOD There is no limit on the number of pointers that can hold (and therefore point to) the same address <sil=0.922> .PERIOD Pointers: Common Bugs
Bug #1 - Uninitialized pointers
One of the easiest ways to create a pointer bug is to try to reference the value of a pointer even though the pointer is uninitialized and does not yet point to a valid address <sil=0.905> .PERIOD For example:
int ∗p <sil=0.464> ;SEMICOLON ∗p = 12 <sil=0.375> ;SEMICOLON The pointer p is uninitialized and points to a random location in memory whenyou declare it <sil=0.964> .PERIOD It could be pointing into the system stack <sil=0.624> ,COMMA or the global variables <sil=0.346> ,COMMA or into the program’s code space <sil=0.497> ,COMMA or into the operating system <sil=0.925> .PERIOD When you say *p=12 <sil=0.464> ;SEMICOLON  <sil=0.388> ,COMMA the program will simply try to write a 12 to whatever random location p points to <sil=0.988> .PERIOD The program may explode immediately <sil=0.457> ,COMMA or may wait half an hour and then explode <sil=0.610> ,COMMA or it may subtly corrupt data in another part of your program and
you may never realize it <sil=0.943> .PERIOD This can make this error very hard to track down <sil=0.993> .PERIOD Make sure you initialize all pointers to a valid address before dereferencing them <sil=0.957> .PERIOD Bug #2 - Invalid Pointer References
An invalid pointer reference occurs when a pointer’s value is referenced even though the pointer doesn’t point to a valid block <sil=0.965> .PERIOD One way to create this error is to say p = q <sil=0.405> ;SEMICOLON  <sil=0.354> ,COMMA when q is uninitialized <sil=0.941> .PERIOD The pointer p will then become uninitialized as well <sil=0.465> ,COMMA and any reference to *p is an invalid pointer reference <sil=0.996> .PERIOD The only way to avoid this bug is to draw pictures of each step of the program and make sure that all pointers point somewhere <sil=0.940> .PERIOD Invalid pointer references cause a program to crash inexplicably for the same reasons given in Bug #1 <sil=0.943> .PERIOD Bug #3 - Zero Pointer Reference
A zero pointer reference occurs whenever a pointer pointing to zero is used in a statement that attempts to reference a block <sil=0.960> .PERIOD For example <sil=0.613> ,COMMA if p is a pointer to an integer <sil=0.353> ,COMMA the following code is invalid:
p = 0 <sil=0.484> ;SEMICOLON ∗p = 12 <sil=0.605> ;SEMICOLON There is no block pointed to by p <sil=0.965> .PERIOD Therefore <sil=0.646> ,COMMA trying to read or write anything from
or to that block is an invalid zero pointer reference <sil=0.976> .PERIOD There are good <sil=0.586> ,COMMA valid reasons
to point a pointer to zero <sil=0.332> ,COMMA as we will see in later articles <sil=0.952> .PERIOD Dereferencing such a
pointer <sil=0.464> ,COMMA however <sil=0.929> ,COMMA is invalid <sil=0.933> .PERIOD All of these bugs are fatal to a program that contains them <sil=0.997> .PERIOD You must watch your code so that these bugs do not occur <sil=0.925> .PERIOD The best way to do that is to draw pictures of the code’s execution step by step <sil=0.982> .PERIOD Using Pointers for Function Parameters
Most C programmers first use pointers to implement something called variable parameters in functions <sil=0.962> .PERIOD You have actually been using variable parameters in the scanf function – that’s why you’ve had to use the & (the address operator) on variables used with scanf <sil=0.914> .PERIOD Now that you understand pointers you can see what has really been going on <sil=0.935> .PERIOD To understand how variable parameters work <sil=0.550> ,COMMA lets see how we might go about implementing a swap function in C <sil=0.954> .PERIOD To implement a swap function <sil=0.595> ,COMMA what you would like to do is pass in two variables and have the function swap their values <sil=0.984> .PERIOD Here’s one attempt at an implementation – enter and execute the following code and see what happens:
# include <stdio <sil=0.923> .PERIOD h>
void swap ( int i <sil=0.573> ,COMMA int j )
{
int t <sil=0.495> ;SEMICOLON t = i <sil=0.380> ;SEMICOLON i = j <sil=0.569> ;SEMICOLON j = t <sil=0.396> ;SEMICOLON }
void main ( void )
{
int a <sil=0.442> ,COMMA b <sil=0.601> ;SEMICOLON a = 5 <sil=0.370> ;SEMICOLON b = 1 0 <sil=0.523> ;SEMICOLON printf ("% d %d \ n " <sil=0.608> ,COMMA a <sil=0.365> ,COMMA b ) <sil=0.306> ;SEMICOLON swap ( a <sil=0.554> ,COMMA b ) <sil=0.351> ;SEMICOLON printf ("% d %d \ n " <sil=0.434> ,COMMA a <sil=0.403> ,COMMA b ) <sil=0.479> ;SEMICOLON }
When you execute this program <sil=0.464> ,COMMA you will find that no swapping takes place <sil=0.954> .PERIOD The values of a and b are passed to swap <sil=0.552> ,COMMA and the swap function does swap them <sil=0.643> ,COMMA but when the function returns nothing happens <sil=0.967> .PERIOD To make this function work correctly you can use pointers <sil=0.603> ,COMMA as shown below:
# include < stdio <sil=0.948> .PERIOD h>
void swap ( int ∗ i <sil=0.604> ,COMMA int ∗ j )
{
int t <sil=0.599> ;SEMICOLON t = ∗ i <sil=0.320> ;SEMICOLON ∗ i = ∗ j <sil=0.456> ;SEMICOLON ∗ j = t <sil=0.485> ;SEMICOLON }
void main ( void )
{
int a <sil=0.581> ,COMMA b <sil=0.349> ;SEMICOLON a = 5 <sil=0.630> ;SEMICOLON b = 10 <sil=0.598> ;SEMICOLON printf ("% d %d \ n " <sil=0.435> ,COMMA a <sil=0.565> ,COMMA b ) <sil=0.620> ;SEMICOLON swap (&a <sil=0.647> ,COMMA &b ) <sil=0.558> ;SEMICOLON printf ("% d %d \ n " <sil=0.620> ,COMMA a <sil=0.414> ,COMMA b ) <sil=0.378> ;SEMICOLON }
To get an idea of what this code does <sil=0.388> ,COMMA print it out <sil=0.482> ,COMMA draw the two integers a and b <sil=0.580> ,COMMA and enter 5 and 10 in them <sil=0.999> .PERIOD Now draw the two pointers i and j <sil=0.316> ,COMMA along with the integer t <sil=0.976> .PERIOD When swap is called <sil=0.644> ,COMMA it is passed the addresses of a and b <sil=0.991> .PERIOD Thus <sil=0.640> ,COMMA i
points to a (draw an arrow from i to a) and j points to b (draw another arrow from b to j) <sil=0.914> .PERIOD Once the pointers are initialized by the function call <sil=0.544> ,COMMA *i is another name for a <sil=0.418> ,COMMA and *j is another name for b <sil=0.902> .PERIOD Now run the code in swap <sil=0.988> .PERIOD When the code uses *i and *j <sil=0.330> ,COMMA it really means a and b <sil=0.923> .PERIOD When the function completes <sil=0.312> ,COMMA a and b have been swapped <sil=0.908> .PERIOD Suppose you accidentally forget the & when the swap function is called <sil=0.633> ,COMMA and that the swap line accidentally looks like this: swap(a <sil=0.630> ,COMMA b) <sil=0.453> ;SEMICOLON  <sil=0.552> .PERIOD This causes a segmentation fault <sil=0.993> .PERIOD When you leave out the & <sil=0.344> ,COMMA the value of a is passed instead of its address <sil=0.904> .PERIOD Therefore <sil=0.441> ,COMMA i points to an invalid location in memory and the system crashes when *i is used <sil=0.981> .PERIOD This is also why scanf crashes if you forget the & on variables passed to it <sil=0.937> .PERIOD The scanf function is using pointers to put the value it reads back into the variable you have passed <sil=0.982> .PERIOD Without the & <sil=0.637> ,COMMA scanf is passed a bad address and crashes <sil=0.924> .PERIOD Variable parameters are one of the most common uses of pointers in C <sil=0.964> .PERIOD Now you
understand what’s happening <sil=0.892> !EXCLAMATIONMARK Dynamic Data Structures
Dynamic data structures are data structures that grow and shrink as you need them to by allocating and deallocating memory from a place called the heap <sil=0.908> .PERIOD They are extremely important in C because they allow the programmer to exactly control memory consumption <sil=0.952> .PERIOD Dynamic data structures allocate blocks of memory from the heap as required <sil=0.362> ,COMMA and link those blocks together into some kind of data structure using pointers <sil=0.942> .PERIOD When the data structure no longer needs a block of memory <sil=0.624> ,COMMA it will return the block to the heap for reuse <sil=0.976> .PERIOD This recycling makes very efficient use of memory <sil=0.941> .PERIOD To understand dynamic data structures completely <sil=0.528> ,COMMA we need to start with the heap <sil=0.962> .PERIOD Dynamic Data Structures: The Heap The operating system and several applications <sil=0.457> ,COMMA along with their global variables and stack spaces <sil=0.638> ,COMMA all consume portions of memory <sil=0.970> .PERIOD When a program completes execution <sil=0.493> ,COMMA it releases its memory for reuse by other programs <sil=0.919> .PERIOD Note that part of
the memory space remains unused at any given time <sil=0.915> .PERIOD Memory holds the executable code for the different applications currently running on the machine <sil=0.538> ,COMMA along with the executable code for the operating system itself <sil=0.924> .PERIOD Each application has certain global variables associated with it <sil=0.976> .PERIOD These variables also consume memory <sil=0.935> .PERIOD Finally <sil=0.595> ,COMMA each application uses an area of memory called the stack <sil=0.440> ,COMMA which holds all local variables and parameters used by any function <sil=0.945> .PERIOD The stack also remembers the order in which functions are called so that function returns occur correctly <sil=0.968> .PERIOD Each time a function is called <sil=0.545> ,COMMA its local variables and parameters are “pushed onto” the stack <sil=0.935> .PERIOD When the function returns <sil=0.566> ,COMMA these locals and parameters are “popped <sil=0.920> .PERIOD ” Because of this <sil=0.361> ,COMMA the size of a program’s stack fluctuates constantly as the program is running <sil=0.538> ,COMMA but it has some maximum size <sil=0.935> .PERIOD As a program finishes execution <sil=0.427> ,COMMA the operating system unloads it <sil=0.495> ,COMMA its globals and its stack space from memory <sil=0.918> .PERIOD A new program can make use of that space at a later time <sil=0.906> .PERIOD In this way <sil=0.399> ,COMMA the memory in a computer system is constantly “recycled” and reused by programs as they execute and complete <sil=0.968> .PERIOD In general <sil=0.325> ,COMMA perhaps 50 percent of the computer’s total memory space might be unused at any given moment <sil=0.964> .PERIOD The operating system owns and manages the unused memory <sil=0.441> ,COMMA and it is collectively known as the heap <sil=0.968> .PERIOD The heap is extremely important because it is available for use by applications during execution using the C functions malloc (memory allocate) and free <sil=0.929> .PERIOD The heap allows programs to allocate memory exactly when they need it during the execution of a program <sil=0.309> ,COMMA rather than pre-allocating it with a specifically-sized array declaration <sil=0.905> .PERIOD Dynamic Data Structures: Malloc and Free
Let’s say that you would like to allocate a certain amount of memory during the execution of your application <sil=0.938> .PERIOD You can call the malloc function at any time <sil=0.636> ,COMMA and it will request a block of memory from the heap <sil=0.922> .PERIOD The operating system will reserve a block of memory for your program <sil=0.569> ,COMMA and you can use it in any way you like <sil=0.936> .PERIOD When you are done with the block <sil=0.389> ,COMMA you return it to the operating system for recycling by calling the free function <sil=0.978> .PERIOD Then other applications can reserve it later for their own use <sil=0.996> .PERIOD For example <sil=0.460> ,COMMA the following code demonstrates the simplest possible use of the
heap:
int main ( void )
{
int ∗p <sil=0.637> ;SEMICOLON p = ( int ∗) malloc ( size of ( int ) ) <sil=0.578> ;SEMICOLON if ( p == 0 )
{
printf ( "ERROR: Out o f memory \ n " ) <sil=0.405> ;SEMICOLON return 1 <sil=0.431> ;SEMICOLON }
∗p = 5 <sil=0.423> ;SEMICOLON printf ("% d \ n " <sil=0.386> ,COMMA ∗p ) <sil=0.619> ;SEMICOLON free ( p ) <sil=0.413> ;SEMICOLON return 0 <sil=0.576> ;SEMICOLON }
The first line in this program calls the malloc function <sil=0.972> .PERIOD This function does three things:
1 <sil=0.916> .PERIOD The malloc statement first looks at the amount of memory available on the heap and asks <sil=0.377> ,COMMA “Is there enough memory available to allocate a block of memory of the size requested <sil=0.868> ?QUESTIONMARK ” The amount of memory needed for the block is known from the parameter passed into malloc – in this case <sil=0.361> ,COMMA sizeof(int) is 4 bytes <sil=0.932> .PERIOD If there is not enough memory available <sil=0.334> ,COMMA the malloc function returns the address zero to indicate the error (another name for zero is NULL and you will see it used throughout C code) <sil=0.910> .PERIOD Otherwise malloc proceeds <sil=0.931> .PERIOD 2 <sil=0.990> .PERIOD If memory is available on the heap <sil=0.497> ,COMMA the system “allocates” or “reserves” a block from the heap of the size specified <sil=0.909> .PERIOD The system reserves the block of memory so that it isn’t accidentally used by more than one malloc statement <sil=0.960> .PERIOD 3 <sil=0.929> .PERIOD The system then places into the pointer variable (p <sil=0.435> ,COMMA in this case) the address of the reserved block <sil=0.924> .PERIOD The pointer variable itself contains an address <sil=0.955> .PERIOD The allocated block is able to hold a value of the type specified <sil=0.369> ,COMMA and the pointer points to it <sil=0.928> .PERIOD The program next checks the pointer p to make sure that the allocation request succeeded with the line if (p == 0) (which could have also been written as if (p == NULL) or even if ( <sil=0.882> !EXCLAMATIONMARK p) <sil=0.971> .PERIOD If the allocation fails (if p is zero) <sil=0.318> ,COMMA the program terminates <sil=0.961> .PERIOD If the allocation is successful <sil=0.561> ,COMMA the program then initializes the block to the value 5 <sil=0.576> ,COMMA prints out the value <sil=0.301> ,COMMA and calls the free function to return the memory to the heap
before the program terminates <sil=0.975> .PERIOD There is really no difference between this code and previous code that sets p equal
to the address of an existing integer i <sil=0.927> .PERIOD The only distinction is that <sil=0.383> ,COMMA in the case of
the variable i <sil=0.502> ,COMMA the memory existed as part of the program’s pre-allocated memory
space and had the two names: i and *p <sil=0.905> .PERIOD In the case of memory allocated from
the heap <sil=0.426> ,COMMA the block has the single name *p and is allocated during the program’s
execution <sil=0.954> .PERIOD Two common questions:
• Is it really important to check that the pointer is zero after each allocation <sil=0.999> ?QUESTIONMARK Yes <sil=0.906> .PERIOD Since the heap varies in size constantly depending on which programs are running <sil=0.590> ,COMMA how much memory they have allocated <sil=0.591> ,COMMA etc <sil=0.998> .PERIOD  <sil=0.308> ,COMMA there is never any guarantee that a call to malloc will succeed <sil=0.950> .PERIOD You should check the pointer after any call to malloc to make sure the pointer is valid <sil=0.975> .PERIOD • What happens if I forget to delete a block of memory before the program terminates <sil=0.983> ?QUESTIONMARK When a program terminates <sil=0.324> ,COMMA the operating system “cleans up after it <sil=0.351> ,COMMA ” releasing its executable code space <sil=0.439> ,COMMA stack <sil=0.485> ,COMMA global memory space and any heap allocations for recycling <sil=0.911> .PERIOD Therefore <sil=0.319> ,COMMA there
are no long-term consequences to leaving allocations pending at program termination <sil=0.938> .PERIOD However <sil=0.479> ,COMMA it is considered bad form <sil=0.525> ,COMMA and “memory leaks” during the execution of a program are harmful <sil=0.637> ,COMMA as discussed below <sil=0.998> .PERIOD The following two programs show two different valid uses of pointers <sil=0.525> ,COMMA and try to distinguish between the use of a pointer and of the pointer’s value:
void main ( void )
{
int ∗p <sil=0.549> ,COMMA ∗q <sil=0.338> ;SEMICOLON p = ( int ∗) malloc ( size of ( int ) ) <sil=0.442> ;SEMICOLON q = p <sil=0.637> ;SEMICOLON ∗p = 1 0 <sil=0.488> ;SEMICOLON printf ("% d \ n " <sil=0.511> ,COMMA ∗q ) <sil=0.626> ;SEMICOLON ∗q = 2 0 <sil=0.378> ;SEMICOLON printf ("% d \ n " <sil=0.463> ,COMMA ∗q ) <sil=0.433> ;SEMICOLON }
The final output of this code would be 10 from line 4 and 20 from line 6 <sil=0.930> .PERIOD The following code is slightly different:
void main ( void )
{
int ∗p <sil=0.600> ,COMMA ∗q <sil=0.428> ;SEMICOLON p = ( int ∗) malloc ( sizeof ( int ) ) <sil=0.326> ;SEMICOLON q = ( int ∗) malloc ( sizeof ( int ) ) <sil=0.638> ;SEMICOLON ∗p = 10 <sil=0.431> ;SEMICOLON ∗q = 20 <sil=0.618> ;SEMICOLON ∗p = ∗q <sil=0.492> ;SEMICOLON printf ("% d \ n " <sil=0.491> ,COMMA ∗p ) <sil=0.500> ;SEMICOLON }
The final output from this code would be 20 from line 6 <sil=0.969> .PERIOD Notice that the compiler will allow *p = *q <sil=0.376> ,COMMA because *p and *q are both integers <sil=0.982> .PERIOD This statement says <sil=0.317> ,COMMA “Move the integer value pointed to by q into the integer value pointed to by p <sil=0.984> .PERIOD ” The statement moves the values <sil=0.980> .PERIOD The compiler will also allow p = q <sil=0.494> ,COMMA because p and q are both pointers <sil=0.554> ,COMMA and both point to the same type (if s is a pointer to a character <sil=0.333> ,COMMA p = s is not allowed because they point to different types) <sil=0.956> .PERIOD The statement p = q says <sil=0.460> ,COMMA “Point p to the same block q points to <sil=0.913> .PERIOD ” In other words <sil=0.392> ,COMMA the address pointed to by q is moved into p <sil=0.407> ,COMMA so they both point to the same block <sil=0.943> .PERIOD This statement moves the addresses <sil=0.964> .PERIOD From all of these examples <sil=0.537> ,COMMA you can see that there are four different ways to initialize a pointer <sil=0.953> .PERIOD When a pointer is declared <sil=0.345> ,COMMA as in int *p <sil=0.430> ,COMMA it starts out in the program in an uninitialized state <sil=0.980> .PERIOD It may point anywhere <sil=0.557> ,COMMA and therefore to dereference it is an error <sil=0.978> .PERIOD Initialization of a pointer variable involves pointing it to a known location in memory <sil=0.938> .PERIOD 1 <sil=0.921> .PERIOD One way <sil=0.382> ,COMMA as seen already <sil=0.454> ,COMMA is to use the malloc statement <sil=0.973> .PERIOD This statement allocates a block of memory from the heap and then points the pointer at the block <sil=0.934> .PERIOD This initializes the pointer <sil=0.327> ,COMMA because it now points to a known location <sil=0.933> .PERIOD The pointer is initialized because it has been filled with a valid address – the address of the new block <sil=0.922> .PERIOD 2 <sil=0.905> .PERIOD The second way <sil=0.564> ,COMMA as seen just a moment ago <sil=0.390> ,COMMA is to use a statement such as p = q so that p points to the same place as q <sil=0.995> .PERIOD If q is pointing at a valid block <sil=0.461> ,COMMA then p is initialized <sil=0.909> .PERIOD The pointer p is loaded with the valid address that q contains <sil=0.937> .PERIOD However <sil=0.385> ,COMMA if q is uninitialized or invalid <sil=0.533> ,COMMA p will pick up the same useless address <sil=0.966> .PERIOD 3 <sil=0.929> .PERIOD The third way is to point the pointer to a known address <sil=0.435> ,COMMA such as a global variable’s address <sil=0.972> .PERIOD For example <sil=0.316> ,COMMA if i is an integer and p is a pointer to an integer <sil=0.460> ,COMMA then the statement p=&i initializes p by pointing it to i <sil=0.963> .PERIOD 4 <sil=0.957> .PERIOD The fourth way to initialize the pointer is to use the value zero <sil=0.971> .PERIOD Zero is a special values used with pointers <sil=0.394> ,COMMA as shown here:
p = 0 <sil=0.564> ;SEMICOLON or:
p = NULL <sil=0.645> ;SEMICOLON What this does physically is to place a zero into p <sil=0.996> .PERIOD The pointer p’s address is zero <sil=0.989> .PERIOD Any pointer can be set to point to zero <sil=0.995> .PERIOD When p points to zero <sil=0.368> ,COMMA however <sil=0.980> ,COMMA it does not point to a block <sil=0.959> .PERIOD The pointer simply contains the address zero <sil=0.520> ,COMMA and this value is useful as a tag <sil=0.901> .PERIOD You can use it in statements such as:
if ( p == 0 )
{ <sil=0.909> .PERIOD  <sil=0.980> .PERIOD  <sil=0.997> .PERIOD }
or:
while ( p <sil=0.867> !EXCLAMATIONMARK = 0 )
{ <sil=0.912> .PERIOD  <sil=0.981> .PERIOD  <sil=0.956> .PERIOD }
The system also recognizes the zero value <sil=0.590> ,COMMA and will generate error messages if you happen to dereference a zero pointer <sil=0.931> .PERIOD For example <sil=0.420> ,COMMA in the following code:
p = 0 <sil=0.358> ;SEMICOLON ∗p = 5 <sil=0.433> ;SEMICOLON The program will normally crash <sil=0.976> .PERIOD The pointer p does not point to a block <sil=0.428> ,COMMA it points to zero <sil=0.454> ,COMMA so a value cannot be assigned to *p <sil=0.962> .PERIOD The zero pointer will be used as a flag when we get to linked lists <sil=0.923> .PERIOD The malloc command is used to allocate a block of memory <sil=0.940> .PERIOD It is also possible to deallocate a block of memory when it is no longer needed <sil=0.938> .PERIOD When a block is deallocated <sil=0.636> ,COMMA it can be reused by a subsequent malloc command <sil=0.522> ,COMMA which allows the system to recycle memory <sil=0.959> .PERIOD The command used to deallocate memory is called free <sil=0.479> ,COMMA and it accepts a pointer as its parameter <sil=0.956> .PERIOD The free command does two things:
1 <sil=0.959> .PERIOD The block of memory pointed to by the pointer is unreserved and given back to the free memory on the heap <sil=0.905> .PERIOD It can then be reused by later new statements <sil=0.952> .PERIOD 2 <sil=0.950> .PERIOD The pointer is left in an uninitialized state <sil=0.643> ,COMMA and must be reinitialized before it can be used again <sil=0.927> .PERIOD The free statement simply returns a pointer to its original uninitialized state and makes the block available again on the heap <sil=0.994> .PERIOD The following example shows how to use the heap <sil=0.918> .PERIOD It allocates an integer block <sil=0.498> ,COMMA fills it <sil=0.543> ,COMMA writes it <sil=0.558> ,COMMA and disposes of it:
# include < stdio <sil=0.914> .PERIOD h>
int main ( v oi d )
{
i n t ∗p <sil=0.523> ;SEMICOLON p = ( int  ∗) malloc ( size of ( int  ) ) <sil=0.469> ;SEMICOLON ∗p = 10 <sil=0.507> ;SEMICOLON printf ("% d \ n " <sil=0.539> ,COMMA ∗ p ) <sil=0.591> ;SEMICOLON free ( p ) <sil=0.543> ;SEMICOLON return 0 <sil=0.383> ;SEMICOLON }
This code is really useful only for demonstrating the process of allocating <sil=0.413> ,COMMA deallocating <sil=0.606> ,COMMA and using a block in C <sil=0.998> .PERIOD The malloc line allocates a block of memory of the size specified – in this case <sil=0.321> ,COMMA sizeof(int) bytes (4 bytes) <sil=0.970> .PERIOD The sizeof command in C returns the size <sil=0.635> ,COMMA in bytes <sil=0.489> ,COMMA of any type <sil=0.905> .PERIOD The code could just as easily have said malloc(4) <sil=0.390> ,COMMA since sizeof(int) equals 4 bytes on most machines <sil=0.977> .PERIOD Using sizeof <sil=0.623> ,COMMA however <sil=0.990> ,COMMA makes the code much more portable and readable <sil=0.960> .PERIOD The malloc function returns a pointer to the allocated block <sil=0.927> .PERIOD This pointer is generic <sil=0.935> .PERIOD Using the pointer without typecasting generally produces a type warning from the compiler <sil=0.925> .PERIOD The (int *) typecast converts the generic pointer returned by malloc into a “pointer to an integer <sil=0.591> ,COMMA ” which is what p expects <sil=0.959> .PERIOD The free statement in C returns a block to the heap for reuse <sil=0.908> .PERIOD The second example illustrates the same functions as the previous example <sil=0.502> ,COMMA but it uses a structure instead of an integer <sil=0.930> .PERIOD In C <sil=0.413> ,COMMA the code looks like this:
# include < stdio <sil=0.903> .PERIOD h>
structrec
{
int i <sil=0.470> ;SEMICOLON float f <sil=0.452> ;SEMICOLON charc <sil=0.613> ;SEMICOLON } <sil=0.636> ;SEMICOLON int main ( v oi d )
{
structrec ∗p <sil=0.461> ;SEMICOLON p = ( structrec ∗) m all o c ( sizeof ( structrec ) ) <sil=0.639> ;SEMICOLON (∗ p ) <sil=0.904> .PERIOD i = 1 0 <sil=0.602> ;SEMICOLON (∗ p ) <sil=0.944> .PERIOD f = 3 <sil=0.949> .PERIOD 1 4 <sil=0.399> ;SEMICOLON (∗ p ) <sil=0.906> .PERIOD c = ’ a ’ <sil=0.497> ;SEMICOLON printf ("% d %f %c \ n " <sil=0.645> ,COMMA ( ∗ p ) <sil=0.974> .PERIOD i <sil=0.321> ,COMMA ( ∗ p ) <sil=0.954> .PERIOD f <sil=0.402> ,COMMA ( ∗ p ) <sil=0.957> .PERIOD c ) <sil=0.594> ;SEMICOLON free ( p ) <sil=0.499> ;SEMICOLON return 0 <sil=0.340> ;SEMICOLON }
Note the following line:
(∗ p ) <sil=0.988> .PERIOD i = 1 0 <sil=0.544> ;SEMICOLON Many wonder why the following doesn’t work:
∗p <sil=0.980> .PERIOD i = 1 0 <sil=0.330> ;SEMICOLON The answer has to do with the precedence of operators in C <sil=0.945> .PERIOD The result of the calculation 5+3*4 is 17 <sil=0.516> ,COMMA not 32 <sil=0.524> ,COMMA because the * operator has higher precedence than + in most computer languages <sil=0.916> .PERIOD In C <sil=0.597> ,COMMA the <sil=0.996> .PERIOD operator has higher precedence than * <sil=0.502> ,COMMA so parentheses force the proper precedence <sil=0.930> .PERIOD Most people tire of typing (*p) <sil=0.922> .PERIOD i all the time <sil=0.443> ,COMMA so C provides a shorthand notation <sil=0.935> .PERIOD The following two statements are exactly equivalent <sil=0.302> ,COMMA but the second is easier to type:
(∗ p ) <sil=0.905> .PERIOD i = 1 0 <sil=0.362> ;SEMICOLON p−>i = 1 0 <sil=0.303> ;SEMICOLON You will see the second more often than the first when reading other people’s code <sil=0.995> .PERIOD Advanced Pointers
You will normally use pointers in somewhat more complicated ways than those shown in some of the previous examples <sil=0.910> .PERIOD For example <sil=0.434> ,COMMA it is much easier to create a normal integer and work with it than it is to create and use a pointer to an integer <sil=0.988> .PERIOD In this section <sil=0.309> ,COMMA some of the more common and advanced ways of working with pointers will be explored <sil=0.991> .PERIOD Pointer Types
It is possible <sil=0.307> ,COMMA legal <sil=0.621> ,COMMA and beneficial to create pointer types in C <sil=0.605> ,COMMA as shown below:
Typedef int ∗ Int Pointer <sil=0.467> ;SEMICOLON  <sil=0.977> .PERIOD  <sil=0.946> .PERIOD  <sil=0.978> .PERIOD Int Pointer p <sil=0.481> ;SEMICOLON This is the same as saying:
int ∗p <sil=0.623> ;SEMICOLON This technique will be used in many of the examples on the following pages <sil=0.998> .PERIOD The technique often makes a data declaration easier to read and understand <sil=0.568> ,COMMA and also makes it easier to include pointers inside of structures or pass pointer parameters in functions <sil=0.923> .PERIOD Pointers to Structures
It is possible to create a pointer to almost any type in C <sil=0.352> ,COMMA including user-defined types <sil=0.991> .PERIOD It is extremely common to create pointers to structures <sil=0.986> .PERIOD Typesdef struct
{
char name [ 2 1 ] <sil=0.345> ;SEMICOLON char city [ 2 1 ] <sil=0.594> ;SEMICOLON char state [ 3 ] <sil=0.430> ;SEMICOLON } Rec <sil=0.300> ;SEMICOLON typedef Rec ∗ Rec Pointer <sil=0.451> ;SEMICOLON Rec Pointer r <sil=0.338> ;SEMICOLON r = ( Rec Pointer ) malloc ( sideof ( Rec ) ) <sil=0.313> ;SEMICOLON The pointer r is a pointer to a structure <sil=0.901> .PERIOD Please note the fact that r is a pointer <sil=0.578> ,COMMA and therefore takes four bytes of memory just like any other pointer <sil=0.912> .PERIOD However <sil=0.439> ,COMMA the malloc statement allocates 45 bytes of memory from the heap <sil=0.922> .PERIOD *r is a structure just like any other structure of type Rec <sil=0.998> .PERIOD The following code shows typical uses of the pointer variable:
strcpy ( ( ∗ r ) <sil=0.915> .PERIOD name <sil=0.310> ,COMMA " Leigh " ) <sil=0.617> ;SEMICOLON strcpy ( ( ∗ r ) <sil=0.986> .PERIOD city <sil=0.630> ,COMMA " Raleigh " ) <sil=0.536> ;SEMICOLON strcpy ( ( ∗ r ) <sil=0.991> .PERIOD state <sil=0.534> ,COMMA "NC " ) <sil=0.608> ;SEMICOLON printf ("% s \ n " <sil=0.349> ,COMMA (∗ r ) <sil=0.964> .PERIOD city ) <sil=0.638> ;SEMICOLON free ( r ) <sil=0.626> ;SEMICOLON You deal with *r just like a normal structure variable <sil=0.344> ,COMMA but you have to be careful with the precedence of operators in C <sil=0.942> .PERIOD If you were to leave off the parenthesis around *r the code would not compile because the “ <sil=0.988> .PERIOD ” operator has a higher precedence than the “*” operator <sil=0.979> .PERIOD Because it gets tedious to type so many parentheses when working with pointers to structures <sil=0.442> ,COMMA C includes a shorthand notation that does exactly the same thing:
strcpy ( r−>name <sil=0.343> ,COMMA " L ei g h " ) <sil=0.409> ;SEMICOLON The r-> notation is exactly equivalent to (*r) <sil=0.949> .PERIOD  <sil=0.515> ,COMMA but takes two fewer characters <sil=0.929> .PERIOD Pointers to Arrays
It is also possible to create pointers to arrays <sil=0.580> ,COMMA as shown below:
int ∗p <sil=0.481> ;SEMICOLON int i <sil=0.548> ;SEMICOLON p = ( int ∗) malloc ( sizeof ( int [ 1 0 ] ) ) <sil=0.348> ;SEMICOLON for ( i = 0 <sil=0.408> ;SEMICOLON i < 1 0 <sil=0.436> ;SEMICOLON i ++)
p [ i ] = 0 <sil=0.624> ;SEMICOLON free ( p ) <sil=0.570> ;SEMICOLON or:
int ∗p <sil=0.465> ;SEMICOLON int i <sil=0.555> ;SEMICOLON p = ( i n t ∗) malloc ( sizeof ( int [ 1 0 ] ) ) <sil=0.372> ;SEMICOLON for ( i = 0 <sil=0.520> ;SEMICOLON i < 1 0 <sil=0.461> ;SEMICOLON i ++)
∗( p+ i ) = 0 <sil=0.326> ;SEMICOLON free ( p ) <sil=0.326> ;SEMICOLON Note that when you create a pointer to an integer array <sil=0.502> ,COMMA you simply create a normal pointer to int <sil=0.940> .PERIOD The call to malloc allocates an array of whatever size you desire <sil=0.385> ,COMMA and the pointer points to that array’s first element <sil=0.900> .PERIOD You can either index through the array pointed to by p using normal array indexing <sil=0.477> ,COMMA or you can do it using pointer arithmetic <sil=0.910> .PERIOD C sees both forms as equivalent <sil=0.919> .PERIOD This particular technique is extremely useful when working with strings <sil=0.910> .PERIOD It lets you allocate enough storage to exactly hold a string of a particular size <sil=0.978> .PERIOD Arrays of Pointers
Sometimes a great deal of space can be saved <sil=0.558> ,COMMA or certain memory-intensive problems can be solved <sil=0.395> ,COMMA by declaring an array of pointers <sil=0.928> .PERIOD In the example code below <sil=0.560> ,COMMA an array of 10 pointers to structures is declared <sil=0.369> ,COMMA instead of declaring an array of structures <sil=0.953> .PERIOD If an array of the structures had been created instead <sil=0.549> ,COMMA 243 * 10 = 2 <sil=0.321> ,COMMA 430 bytes would have been required for the array <sil=0.985> .PERIOD Using the array of pointers allows the array to take up minimal space until the actual records are allocated with malloc statements <sil=0.953> .PERIOD The code below simply allocates one record <sil=0.538> ,COMMA places a value in it <sil=0.332> ,COMMA and disposes of the record to demonstrate the process:
Typesdef struct
{
char s1 [ 8 1 ] <sil=0.497> ;SEMICOLON char s2 [ 8 1 ] <sil=0.353> ;SEMICOLON char s3 [ 8 1 ] <sil=0.416> ;SEMICOLON } Rec <sil=0.534> ;SEMICOLON Rec ∗a [ 1 0 ] <sil=0.426> ;SEMICOLON a [ 0 ] = ( Rec ∗) malloc ( sizeof ( Rec ) ) <sil=0.473> ;SEMICOLON strcpy ( a [0]−> s1 <sil=0.543> ,COMMA " hello " ) <sil=0.602> ;SEMICOLON free ( a [ 0 ] ) <sil=0.382> ;SEMICOLON Structures Containing Pointers
Structures can contain pointers <sil=0.556> ,COMMA as shown below:
Typesdef struct
{
char name [ 2 1 ] <sil=0.457> ;SEMICOLON char city [ 2 1 ] <sil=0.450> ;SEMICOLON char  phone [ 2 1 ] <sil=0.305> ;SEMICOLON char ∗comment <sil=0.463> ;SEMICOLON } Addr <sil=0.459> ;SEMICOLON Addr s <sil=0.485> ;SEMICOLON char comm [ 1 0 0 ] <sil=0.559> ;SEMICOLON gets ( s <sil=0.998> .PERIOD name <sil=0.554> ,COMMA 2 0 ) <sil=0.451> ;SEMICOLON gets ( s <sil=0.997> .PERIOD c i t y <sil=0.317> ,COMMA 2 0 ) <sil=0.455> ;SEMICOLON gets ( s <sil=0.972> .PERIOD phone <sil=0.494> ,COMMA 2 0 ) <sil=0.518> ;SEMICOLON gets (comm <sil=0.567> ,COMMA 1 0 0 ) <sil=0.483> ;SEMICOLON s <sil=0.942> .PERIOD comment =
( c h a r ∗) m all o c ( sizeof ( char [ strlen(comm ) + 1 ] ) ) <sil=0.427> ;SEMICOLON strcpy ( s <sil=0.912> .PERIOD comment <sil=0.469> ,COMMA comm ) <sil=0.622> ;SEMICOLON This technique is useful when only some records actually contained a comment in the comment field <sil=0.977> .PERIOD If there is no comment for the record <sil=0.550> ,COMMA then the comment field would consist only of a pointer (4 bytes) <sil=0.952> .PERIOD Those records having a comment then allocate exactly enough space to hold the comment string <sil=0.412> ,COMMA based on the length of the string typed by the user <sil=0.913> .PERIOD Pointers to Pointers
It is possible and often useful to create pointers to pointers <sil=0.900> .PERIOD This technique is sometimes called a handle <sil=0.606> ,COMMA and is useful in certain situations where the operating system wants to be able to move blocks of memory on the heap around at its discretion <sil=0.964> .PERIOD int ∗∗p <sil=0.631> ;SEMICOLON int ∗q <sil=0.475> ;SEMICOLON p = ( int ∗ ∗) malloc ( sizeof ( int ∗ ) ) <sil=0.607> ;SEMICOLON ∗p = ( int ∗) malloc ( sizeof ( int ) ) <sil=0.629> ;SEMICOLON ∗∗p = 1 2 <sil=0.486> ;SEMICOLON q = ∗p <sil=0.580> ;SEMICOLON printf ("% d \ n " <sil=0.317> ,COMMA ∗q ) <sil=0.305> ;SEMICOLON free ( q ) <sil=0.457> ;SEMICOLON free ( p ) <sil=0.646> ;SEMICOLON Windows and the Mac OS use this structure to allow memory compaction on the heap <sil=0.928> .PERIOD The program manages the pointer p <sil=0.461> ,COMMA while the operating system manages the pointer *p <sil=0.996> .PERIOD Because the OS manages *p <sil=0.481> ,COMMA the block pointed to by *p (**p) can be moved <sil=0.593> ,COMMA and *p can be changed to reflect the move without affecting the program using p <sil=0.968> .PERIOD Pointers to pointers are also frequently used in C to handle pointer parameters in functions <sil=0.909> .PERIOD Pointers to Structures Containing Pointers
It is also possible to create pointers to structures that contain pointers <sil=0.977> .PERIOD The following example uses the Addr record from the previous section:
Typesdef struct
{
char name [ 2 1 ] <sil=0.618> ;SEMICOLON char r c i t y [ 2 1 ] <sil=0.332> ;SEMICOLON char  phone [ 2 1 ] <sil=0.502> ;SEMICOLON char  ∗comment <sil=0.493> ;SEMICOLON } Addr <sil=0.457> ;SEMICOLON Addr ∗ s <sil=0.641> ;SEMICOLON c h a r comm [ 1 0 0 ] <sil=0.412> ;SEMICOLON s = ( Addr ∗) m all o c ( sizeof ( Addr ) ) <sil=0.643> ;SEMICOLON gets ( s−>name <sil=0.543> ,COMMA 2 0 ) <sil=0.314> ;SEMICOLON gets ( s−> city <sil=0.442> ,COMMA 2 0 ) <sil=0.423> ;SEMICOLON gets ( s−>phone <sil=0.496> ,COMMA 2 0 ) <sil=0.379> ;SEMICOLON gets (comm <sil=0.357> ,COMMA 1 0 0 ) <sil=0.388> ;SEMICOLON s−>comment =
( char  ∗) m all o c ( sizeof ( char  [strlen (comm ) + 1 ] ) ) <sil=0.616> ;SEMICOLON strcpy ( s−>comment <sil=0.579> ,COMMA comm ) <sil=0.506> ;SEMICOLON The pointer s points to a structure that contains a pointer that points to a string <sil=0.906> .PERIOD In this example <sil=0.554> ,COMMA it is very easy to create lost blocks if you aren’t careful <sil=0.937> .PERIOD For example <sil=0.647> ,COMMA here is a different version of the AP example <sil=0.996> .PERIOD s = ( Addr ∗) m all o c ( sizeof ( Addr ) ) <sil=0.564> ;SEMICOLON gets (comm <sil=0.410> ,COMMA 1 0 0 ) <sil=0.459> ;SEMICOLON s−>comment =
( char  ∗) m all o c ( sizeof ( char [ strlen (comm ) + 1 ] ) ) <sil=0.337> ;SEMICOLON strcpy ( s−>comment <sil=0.573> ,COMMA comm ) <sil=0.512> ;SEMICOLON free ( s ) <sil=0.474> ;SEMICOLON This code creates a lost block because the structure containing the pointer pointing to the string is disposed of before the string block is disposed of <sil=0.594> ,COMMA as shown to the right <sil=0.904> .PERIOD Linking
Finally <sil=0.607> ,COMMA it is possible to create structures that are able to point to identical structures <sil=0.389> ,COMMA and this capability can be used to link together a whole string of identical records in a structure called a linked list <sil=0.904> .PERIOD Typesdef struct
{
char name [ 2 1 ] <sil=0.394> ;SEMICOLON Char city [ 2 1 ] <sil=0.346> ;SEMICOLON char state [ 2 1 ] <sil=0.368> ;SEMICOLON Addr ∗ next <sil=0.309> ;SEMICOLON } Addr <sil=0.359> ;SEMICOLON Addr ∗ first <sil=0.444> ;SEMICOLON The compiler will let you do this <sil=0.616> ,COMMA and it can be used with a little experience to create structures like the one shown to the right <sil=0.979> .PERIOD A Linked Stack Example
A good example of dynamic data structures is a simple stack library <sil=0.443> ,COMMA one that uses a dynamic list and includes functions to init <sil=0.393> ,COMMA clear <sil=0.627> ,COMMA push <sil=0.487> ,COMMA and pop <sil=0.901> .PERIOD The library’s header file looks like this:
/ ∗ Stack Library − This library offers the
minimal stack operations for a
stack of integers ( easily changeable ) ∗ /
typedef int stack _ d a t a <sil=0.304> ;SEMICOLON extern void stack _init ( ) <sil=0.397> ;SEMICOLON / ∗ Initialize this library <sil=0.968> .PERIOD Call first before calling anything <sil=0.905> .PERIOD ∗ /
extern void stack_clear ( ) <sil=0.323> ;SEMICOLON / ∗ Clears the stack of all entries <sil=0.940> .PERIOD ∗ /
extern int stack _ empty ( ) <sil=0.509> ;SEMICOLON / ∗ Returns 1 if stack is empty <sil=0.565> ,COMMA 0 otherwise <sil=0.926> .PERIOD ∗ /
extern void stack_push ( stack _ data d ) <sil=0.386> ;SEMICOLON / ∗ Pushes the value dont o the stack <sil=0.993> .PERIOD ∗ /
extern stack_data stack_pop ( ) <sil=0.597> ;SEMICOLON / ∗ Returns the top element of the stack <sil=0.584> ,COMMA and removes that element <sil=0.977> .PERIOD Returns Garbage If the stack is empty <sil=0.963> .PERIOD ∗ /
The library’s code file follows:
#include "stack <sil=0.911> .PERIOD h "
#include  <stdio <sil=0.976> .PERIOD h>
/ ∗ Stack Library − This library offers the minimal stack operations for a stack of integers ∗ /
struct stack_rec
{
stack_data data <sil=0.639> ;SEMICOLON struct stack_rec ∗ next <sil=0.609> ;SEMICOLON } <sil=0.342> ;SEMICOLON struct stack_rec ∗ top =NULL <sil=0.401> ;SEMICOLON void stack_init ( )
/ ∗ Initialize this library <sil=0.918> .PERIOD Call before calling anything else <sil=0.972> .PERIOD ∗ /
{
top =NULL <sil=0.511> ;SEMICOLON }
void stack_clear ( )
/ ∗ Clears the stack of all entries <sil=0.932> .PERIOD ∗ /
{
stack_data x <sil=0.419> ;SEMICOLON while ( <sil=0.950> !EXCLAMATIONMARK stack _ empty ( ) )
x= stack_pop ( ) <sil=0.317> ;SEMICOLON }
int stack _ em pt y ( )
/ ∗ Returns 1 if the stack is empty <sil=0.370> ,COMMA 0 otherwise <sil=0.902> .PERIOD ∗ /
{
if ( t o p ==NULL)
return ( 1 ) <sil=0.455> ;SEMICOLON else
return ( 0 ) <sil=0.369> ;SEMICOLON }
void stack _ push ( stack_data d )
/ ∗ Pushes the value dont o the stack <sil=0.941> .PERIOD ∗ /
{
struct stack_rec ∗ temp <sil=0.525> ;SEMICOLON temp = (struct stack _rec ∗) malloc ( sizeof ( struct stack _rec ) ) <sil=0.373> ;SEMICOLON temp−> data =d <sil=0.447> ;SEMICOLON temp−> next = top <sil=0.460> ;SEMICOLON top = temp <sil=0.611> ;SEMICOLON }
stack_data stack_pop ( )
/ ∗ Returns the top element of the stack <sil=0.644> ,COMMA and removes that element <sil=0.988> .PERIOD Returns Garbage If the stack is empty <sil=0.939> .PERIOD ∗ /
{
struct stack_rec ∗ temp <sil=0.358> ;SEMICOLON stack _ data d = 0 <sil=0.603> ;SEMICOLON if ( top <sil=0.850> !EXCLAMATIONMARK =NULL)
{
d=top −> data <sil=0.339> ;SEMICOLON temp= top <sil=0.523> ;SEMICOLON top =top −>next <sil=0.385> ;SEMICOLON free ( temp ) <sil=0.440> ;SEMICOLON }
return ( d ) <sil=0.394> ;SEMICOLON }
Programming exercise
• Add a dup <sil=0.585> ,COMMA a count <sil=0.369> ,COMMA and an add function to the stack library to duplicate the top element of the stack <sil=0.523> ,COMMA return a count of the number of elements in the stack <sil=0.339> ,COMMA and add the top two elements in the stack <sil=0.978> .PERIOD • Build a driver program and a makefile <sil=0.485> ,COMMA and compile the stack library with the driver to make sure it works <sil=0.991> .PERIOD Note how this library practices information hiding: Someone who can see only the header file cannot tell if the stack is implemented with arrays <sil=0.354> ,COMMA pointers <sil=0.475> ,COMMA files <sil=0.503> ,COMMA or in some other way <sil=0.923> .PERIOD Note also that C uses NULL <sil=0.968> .PERIOD NULL is defined in stdio <sil=0.923> .PERIOD h <sil=0.954> ,COMMA so you will almost always have to include stdio <sil=0.978> .PERIOD h when you use pointers <sil=0.936> .PERIOD NULL is the same as zero <sil=0.948> .PERIOD Using Pointers with Arrays
Arrays and pointers are intimately linked in C <sil=0.949> .PERIOD To use arrays effectively <sil=0.449> ,COMMA you have to know how to use pointers with them <sil=0.935> .PERIOD Fully understanding the relationship between the two probably requires several days of study and experimentation <sil=0.306> ,COMMA but it is well worth the effort <sil=0.932> .PERIOD Let’s start with a simple example of arrays in C:
# define MAX 10
int main ( v oi d )
{
int a [MAX] <sil=0.643> ;SEMICOLON int b [MAX] <sil=0.535> ;SEMICOLON int i <sil=0.365> ;SEMICOLON for ( i = 0 <sil=0.348> ;SEMICOLON i <MAX <sil=0.485> ;SEMICOLON i ++)
a [ i ]= i <sil=0.476> ;SEMICOLON b=a <sil=0.594> ;SEMICOLON return 0 <sil=0.350> ;SEMICOLON }
Enter this code and try to compile it <sil=0.936> .PERIOD You will find that C will not compile it <sil=0.941> .PERIOD If you want to copy a into b <sil=0.435> ,COMMA you have to enter something like the following instead:
for ( i = 0 <sil=0.603> ;SEMICOLON i <MAX <sil=0.542> ;SEMICOLON i ++)
b [ i ]= a [ i ] <sil=0.564> ;SEMICOLON Or <sil=0.422> ,COMMA to put it more succinctly:
for ( i = 0 <sil=0.446> ;SEMICOLON i <MAX <sil=0.527> ;SEMICOLON b [ i ]= a [ i ] <sil=0.579> ,COMMA i + + ) <sil=0.549> ;SEMICOLON Better yet <sil=0.416> ,COMMA use the memcpy utility in string <sil=0.973> .PERIOD h <sil=0.999> .PERIOD Arrays in C are unusual in that variables a and b are not <sil=0.350> ,COMMA technically <sil=0.549> ,COMMA arrays themselves <sil=0.964> .PERIOD Instead they are permanent pointers to arrays <sil=0.918> .PERIOD a and b permanently point to the first elements of their respective arrays – they hold the addresses of a[0] and b[0] respectively <sil=0.978> .PERIOD Since they are permanent pointers you cannot change their addresses <sil=0.970> .PERIOD The statement a=b <sil=0.466> ;SEMICOLON therefore does not work <sil=0.996> .PERIOD Because a and b are pointers <sil=0.564> ,COMMA you can do several interesting things with pointers and arrays <sil=0.958> .PERIOD For example <sil=0.474> ,COMMA the following code works:
# define MAX 10
void main ( v oi d )
{
int a [MAX] <sil=0.616> ;SEMICOLON int i <sil=0.305> ;SEMICOLON int ∗p <sil=0.366> ;SEMICOLON p=a <sil=0.500> ;SEMICOLON for ( i = 0 <sil=0.576> ;SEMICOLON i <MAX <sil=0.484> ;SEMICOLON i ++)
a [ i ]= i <sil=0.324> ;SEMICOLON printf ("% d \ n " <sil=0.424> ,COMMA ∗ p ) <sil=0.451> ;SEMICOLON }
The statement p=a <sil=0.503> ;SEMICOLON works because a is a pointer <sil=0.993> .PERIOD Technically <sil=0.507> ,COMMA a points to the address of the 0th element of the actual array <sil=0.989> .PERIOD This element is an integer <sil=0.430> ,COMMA so a is a pointer to a single integer <sil=0.979> .PERIOD Therefore <sil=0.608> ,COMMA declaring p as a pointer to an integer and setting it equal to a works <sil=0.917> .PERIOD Another way to say exactly the same thing would be to replace p=a <sil=0.637> ;SEMICOLON with p=&a[0] <sil=0.598> ;SEMICOLON  <sil=0.448> .PERIOD Since a contains the address of a[0] <sil=0.458> ,COMMA a and &a[0] mean the same thing <sil=0.939> .PERIOD Now that p is pointing at the 0th element of a <sil=0.448> ,COMMA you can do some rather strange things with it <sil=0.916> .PERIOD The a variable is a permanent pointer and can not be changed <sil=0.613> ,COMMA but p is not subject to such restrictions <sil=0.947> .PERIOD C actually encourages you to move it around using pointer arithmetic <sil=0.991> .PERIOD For example <sil=0.307> ,COMMA if you say p++ <sil=0.338> ;SEMICOLON  <sil=0.424> ,COMMA the compiler knows that p points to an integer <sil=0.414> ,COMMA so this statement increments p the appropriate number of bytes to move it to the next element of the array <sil=0.906> .PERIOD If p were pointing to an array of 100-byte-long structures <sil=0.618> ,COMMA p++ <sil=0.355> ;SEMICOLON would move p over by 100 bytes <sil=0.973> .PERIOD C takes care of
the details of element size <sil=0.904> .PERIOD You can copy the array a into b using pointers as well <sil=0.941> .PERIOD The following code can replace (for i=0 <sil=0.367> ;SEMICOLON i<MAX <sil=0.410> ;SEMICOLON a[i]=b[i] <sil=0.572> ,COMMA i++) <sil=0.565> ;SEMICOLON :
p=a <sil=0.328> ;SEMICOLON q=b <sil=0.554> ;SEMICOLON f o r ( i = 0 <sil=0.501> ;SEMICOLON i <MAX <sil=0.621> ;SEMICOLON i ++)
{
∗q = ∗p <sil=0.490> ;SEMICOLON q ++ <sil=0.315> ;SEMICOLON p ++ <sil=0.427> ;SEMICOLON }
You can abbreviate this code as follows:
p=a <sil=0.539> ;SEMICOLON q=b <sil=0.589> ;SEMICOLON for ( i = 0 <sil=0.306> ;SEMICOLON i <MAX <sil=0.542> ;SEMICOLON i ++)
∗q++ = ∗p ++ <sil=0.551> ;SEMICOLON And you can further abbreviate it to:
f o r ( p=a <sil=0.400> ,COMMA q=b <sil=0.351> ,COMMA i = 0 <sil=0.466> ;SEMICOLON i <MAX <sil=0.621> ;SEMICOLON ∗q++ = ∗p ++ <sil=0.595> ,COMMA i + + ) <sil=0.366> ;SEMICOLON What if you go beyond the end of the array a or b with the pointers p or q <sil=0.878> ?QUESTIONMARK C does not care – it blithely goes along incrementing p and q <sil=0.448> ,COMMA copying away over other variables with abandon <sil=0.994> .PERIOD You need to be careful when indexing into arrays in C <sil=0.578> ,COMMA because C assumes that you know what you are doing <sil=0.945> .PERIOD You can pass an array such as a or b to a function in two different ways <sil=0.965> .PERIOD Imagine a function dump that accepts an array of integers as a parameter and prints the contents of the array to stdout <sil=0.934> .PERIOD There are two ways to code dump:
void dump ( int a [ ] <sil=0.477> ,COMMA int n i a )
{
int i <sil=0.544> ;SEMICOLON for ( i = 0 <sil=0.313> ;SEMICOLON i < n i a <sil=0.435> ;SEMICOLON i ++)
printf ("% d \ n " <sil=0.523> ,COMMA a [ i ] ) <sil=0.375> ;SEMICOLON }
or:
void dump ( int ∗p <sil=0.474> ,COMMA int n i a )
{
int i <sil=0.318> ;SEMICOLON for ( i = 0 <sil=0.465> ;SEMICOLON i < n i a <sil=0.591> ;SEMICOLON i ++)
printf ("% d \ n " <sil=0.390> ,COMMA ∗ p + + ) <sil=0.477> ;SEMICOLON }
The nia (number_in_array) variable is required so that the size of the array is known <sil=0.975> .PERIOD Note that only a pointer to the array <sil=0.506> ,COMMA rather than the contents of the array <sil=0.595> ,COMMA is passed to the function <sil=0.997> .PERIOD Also note that C functions can accept variable-size arrays as parameters <sil=0.976> .PERIOD Strings
Strings in C are intertwined with pointers to a large extent <sil=0.966> .PERIOD You must become familiar with the pointer concepts covered in the previous articles to use C strings effectively <sil=0.902> .PERIOD Once you get used to them <sil=0.524> ,COMMA however <sil=0.982> ,COMMA you can often perform string manipulations very efficiently <sil=0.923> .PERIOD A string in C is simply an array of characters <sil=0.957> .PERIOD The following line declares an array that can hold a string of up to 99 characters <sil=0.992> .PERIOD char str [ 100 ] <sil=0.581> ;SEMICOLON It holds characters as you would expect: str[0] is the first character of the string <sil=0.477> ,COMMA str[1] is the  second character <sil=0.407> ,COMMA and so on <sil=0.996> .PERIOD But why is a 100-element array unable to hold up to 100 characters <sil=0.962> ?QUESTIONMARK Because C usesnull-terminated strings <sil=0.524> ,COMMA which means that the end of any string is marked by the ASCII value 0 (the null character) <sil=0.447> ,COMMA which is also represented in C as ‘\0’ <sil=0.952> .PERIOD Null termination is very different from the way many other languages handle strings <sil=0.988> .PERIOD For example <sil=0.310> ,COMMA in Pascal <sil=0.432> ,COMMA each string consists of an array of characters <sil=0.483> ,COMMA with a length byte that keeps count of the number of characters stored in the array <sil=0.913> .PERIOD This structure gives Pascal a definite advantage when you ask for the length of a string <sil=0.995> .PERIOD Pascal can simply return the length byte <sil=0.547> ,COMMA whereas C has to count the characters until it finds ‘\0’ <sil=0.958> .PERIOD This fact makes C much slower than Pascal in certain cases <sil=0.403> ,COMMA but in others it makes it faster <sil=0.647> ,COMMA as we will see in the examples below <sil=1.000> .PERIOD Because C provides no explicit support for strings in the language itself <sil=0.519> ,COMMA all of the string-handling functions are implemented in libraries <sil=0.939> .PERIOD The string I/0 operations (gets <sil=0.589> ,COMMA puts <sil=0.383> ,COMMA and so on) are implemented in <stdio <sil=0.981> .PERIOD h> <sil=0.983> ,COMMA and a set of fairly simple string manipulation functions are implemented in <string <sil=0.975> .PERIOD h> (on some systems <sil=0.457> ,COMMA <strings <sil=0.938> .PERIOD h> ) <sil=0.974> .PERIOD The fact that strings are not native to C forces you to create some fairly roundabout code <sil=0.942> .PERIOD For example <sil=0.330> ,COMMA suppose you want to assign one string to another string <sil=0.588> ;SEMICOLON that is <sil=0.516> ,COMMA you want to copy the contents of one string to another <sil=0.963> .PERIOD In C you cannot simply assign one array to another <sil=0.916> .PERIOD You have to copy it element by element <sil=0.931> .PERIOD The string library (<string <sil=0.904> .PERIOD h> or <strings <sil=0.959> .PERIOD h> ) contains a function called strcpy for this task <sil=0.950> .PERIOD Here is an extremely common piece of code to find in a normal C program:
chars [ 1 0 0 ] <sil=0.311> ;SEMICOLON str cpy ( s <sil=0.484> ,COMMA " hello " ) <sil=0.423> ;SEMICOLON The following code shows how to use strcpy in C:
# include < string <sil=0.932> .PERIOD h>
int main ( void )
{
Char s1 [ 100 ] <sil=0.448> ,COMMA s2 [ 100 ] <sil=0.474> ;SEMICOLON Str cpy ( s1 <sil=0.323> ,COMMA " hello " ) <sil=0.330> ;SEMICOLON / ∗ copy " hello " into s1 ∗ /
Str cpy ( s2 <sil=0.307> ,COMMA s 1 ) <sil=0.400> ;SEMICOLON / ∗ copy s1 into s2 ∗ /
return 0 <sil=0.552> ;SEMICOLON }
strcpy is used whenever a string is initialized in C <sil=0.936> .PERIOD You use the strcmp function in the string library to compare two strings <sil=0.932> .PERIOD It returns an integer that indicates the result of the comparison <sil=0.990> .PERIOD Zero means the two strings are equal <sil=0.354> ,COMMA a negative value means that s1 is less than s2 <sil=0.619> ,COMMA and a positive value means s1 is greater than s2 <sil=0.904> .PERIOD #include < stdio <sil=0.905> .PERIOD h>
#include < string <sil=0.960> .PERIOD h>
int main ( void )
{
chars 1 [ 100 ] <sil=0.420> ,COMMA s2 [ 100 ] <sil=0.578> ;SEMICOLON gets ( s1 ) <sil=0.538> ;SEMICOLON gets ( s2 ) <sil=0.546> ;SEMICOLON if ( st r cm p ( s1 <sil=0.483> ,COMMA s2 ) == 0 ) {
printf ( " equal \ n " ) <sil=0.557> ;SEMICOLON } else if ( str cmp ( s1 <sil=0.513> ,COMMA s2 ) < 0 ) {
printf ( " s1 less than s2 \ n " ) <sil=0.353> ;SEMICOLON } else {
printf ( " s1 greater than s2 \ n " ) <sil=0.627> ;SEMICOLON }
return 0 <sil=0.391> ;SEMICOLON }
Other common functions in the string library include strlen <sil=0.371> ,COMMA which returns the length of a string <sil=0.479> ,COMMA and strcat which concatenates two strings <sil=0.950> .PERIOD The string library contains a number of other functions <sil=0.634> ,COMMA which you can peruse by reading the man page <sil=0.958> .PERIOD To get you started building string functions <sil=0.376> ,COMMA and to help you understand other programmers’ code (everyone seems to have his or her own set of string functions for special purposes in a program) <sil=0.471> ,COMMA we will look at two examples <sil=0.467> ,COMMA strlen and strcpy <sil=0.973> .PERIOD Following is a strictly Pascal-like version of strlen:
int strlen ( chars [ ] )
{
int x <sil=0.441> ;SEMICOLON x = 0 <sil=0.318> ;SEMICOLON while ( s [ x ] <sil=0.870> !EXCLAMATIONMARK = ’ \ 0 ’ )
x=x + 1 <sil=0.630> ;SEMICOLON return ( x ) <sil=0.322> ;SEMICOLON }
Most C programmers shun this approach because it seems inefficient <sil=0.947> .PERIOD Instead <sil=0.618> ,COMMA they often use a pointer-based approach:
int strlen ( char ∗ s )
{
int x = 0 <sil=0.563> ;SEMICOLON while (∗ s <sil=0.934> !EXCLAMATIONMARK = ’ \ 0 ’ )
{
x ++ <sil=0.360> ;SEMICOLON s ++ <sil=0.557> ;SEMICOLON }
return ( x ) <sil=0.380> ;SEMICOLON }
You can abbreviate this code to the following:
int strlen ( char ∗ s )
{
int x = 0 <sil=0.569> ;SEMICOLON while (∗ s ++)
x ++ <sil=0.399> ;SEMICOLON return ( x ) <sil=0.501> ;SEMICOLON }
I imagine a true C expert could make this code even shorter <sil=0.912> .PERIOD When I compile these three pieces of code with gcc <sil=0.544> ,COMMA using no optimization <sil=0.535> ,COMMA and run each 20 <sil=0.470> ,COMMA 000 times on a 120-character string <sil=0.526> ,COMMA the first piece of code yields a time of 12 <sil=0.993> .PERIOD 3 seconds <sil=0.437> ,COMMA the second 12 <sil=0.971> .PERIOD 3 seconds <sil=0.491> ,COMMA and the third 12 <sil=0.957> .PERIOD 9 seconds <sil=0.943> .PERIOD What does this mean <sil=0.908> ?QUESTIONMARK To me <sil=0.310> ,COMMA it means that you should write the code in whatever way is easiest for you to understand <sil=0.947> .PERIOD Pointers generally yield faster code <sil=0.330> ,COMMA but the strlen code above shows that that is not always the case <sil=0.918> .PERIOD We can go through the same evolution with strcpy:
strcpy ( char s1 [ ] <sil=0.637> ,COMMA char s2 [ ] )
{
int x <sil=0.545> ;SEMICOLON for ( x = 0 <sil=0.583> ;SEMICOLON x <= strcpy ( s 2 ) <sil=0.504> ;SEMICOLON x ++)
s1 [ x ] = s2 [ x ] <sil=0.590> ;SEMICOLON }
Note here that <= is important in the for loop because the code then copies the ‘\0’ <sil=0.910> .PERIOD Be sure to copy ‘\0’ <sil=0.937> .PERIOD Major bugs occur later on if you leave it out <sil=0.355> ,COMMA because the string has no end and therefore an unknown length <sil=0.963> .PERIOD Note also that this code is very inefficient <sil=0.536> ,COMMA because strlen gets called every time through the for loop <sil=0.950> .PERIOD To solve this problem <sil=0.513> ,COMMA you could use the following code:
strcpy ( char s1 [ ] <sil=0.648> ,COMMA char s2 [ ] )
{
int x <sil=0.455> ,COMMA len <sil=0.397> ;SEMICOLON len = strlen ( s2 ) <sil=0.574> ;SEMICOLON for ( x = 0 <sil=0.420> ;SEMICOLON x <= len <sil=0.636> ;SEMICOLON x ++)
s1 [ x ] = s2 [ x ] <sil=0.550> ;SEMICOLON }
The pointer version is similar <sil=0.979> .PERIOD strcpy ( char ∗ s1 <sil=0.634> ,COMMA char ∗ s2 )
{
while (∗ s2 <sil=0.966> !EXCLAMATIONMARK = ’ \ 0 ’ )
{
∗ s1 = ∗ s2 <sil=0.609> ;SEMICOLON s1 ++ <sil=0.466> ;SEMICOLON s2 ++ <sil=0.477> ;SEMICOLON }
}
You can compress this code further:
strcpy ( char ∗ s1 <sil=0.339> ,COMMA char ∗ s 2 )
{
while (∗ s2 )
∗ s1 ++ = ∗ s2 ++ <sil=0.424> ;SEMICOLON }
If you wish <sil=0.608> ,COMMA you can even say while (*s1++ = *s2++) <sil=0.416> ;SEMICOLON  <sil=0.469> .PERIOD The first version of strcpy takes 415 seconds to copy a 120-character string 10 <sil=0.487> ,COMMA 000 times <sil=0.553> ,COMMA the second version takes 14 <sil=0.901> .PERIOD 5 seconds <sil=0.514> ,COMMA the third version 9 <sil=0.973> .PERIOD 8 seconds <sil=0.420> ,COMMA and the fourth 10 <sil=0.963> .PERIOD 3 seconds <sil=0.555> .PERIOD As you can see <sil=0.399> ,COMMA pointers provide a significant performance boost here <sil=0.939> .PERIOD The prototype for the strcpy function in the string library indicates that it is designed to return a pointer to a string:
char ∗ s t r c p y ( c h a r ∗ s1 <sil=0.642> ,COMMA c h a r ∗ s 2 )
Most of the string functions return a string pointer as a result <sil=0.557> ,COMMA and strcpy returns
the value of s1 as its result <sil=0.915> .PERIOD Using pointers with strings can sometimes result in definite improvements in speed and you can take advantage of these if you think about them a little <sil=0.988> .PERIOD For example <sil=0.503> ,COMMA suppose you want to remove the leading blanks from a string <sil=0.928> .PERIOD You might be inclined to shift characters over on top of the blanks to remove them <sil=0.970> .PERIOD In C <sil=0.443> ,COMMA you can avoid the movement altogether:
# include < stdio <sil=0.944> .PERIOD h>
# include < string <sil=0.962> .PERIOD h>
int main ( void )
{
chars [ 100 ] <sil=0.615> ,COMMA ∗p <sil=0.496> ;SEMICOLON gets ( s ) <sil=0.559> ;SEMICOLON p = s <sil=0.496> ;SEMICOLON while (∗ p == ’ ’ )
p ++ <sil=0.334> ;SEMICOLON print f ("% s \ n " <sil=0.480> ,COMMA p ) <sil=0.621> ;SEMICOLON return 0 <sil=0.567> ;SEMICOLON }
This is much faster than the movement technique <sil=0.474> ,COMMA especially for long strings <sil=0.914> .PERIOD You will pick up many other tricks with strings as you go along and read other code <sil=0.908> .PERIOD Practice is the key <sil=0.951> .PERIOD Special Note on String Constants Suppose you create the following two code fragments and run them:
Fragment 1
{
char ∗ s <sil=0.482> ;SEMICOLON s = " hello " <sil=0.321> ;SEMICOLON printf ("% s \ n " <sil=0.526> ,COMMA s ) <sil=0.360> ;SEMICOLON }
Fragment 2
{
chars [ 100 ] <sil=0.417> ;SEMICOLON strcpy ( s <sil=0.937> ,COMMA " hello " ) <sil=0.559> ;SEMICOLON printf ("% s \ n " <sil=0.532> ,COMMA s ) <sil=0.454> ;SEMICOLON }
These two fragments produce the same output <sil=0.612> ,COMMA but their internal behavior is quite different <sil=0.931> .PERIOD In fragment 2 <sil=0.312> ,COMMA you cannot say s = “hello” <sil=0.588> ;SEMICOLON  <sil=0.411> .PERIOD To understand the differences <sil=0.438> ,COMMA you have to understand how the string constant table works in C <sil=0.999> .PERIOD When your program is compiled <sil=0.333> ,COMMA the compiler forms the object code file <sil=0.587> ,COMMA which contains your machine code and a table of all the string constants declared in the program <sil=0.994> .PERIOD In fragment 1 <sil=0.379> ,COMMA the statement s = “hello” <sil=0.477> ;SEMICOLON causes s to point to the address of the string hello in the string constant table <sil=0.946> .PERIOD Since this string is in the string constant table <sil=0.620> ,COMMA and therefore technically a part of the executable code <sil=0.367> ,COMMA you cannot modify it <sil=0.932> .PERIOD You can only point to it and use it in a read-only manner <sil=0.920> .PERIOD In fragment 2 <sil=0.505> ,COMMA the string hello also exists in the constant table <sil=0.410> ,COMMA so you can copy it into the array of characters named s <sil=0.988> .PERIOD Since s is not a pointer <sil=0.412> ,COMMA the statement s = “hello” <sil=0.464> ;SEMICOLON will not work in fragment 2 <sil=0.968> .PERIOD It will not even compile <sil=0.958> .PERIOD Special Note on Using Strings with malloc
Suppose you write the following program:
int main ( void )
{
char ∗ s <sil=0.594> ;SEMICOLON s = ( char ∗) malloc ( 100 ) <sil=0.410> ;SEMICOLON s = " hello " <sil=0.429> ;SEMICOLON free ( s ) <sil=0.541> ;SEMICOLON return 0 <sil=0.465> ;SEMICOLON }
It compiles properly <sil=0.455> ,COMMA but gives a segmentation fault at the free line when you run it <sil=0.980> .PERIOD The malloc line allocates a block 100 bytes long and points s at it <sil=0.613> ,COMMA but now the s = “hello” <sil=0.489> ;SEMICOLON line is a problem <sil=0.909> .PERIOD It is syntactically correct because s is a pointer <sil=0.409> ;SEMICOLON however <sil=0.985> ,COMMA when s = “hello” <sil=0.477> ;SEMICOLON is executed <sil=0.556> ,COMMA s points to the string in the string constant table and the allocated block is orphaned <sil=0.988> .PERIOD Since s is pointing into the string constant table <sil=0.531> ,COMMA the string cannot be changed <sil=0.632> ;SEMICOLON free fails because it cannot deallocate a block in an executable region <sil=0.920> .PERIOD The correct code follows:
int main ( void )
{
char ∗ s <sil=0.364> ;SEMICOLON s = ( char ∗) malloc ( 100 ) <sil=0.415> ;SEMICOLON str cpy ( s <sil=0.521> ,COMMA " hello " ) <sil=0.447> ;SEMICOLON free ( s ) <sil=0.649> ;SEMICOLON return 0 <sil=0.354> ;SEMICOLON }
Programming exercise
• Create a program that reads in a string containing a first name followed by a blank followed by a last name <sil=0.948> .PERIOD Write functions to remove any leading or trailing blanks <sil=0.932> .PERIOD Write another function that returns the last name <sil=0.989> .PERIOD • Write a function that converts a string to uppercase <sil=0.964> .PERIOD • Write a function that gets the first word from a string and returns the remainder of the string <sil=0.958> .PERIOD Operator Precedence <sil=0.375> ,COMMA II
C contains many operators <sil=0.523> ,COMMA and because of the way in which operator precedence works <sil=0.332> ,COMMA the interactions between multiple operators can become confusing <sil=0.906> .PERIOD x = 5 + 3 ∗ 6 <sil=0.635> ;SEMICOLON x receives the value 23 <sil=0.632> ,COMMA not 48 <sil=0.440> ,COMMA because in C multiplication and division have higher precedence than addition and subtraction <sil=0.938> .PERIOD char ∗ a { [ } 1 0 { ] } <sil=0.635> ;SEMICOLON Is a a single pointer to an array of 10 characters <sil=0.554> ,COMMA or is it an array of 10 pointers to character <sil=0.962> ?QUESTIONMARK Unless you know the precedence conventions in C <sil=0.312> ,COMMA there is no way to find out <sil=0.911> .PERIOD Similarly <sil=0.310> ,COMMA because of precedence statements such as *p <sil=0.990> .PERIOD i = 10 <sil=0.528> ;SEMICOLON do not work <sil=0.957> .PERIOD Instead <sil=0.338> ,COMMA the form (*p) <sil=0.976> .PERIOD i = 10 <sil=0.648> ;SEMICOLON must be used to force correct precedence <sil=0.915> .PERIOD The following table from C Programming Language by Kernighan and Ritchie <sil=0.614> ,COMMA shows the precedence hierarchy in C <sil=0.914> .PERIOD The top line has the highest precedence <sil=0.908> .PERIOD Operators Associativity
( [ − <sil=0.947> .PERIOD Left to right <sil=0.953> !EXCLAMATIONMARK − ++ −{− + ∗ & ( type−cast ) size of Right to left
(in the above line <sil=0.564> ,COMMA + <sil=0.602> ,COMMA − and ∗ are the unary forms )
∗ / % Left to right
+ − left to right
<< >> left to right
< <= > >= left to right
== <sil=0.870> !EXCLAMATIONMARK = left to right
& left to right
^ left to right
| left to right
&& left to right
| | left to right <sil=0.878> ?QUESTIONMARK : left to right
= += −= ∗= / = %= &= ^= | = <<= >>= Right to left <sil=0.525> ,COMMA left to right
Using this table <sil=0.414> ,COMMA you can see that char *a[10] <sil=0.438> ;SEMICOLON is an array of 10 pointers to character <sil=0.929> .PERIOD You can also see why the parentheses are required if (*p) <sil=0.913> .PERIOD i is to be handled correctly <sil=0.979> .PERIOD After some practice <sil=0.529> ,COMMA you will memorize most of this table <sil=0.483> ,COMMA but every now and again something will not work because you have been caught by a subtle precedence problem <sil=0.946> .PERIOD Command Line Arguments
C provides a fairly simple mechanism for retrieving command line parameters entered by the user <sil=0.971> .PERIOD It passes an argv parameter to the main function in the program <sil=0.968> .PERIOD argv structures appear in a fair number of the more advanced library calls <sil=0.335> ,COMMA so understanding them is useful to any C programmer <sil=0.976> .PERIOD Enter the following code and compile it:
# include < stdio <sil=0.963> .PERIOD h>
int main ( int arg c <sil=0.455> ,COMMA char ∗ arg v [ ] )
{
int x <sil=0.604> ;SEMICOLON printf ("% d \ n " <sil=0.368> ,COMMA arg c ) <sil=0.421> ;SEMICOLON for ( x = 0 <sil=0.448> ;SEMICOLON x < arg c <sil=0.435> ;SEMICOLON x ++)
printf ("% s \ n " <sil=0.395> ,COMMA arg v [ x ] ) <sil=0.489> ;SEMICOLON return 0 <sil=0.370> ;SEMICOLON }
In this code <sil=0.523> ,COMMA the main program accepts two parameters <sil=0.364> ,COMMA argv and argc <sil=0.914> .PERIOD The argv parameter is an array of pointers to string that contains the parameters entered when the program was invoked at the UNIX command line <sil=0.905> .PERIOD The argc integer contains a count of the number of parameters <sil=0.949> .PERIOD This particular piece of code types out the command line parameters <sil=0.981> .PERIOD To try this <sil=0.494> ,COMMA compile the code to an executable file named aaa and type aaa xxx yyy zzz <sil=0.935> .PERIOD The code will print the command line parameters xxx <sil=0.332> ,COMMA yyy and zzz <sil=0.533> ,COMMA one per line <sil=0.918> .PERIOD The char *argv[] line is an array of pointers to string <sil=0.926> .PERIOD In other words <sil=0.627> ,COMMA each element of the array is a pointer <sil=0.529> ,COMMA and each pointer points to a string (technically <sil=0.311> ,COMMA to the first character of the string) <sil=0.974> .PERIOD Thus <sil=0.390> ,COMMA argv[0] points to a string that contains the first parameter on the command line (the program’s name) <sil=0.336> ,COMMA argv[1] points to the next parameter <sil=0.622> ,COMMA and so on <sil=0.902> .PERIOD The argc variable tells you how many of the pointers in the array are valid <sil=0.913> .PERIOD You will find that the preceding code does nothing more than print each of the valid strings pointed to by argv <sil=0.920> .PERIOD Because argv exists <sil=0.372> ,COMMA you can let your program react to command line parameters entered by the user fairly easily <sil=0.977> .PERIOD For example <sil=0.419> ,COMMA you might have your program detect the word help as the first parameter following the program name <sil=0.513> ,COMMA and dump a help file to stdout <sil=0.971> .PERIOD File names can also be passed in and used in your fopen statements <sil=0.975> .PERIOD Text files
Text files in C are straightforward and easy to understand <sil=0.915> .PERIOD All text file functions and types in C come from the stdio library <sil=0.961> .PERIOD When you need text I/O in a C program <sil=0.360> ,COMMA and you need only one source for input information and one sink for output information <sil=0.494> ,COMMA you can rely on stdin (standard in) and stdout (standard out) <sil=0.913> .PERIOD You can then use input and output redirection at the command line to move different information streams through the program <sil=0.903> .PERIOD There are six different I/O commands in <stdio <sil=0.953> .PERIOD h> that you can use with stdin and stdout:
• printf - prints formatted output to stdout
• scanf - reads formatted input from stdin
• puts - prints a string to stdout
• gets - reads a string from stdin
• putc - prints a character to stdout
• getc <sil=0.344> ,COMMA getchar - reads a character from stdin
The advantage of stdin and stdout is that they are easy to use <sil=0.971> .PERIOD Likewise <sil=0.436> ,COMMA the ability to redirect I/O is very powerful <sil=0.954> .PERIOD For example <sil=0.631> ,COMMA maybe you want to create a program that reads from stdin and counts the number of characters:
# include < stdio h>
# include < string <sil=0.972> .PERIOD h>
int main ( void )
{
chars [ 1000 ] <sil=0.404> ;SEMICOLON int count = 0 <sil=0.323> ;SEMICOLON while ( gets ( s ) )
{
count += strlen ( s ) <sil=0.371> ;SEMICOLON }
printf ("% d \ n " <sil=0.403> ,COMMA count ) <sil=0.578> ;SEMICOLON return 0 <sil=0.541> ;SEMICOLON }
Enter this code and run it <sil=0.923> .PERIOD It waits for input from stdin <sil=0.516> ,COMMA so type a few lines <sil=0.956> .PERIOD When you are done <sil=0.480> ,COMMA press CTRL-D to signal end-of-file (eof) <sil=0.993> .PERIOD The gets function reads a line until it detects eof <sil=0.601> ,COMMA then returns a 0 so that the while loop ends <sil=0.901> .PERIOD When you press CTRL-D <sil=0.334> ,COMMA you see a count of the number of characters in stdout (the screen) <sil=0.959> .PERIOD (Use man gets or your compiler’s documentation to learn more about the gets function <sil=0.906> .PERIOD )
Now <sil=0.356> ,COMMA suppose you want to count the characters in a file <sil=0.912> .PERIOD If you compiled the program to an executable named xxx <sil=0.353> ,COMMA you can type the following:
xxx < filename
Instead of accepting input from the keyboard <sil=0.481> ,COMMA the contents of the file named filename will be used instead <sil=0.934> .PERIOD You can achieve the same result using pipes:
c a t < filename | xxx
You can also redirect the output to a file:
xxx < filename > out
This command places the character count produced by the program in a text file named out <sil=0.964> .PERIOD Sometimes <sil=0.574> ,COMMA you need to use a text file directly <sil=0.906> .PERIOD For example <sil=0.395> ,COMMA you might need to open a specific file and read from or write to it <sil=0.960> .PERIOD You might want to manage several streams of input or output or create a program like a text editor that can save and recall data or configuration files on command <sil=0.958> .PERIOD In that case <sil=0.640> ,COMMA use the text file functions in stdio:
• fopen - opens a text file
• fclose - closes a text file
• feof - detects end-of-file marker in a file
• fprintf - prints formatted output to a file
• fscanf - reads formatted input from a file
• fputs - prints a string to a file
• fgets - reads a string from a file
• fputc - prints a character to a file
• fgetc - reads a character from a file
Text files: opening
You use fopen to open a file <sil=0.927> .PERIOD It opens a file for a specified mode (the three most common are r <sil=0.442> ,COMMA w <sil=0.304> ,COMMA and a <sil=0.542> ,COMMA for read <sil=0.381> ,COMMA write <sil=0.552> ,COMMA and append) <sil=0.958> .PERIOD It then returns a file pointer that you use to access the file <sil=0.963> .PERIOD For example <sil=0.518> ,COMMA suppose you want to open a file and write the numbers 1 to 10 in it <sil=0.967> .PERIOD You could use the following code:
# include < stdio <sil=0.955> .PERIOD h>
# define MAX 10
int main ( void )
{
FILE ∗ f <sil=0.547> ;SEMICOLON int x <sil=0.388> ;SEMICOLON f = fopen ( " out " <sil=0.447> ,COMMA "w " ) <sil=0.534> ;SEMICOLON if ( <sil=0.958> !EXCLAMATIONMARK f )
return 1 <sil=0.521> ;SEMICOLON for ( x = 1 <sil=0.421> ;SEMICOLON x <= MAX <sil=0.489> ;SEMICOLON x ++)
fprintf ( f <sil=0.438> ,COMMA "% d \ n " <sil=0.550> ,COMMA x ) <sil=0.495> ;SEMICOLON fclose ( f ) <sil=0.438> ;SEMICOLON return 0 <sil=0.534> ;SEMICOLON }
The fopen statement here opens a file named out with the w mode <sil=0.948> .PERIOD This is a destructive write mode <sil=0.523> ,COMMA which means that if out does not exist it is created <sil=0.429> ,COMMA but if it does exist it is destroyed and a new file is created in its place <sil=0.924> .PERIOD The fopen command returns a pointer to the file <sil=0.498> ,COMMA which is stored in the variable f <sil=0.905> .PERIOD This variable is used to refer to the file <sil=0.968> .PERIOD If the file cannot be opened for some reason <sil=0.393> ,COMMA f will contain NULL <sil=0.953> .PERIOD The fprintf statement should look very familiar: It is just like printf but uses the file pointer as its first parameter <sil=0.924> .PERIOD The fclose statement closes the file when you are done <sil=0.913> .PERIOD Text files: reading
To read a file <sil=0.374> ,COMMA open it with r mode <sil=0.946> .PERIOD In general <sil=0.428> ,COMMA it is not a good idea to use fscanffor reading: Unless the file is perfectly formatted <sil=0.628> ,COMMA fscanf will not handle it correctly <sil=0.945> .PERIOD Instead <sil=0.521> ,COMMA use fgets to read in each line and then parse out the pieces you need <sil=0.950> .PERIOD The following code demonstrates the process of reading a file and dumping its contents to the screen:
# include < stdio <sil=0.911> .PERIOD h>
int main ( void )
{
FILE ∗ f <sil=0.354> ;SEMICOLON chars [ 1000 ] <sil=0.376> ;SEMICOLON f = fopen ( "  infile " <sil=0.622> ,COMMA " r " ) <sil=0.500> ;SEMICOLON if ( <sil=0.850> !EXCLAMATIONMARK f )
return 1 <sil=0.404> ;SEMICOLON while ( fgets ( s <sil=0.459> ,COMMA 1000 <sil=0.481> ,COMMA f ) <sil=0.908> !EXCLAMATIONMARK = NULL)
printf ("% s " <sil=0.560> ,COMMA s ) <sil=0.599> ;SEMICOLON fclose ( f ) <sil=0.624> ;SEMICOLON return 0 <sil=0.519> ;SEMICOLON }
The fgets statement returns a NULL value at the end-of-file marker <sil=0.913> .PERIOD It reads a line (up to 1 <sil=0.555> ,COMMA 000 characters in this case) and then prints it to stdout <sil=0.918> .PERIOD Notice that the printf statement does not include \n in the format string <sil=0.395> ,COMMA because fgets adds \n to the end of each line it reads <sil=0.992> .PERIOD Thus <sil=0.606> ,COMMA you can tell if a line is not complete in the event that it overflows the maximum line length specified in the second parameter to fgets <sil=0.993> .PERIOD Main function return values
This program is the first program in this series that returns an error value from the main program <sil=0.950> .PERIOD If the fopen command fails <sil=0.465> ,COMMA f will contain a NULL value (a zero) <sil=0.921> .PERIOD We test for that error with the if statement <sil=0.941> .PERIOD The if statement looks at the True/False value of the variable f <sil=0.935> .PERIOD Remember that in C <sil=0.543> ,COMMA 0 is False and anything else is true <sil=0.980> .PERIOD So if there were an error opening the file <sil=0.570> ,COMMA f would contain zero <sil=0.313> ,COMMA which is False <sil=0.916> .PERIOD The <sil=0.992> !EXCLAMATIONMARK is the NOT operator <sil=0.910> .PERIOD It inverts a Boolean value <sil=0.902> .PERIOD So the if statement could have been written like this:
if ( f == 0 )
That is equivalent <sil=0.992> .PERIOD However <sil=0.393> ,COMMA if ( <sil=0.992> !EXCLAMATIONMARK f) is more common <sil=0.937> .PERIOD If there is a file error <sil=0.574> ,COMMA we return a 1 from the main function <sil=0.997> .PERIOD In Linux <sil=0.469> ,COMMA you can actually test for this value on the command line <sil=0.969> .PERIOD See the shell documentation for details <sil=0.954> .PERIOD Binary Files
Binary files are very similar to arrays of structures <sil=0.510> ,COMMA except the structures are in a disk file rather than in an array in memory <sil=0.990> .PERIOD Because the structures in a binary file are on disk <sil=0.546> ,COMMA you can create very large collections of them (limited only by your available disk space) <sil=0.962> .PERIOD They are also permanent and always available <sil=0.980> .PERIOD The only disadvantage is the slowness that comes from disk access time <sil=0.913> .PERIOD Binary files have two features that distinguish them from text files:
• You can jump instantly to any structure in the file <sil=0.350> ,COMMA which provides random access as in an array <sil=0.961> .PERIOD • You can change the contents of a structure anywhere in the file at any time <sil=0.935> .PERIOD Binary files also usually have faster read and write times than text files <sil=0.313> ,COMMA because a binary image of the record is stored directly from memory to disk (or vice versa) <sil=0.943> .PERIOD In a text file <sil=0.379> ,COMMA everything has to be converted back and forth to text <sil=0.382> ,COMMA and this takes time <sil=0.905> .PERIOD C supports the file-of-structures concept very cleanly <sil=0.968> .PERIOD Once you open the file you can read a structure <sil=0.582> ,COMMA write a structure <sil=0.545> ,COMMA or seek to any structure in the file <sil=0.989> .PERIOD This file concept supports the concept of a file pointer <sil=0.911> .PERIOD When the file is opened <sil=0.440> ,COMMA the pointer points to record 0 (the first record in the file) <sil=0.933> .PERIOD Any read operation reads the currently pointed-to structure and moves the pointer down one structure <sil=0.963> .PERIOD Any write operation writes to the currently pointed-to structure and moves the pointer down one structure <sil=0.997> .PERIOD Seek moves the pointer to the requested record <sil=0.985> .PERIOD Keep in mind that C thinks of everything in the disk file as blocks of bytes read from disk into memory or read from memory onto disk <sil=0.922> .PERIOD C uses a file pointer <sil=0.433> ,COMMA but it can point to any byte location in the file <sil=0.922> .PERIOD You therefore have to keep track of things <sil=0.956> .PERIOD The following program illustrates these concepts:
# include < stdio <sil=0.908> .PERIOD h>
/ ∗ random record description − could be anything ∗ /
struct rec
{
int x <sil=0.579> ,COMMA y <sil=0.326> ,COMMA z <sil=0.485> ;SEMICOLON } <sil=0.518> ;SEMICOLON / ∗
∗ writes and then reads 10 arbitrary records
∗ from the file " junk " <sil=0.936> .PERIOD ∗ /
int main ( void )
{
int i <sil=0.349> ,COMMA j <sil=0.601> ;SEMICOLON FILE ∗ f <sil=0.621> ;SEMICOLON struct rec r <sil=0.305> ;SEMICOLON / ∗ create the file 10 records ∗ /
f = fopen ( " junk " <sil=0.396> ,COMMA "w " ) <sil=0.499> ;SEMICOLON if ( <sil=0.876> !EXCLAMATIONMARK f )
{
return 1 <sil=0.349> ;SEMICOLON }
for ( i = 1 <sil=0.632> ;SEMICOLON i <= 1 0 <sil=0.399> ;SEMICOLON i ++)
{
r <sil=0.938> .PERIOD x = i <sil=0.501> ;SEMICOLON fwrite (& r <sil=0.558> ,COMMA sizeof ( structrec ) <sil=0.490> ,COMMA 1 <sil=0.432> ,COMMA f ) <sil=0.900> ;SEMICOLON }
fclose  ( f ) <sil=0.582> ;SEMICOLON / ∗ read the 10 records ∗ /
f = fopen ( " junk " <sil=0.331> ,COMMA " r " ) <sil=0.328> ;SEMICOLON if ( <sil=0.894> !EXCLAMATIONMARK f )
{
return 1 <sil=0.476> ;SEMICOLON }
for ( i = 1 <sil=0.340> ;SEMICOLON i <= 1 0 <sil=0.394> ;SEMICOLON i ++)
{
fread (& r <sil=0.305> ,COMMA sizeof ( structrec ) <sil=0.564> ,COMMA 1 <sil=0.352> ,COMMA f ) <sil=0.906> ;SEMICOLON printf ("%d \ n " <sil=0.474> ,COMMA r <sil=0.942> .PERIOD x ) <sil=0.603> ;SEMICOLON }
fclose ( f ) <sil=0.379> ;SEMICOLON printf ( " \ n " ) <sil=0.373> ;SEMICOLON / ∗ use fseek to read the 10 records
inreverse order ∗ /
f = fopen ( " junk " <sil=0.477> ,COMMA " r " ) <sil=0.444> ;SEMICOLON if ( <sil=0.925> !EXCLAMATIONMARK f )
{
return 1 <sil=0.347> ;SEMICOLON }
for ( i = 9 <sil=0.436> ;SEMICOLON i >= 0 <sil=0.607> ;SEMICOLON i −−)
{
fseek ( f <sil=0.370> ,COMMA sizeof (  structrec )∗ i <sil=0.392> ,COMMA SEEK_SET ) <sil=0.649> ;SEMICOLON fread (& r <sil=0.390> ,COMMA sizeof (  structrec ) <sil=0.505> ,COMMA 1 <sil=0.648> ,COMMA f ) <sil=0.975> ;SEMICOLON printf ("%d \ n " <sil=0.408> ,COMMA r <sil=0.938> .PERIOD x ) <sil=0.516> ;SEMICOLON }
fclose ( f ) <sil=0.338> ;SEMICOLON printf ( " \ n " ) <sil=0.597> ;SEMICOLON / ∗ use fseek to read every other record ∗ /
f = fopen ( " junk " <sil=0.369> ,COMMA " r " ) <sil=0.472> ;SEMICOLON if ( <sil=0.943> !EXCLAMATIONMARK f )
{
return 1 <sil=0.593> ;SEMICOLON }
fseek ( f <sil=0.395> ,COMMA 0 <sil=0.374> ,COMMA SEEK_SET ) <sil=0.544> ;SEMICOLON for ( i = 0 <sil=0.300> ;SEMICOLON i < 5 <sil=0.505> ;SEMICOLON i ++)
{
fread (& r <sil=0.535> ,COMMA sizeof ( structrec ) <sil=0.599> ,COMMA 1 <sil=0.562> ,COMMA f ) <sil=0.869> ;SEMICOLON printf ("% d \ n " <sil=0.364> ,COMMA r <sil=0.961> .PERIOD x ) <sil=0.608> ;SEMICOLON fseek ( f <sil=0.536> ,COMMA sizeof ( structrec ) <sil=0.483> ,COMMA SEEK_CUR ) <sil=0.492> ;SEMICOLON }
fclose ( f ) <sil=0.362> ;SEMICOLON printf ( " \ n " ) <sil=0.391> ;SEMICOLON / ∗ use fseek to read 4 t h record <sil=0.396> ,COMMA change it <sil=0.499> ,COMMA and write it back ∗ /
f = fopen ( " junk " <sil=0.392> ,COMMA " r + " ) <sil=0.354> ;SEMICOLON if ( <sil=0.974> !EXCLAMATIONMARK f )
{
return 1 <sil=0.421> ;SEMICOLON }
fseek ( f <sil=0.563> ,COMMA sizeof ( structrec ) ∗ 3 <sil=0.391> ,COMMA SEEK_SET ) <sil=0.472> ;SEMICOLON fread (& r <sil=0.627> ,COMMA sizeof ( structrec ) <sil=0.351> ,COMMA 1 <sil=0.465> ,COMMA f ) <sil=0.956> ;SEMICOLON r <sil=0.946> .PERIOD x = 1 0 0 <sil=0.387> ;SEMICOLON fseek ( f <sil=0.305> ,COMMA sizeof ( structrec ) ∗ 3 <sil=0.537> ,COMMA SEEK_SET ) <sil=0.315> ;SEMICOLON fwrite (& r <sil=0.624> ,COMMA sizeof ( structrec ) <sil=0.597> ,COMMA 1 <sil=0.513> ,COMMA f ) <sil=0.990> ;SEMICOLON fclose ( f ) <sil=0.324> ;SEMICOLON printf ( " \ n " ) <sil=0.534> ;SEMICOLON / ∗ read the 10 records to insure
4 the record was changed ∗ /
f = fopen ( " junk " <sil=0.422> ,COMMA " r " ) <sil=0.606> ;SEMICOLON if ( <sil=0.882> !EXCLAMATIONMARK f )
{
return 1 <sil=0.508> ;SEMICOLON }
for ( i = 1 <sil=0.615> ;SEMICOLON i <= 1 0 <sil=0.425> ;SEMICOLON i ++)
{
fread (& r <sil=0.539> ,COMMA sizeof ( structrec ) <sil=0.492> ,COMMA 1 <sil=0.494> ,COMMA f ) <sil=0.972> ;SEMICOLON printf ("% d \ n " <sil=0.328> ,COMMA r <sil=0.949> .PERIOD x ) <sil=0.349> ;SEMICOLON }
fclose ( f ) <sil=0.629> ;SEMICOLON return 0 <sil=0.518> ;SEMICOLON }
In this program <sil=0.580> ,COMMA a structure description rec has been used <sil=0.487> ,COMMA but you can use any structure description you want <sil=0.946> .PERIOD You can see that fopen and fclose work exactly as they did for text files <sil=0.910> .PERIOD The new functions here are fread <sil=0.472> ,COMMA fwrite and fseek <sil=0.941> .PERIOD The fread function takes four parameters:
• A memory address
• The number of bytes to read per block
• The number of blocks to read
• The file variable
Thus <sil=0.492> ,COMMA the line fread(&r <sil=0.447> ,COMMA sizeof(struct rec) <sil=0.494> ,COMMA 1 <sil=0.358> ,COMMA f) <sil=0.539> ;SEMICOLON says to read 12 bytes (the size of rec) from the file f (from the current location of the file pointer) into memory address &r <sil=0.995> .PERIOD One block of 12 bytes is requested <sil=0.939> .PERIOD It would be just as easy to read 100 blocks from disk into an array in memory by changing 1 to 100 <sil=0.983> .PERIOD The fwrite function works the same way <sil=0.457> ,COMMA but moves the block of bytes from memory to the file <sil=0.900> .PERIOD The fseek function moves the file pointer to a byte in the file <sil=0.950> .PERIOD Generally <sil=0.550> ,COMMA you move the pointer in sizeof(struct rec) increments to keep the pointer
at record boundaries <sil=0.998> .PERIOD You can use three options when seeking:
• SEEK_SET
• SEEK_CUR
• SEEK_END
SEEK_SET moves the pointer x bytes down from the beginning of the file (from byte 0 in the file) <sil=0.946> .PERIOD SEEK_CUR moves the pointer x bytes down from the current pointer position <sil=0.954> .PERIOD SEEK_END moves the pointer from the end of the file (so you must use negative offsets with this option) <sil=0.987> .PERIOD Several different options appear in the code above <sil=0.940> .PERIOD In particular <sil=0.368> ,COMMA note the section where the file is opened with r+ mode <sil=0.962> .PERIOD This opens the file for reading and writing <sil=0.362> ,COMMA which allows records to be changed <sil=0.992> .PERIOD The code seeks to a record <sil=0.363> ,COMMA reads it <sil=0.355> ,COMMA and changes a field <sil=0.402> ;SEMICOLON it then seeks back because the read displaced the pointer <sil=0.534> ,COMMA and writes the change back <sil=0.943> .PERIOD Further reading
For more information on C and related topics <sil=0.437> ,COMMA check out the links below <sil=0.914> .PERIOD 1 <sil=0.989> .PERIOD Cprogramming <sil=0.985> .PERIOD com: Programming Tutorials
2 <sil=0.954> .PERIOD C Program Development Cycle
3 <sil=0.996> .PERIOD Introduction to Object-Oriented Programming Using C++
4 <sil=0.975> .PERIOD C Programming
5 <sil=0.943> .PERIOD comp <sil=0.996> .PERIOD lang <sil=0.929> .PERIOD c Frequently Asked Questions
Index
address operator <sil=0.392> ,COMMA 10
compiled language <sil=0.561> ,COMMA 2
Fahrenheit to Celsius conversion <sil=0.500> ,COMMA 18
if statement <sil=0.374> ,COMMA 13
library <sil=0.372> ,COMMA 4
printf <sil=0.484> ,COMMA 7
programming language <sil=0.367> ,COMMA 2
qcompiler <sil=0.457> ,COMMA 2
type <sil=0.477> ,COMMA 5
variables <sil=0.477> ,COMMA 5

Phil's C Course
Aims of this Course
This course is intended to help a good programmer (pause for mass exodus) <sil=0.540> ,COMMA particularly someone familiar with DEC Fortran <sil=0.506> ,COMMA start programming in C <sil=0.933> .PERIOD There are a number of program examples <sil=0.375> ,COMMA copies of which you can download as phils_c_examples <sil=0.961> .PERIOD zip <sil=0.953> .PERIOD A detached PGP signature file (which it is not necessary to download unless you know what it's for) is provided so you can be sure the archive has not been altered <sil=0.957> .PERIOD When you unzip the archive on a Windows machine <sil=0.344> ,COMMA note the workspace file phils_c_examples <sil=0.964> .PERIOD dsw <sil=0.982> .PERIOD You should open this with Microsoft Visual Studio 98 and Microsoft Visual C++ 6 <sil=0.986> .PERIOD 0 <sil=0.547> ,COMMA then "batch build" everything <sil=0.968> .PERIOD VMS users should use unzip -a phils_c_examples <sil=0.918> .PERIOD zip to get the correct file attributes for the text files <sil=0.453> ,COMMA like the <sil=0.993> .PERIOD c source files and MAKE <sil=0.992> .PERIOD COM <sil=0.535> ,COMMA the VMS command file which you can use to build the programs <sil=0.903> .PERIOD There are also several programming challenges <sil=0.921> .PERIOD Have a go at these <sil=0.326> ,COMMA nicking as much code as you can from the examples <sil=0.960> !EXCLAMATIONMARK Using C is the best way to learn it <sil=0.531> ,COMMA and making mistakes is definitely the best way to find out how it really works <sil=0.901> .PERIOD I mention the ANSI C standard <sil=0.501> ,COMMA ANSI/ISO 9899-1990 <sil=0.541> ,COMMA a lot in this document <sil=0.914> .PERIOD Always try to adhere to the standard <sil=0.572> ;SEMICOLON experience has shown that it pays off in the long term <sil=0.987> .PERIOD Some of the points I make are stylistic <sil=0.930> .PERIOD However <sil=0.394> ,COMMA many of these suggestions are made for one of two reasons <sil=0.598> ;SEMICOLON either the majority of the C programming world has reached consensus that the style is good (which will make it easier for you to read and learn from other peoples' code) or I have found that you can avoid errors by doing things in a particular way <sil=0.954> .PERIOD I reckon that you can "learn" C in about an hour <sil=0.412> ,COMMA then spend the next year wishing you hadn't done things in a particular way the hour after that <sil=0.952> .PERIOD This course should help you avoid some of the pitfalls that are so easy to fall into (and <sil=0.463> ,COMMA in fact <sil=0.626> ,COMMA dig for yourself) because of the total control <sil=0.370> ,COMMA power <sil=0.636> ,COMMA and 0 to 60 ACCVIOS in under 10 seconds that C can deliver to the programmer <sil=0.904> .PERIOD Why is the language called C <sil=0.990> ?QUESTIONMARK C was developed under Unix on the PDP-11 in 1972 by Dennis Ritchie <sil=0.575> ,COMMA building on the language B <sil=0.348> ,COMMA written by Ken Thompson in 1970 on a PDP-7 <sil=0.333> ,COMMA also running Unix <sil=0.961> .PERIOD B was in turn <sil=0.384> ,COMMA based on BCPL which was developed in 1967 by Martin Richards (and which is still available for the BBC Micro) <sil=0.925> .PERIOD BCPL and B were typeless languages - variables were all multiples of byte or word sized bits of memory <sil=0.902> .PERIOD C is more strongly typed than B <sil=0.489> ,COMMA BCPL or Fortran <sil=0.917> .PERIOD Its basic types are char <sil=0.476> ,COMMA int <sil=0.316> ,COMMA float and double <sil=0.305> ,COMMA which are characters <sil=0.367> ,COMMA integers and single and double precision floating point numbers <sil=0.927> .PERIOD An important addition <sil=0.513> ,COMMA compared to Fortran <sil=0.479> ,COMMA is the pointer type <sil=0.320> ,COMMA which points to the other types (including other pointers) <sil=0.903> .PERIOD All these types can be combined in structures or unions to provide composite types <sil=0.962> .PERIOD The main shock to Fortran programmers is the fact that C has no built-in string type <sil=0.478> ,COMMA and consequently you have to make a function call to compare two strings <sil=0.502> ,COMMA or assign one string to another <sil=0.938> .PERIOD Luckily <sil=0.301> ,COMMA the ANSI standard describes a set of string manipulation routines that MUST be present if an implementation is described as ANSI C <sil=0.986> .PERIOD Similarly <sil=0.551> ,COMMA a good set of standard IO <sil=0.572> ,COMMA time manipulation and even sorting routines exist <sil=0.991> .PERIOD HELP CC RUN-TIME_FUNCTIONS will give you information on all of these <sil=0.359> ,COMMA and even tell you which header files you should include to use them <sil=0.919> .PERIOD For example HELP CC RUN PRINTF will inform you that you need the header file stdio <sil=0.924> .PERIOD h <sil=0.915> .PERIOD In the early days of C <sil=0.501> ,COMMA different compiler vendors all had their own flavours of C <sil=0.316> ,COMMA usually based on the book <sil=0.514> ,COMMA The C Programming Language <sil=0.592> ,COMMA by Brian Kernighan and Dennis Ritchie <sil=0.903> .PERIOD These older compilers are often referred to as "Classic C" or "K&R C" <sil=0.909> .PERIOD As C gained in popularity <sil=0.495> ,COMMA the need to standardize certain features became apparent <sil=0.559> ,COMMA and in 1983 the American National Standards Institute established the X3J11 technical committee <sil=0.581> ,COMMA which published the ANSI C standard in 1988 <sil=0.970> .PERIOD If you only buy one book on C <sil=0.645> ,COMMA get the second edition of the K&R book <sil=0.900> .PERIOD If you want to buy two books add Expert C Programming: Deep C Secrets by Peter van der Linden <sil=0.984> .PERIOD If you really want to be a language lawyer and contribute to threads like "Is i = i++ + --i legal <sil=0.863> ?QUESTIONMARK " in the comp <sil=0.945> .PERIOD lang <sil=0.977> .PERIOD c newsgroup <sil=0.436> ,COMMA then get "The Annotated ANSI C Standard" <sil=0.596> ,COMMA annotated by Herbert Schildt <sil=0.977> .PERIOD Personally I think a line of code like i = i++ + --i should be taken out and shot <sil=0.951> .PERIOD The DEC C compiler is a good ANSI compiler <sil=0.531> ,COMMA and any code you write should pass through this compiler (with its default qualifiers) without so much as an informational murmer <sil=0.942> .PERIOD If it doesn't you are storing up big trouble and intermittent bugs for the future <sil=0.905> .PERIOD Even if you decide to do nonstandard things <sil=0.309> ,COMMA there are techniques to do them in a standard way ( <sil=0.908> !EXCLAMATIONMARK ) <sil=0.569> ,COMMA which will be explained later <sil=0.903> .PERIOD OK <sil=0.479> ,COMMA enough waffle <sil=0.909> .PERIOD Let's look at a "Hello World" program in C <sil=0.945> .PERIOD /*---- Hello World C Example ("hello <sil=0.963> .PERIOD c") -------------------------------------*/

/* ANSI C Headers */
#include <stdio <sil=0.958> .PERIOD h>
#include <stdlib <sil=0.903> .PERIOD h>

/* Main Program starts here */
int main( int argc <sil=0.587> ,COMMA char *argv[] )
{
    int i <sil=0.535> ;SEMICOLON /*  End of declarations <sil=0.950> .PERIOD  <sil=0.314> .PERIOD  <sil=0.371> .PERIOD */

    for ( i = 0 <sil=0.385> ;SEMICOLON i < 10 <sil=0.446> ;SEMICOLON i++ ) {
      printf("%d Hello World <sil=0.900> !EXCLAMATIONMARK \n" <sil=0.626> ,COMMA i) <sil=0.544> ;SEMICOLON }

    exit(EXIT_SUCCESS) <sil=0.610> ;SEMICOLON }

As you have probably gathered <sil=0.588> ,COMMA comments in C are delimited by /* and */ <sil=0.494> ,COMMA and comments must NOT be nested <sil=0.302> ,COMMA or you will get some very interesting bugs <sil=0.966> .PERIOD The perceived need for nested comments is usually for commenting out (say) a debug piece of code <sil=0.339> ,COMMA and this can be done in a better way <sil=0.528> ,COMMA which will be explained later <sil=0.945> .PERIOD Some C compilers let you use the trailing C++ style comments // <sil=0.482> ,COMMA which are a like a trailing <sil=0.887> !EXCLAMATIONMARK in DEC Fortran <sil=0.954> .PERIOD NEVER USE THESE IN C PROGRAMS <sil=0.940> .PERIOD It is not ANSI standard <sil=0.525> ,COMMA and immediately confuses people as to whether they are looking a C or C++ code (and some meanings can subtly change) <sil=0.933> .PERIOD To compile this program under DEC C (both Alpha's and VAX should be using DEC C now <sil=0.936> .PERIOD VAX C was retired around 1993 <sil=0.366> ,COMMA and you really should switch to DEC C for both platforms now)

$ CC HELLO
$ LINK HELLO
Alternatively <sil=0.491> ,COMMA you can use the MAKE <sil=0.918> .PERIOD COM DCL command file <sil=0.450> ,COMMA as shown below <sil=0.960> .PERIOD On Alphas the resulting executable will have file type <sil=0.923> .PERIOD EXE_ALPHA <sil=0.329> ,COMMA and on VAX machines it will be <sil=0.906> .PERIOD EXE <sil=0.969> .PERIOD $ @MAKE HELLO
  DEV$DISK:[PHIL <sil=0.925> .PERIOD PHILS_C_EXAMPLES]
CC/PREFIX=ALL HELLO <sil=0.967> .PERIOD C  -> HELLO <sil=0.992> .PERIOD OBJ_ALPHA
LINK HELLO  -> HELLO <sil=0.948> .PERIOD EXE_ALPHA
Exiting
If you must use VAX C (and you mustn't :-) the link step will whinge about unresolved symbols <sil=0.303> ,COMMA so change the line to

$ LINK HELLO <sil=0.580> ,COMMA VAXCRTL/OPT
where the VAXCRTL <sil=0.958> .PERIOD OPT options file contains the line

SYS$SHARE:VAXCRTL/SHARE
You are now ready to RUN HELLO <sil=0.954> .PERIOD Not too many surprises there <sil=0.973> .PERIOD Note the form of the code <sil=0.981> .PERIOD The main entry point in a standard C is always called main <sil=0.484> ,COMMA though you can override this on VMS platforms <sil=0.482> ,COMMA as we will discover <sil=0.945> .PERIOD The main program in C is declared as int main(some funny stuff) <sil=0.963> .PERIOD This is because the main program should always return a value (usually to DCL or the Unix shell) indicating how things went <sil=0.906> .PERIOD This is done by the call to exit(EXIT_SUCCESS) <sil=0.946> .PERIOD There are two ANSI standard return codes <sil=0.585> ,COMMA EXIT_SUCCESS and EXIT_FAILURE <sil=0.454> ,COMMA both defined in <stdlib <sil=0.998> .PERIOD h> <sil=0.918> .PERIOD Always use these values <sil=0.573> ,COMMA and don't do what a lot of Unix programmers do which is exit(0) or some other magic number just because "everybody knows that exit(0) means success" <sil=0.955> .PERIOD You can return VMS condition codes <sil=0.326> ,COMMA e <sil=0.976> .PERIOD g <sil=0.965> .PERIOD exit(SS$_NORMAL) <sil=0.573> ,COMMA but this should be avoided unless really necessary <sil=0.546> ,COMMA and even then there are ways to fall back to the standard return codes if your code is compiled on a non-VMS machine <sil=0.954> .PERIOD The (some funny stuff) is the argument list <sil=0.336> ,COMMA or the "formal parameters" of function main <sil=0.906> .PERIOD Imagine main as a function called from your command shell (DCL on VMS <sil=0.632> ,COMMA or the DOS window on Windows NT) <sil=0.989> .PERIOD The declaration int main( int argc <sil=0.562> ,COMMA char *argv[] ) means that main is a function returning an integer <sil=0.487> ,COMMA which takes two arguments <sil=0.995> .PERIOD The first is an integer <sil=0.366> ,COMMA and is the number of arguments passed to main by DCL <sil=0.329> ,COMMA and the second is a pointer to arrays of characters <sil=0.984> .PERIOD The latter are <sil=0.405> ,COMMA in fact <sil=0.619> ,COMMA any command line arguments <sil=0.386> ,COMMA as will be demonstrated in args <sil=0.961> .PERIOD c <sil=0.905> ,COMMA a demo programming coming soon to a disk near you <sil=0.984> .PERIOD The body of a function is delimited by { and } <sil=0.903> .PERIOD Because C is largely a free format language <sil=0.346> ,COMMA the whole function can be on one line if you really want <sil=0.455> ,COMMA but that tends to be unreadable and confusing <sil=0.987> .PERIOD I like to start the function with a { in column one <sil=0.585> ,COMMA just after the function declaration (which I can then nick for prototyping) <sil=0.498> ,COMMA and end the function with a } in the same column <sil=0.905> .PERIOD Notice how each statement ends with a semicolon <sil=0.900> .PERIOD The " <sil=0.404> ;SEMICOLON " is known as a statement terminator <sil=0.919> .PERIOD It is also a "sequence point" <sil=0.498> ,COMMA as are the comma operator <sil=0.448> ,COMMA and various other logical comparison operators <sil=0.470> ,COMMA and the standard guarantees that side effects of expressions will be over once a sequence point is reached <sil=0.953> .PERIOD This basically means that all the things you made happen in one statement will have happened by the time you start on the next statement or expression <sil=0.929> .PERIOD The printf( <sil=0.972> .PERIOD  <sil=0.584> .PERIOD  <sil=0.429> .PERIOD ) statement is a call to a routine defined in <stdio <sil=0.918> .PERIOD h> <sil=0.997> ,COMMA and enables formatted output to the stdout stream <sil=0.918> .PERIOD In C <sil=0.595> ,COMMA three default output streams are defined <sil=0.993> .PERIOD These are stdin <sil=0.314> ,COMMA stdout and stderr <sil=0.457> ,COMMA and they correspond to SYS$INPUT <sil=0.627> ,COMMA SYS$OUTPUT and SYS$ERROR under VMS <sil=0.963> .PERIOD The first argument is a format string containing conversions characters <sil=0.427> ,COMMA each preceded by the % sign (use %% if you actually want a % sign) <sil=0.461> ,COMMA which tell the routine how to interpret the variable number of arguments to be printed <sil=0.924> .PERIOD In this case the integer i is to be printed in decimal <sil=0.307> ,COMMA so "%d" is used <sil=0.952> .PERIOD There are corresponding functions <sil=0.627> ,COMMA sprintf to write directly into a character string array <sil=0.350> ,COMMA and fprintf to write to a file <sil=0.966> .PERIOD Similar formatted input routines <sil=0.630> ,COMMA sscanf and fscanf are also available <sil=0.950> .PERIOD The table below <sil=0.382> ,COMMA nicked off the network <sil=0.427> ,COMMA summarizes the conversion characters:


                    Clive Feather's Excellent Table:
 
     Types of arguments for the various fprintf and fscanf conversions
      
         Conversion        fprintf          fscanf
         ----------------------------------------------------
         d  i              int              int *
         o  u  x  X        unsigned int     unsigned int *
         hd hi             int              short *
         ho hu hx hX       [see note 1]     unsigned short *
         ld li             long             long *
         lo lu lx lX       unsigned long    unsigned long *
         e  E  f  g  G     double           float *
         le lE lf lg lG    [invalid]        double *
         Le LE Lf Lg LG    long double      long double *
         c                 int              [see note 2]
         s                 [see note 2]     [see note 2]
         p                 void *           void **
         n                 int *            int *
         hn                short *          short *
         ln                long *           long *
         [                 [invalid]        [see note 2]
 
     Note 1: the type that (unsigned short) is promoted to by the integral
             promotions <sil=0.903> .PERIOD This is (int) if USHORT_MAX <= INT_MAX <sil=0.469> ,COMMA and
             (unsigned int) otherwise <sil=0.959> .PERIOD Note 2: any of (char *) <sil=0.638> ,COMMA (signed char *) <sil=0.352> ,COMMA or (unsigned char *) <sil=0.900> .PERIOD Don't worry about the "*"s for now <sil=0.987> .PERIOD They can be read as "pointer to thing named before them" <sil=0.442> ,COMMA so int * means pointer to int <sil=0.992> .PERIOD Similar summaries can be found in K &R II pages 154 and 158 <sil=0.964> .PERIOD Programming Challenge 1
      _______________________
      
        Have a  go at adapting "hello <sil=0.954> .PERIOD c"  to print out the value of i in
      hexadecimal <sil=0.994> .PERIOD Fiddle about with the format string -  remove the "\n"
      for example <sil=0.480> ,COMMA and see what happens to your output <sil=0.957> .PERIOD Unlike Fortran <sil=0.417> ,COMMA whitespace is significant in C <sil=0.486> ,COMMA and there are reserved keywords <sil=0.991> .PERIOD These reserved keywords should not appear as any type of identifier <sil=0.377> ,COMMA even a structure member (YRL people - don't forget LID files) <sil=0.947> .PERIOD The list below shows both C and C++ reserved keywords <sil=0.935> .PERIOD asm1         continue    float       new1         signed      try1 
    auto        default     for         operator1    sizeof      typedef
    break       delete1      friend1      private1     static      union
    case        do          goto        protected1   struct      unsigned
    catch1       double      if          public1      switch      virtual1 
    char        else        inline1      register    template1    void
    class1       enum        int         return      this1        volatile
    const       extern      long        short       throw1       while

The items marked like this1 are C++ <sil=0.460> ,COMMA not C keywords <sil=0.398> ,COMMA but it makes sense to avoid both <sil=0.965> .PERIOD Avoid using a language name like Fortran too <sil=0.932> .PERIOD Variables <sil=0.492> ,COMMA Types and Functions
Variables are like little boxes with numbers on them <sil=0.631> ,COMMA a bit like houses <sil=0.346> ,COMMA and inside the boxes <sil=0.980> .PERIOD  <sil=0.304> .PERIOD  <sil=0.471> .PERIOD naaahh <sil=0.926> !EXCLAMATIONMARK Just kidding <sil=0.982> .PERIOD You all know what variables are <sil=0.394> ,COMMA and I think we all understand that x = x + 1 isn't a contradictory algebraic statement <sil=0.902> .PERIOD C <sil=0.584> ,COMMA unlike Fortran <sil=0.460> ,COMMA has case sensitive variable and other identifier names <sil=0.990> .PERIOD Therefore the variable NextPage is completely different to nextpage <sil=0.960> .PERIOD The same is true for functions <sil=0.953> .PERIOD Some people like to use the capitalized-first-letter form of naming <sil=0.630> ,COMMA others prefer underbars <sil=0.628> ,COMMA e <sil=0.993> .PERIOD g <sil=0.989> .PERIOD GetNextPage() or get_next_page() <sil=0.923> .PERIOD Many professional library packages tend towards TheCapitalizedFormat <sil=0.945> .PERIOD Some people like Microsoft's Hungarian Notation which involves prefixing variable names with their type <sil=0.323> ,COMMA e <sil=0.939> .PERIOD g <sil=0.925> .PERIOD uiCount for an unsigned int counter variable <sil=0.994> .PERIOD It all depends how good you are with the Shift key :-) Whatever method you choose <sil=0.394> ,COMMA try and be clear and consistent <sil=0.939> .PERIOD In C <sil=0.302> ,COMMA local variable definitions can be at the start of any {block} <sil=0.457> ,COMMA and aren't restricted to the top of the module as in Fortran <sil=0.928> .PERIOD Be careful if you take advantage of this feature <sil=0.614> ,COMMA because you may run into scoping problems where the innermost variable definition hides an outer one <sil=0.955> .PERIOD If you are used to C++ <sil=0.569> ,COMMA remember that the variable definitions can only be at the start of the {block} before the first statement (e <sil=0.980> .PERIOD g <sil=0.904> .PERIOD expression <sil=0.341> ,COMMA function call or flow control statement) <sil=0.990> .PERIOD If you try and intersperse definitions <sil=0.312> ,COMMA C++ style <sil=0.469> ,COMMA the C compiler will issue some sort of "bad statement" warning <sil=0.984> .PERIOD Variables declared at the beginning of the {function body} are local to the function <sil=0.477> ,COMMA variables declared at the "top" of the file (or compilation unit to be pedantic) <sil=0.385> ,COMMA in the header files <sil=0.364> ,COMMA or outside any function bodies <sil=0.322> ,COMMA are global to the compilation unit (and are externally visible symbols <sil=0.333> ,COMMA unless declared as static) <sil=0.935> .PERIOD More will be said about this later <sil=0.933> .PERIOD For now <sil=0.390> ,COMMA suffice it to say that you should avoid using global variables wherever possible <sil=0.991> .PERIOD A brief example will illustrate the scope of variables:


/*---- Variable Scope Example ( "scope <sil=0.983> .PERIOD c" ) ----------------------------------*/
/* ANSI C Headers */
#include <stdio <sil=0.921> .PERIOD h>
#include <stdlib <sil=0.907> .PERIOD h>

/* Global variables <sil=0.479> ,COMMA visible externally too (i <sil=0.983> .PERIOD e <sil=0.410> .PERIOD to things linked  */
/* against this) Generally they should be avoided as far as */
/* possible <sil=0.417> ,COMMA because it can be very difficult to discover which */
/* routine changes their value <sil=0.572> ,COMMA and they introduce "hidden" dependencies */
int some_counter <sil=0.568> ;SEMICOLON double double_result <sil=0.431> ;SEMICOLON /* Function prototypes */
void set_double_result(void) <sil=0.548> ;SEMICOLON /* Main Program starts here */
int main( int argc <sil=0.317> ,COMMA char *argv[] )
{
    int j <sil=0.594> ;SEMICOLON int i_am_local <sil=0.534> ;SEMICOLON /* <sil=0.969> .PERIOD  <sil=0.467> .PERIOD to main */
/*  End of declarations <sil=0.911> .PERIOD  <sil=0.345> .PERIOD  <sil=0.538> .PERIOD */

    i_am_local = 1 <sil=0.579> ;SEMICOLON printf("i_am_local = %d (in main)\n\n" <sil=0.621> ,COMMA i_am_local ) <sil=0.335> ;SEMICOLON for ( j = 0 <sil=0.319> ;SEMICOLON j < 10 <sil=0.593> ;SEMICOLON j++ ) {
      int i_am_local <sil=0.539> ;SEMICOLON /* <sil=0.972> .PERIOD  <sil=0.357> .PERIOD to this loop - Not necessarily a good idea */
                      /* because it can cause confusion as to which */
                      /* variable we actually want to access */
      i_am_local = j <sil=0.396> ;SEMICOLON printf("i_am_local = %d (inside loop)\n" <sil=0.525> ,COMMA i_am_local ) <sil=0.402> ;SEMICOLON }

    printf("\ni_am_local = %d (in main)\n\n" <sil=0.631> ,COMMA i_am_local ) <sil=0.647> ;SEMICOLON /* Now let's look at the default initialization values of the globals */
    printf("nsome_counter = %d (in main)\n" <sil=0.444> ,COMMA some_counter) <sil=0.402> ;SEMICOLON printf("double_result = %f (in main)\n\n" <sil=0.471> ,COMMA double_result) <sil=0.488> ;SEMICOLON /* Call a function that changes the global variables <sil=0.926> .PERIOD  <sil=0.467> .PERIOD */
    set_double_result() <sil=0.610> ;SEMICOLON /* <sil=0.988> .PERIOD  <sil=0.625> .PERIOD and look at them again */
    printf("some_counter = %d (in main)\n" <sil=0.548> ,COMMA some_counter) <sil=0.432> ;SEMICOLON printf("double_result = %f (in main)\n" <sil=0.379> ,COMMA double_result) <sil=0.327> ;SEMICOLON exit(EXIT_SUCCESS) <sil=0.366> ;SEMICOLON }

void set_double_result(void)
{
    ++some_counter <sil=0.558> ;SEMICOLON double_result = 3 <sil=0.949> .PERIOD 141 <sil=0.555> ;SEMICOLON printf("some_counter = %d (in set_double_result)\n" <sil=0.414> ,COMMA some_counter) <sil=0.324> ;SEMICOLON printf("double_result = %f (in set_double_result)\n\n" <sil=0.599> ,COMMA double_result) <sil=0.470> ;SEMICOLON }

The basic types in C are:


     char - this defines a byte <sil=0.469> ,COMMA which must be able to hold one character
            in the local character set (normally <sil=0.363> ,COMMA but not necessarily 8 bits) <sil=0.368> ;SEMICOLON int - holds an integer <sil=0.601> ,COMMA usually in the machine's natural size <sil=0.925> .PERIOD They are 32 bits on both VAX and Alpha <sil=0.934> .PERIOD float - holds a single precision floating point number <sil=0.994> .PERIOD They are 32 bits on both VAX and Alpha <sil=0.914> .PERIOD double - Double precision floating point number <sil=0.545> ,COMMA 64 bits on the VAX
            and Alpha <sil=0.914> .PERIOD These bit sizes are just to give you an idea <sil=0.968> .PERIOD They should not be relied on <sil=0.603> ,COMMA and you should code independently of them <sil=0.330> ,COMMA unless you are addressing hardware registers or some equally hardware-specific task <sil=0.969> .PERIOD Some of these basic types can be modified with various qualifiers:


     char - can be signed or unsigned <sil=0.556> ;SEMICOLON int - can be long or short <sil=0.379> ,COMMA signed or unsigned <sil=0.316> ;SEMICOLON double - can be long <sil=0.419> ,COMMA for (possibly) even more precision <sil=0.410> ;SEMICOLON The long modifier normally gives larger integers <sil=0.340> ,COMMA but the compiler vendor is free to ignore it provided that


             short <= int <= long
             16 bits <= short/int 
             32 bits <= long

Assignment to variables of these basic types is fairly intuitive <sil=0.312> ,COMMA and can be done in the definition <sil=0.593> ,COMMA rather like using the DATA statement in Fortran or the DEC Fortran extension


/*  C Example */                  |*     DEC  Fortran Example
                                  |
    int x <sil=0.382> ,COMMA y <sil=0.444> ;SEMICOLON /* Not initialized*/|      INTEGER     X <sil=0.505> ,COMMA Y
    int counter = 0 <sil=0.413> ;SEMICOLON |      INTEGER     COUNTER /0/
    float total = 0 <sil=0.957> .PERIOD 0 <sil=0.631> ;SEMICOLON |      REAL        TOTAL   /0 <sil=0.959> .PERIOD 0/
    char c = 'A' <sil=0.338> ;SEMICOLON |      CHARACTER*1 C       /'A'/

Note that C uses single quote ' for character constants <sil=0.960> .PERIOD The double quotes are used for strings <sil=0.904> .PERIOD There are escape sequences for getting nonprintable characters <sil=0.950> .PERIOD These are listed on page 38 of K&R II <sil=0.989> .PERIOD A few useful ones are '\n' to get a new line (C doesn't automatically add line feeds when you use printf() ) <sil=0.605> ,COMMA '\a' to get a bell (alert) sound <sil=0.326> ,COMMA and '\0' to get the null character (which is NOT THE SAME as the NULL pointer) used to terminate strings (arrays of characters) <sil=0.989> .PERIOD The initialization of non-static (discussed later) int and float variables is necessary before use <sil=0.965> .PERIOD It doesn't have to be done in the definition <sil=0.573> ,COMMA but you can't rely on their value being anything sensible <sil=0.594> ,COMMA so whilst the initialization of COUNTER and TOTAL is redundant in the Fortran example (assuming non-recursive compilation) <sil=0.452> ,COMMA you do need to initialize the variables before use in C <sil=0.971> .PERIOD  <sil=0.992> .PERIOD {
    int i <sil=0.359> ;SEMICOLON int j <sil=0.314> ;SEMICOLON  <sil=0.999> .PERIOD i = 0 <sil=0.631> ;SEMICOLON /* i's value could be anything up to this point */ <sil=0.997> .PERIOD j = i*OFFSET <sil=0.303> ;SEMICOLON /* j's value could be anything up to this point */ <sil=0.905> .PERIOD }

Global variables are guaranteed to be initialized to 0 (or 0 <sil=0.939> .PERIOD 0 if floating type) but you can override this by specifying an initial value <sil=0.932> .PERIOD Similar rules apply to float <sil=0.650> ,COMMA double <sil=0.342> ,COMMA and long double <sil=0.988> .PERIOD There are two standard header files <sil=0.573> ,COMMA <limits <sil=0.900> .PERIOD h> and <float <sil=0.904> .PERIOD h> which tell you the maximum and minimum values that can be stored in a particular type <sil=0.484> ;SEMICOLON for example INT_MAX is 2147483647 <sil=0.613> ,COMMA and FLT_MAX is 1 <sil=0.984> .PERIOD 7014117e+38 on the VAX <sil=0.972> .PERIOD The signed or unsigned modifiers are fairly self explanatory <sil=0.996> .PERIOD The default for int is signed <sil=0.305> ,COMMA so it is rarely specified <sil=0.942> .PERIOD Signed integer arithmetic is usually done in Two's Complement form <sil=0.322> ,COMMA but this need not be the case <sil=0.988> .PERIOD Characters can be signed or unsigned by default - it is implementation defined <sil=0.954> .PERIOD I find it best just to use char with no qualifiers <sil=0.330> ,COMMA and let the compiler do what it will <sil=0.924> .PERIOD This is probably a good point to introduce the sizeof(thing) operator <sil=0.976> .PERIOD It is an operator <sil=0.382> ,COMMA not a function <sil=0.316> ,COMMA and is evaluated at compile time <sil=0.936> .PERIOD It returns the size of the argument <sil=0.610> ,COMMA where the size of char is defined to be 1 <sil=0.935> .PERIOD To be pedantic <sil=0.332> ,COMMA it returns an unsigned integer type <sil=0.488> ,COMMA size_t <sil=0.383> ,COMMA defined in <stddef <sil=0.900> .PERIOD h> <sil=0.942> ,COMMA but is not often used in a way that requires a size_t declaration <sil=0.929> .PERIOD Here are some examples of its use (this is a "programming fragment" not a complete program) <sil=0.950> .PERIOD size_t s <sil=0.504> ;SEMICOLON int fred <sil=0.583> ;SEMICOLON /* Integer */
    char bob <sil=0.562> ;SEMICOLON /* Character */
    char *c_ptr <sil=0.637> ;SEMICOLON /* Pointer to character */
    char bloggs[6] <sil=0.441> ;SEMICOLON /* Array of 6 characters */ <sil=0.986> .PERIOD s = sizeof( fred ) <sil=0.343> ;SEMICOLON s = sizeof( bob ) <sil=0.630> ;SEMICOLON s = sizeof( c_ptr ) <sil=0.466> ;SEMICOLON s = sizeof( long double ) <sil=0.507> ;SEMICOLON /* Allowed to use types instead of variables */ <sil=0.903> .PERIOD /*  Safe string copy <sil=0.571> ,COMMA checks size of destination and allows for terminating */
/*  null character (not to be confused with the NULL pointer discussed later) */
    strncpy( bloggs <sil=0.602> ,COMMA "Bloggs" <sil=0.544> ,COMMA sizeof(bloggs)-1 ) <sil=0.513> ;SEMICOLON  <sil=0.972> .PERIOD You can leave the brackets off after sizeof <sil=0.374> ,COMMA e <sil=0.979> .PERIOD g <sil=0.996> .PERIOD sizeof int is quite legal <sil=0.547> ,COMMA but I think that the bracketed form is clearer <sil=0.911> .PERIOD Programming Challenge 2
      _______________________
      
        Have a  go at adapting "hello <sil=0.928> .PERIOD c"  to print  out  the size  of some
      commonly  used types <sil=0.513> ,COMMA e <sil=0.921> .PERIOD g <sil=0.997> .PERIOD int <sil=0.476> ,COMMA short int <sil=0.599> ,COMMA long  int <sil=0.582> ,COMMA float <sil=0.607> ,COMMA double
      and  so  on <sil=0.988> .PERIOD Try  some arithmetic to familiarize yourself  with the
      basic  operators <sil=0.510> ,COMMA + <sil=0.429> ,COMMA - <sil=0.640> ,COMMA * <sil=0.590> ,COMMA / <sil=0.307> ,COMMA and  one  that  doesn't appear  in
      Fortran <sil=0.321> ,COMMA the modulus operator <sil=0.340> ,COMMA % <sil=0.333> ,COMMA which acts on  integer types  to
      yield the  remainder after division <sil=0.963> .PERIOD Use this  to determine whether
      the year 2000 is a leap year <sil=0.970> .PERIOD The rule is that it is a leap year if
      the year is divisible by 4 <sil=0.630> ,COMMA except if it is a multiple of 100 years <sil=0.362> ,COMMA unless it is also divisible by 400 <sil=0.961> .PERIOD In addition to the integer and floating point types <sil=0.333> ,COMMA there is a type called void <sil=0.953> .PERIOD The meaning of void changes according to context <sil=0.886> !EXCLAMATIONMARK If you declare a function returning void <sil=0.444> ,COMMA you mean that it returns no value <sil=0.582> ,COMMA like a Fortran subroutine <sil=0.972> .PERIOD A void in the argument list means that the function takes no arguments (you can have a void function that does take arguments by declaring arguments in the usual way <sil=0.639> ,COMMA and you can have a function that does return a value but takes no arguments) <sil=0.918> .PERIOD Below is an example of a Fortran subroutine and C function:


/*     C Version */                    |*        Fortran Version
                                       |
void initialize_things( void )         |      SUBROUTINE INITIALIZE_THINGS
{                                      |*
/*  Do cunning setup procedure     */  |*     Do cunning setup procedure  
/*  No need for a return statement */  |*
}                                      |      END <sil=0.983> .PERIOD | <sil=0.962> .PERIOD /*  Call it */                         |*     Call it
    initialize_things() <sil=0.437> ;SEMICOLON /* Note () */ |      CALL INITIALIZE_THINGS <sil=0.902> .PERIOD | <sil=0.987> .PERIOD The void qualifier also has yet another meaning <sil=0.367> ,COMMA which will be discussed when we look at pointers <sil=0.912> .PERIOD The void function above demonstrates the general form of functions in C <sil=0.918> .PERIOD They have a function definition with the formal parameters <sil=0.570> ,COMMA then a {body} enclosed by the {} brackets <sil=0.943> .PERIOD Function arguments are always passed by value in C <sil=0.943> .PERIOD The actual arguments are copied to the (local) function formal arguments <sil=0.509> ,COMMA as if by assignment <sil=0.922> .PERIOD The arguments may be expressions <sil=0.574> ,COMMA or even calls to other functions <sil=0.989> .PERIOD The order of evaluation of arguments is unspecified <sil=0.552> ,COMMA so don't rely on it <sil=0.884> !EXCLAMATIONMARK Here is a C function example <sil=0.541> ,COMMA with a similar Fortran routine for comparison <sil=0.997> .PERIOD /*     C Version */                    |*     Fortran Version
                                       |
int funcy( int i )                     |      INTEGER FUNCTION FUNCY( I )
{                                      |      INTEGER I
                                       |*
    int j <sil=0.553> ;SEMICOLON |      INTEGER J
/*  End of declarations <sil=0.980> .PERIOD  <sil=0.319> .PERIOD  <sil=0.496> .PERIOD */         |*     End of declarations <sil=0.924> .PERIOD  <sil=0.466> .PERIOD  <sil=0.619> .PERIOD j = i <sil=0.422> ;SEMICOLON |      J = I
    i = i + 1 <sil=0.395> ;SEMICOLON /* Only local i changed*/|      I = I + 1 <sil=0.929> !EXCLAMATIONMARK Calling arg changed
    j = i*j <sil=0.385> ;SEMICOLON |      J = I*J
                                       |      FUNCY = J
    return( j ) <sil=0.522> ;SEMICOLON |      RETURN
}                                      |      END <sil=0.928> .PERIOD | <sil=0.988> .PERIOD /*  Call it */                         |*     Call it
    k = 3 <sil=0.578> ;SEMICOLON |      K = 3
    ival = funcy(k) <sil=0.462> ;SEMICOLON /* ival is 12 */  |      IVAL = FUNCY( K ) <sil=0.898> !EXCLAMATIONMARK IVAL is 12 <sil=0.976> .PERIOD /* k is still 3 */| <sil=0.942> .PERIOD  <sil=0.931> !EXCLAMATIONMARK K is 4

Notice that changing the function parameter in the C function does not alter the actual argument <sil=0.648> ,COMMA only the local copy <sil=0.945> .PERIOD To change an actual argument <sil=0.337> ,COMMA you would pass it by address <sil=0.367> ,COMMA using the address operator <sil=0.497> ,COMMA & <sil=0.357> ,COMMA and declare the function argument as a pointer to type int <sil=0.917> .PERIOD More will be said about this in the pointers section <sil=0.978> .PERIOD Generally <sil=0.555> ,COMMA you should avoid writing functions in C that change the actual arguments <sil=0.991> .PERIOD It is better to return a function value instead <sil=0.522> ,COMMA where possible <sil=0.934> .PERIOD /*     C Version */                    |*     Fortran Version
                                       |
    myval = funcy( gibbon ) <sil=0.572> ;SEMICOLON |      CALL FUNCY( GIBBON <sil=0.399> ,COMMA MYVAL )

      Programming Challenge 3
      _______________________
      
        Hack  your copy of the "hello <sil=0.971> .PERIOD c" to call some sort  of  arithmetic
      function <sil=0.382> ,COMMA perhaps to return the square  of the argument <sil=0.931> .PERIOD Write the
      function <sil=0.337> ,COMMA and add a "prototype"  (these are discussed  later) for it
      before the main program <sil=0.396> ,COMMA e <sil=0.972> .PERIOD g <sil=0.916> .PERIOD  <sil=0.908> .PERIOD /*  Function prototype */
      int funcy( int myarg ) <sil=0.586> ;SEMICOLON /* semicolon where function body would be */ <sil=0.950> .PERIOD /* Main Program starts here */
      int main( int argc <sil=0.561> ,COMMA char *argv[] )
      { <sil=0.905> .PERIOD }

      /* The real McCoy - "Dammit Jim <sil=0.411> ,COMMA I'm a function not a prototype" */
      int funcy( int myarg )
      { <sil=0.951> .PERIOD /*  Do something and return() an int value */ <sil=1.000> .PERIOD }


      If  you are  feeling  really  cocky <sil=0.322> ,COMMA write a recursive  factorial()
      function that calls itself <sil=0.941> .PERIOD Hint: <sil=0.958> .PERIOD if ( n > 0) {
            factorial = n * factorial( n-1 ) <sil=0.356> ;SEMICOLON } else {
            factorial = 1 <sil=0.627> ;SEMICOLON } <sil=0.966> .PERIOD Call it from you main program  and step through with the debugger to
      convince yourself that it really is recursive <sil=0.931> .PERIOD When you write your own functions <sil=0.449> ,COMMA try to avoid interpositioning <sil=0.557> ,COMMA i <sil=0.543> .PERIOD e <sil=0.337> .PERIOD naming your function with the same name as a standard library (or system/Motif/X11/Xt library) function <sil=0.989> .PERIOD Use

$ HELP CC RUN-TIME_FUNCTIONS your_function_name
to check for the existence of a similarly named DEC C RTL function <sil=0.903> .PERIOD Or look in a book <sil=0.938> .PERIOD It is a very bad idea to replace a standard function <sil=0.979> .PERIOD If you need to write something with the same purpose as a standard function <sil=0.476> ,COMMA but maybe with better accuracy or speed <sil=0.544> ,COMMA call it something different <sil=0.355> ,COMMA e <sil=0.940> .PERIOD g <sil=0.921> .PERIOD my_fast_qsort() <sil=0.967> .PERIOD Three other modifiers I haven't yet explained are static <sil=0.546> ,COMMA const and extern <sil=0.953> .PERIOD The static modifier is another one that changes meaning depending on its context <sil=0.956> .PERIOD If you declare a global variable or function as static <sil=0.308> ,COMMA it will still be visible throughout the same compilation unit (file to us) <sil=0.502> ,COMMA but will NOT be visible externally to programs linked against our routines <sil=0.911> .PERIOD This is often used as a neat way of storing data that has to be visible to a number of related functions <sil=0.418> ,COMMA but must not be accessible from outside <sil=0.954> .PERIOD Some code fragments below illustrate this <sil=0.929> .PERIOD /*---- C Fragments -----------------------------------------------------------*/
/* Global Vars <sil=0.403> ,COMMA NOT visible externally (i <sil=0.941> .PERIOD e <sil=0.326> .PERIOD to things linked against this)   */
static int number_of_things <sil=0.549> ;SEMICOLON int AddToThings( int a_thing )
{ <sil=0.990> .PERIOD number_of_things = number_of_things + 1 <sil=0.360> ;SEMICOLON return( number_of_things ) <sil=0.597> ;SEMICOLON }

int GetNumberOfThings(void)
{
    return( number_of_things ) <sil=0.366> ;SEMICOLON }

int RemoveThing( int a_thing )
{ <sil=0.968> .PERIOD number_of_things = number_of_things - 1 <sil=0.418> ;SEMICOLON return( number_of_things ) <sil=0.643> ;SEMICOLON }



*      Fortran (sort of) Equivalent
*-----------------------------------------------------------------------
      INTEGER FUNCTION ADD_TO_THINGS( A_THING ) <sil=0.993> .PERIOD INTEGER NUMBER_OF_THINGS
      SAVE    NUMBER_OF_THINGS <sil=0.980> .PERIOD NUMBER_OF_THINGS = NUMBER_OF_THINGS + 1
      ADD_TO_THINGS_ = NUMBER_OF_THINGS
      RETURN
*
      ENTRY FUNCTION GET_NUMBER_OF_THINGS()
      GET_NUMBER_OF_THINGS = NUMBER_OF_THINGS
      RETURN
*
      ENTRY REMOVE_THING( A_THING ) <sil=0.911> .PERIOD NUMBER_OF_THINGS = NUMBER_OF_THINGS - 1
      REMOVE_THING = NUMBER_OF_THINGS
      RETURN
*
      END

Another use of static is with variables that are local to a function <sil=0.982> .PERIOD In this case it is similar to the Fortran SAVE statement <sil=0.446> ,COMMA i <sil=0.385> .PERIOD e <sil=0.395> .PERIOD the variable will retain its value across function calls <sil=0.369> ,COMMA and WILL BE INITIALIZED to 0 if it is an integer type <sil=0.575> ,COMMA or 0 <sil=0.959> .PERIOD 0 if a floating point type (even if the floating point representation of 0 on your machine is not all bits set to 0) <sil=0.550> ,COMMA or NULL (pointer to nothing) if it is a pointer <sil=0.938> .PERIOD /*---- C Example -------------------------------------------------------------*/
int log_error( int code )
{
    static int total_number_of_errors <sil=0.612> ;SEMICOLON /*  End of declarations <sil=0.952> .PERIOD  <sil=0.473> .PERIOD  <sil=0.606> .PERIOD */

/*  ++ is the same as  total_number_of_errors = total_number_of_errors + 1 */
    return( ++total_number_of_errors ) <sil=0.304> ;SEMICOLON }



*     Fortran Equivalent
*-----------------------------------------------------------------------
      SUBROUTINE LOG_ERROR( CODE ) <sil=0.956> .PERIOD INTEGER TOTAL_NUMBER_OF_ERRORS
*     Not required for non-recursive DEC Fortran <sil=0.581> ,COMMA but it documents your intent
      SAVE    TOTAL_NUMBER_OF_ERRORS <sil=0.959> .PERIOD TOTAL_NUMBER_OF_ERRORS = TOTAL_NUMBER_OF_EBRORS + 1
      END

The const modifier is used to flag a read only quantity <sil=0.958> .PERIOD For example <sil=0.366> ,COMMA const double pi = 3 <sil=0.922> .PERIOD 14159265358979 <sil=0.479> ;SEMICOLON  <sil=0.999> .PERIOD /*  Arizona <sil=0.873> ?QUESTIONMARK */
    pi = 3 <sil=0.911> .PERIOD 0 <sil=0.322> ;SEMICOLON /* Gives compiler error - try it in your test program */

The const modifier is useful for function prototype arguments which are passed by pointer <sil=0.533> ,COMMA where you want to indicate that your function will not change the object pointed to <sil=0.979> .PERIOD More will be said about function prototypes later <sil=0.914> .PERIOD Programming Challenge 4
      _______________________
      
        Look   at   the   Fortran   example  above <sil=0.943> .PERIOD Spot  the  deliberate
      mistake <sil=0.977> .PERIOD The compiler would probably flag an error for it <sil=0.457> ,COMMA but think
      of  another instance where  perhaps you wanted to increment an array
      element indexed by a  non-trivial expression <sil=0.931> .PERIOD Using the ++  operator
      in C  helps  avoid  typographical errors <sil=0.556> ,COMMA and looks less clumsy (and
      saves valuable bytes <sil=0.323> ;SEMICOLON -) ) <sil=0.978> .PERIOD There is a similar  operator <sil=0.385> ,COMMA -- <sil=0.335> ,COMMA which
      decrements by one <sil=0.999> .PERIOD Read K&R II <sil=0.439> ,COMMA pages 46-48 <sil=0.610> ,COMMA and pages 105-106 <sil=0.924> .PERIOD Make
      sure  you  understand  the  difference  between prefix  and  postfix
      versions  of ++ and -- <sil=0.444> ,COMMA and  try to rewrite the AddToThings() set of
      functions using these operators <sil=0.997> .PERIOD Great - that's saved  me  having to
      explain it all <sil=0.929> .PERIOD The extern qualifier is rather like EXTERN in Fortran <sil=0.504> ,COMMA and basically gives type information for a reference that is to be resolved by the linker <sil=0.912> .PERIOD You DO NOT need to use extern with function declarations - int funcy( int i ) <sil=0.310> ;SEMICOLON is the same as extern int funcy( int i) <sil=0.374> ;SEMICOLON  <sil=0.962> .PERIOD It is usually used when declaring global variables to indicate that they are referenced in the particular compilation unit <sil=0.399> ,COMMA but not defined in it <sil=0.982> .PERIOD What is the difference between "definition" and "declaration" <sil=0.976> ?QUESTIONMARK In short <sil=0.347> ,COMMA a definition actually ALLOCATES SPACE for the entity <sil=0.618> ,COMMA whereas a declaration tells the compiler what the entity is and what it is called <sil=0.646> ,COMMA but leaves it up to the linker to find space for it <sil=0.972> !EXCLAMATIONMARK A global variable <sil=0.600> ,COMMA structure or function can have many declarations <sil=0.549> ,COMMA but only one definition <sil=0.992> .PERIOD This is explained in more details in the "Header Files" section which follows <sil=0.956> .PERIOD Three less commonly used modifiers are volatile <sil=0.360> ,COMMA auto and register <sil=0.954> .PERIOD The volatile modifier tells the compiler not to perform any optimization tricks with the variable <sil=0.466> ,COMMA and is most often used with locations that refer to hardware <sil=0.305> ,COMMA like memory-mapped IO <sil=0.377> ,COMMA or shared memory regions which might change in a way the compiler cannot predict <sil=0.902> .PERIOD The auto qualifier may only be used for variables at function scope (inside {}) and is in fact the default <sil=0.954> .PERIOD Auto variables are usually allocated off the stack (but this is up to the implementation) <sil=0.930> .PERIOD They will certainly not be retained across function calls <sil=0.912> .PERIOD NEVER return the ADDRESS of an automatic variable from a function call (once you know about pointers) <sil=0.998> .PERIOD Because new automatic variables are "created" every time you go into a function <sil=0.386> ,COMMA this allows C functions to be called recursively <sil=0.994> .PERIOD The register qualifier is really obsolete <sil=0.904> .PERIOD It is a hint to the compiler that a variable is frequently used and should be placed in a register <sil=0.943> .PERIOD The compiler is quite free to ignore this hint <sil=0.420> ,COMMA and frequently does <sil=0.428> ,COMMA because it generally knows far more about optimizing than you do (Microsoft Visual C++ or DEC C for example) <sil=0.940> .PERIOD Don't bother using register <sil=0.907> .PERIOD Enumerated types <sil=0.598> ,COMMA enum <sil=0.360> ,COMMA are similar to Fortran integer PARAMETERs <sil=0.616> ,COMMA but nicer to use <sil=0.984> .PERIOD The general form is enum identifier { enumerator_list } <sil=0.390> ,COMMA where "identifier" is optional but recommended <sil=0.960> .PERIOD The comma-separated list of enumerated values starts at zero by default <sil=0.531> ,COMMA but you can override this as shown in the example <sil=0.934> .PERIOD C Example

/*----------------------------------------------------------------------------*/
    enum timer_state_e { TPending <sil=0.508> ,COMMA TExpired <sil=0.565> ,COMMA TCancelled} <sil=0.455> ;SEMICOLON enum timer_trn_e { TmrSet=4401 <sil=0.496> ,COMMA TCancel=4414} <sil=0.313> ;SEMICOLON  <sil=0.920> .PERIOD enum timer_state_e t_state <sil=0.432> ;SEMICOLON enum timer_trn_e t_trn <sil=0.629> ;SEMICOLON  <sil=0.965> .PERIOD t_state = TExpired <sil=0.592> ;SEMICOLON /* t_state now contains 1 */
    t_trn = TCancel <sil=0.556> ;SEMICOLON /* t_trn now contains 4414 */



*     Fortran Example
*------------------------------------------------------------------------
      INTEGER TPENDING <sil=0.646> ,COMMA TEXPIRED <sil=0.358> ,COMMA TCANCELLED
      INTEGER TSET <sil=0.502> ,COMMA TCANCEL
      PARAMETER (TPENDING = 0 <sil=0.527> ,COMMA TEXPIRED = 1 <sil=0.359> ,COMMA TCANCELLED = 2)
      PARAMETER (TSET = 4401 <sil=0.401> ,COMMA TCANCEL = 4414) <sil=1.000> .PERIOD INTEGER T_STATE <sil=0.482> ,COMMA T_TRN <sil=0.991> .PERIOD T_STATE = TEXPIRED
      T_TRN = TCANCEL

When examining t_state or t_trn in the C program with the DEC debugger <sil=0.326> ,COMMA the integer value will be converted to a name <sil=0.588> ,COMMA e <sil=0.913> .PERIOD g <sil=0.982> .PERIOD DBG> EXAMINE t_trn
PROG\main\t_trn:   TCancel
which is handy <sil=0.989> .PERIOD Unfortunately <sil=0.563> ,COMMA because the enumerated types are really type int <sil=0.649> ,COMMA you can assign any integer value to t_trn without a compiler whinge <sil=0.893> !EXCLAMATIONMARK Types and storage class modifiers are discussed in more detail in K&R II <sil=0.379> ,COMMA page 209 onwards <sil=0.300> ,COMMA if you still thirst for knowledge <sil=0.959> .PERIOD Loop and Flow Control Constructs
C has three basic loop constructs <sil=0.937> .PERIOD These are for loops <sil=0.502> ,COMMA while loops and do loops <sil=0.927> .PERIOD An example is worth a thousand words:

*     Fortran Loops Example <sil=0.948> .PERIOD INTEGER I
      LOGICAL FIRST <sil=0.938> .PERIOD PRINT * <sil=0.481> ,COMMA I
      ENDDO
*
      I = 0
      DO WHILE ( I <sil=0.984> .PERIOD LT <sil=0.901> .PERIOD LIMIT )
        I = I + 1
        PRINT * <sil=0.332> ,COMMA I
      ENDDO
*
      FIRST = <sil=0.982> .PERIOD TRUE <sil=0.970> .PERIOD DO WHILE ( FIRST <sil=0.954> .PERIOD OR <sil=0.980> .PERIOD I <sil=0.905> .PERIOD LT <sil=0.995> .PERIOD LIMIT )
        IF ( FIRST ) FIRST = <sil=0.948> .PERIOD FALSE <sil=0.986> .PERIOD PRINT * <sil=0.448> ,COMMA I
        I = I + 1
      ENDDO

/*---- C Loops Example ("loops <sil=0.957> .PERIOD c") -------------------------------------------*/

/* ANSI C Headers */
#include <stdio <sil=0.978> .PERIOD h>
#include <stdlib <sil=0.921> .PERIOD h>

/* Defines and Macros */
#define LMT 5

/* Main Program starts here */
int main( int argc <sil=0.529> ,COMMA char *argv[] )
{
    int i <sil=0.516> ;SEMICOLON /*  End of declarations <sil=0.955> .PERIOD  <sil=0.636> .PERIOD  <sil=0.496> .PERIOD */
    printf("LMT = %d\n" <sil=0.626> ,COMMA LMT) <sil=0.619> ;SEMICOLON printf("\n'for' loop - for ( i = 1 <sil=0.394> ;SEMICOLON i <= LMT <sil=0.333> ;SEMICOLON i++ ) { <sil=0.975> .PERIOD  <sil=0.426> .PERIOD  <sil=0.580> .PERIOD }\n") <sil=0.387> ;SEMICOLON for ( i = 1 <sil=0.498> ;SEMICOLON i <= LMT <sil=0.369> ;SEMICOLON i++ ) { /* More usual in C would be  i = 0 <sil=0.618> ;SEMICOLON i < LMT <sil=0.589> ;SEMICOLON i++ */
      printf("%d\n" <sil=0.410> ,COMMA i ) <sil=0.375> ;SEMICOLON }

    printf("\ni = 0\n") <sil=0.378> ;SEMICOLON printf("'while' loop - while ( i++ < LMT ) { <sil=0.982> .PERIOD  <sil=0.650> .PERIOD  <sil=0.591> .PERIOD }\n") <sil=0.521> ;SEMICOLON i = 0 <sil=0.361> ;SEMICOLON while ( i++ < LMT ) {
      printf("%d\n" <sil=0.383> ,COMMA i ) <sil=0.377> ;SEMICOLON }

    printf("\ni = LMT\n") <sil=0.467> ;SEMICOLON printf("'do' loop - do { <sil=0.956> .PERIOD  <sil=0.579> .PERIOD  <sil=0.417> .PERIOD } while ( ++i < LMT ) <sil=0.366> ;SEMICOLON - always executes at least once\n") <sil=0.415> ;SEMICOLON i = LMT <sil=0.554> ;SEMICOLON do {
      printf("%d\n" <sil=0.558> ,COMMA i ) <sil=0.634> ;SEMICOLON } while ( ++i < LMT ) <sil=0.569> ;SEMICOLON exit(EXIT_SUCCESS) <sil=0.320> ;SEMICOLON }

All these constructs are explained in detail in K&R II <sil=0.483> ,COMMA chapter 3 <sil=0.909> .PERIOD The for loop has the following general form:



    for ( expression1 <sil=0.524> ;SEMICOLON terminate_if_false_expression2 <sil=0.303> ;SEMICOLON expression3 ) { <sil=0.924> .PERIOD }

If "terminate_if_false_expression2" is missed out it is taken as being true <sil=0.591> ,COMMA so an infinite loop results <sil=0.590> ,COMMA for ( <sil=0.420> ;SEMICOLON  <sil=0.579> ;SEMICOLON ) {ever} <sil=0.923> .PERIOD The "expression1" is evaluated once before the loop starts and is most often used to initialize the loop count <sil=0.325> ,COMMA whereas "expression3" is evaluated on every pass through the loop <sil=0.338> ,COMMA just before starting the next loop <sil=0.358> ,COMMA and is frequently used to modify the loop counter <sil=0.978> .PERIOD It is quite legal <sil=0.553> ,COMMA in C <sil=0.317> ,COMMA to modify the loop counter within the loop <sil=0.387> ,COMMA and the loop control variable retains its value when the loop terminates <sil=0.997> .PERIOD Obviously "terminate_if_false_expression2" causes the loop to end if it is false <sil=0.595> ,COMMA and is used to test the termination condition <sil=0.965> .PERIOD The "while" looks like this:


    while ( expression ) { <sil=0.906> .PERIOD }

and keeps going for as long as "expression" is true <sil=0.976> .PERIOD It zero trips (that is <sil=0.418> ,COMMA the code in it is never executed) if "expression" is false on the first encounter <sil=0.969> .PERIOD The for loop above could be written using while <sil=0.945> .PERIOD expression1 <sil=0.541> ;SEMICOLON while ( terminate_if_false_expression2 ) { <sil=0.951> .PERIOD expression3 <sil=0.638> ;SEMICOLON }
It isn't a good idea to do this though <sil=0.321> ,COMMA because someone will spend ages looking at your code wondering why you didn't write a for loop <sil=0.586> ,COMMA expecting some cunning algorithm <sil=0.942> .PERIOD Finally <sil=0.552> ,COMMA before time <sil=0.631> ,COMMA the old enemy <sil=0.639> ,COMMA makes us leave Loopsville City Limits <sil=0.554> ,COMMA let's look at the "do-while" construct <sil=0.972> .PERIOD The loop body is always executed at least once


    do { <sil=0.999> .PERIOD } while ( expression ) <sil=0.580> ;SEMICOLON /* Semicolon needed */

and the loop will be repeated if "expression" is true at the end of the current loop <sil=0.906> .PERIOD There is a keyword <sil=0.375> ,COMMA break <sil=0.391> ,COMMA which lets you leave the innermost loop early <sil=0.430> ,COMMA transferring control to the statement immediately after the loop <sil=0.947> .PERIOD for ( i = 0 <sil=0.635> ;SEMICOLON i < strlen(string) <sil=0.578> ;SEMICOLON i++) {
      if ( string[i] == '$' ) {
        found_dollar = TRUE <sil=0.533> ;SEMICOLON /*      Once we've found the dollar no need to search rest of string */
        break <sil=0.341> ;SEMICOLON }
    }
/*  Jump to here on "break" */ <sil=0.947> .PERIOD A related keyword <sil=0.381> ,COMMA continue <sil=0.457> ,COMMA skips to the end of the loop and continues with the next loop iteration <sil=0.948> .PERIOD for ( i = 0 <sil=0.395> ;SEMICOLON i < strlen(string) <sil=0.592> ;SEMICOLON i++) {
/*    Don't  bother trying to upcase spaces */
      if ( string[i] == ' ' ) continue <sil=0.529> ;SEMICOLON /* Move on to next character */
/*      It wasn't a space so have a go */
        string[i] = toupper( string[i] ) <sil=0.376> ;SEMICOLON }
/*  Jump to here on "break" */ <sil=0.908> .PERIOD This is most often used to avoid complex indenting and "if" tests <sil=0.950> .PERIOD Don't use it like I just did <sil=0.345> ,COMMA which was a silly example <sil=0.961> .PERIOD You have already met the "if" construct <sil=0.970> .PERIOD Here it is again <sil=0.529> ,COMMA with the "else if" demonstrated too <sil=0.981> .PERIOD if ( expression ) { <sil=0.929> .PERIOD /*    Do something */ <sil=0.938> .PERIOD } else if ( other_expression ) { <sil=0.928> .PERIOD /*    Do something else */ <sil=0.944> .PERIOD } else if ( final_expression ) { <sil=0.957> .PERIOD /*    Do something different */ <sil=0.919> .PERIOD } else { <sil=0.946> .PERIOD /*    Catch all if none of above expressions are true */ <sil=0.909> .PERIOD }

It is legal to write this kind of thing

    if ( expression )       /* Avoid this form */
      i = 1 <sil=0.557> ;SEMICOLON else
      i = 2 <sil=0.625> ;SEMICOLON The problem arises if you do this

    if ( expression )       /* This is probably not what was intended */
      i = 1 <sil=0.374> ;SEMICOLON else
      i = 2 <sil=0.638> ;SEMICOLON dont_forget_this = 3 <sil=0.371> ;SEMICOLON You might think that if "expression" is true (i <sil=0.954> .PERIOD e <sil=0.428> .PERIOD non-zero) then you would set i to 1 <sil=0.384> ,COMMA and if it were false you would set i to 2 and dont_forget_this to 3 <sil=0.999> .PERIOD In fact you will always set dont_forget_this to 3 <sil=0.506> ,COMMA because only the first statement after the "else" is grouped with the "else" <sil=0.901> .PERIOD I never use this form <sil=0.642> ,COMMA other than for a one liner like


    if ( expression ) expression_was_true = TRUE <sil=0.590> ;SEMICOLON where the meaning is clear <sil=0.994> .PERIOD Use the bracketed form which makes it totally unambiguous <sil=0.391> ,COMMA and is easier to use with the debugger <sil=0.944> .PERIOD C provides an alternative to lots of if - else if tests <sil=0.989> .PERIOD This is the "switch" statement <sil=0.991> .PERIOD The "expression_yielding_integer" is calculated <sil=0.595> ,COMMA and matched against the "case" "const-int-expression"s <sil=0.902> .PERIOD When one matches <sil=0.588> ,COMMA the statements following are executed <sil=0.334> ,COMMA or if none match <sil=0.358> ,COMMA the statements following "default" are executed

    switch ( expression_yielding_integer ) {
      case const-int-expression1:
        statements1 <sil=0.322> ;SEMICOLON case const-int-expression2:
        statements2 <sil=0.337> ;SEMICOLON case const-int-expression3:
        statements3 <sil=0.358> ;SEMICOLON  <sil=0.961> .PERIOD  <sil=0.927> .PERIOD default:
        statementsN <sil=0.513> ;SEMICOLON }
Unfortunately a bad default behaviour was chosen for this <sil=0.955> .PERIOD Each "case" drops through to the next one by default <sil=0.488> ,COMMA so if <sil=0.545> ,COMMA say <sil=0.621> ,COMMA "expression_yielding_integer" matched "const-int-expression2" <sil=0.437> ,COMMA then "statements2" through to "statementsN" would ALL be executed <sil=0.929> .PERIOD This is solved by using "break" again <sil=0.985> .PERIOD switch ( expression_yielding_integer ) {
      case const-int-expression1:
        statements1 <sil=0.504> ;SEMICOLON break <sil=0.507> ;SEMICOLON /* Always use break by default */
      case const-int-expression2:
        statements2 <sil=0.311> ;SEMICOLON break <sil=0.512> ;SEMICOLON case const-int-expression3:
        statements3 <sil=0.451> ;SEMICOLON break <sil=0.635> ;SEMICOLON  <sil=0.960> .PERIOD  <sil=0.969> .PERIOD default:
        statementsN <sil=0.542> ;SEMICOLON break <sil=0.642> ;SEMICOLON }
The default behaviour is rarely what is required in practise <sil=0.507> ,COMMA and it would have been far better to have a default "break" before each case <sil=0.643> ,COMMA and maybe use "continue" to indicate fall-through <sil=0.907> .PERIOD Remember that chars can be used as small integers <sil=0.560> ,COMMA so the following is quite legal <sil=0.965> .PERIOD char command_line_option <sil=0.459> ;SEMICOLON  <sil=0.952> .PERIOD switch ( command_line_option ) {
      case 'v':
        verbose_mode = TRUE <sil=0.595> ;SEMICOLON break <sil=0.490> ;SEMICOLON case 'l':
        produce_listing = TRUE <sil=0.421> ;SEMICOLON break <sil=0.489> ;SEMICOLON case ' <sil=0.999> ?QUESTIONMARK ':               /* Following two cases deliberately fall thru */
      case 'h':
        display_help = TRUE <sil=0.541> ;SEMICOLON break <sil=0.319> ;SEMICOLON default:
        use_default_options = TRUE:
        break <sil=0.610> ;SEMICOLON }

Arrays
Arrays in C always start at the 0 element rather than 1 <sil=0.448> ,COMMA and there is NO ARRAY BOUND CHECKING (gasps of horror) <sil=0.976> .PERIOD Here is a one-dimensional example array:

    int job[20] <sil=0.402> ;SEMICOLON /* job[0] <sil=0.457> ,COMMA job[1] <sil=0.945> .PERIOD  <sil=0.501> .PERIOD job[19] */

and the dimension must be an integer greater than zero <sil=0.904> .PERIOD This is how to declare a two-dimensional array [rows][columns]


    int job[4][20] <sil=0.584> ;SEMICOLON /* Like 4 job[20] 's <sil=0.454> ,COMMA job[0][0] <sil=0.526> ,COMMA job[0][1] <sil=0.959> .PERIOD  <sil=0.631> .PERIOD job[3][19] */ <sil=0.960> .PERIOD i = job[2][0] <sil=0.433> ;SEMICOLON /* Good */ <sil=0.966> .PERIOD i = job[2 <sil=0.637> ,COMMA 0] <sil=0.613> ;SEMICOLON /* Bad - don't ever do this */ <sil=0.990> .PERIOD Multi-dimensional arrays are column major <sil=0.480> ;SEMICOLON that is <sil=0.305> ,COMMA the right-most subscript varies fastest <sil=0.601> ,COMMA unlike Fortran <sil=0.343> .PERIOD Notice that you can't use commas to separate the indices <sil=0.953> .PERIOD Separate pairs of square brackets are needed for each index <sil=0.921> .PERIOD There is no limit to the number of dimensions other than those imposed by your compiler and the amount of memory available <sil=0.912> .PERIOD In practice <sil=0.316> ,COMMA multi-dimensional arrays are rarely used <sil=0.961> .PERIOD Unfortunately <sil=0.462> ,COMMA you can't (in C) use const int's as array bounds <sil=0.939> .PERIOD You have to use #define <sil=0.567> ,COMMA like this:


#define MAX_SIZE <sil=0.903> .PERIOD float floaty[MAX_SIZE] <sil=0.399> ;SEMICOLON More will be said about #define later <sil=0.957> .PERIOD Arrays can be initialized when they are defined:


    int days_in_month[12] = { 31 <sil=0.435> ,COMMA 28 <sil=0.532> ,COMMA 31 <sil=0.539> ,COMMA 30 <sil=0.319> ,COMMA 31 <sil=0.470> ,COMMA 30 <sil=0.505> ,COMMA 31 <sil=0.307> ,COMMA 31 <sil=0.304> ,COMMA 30 <sil=0.615> ,COMMA 31 <sil=0.414> ,COMMA 30 <sil=0.358> ,COMMA 31 } <sil=0.475> ;SEMICOLON int matrix[2][3] = { { 0 <sil=0.377> ,COMMA 1 <sil=0.307> ,COMMA 2 } <sil=0.561> ,COMMA { 3 <sil=0.491> ,COMMA 4 <sil=0.502> ,COMMA 5 } } <sil=0.367> ;SEMICOLON Remember that uninitialized arrays can contain anything at all <sil=0.308> ,COMMA so don't expect them to be full of zeros <sil=0.963> .PERIOD In addition <sil=0.635> ,COMMA initialized arrays can't be "demand zero compressed" <sil=0.989> .PERIOD You can leave out the size of an array and have it use the number of initializers <sil=0.493> ,COMMA like this


    int array_initialization_pages_in_K_and_R_II[] = { 86 <sil=0.391> ,COMMA 112 <sil=0.551> ,COMMA 113 <sil=0.436> ,COMMA 219 } <sil=0.616> ;SEMICOLON which produces an array of 4 integers <sil=0.918> .PERIOD You would probably want to use sizeof() to determine the size of the array in this case


     nelements =   sizeof( array_initialization_pages_in_K_and_R_II )    /
/*               -----------------------------------------------------        */
                 sizeof( array_initialization_pages_in_K_and_R_II[0] ) <sil=0.403> ;SEMICOLON  <sil=0.948> .PERIOD for ( i = 0 <sil=0.405> ;SEMICOLON i < nelements <sil=0.517> ;SEMICOLON i++) { <sil=0.991> .PERIOD }

Notice that you index up to LESS THAN the number of elements <sil=0.617> ,COMMA because the last element is (nelements-1) <sil=0.975> .PERIOD Strings
Character arrays containing a contiguous sequence of characters terminated with the null character <sil=0.383> ,COMMA '\0' <sil=0.596> ,COMMA are known as strings in C <sil=0.984> .PERIOD Initialized character arrays become static by default <sil=0.575> ,COMMA i <sil=0.612> .PERIOD e <sil=0.327> .PERIOD retain their value across function calls <sil=0.393> ,COMMA unless you change them <sil=0.969> .PERIOD The initializer <sil=0.365> ,COMMA or "string literal" is delimited by double quotes "like this" <sil=0.928> .PERIOD You can split a string initializer over several lines <sil=0.378> ,COMMA each part being in " quotes <sil=0.474> ,COMMA and they will be concatenated together <sil=0.959> .PERIOD The resultant string has the null character <sil=0.331> ,COMMA represented by the escape sequence '\0' <sil=0.426> ,COMMA appended to the end of it <sil=0.928> .PERIOD char random[80] <sil=0.390> ;SEMICOLON /* Could contain anything */
    char title[] = "Phil's Ramblings" <sil=0.510> ;SEMICOLON /* Takes 17 bytes due to '\0' at end */

    char longer_string[] = "Here is quite a long string split up over"
                           "two lines <sil=0.988> .PERIOD VAX C doesn't allow this <sil=0.629> ,COMMA though <sil=0.985> .PERIOD "
                           "Another good reason to switch to DEC C on"
                           "VAX or Alpha VMS <sil=0.493> ,COMMA or Visual C++ for Windows <sil=0.955> .PERIOD "

    char string_with_quote[] = "Here is the quote \" character" <sil=0.461> ;SEMICOLON The name that you give to an array can be used as a pointer to the zeroeth element of the array <sil=0.903> .PERIOD More will be said about this in the "Pointers" section <sil=0.931> .PERIOD There are many functions in the standard library for manipulating character strings <sil=0.447> ,COMMA and these all begin with "str" <sil=0.917> .PERIOD You will need to include <string <sil=0.969> .PERIOD h> to use them <sil=0.923> .PERIOD Look in K&R II pages 249-250 <sil=0.948> .PERIOD These functions expect an array <sil=0.426> ,COMMA or a pointer to characters <sil=0.510> ,COMMA as their arguments <sil=0.947> .PERIOD Finally <sil=0.542> ,COMMA note that an empty string is not really empty <sil=0.965> .PERIOD char is_it_empty[] = "" <sil=0.399> ;SEMICOLON /* No <sil=0.321> ,COMMA it contains one character <sil=0.357> ,COMMA '\0' */

Always bear in mind that the string functions often copy trailing '\0' characters <sil=0.634> ,COMMA so you must ensure that you allow space for this <sil=0.937> .PERIOD It is a good idea to always use the "strn" versions of the calls <sil=0.361> ,COMMA with sizeof(destination) as the character limit <sil=0.524> ,COMMA because that way you will avoid runaway (and hard to detect) memory overwriting <sil=0.908> .PERIOD Remember to terminate the destination string <sil=0.349> ,COMMA e <sil=0.963> .PERIOD g <sil=0.975> .PERIOD strncpy( destination <sil=0.533> ,COMMA source <sil=0.617> ,COMMA sizeof(destination) ) <sil=0.308> ;SEMICOLON destination[sizeof(destination)-1] = '\0' <sil=0.609> ;SEMICOLON else you'll end up avoiding potential overwrites <sil=0.392> ,COMMA but leave a potentially unterminated string to catch you out later <sil=0.925> !EXCLAMATIONMARK Pointers
Pointers are declared using the * <sil=0.497> ,COMMA or "dereference operator" <sil=0.983> .PERIOD int *i_ptr <sil=0.533> ;SEMICOLON declares a pointer to type int <sil=0.983> .PERIOD As declared above <sil=0.528> ,COMMA i_ptr is most likely not yet pointing at a valid location <sil=0.929> .PERIOD In order to make it point somewhere valid <sil=0.318> ,COMMA you generally use the "address operator" <sil=0.617> ,COMMA & <sil=0.556> ,COMMA like this


    int i <sil=0.542> ;SEMICOLON int j <sil=0.542> ;SEMICOLON int *i_ptr <sil=0.326> ;SEMICOLON  <sil=0.943> .PERIOD i_ptr = &i <sil=0.605> ;SEMICOLON  <sil=0.961> .PERIOD You can then change or read the value of i by using the "dereference operator" <sil=0.325> ,COMMA and change the object pointed to <sil=0.489> ,COMMA providing it is an object of the correct type <sil=0.949> .PERIOD *i_ptr = 3 <sil=0.443> ;SEMICOLON /* Set the int pointed to by i_ptr to 3 */
    printf("%d\n" <sil=0.314> ,COMMA i ) <sil=0.400> ;SEMICOLON /* i will be 3 */ <sil=0.903> .PERIOD i_ptr = &j <sil=0.358> ;SEMICOLON /* Set the i_ptr to point to j now */ <sil=0.983> .PERIOD *i_ptr = 3 <sil=0.363> ;SEMICOLON /* Set the int pointed to by i_ptr to 3 */
    printf("%d\n" <sil=0.505> ,COMMA j ) <sil=0.574> ;SEMICOLON /* j will be 3 */ <sil=0.977> .PERIOD This is a rather silly example <sil=0.320> ,COMMA because you would obviously just use i or j directly <sil=0.927> .PERIOD A more realistic use of pointers is with arrays:


    char string[] = "Here is a string with a $ in it" <sil=0.590> ;SEMICOLON char *sptr <sil=0.549> ;SEMICOLON int contains_dollar <sil=0.342> ;SEMICOLON  <sil=0.980> .PERIOD sptr = string <sil=0.429> ;SEMICOLON /* Remember that the array name is the same as &array[0] */
    contains_dollar = FALSE <sil=0.403> ;SEMICOLON while ( *sptr ) {  /* While thing pointed to is not 0 i <sil=0.921> .PERIOD e <sil=0.381> .PERIOD null character */
      if ( *sptr == '$' ) {
        contains_dollar = TRUE <sil=0.352> ;SEMICOLON break <sil=0.579> ;SEMICOLON /* Leave the while loop early and safely */
      }
      ++sptr <sil=0.637> ;SEMICOLON } <sil=0.956> .PERIOD When you increment pointers <sil=0.463> ,COMMA they automatically increment the address they point to by the size of one of the objects to which they point <sil=0.902> .PERIOD In the example above <sil=0.405> ,COMMA that is one character <sil=0.314> ,COMMA i <sil=0.464> .PERIOD e <sil=0.519> .PERIOD a byte <sil=0.966> .PERIOD If the array was an array of int <sil=0.341> ,COMMA then the pointer would increment by sizeof(int) bytes <sil=0.990> .PERIOD Just to frighten you <sil=0.428> ,COMMA this loop could be written


    while ( *sptr && <sil=0.961> !EXCLAMATIONMARK ( contains_dollar = *sptr++ == '$' ) ) <sil=0.585> ;SEMICOLON Programming Challenge 5
      _______________________
      
        You  guessed it <sil=0.925> .PERIOD Figure out what is happening in the scary "while"
      loop above <sil=0.984> .PERIOD Now write your own (differently named) version of strcpy
      using similar techniques to make it as short as possible <sil=0.907> .PERIOD Arrays and pointers are closely related <sil=0.922> .PERIOD They can be used in identical ways in many situations <sil=0.990> .PERIOD For example: <sil=0.989> .PERIOD char string[80] <sil=0.565> ;SEMICOLON char *sptr <sil=0.515> ;SEMICOLON  <sil=0.953> .PERIOD sptr = &string[0] <sil=0.327> ;SEMICOLON /* This could be written as sptr = string */ <sil=0.907> .PERIOD *string       = 'A' <sil=0.561> ;SEMICOLON /* Using array name like pointer */
    *(string+10)  = 'B' <sil=0.641> ;SEMICOLON /* Using array name like pointer */ <sil=0.929> .PERIOD sptr[0]       = 'A' <sil=0.452> ;SEMICOLON /* Using pointer like array */
    sptr[10]      = 'B' <sil=0.493> ;SEMICOLON /* Using pointer like array */ <sil=0.941> .PERIOD This is because <sil=0.594> ,COMMA in expressions or function calls <sil=0.568> ,COMMA arrays and pointers are both converted to the form "*(pointer + index-offset)" <sil=0.995> .PERIOD The main thing to remember is that pointers are variables <sil=0.350> ,COMMA and can be changed to point to different objects <sil=0.586> ,COMMA whereas array names are not variables <sil=0.964> .PERIOD The index-offset is automatically scaled according to the type of data pointed to <sil=0.987> .PERIOD In this case <sil=0.388> ,COMMA we are dealing with char which <sil=0.540> ,COMMA by definition <sil=0.599> ,COMMA has a size of 1 <sil=0.512> ,COMMA but if the pointers were pointers to int <sil=0.353> ,COMMA then on the VAX or Alpha <sil=0.358> ,COMMA the index-offset would be automatically scaled by 4 <sil=0.987> .PERIOD  <sil=0.914> .PERIOD int array[20] <sil=0.323> ;SEMICOLON int another_array[20] <sil=0.352> ;SEMICOLON int *i_ptr <sil=0.600> ;SEMICOLON  <sil=0.954> .PERIOD i_ptr = array <sil=0.367> ;SEMICOLON /* Legal */
    i_ptr[12] = 3 <sil=0.393> ;SEMICOLON  <sil=0.953> .PERIOD i_ptr = another_array <sil=0.513> ;SEMICOLON /* Legal */
    i_ptr[2] = 4 <sil=0.490> ;SEMICOLON  <sil=0.980> .PERIOD array = another_array <sil=0.337> ;SEMICOLON /* Illegal <sil=0.924> !EXCLAMATIONMARK */ <sil=0.929> .PERIOD Even multi-dimensional arrays get decomposed to the "*(pointer + index-offset)" by the compiler in say <sil=0.478> ,COMMA a function call <sil=0.413> ,COMMA which gives you no special knowledge of how they fold <sil=0.965> .PERIOD Hence if you are using a pointer to a multi-dimensional array where the dimensions could vary <sil=0.634> ,COMMA it is up to you to calculate the offset correctly <sil=0.345> ,COMMA e <sil=0.966> .PERIOD g <sil=0.941> .PERIOD int mda[ROWS][COLS] <sil=0.483> ;SEMICOLON  <sil=0.971> .PERIOD i = funcy( mda <sil=0.587> ,COMMA ROWS <sil=0.554> ,COMMA COLS ) <sil=0.505> ;SEMICOLON  <sil=0.940> .PERIOD int funcy( int *array <sil=0.620> ,COMMA rows <sil=0.376> ,COMMA cols )
{ <sil=0.966> .PERIOD for ( i = 0 <sil=0.634> ;SEMICOLON i < rows <sil=0.639> ;SEMICOLON i++) {
      for ( j = 0 <sil=0.464> ;SEMICOLON j < cols <sil=0.325> ;SEMICOLON j++) {
        total += *(array + i*cols + j) <sil=0.422> ;SEMICOLON }
    } <sil=0.966> .PERIOD }

Of course <sil=0.562> ,COMMA if the function was only expected to deal with arrays of set dimensions <sil=0.630> ,COMMA you could just declare those in funcy() <sil=0.946> .PERIOD int mda[ROWS][COLS] <sil=0.522> ;SEMICOLON  <sil=0.918> .PERIOD i = funcy( mda ) <sil=0.319> ;SEMICOLON  <sil=0.909> .PERIOD int funcy( int array[ROWS][COLS] )
{ <sil=0.916> .PERIOD for ( i = 0 <sil=0.506> ;SEMICOLON i < ROWS <sil=0.507> ;SEMICOLON i++) {
      for ( j = 0 <sil=0.546> ;SEMICOLON j < COLS <sil=0.366> ;SEMICOLON j++) {
        total += array[i][j] <sil=0.510> ;SEMICOLON }
    } <sil=0.915> .PERIOD }

The strange += assignment operator isn't a misprint <sil=0.987> .PERIOD It is shorthand <sil=0.597> ,COMMA so that


    x = x + 4 <sil=0.303> ;SEMICOLON can be written


    x += 4 <sil=0.475> ;SEMICOLON Similarly

    y = y - 10 <sil=0.626> ;SEMICOLON becomes


    y -= 10 <sil=0.474> ;SEMICOLON There must be NO SPACE between the operator and the = sign <sil=0.623> ,COMMA and the operator comes immediately before the = <sil=0.965> .PERIOD This notation is handy for more complex expressions <sil=0.484> ,COMMA such as


    array[ hash_value[index]*k + offset[i] ] += 4 <sil=0.415> ;SEMICOLON so you only need maintain the expression in one place <sil=0.949> .PERIOD Many binary operators have a similar assignment operator <sil=0.983> .PERIOD Check K&R II page 50 and page 48 for the bitwise operators that can also be used in this way <sil=0.982> .PERIOD The other thing to remember is that whereas arrays allocate space <sil=0.560> ,COMMA and hence the array name points to something valid <sil=0.493> ,COMMA pointers MUST NEVER BE USED UNTIL THEY HAVE BEEN INITIALIZED TO POINT TO SOMETHING VALID <sil=0.920> .PERIOD There is a special pointer value defined by the standard <sil=0.375> ,COMMA called the NULL pointer <sil=0.437> ,COMMA which is used to indicate that the pointer doesn't point to anything <sil=0.997> .PERIOD Normally <sil=0.333> ,COMMA you cannot directly assign integers to pointers <sil=0.400> ,COMMA but the NULL pointer is an exception <sil=0.945> .PERIOD Both the following lines make p point to "nothing" (well <sil=0.413> ,COMMA a guaranteed "not valid location" really) <sil=0.913> .PERIOD i_ptr = 0 <sil=0.518> ;SEMICOLON /* Legal but not recommended */    
    i_ptr = NULL <sil=0.524> ;SEMICOLON /* Recommended - it is clear that you refer to a pointer */

The NULL macro (see Macros section later on) <sil=0.388> ,COMMA defined identically in <stddef <sil=0.906> .PERIOD h> and <stdio <sil=0.984> .PERIOD h> among other places <sil=0.428> ,COMMA is often defined as


#define NULL     ((void *) 0)

even though "0" would do <sil=0.945> .PERIOD This discourages its use as an integer <sil=0.616> ,COMMA which you should never do <sil=0.970> .PERIOD People often make the mistake of writing


    string[i] = NULL <sil=0.638> ;SEMICOLON /* Never do this - you really want '\0' */
    i = NULL <sil=0.385> ;SEMICOLON /* Never do this if i is integer and you really mean 0 */

when what they actually mean is


    string[i] = '\0' <sil=0.482> ;SEMICOLON /* The null character - that's more like it */
    i = 0 <sil=0.571> ;SEMICOLON /* Integer zero */

A pointer of type (void *) is a special type of pointer that is guaranteed to be able to point to any type of object <sil=0.453> ,COMMA hence the NULL pointer can be assigned to any pointer type <sil=0.983> .PERIOD The NULL pointer need not have all bits set to zero <sil=0.411> ,COMMA so don't rely on this <sil=0.952> .PERIOD Pointers are very useful as function arguments for routines that manipulate strings of unknown (at compile time) length <sil=0.998> .PERIOD int how_long( const char *s )
{
    int i <sil=0.406> ;SEMICOLON /*  End of declarations <sil=0.947> .PERIOD  <sil=0.388> .PERIOD  <sil=0.390> .PERIOD */
    i = 0 <sil=0.643> ;SEMICOLON while ( *s++ ) {
      i++ <sil=0.440> ;SEMICOLON /* Increment i until '\0' found */
    }
    return( i ) <sil=0.606> ;SEMICOLON }

Even though the thing pointed to by s is const <sil=0.321> ,COMMA note that it is quite legal to increment the pointer s in the function <sil=0.597> ,COMMA because s is a local <sil=0.337> ,COMMA variable pointer <sil=0.313> ,COMMA pointing to whatever the calling argument to how_long() was <sil=0.974> .PERIOD Hence if you call how_long(string) <sil=0.483> ,COMMA you don't change string <sil=0.470> ,COMMA you assign string to s then increment s <sil=0.996> .PERIOD Any expression using array subscripting <sil=0.378> ,COMMA for example array[index] <sil=0.404> ,COMMA is exactly the same in C as its pointer equivalent <sil=0.557> ,COMMA in this case *(array+index) <sil=0.945> .PERIOD You have to be careful when using the const modifier with pointers <sil=0.923> .PERIOD The following examples should illustrate the point <sil=0.994> .PERIOD int i <sil=0.456> ;SEMICOLON const int *i_ptr <sil=0.373> ;SEMICOLON /* i_ptr points to a const int */
    int * const i_ptr = &i <sil=0.393> ;SEMICOLON /* i_ptr is const <sil=0.432> ,COMMA points to variable int */

Another important difference between pointers and arrays relates to the sizeof() operator <sil=0.989> .PERIOD int array[20] <sil=0.303> ;SEMICOLON int *i_ptr <sil=0.515> ;SEMICOLON size_t s <sil=0.485> ;SEMICOLON  <sil=0.983> .PERIOD i_ptr = array <sil=0.585> ;SEMICOLON  <sil=0.961> .PERIOD s = sizeof(array) <sil=0.333> ;SEMICOLON /* s is 20*sizeof(int) <sil=0.478> ,COMMA which is 100 on the VAX */
    s = sizeof(i_ptr) <sil=0.550> ;SEMICOLON /* s is sizeof(int *) <sil=0.384> ,COMMA which is 4 on the VAX    */ <sil=0.966> .PERIOD You can't deduce the size of an array from a pointer <sil=0.443> ,COMMA only the size of the pointer <sil=0.911> .PERIOD Because arrays as function arguments are treated the same as pointers <sil=0.649> ,COMMA then even if you declare the function arguments as "func( int array[10] )" array is still treated like a pointer in the function body <sil=0.569> ,COMMA so sizeof(array) in the function will give you the size of pointer to int <sil=0.360> ,COMMA not 10 times size of int <sil=0.927> .PERIOD It is quite legal to write a pointer definition like this:


    int* i_ptr <sil=0.400> ;SEMICOLON /* Not recommended */

This is best avoided <sil=0.603> ,COMMA because it can be confusing <sil=0.993> .PERIOD Consider


    int* i_ptr1 <sil=0.551> ,COMMA i_ptr2 <sil=0.615> ;SEMICOLON /* Probably not what you intended */

At first glance it looks like you have just declared two pointers to int <sil=0.942> .PERIOD In fact <sil=0.622> ,COMMA i_ptr1 is a pointer <sil=0.557> ,COMMA but i_ptr2 is an int <sil=0.957> .PERIOD int *i_ptr1 <sil=0.478> ,COMMA *i_ptr2 <sil=0.446> ;SEMICOLON /* Better */

The second example keeps the * with the variable to which it relates <sil=0.348> ,COMMA and is considered better style (by me at any rate) <sil=0.998> !EXCLAMATIONMARK There are two standard library functions often used with pointer <sil=0.962> .PERIOD They are declared in <stdlib <sil=0.961> .PERIOD h> <sil=0.972> ,COMMA and are malloc() and free() <sil=0.941> .PERIOD Both are AST reentrant under DEC C <sil=0.990> .PERIOD The malloc() function allocates an area of memory specified in bytes <sil=0.336> ,COMMA and is declared as


void *malloc(size_t size) <sil=0.639> ;SEMICOLON and would be used like this <sil=0.957> .PERIOD int *i_ptr <sil=0.565> ;SEMICOLON  <sil=0.962> .PERIOD i_ptr = (int *)malloc( sizeof(int)*nelements_wanted ) <sil=0.430> ;SEMICOLON if ( i_ptr <sil=0.907> !EXCLAMATIONMARK = NULL ) { <sil=0.951> .PERIOD i_ptr[i] = i <sil=0.536> ;SEMICOLON  <sil=0.920> .PERIOD } else { <sil=0.969> .PERIOD /*    Couldn't get the memory - do some cunning recovery */ <sil=0.923> .PERIOD }

It is good practise to "cast" the result of a malloc() to the correct type <sil=0.917> .PERIOD This helps the compiler to indirectly check whether you are using the correct type in the sizeof() invocation too <sil=0.962> .PERIOD If it complains about your cast <sil=0.459> ,COMMA then (assuming the type is the same in the sizeof() ) you are probably using the wrong type in both places <sil=0.414> ,COMMA and might have allocated too little memory <sil=0.928> .PERIOD There is no check if you wander off the allocated memory <sil=0.576> ,COMMA out into memory space no man has seen before <sil=0.875> !EXCLAMATIONMARK The memory returned by malloc() can contain any values when you get it <sil=0.316> ,COMMA i <sil=0.401> .PERIOD e <sil=0.595> .PERIOD it is not set to zero <sil=0.950> .PERIOD The free() function frees up the memory obtained from malloc() <sil=0.996> .PERIOD It is declared as


void free(void *pointer) <sil=0.395> ;SEMICOLON and would be used like this to free the memory obtained in the previous example


    free( i_ptr ) <sil=0.417> ;SEMICOLON i_ptr = NULL <sil=0.555> ;SEMICOLON /* Good practise */

I like to set the pointer to NULL immediately upon freeing the memory <sil=0.349> ,COMMA because the pointer MUST NOT BE USED again after being free()ed <sil=0.976> .PERIOD By setting it to NULL <sil=0.307> ,COMMA you will (under VMS or Windows NT) get an ACCVIO if you try and dereference the pointer <sil=0.961> .PERIOD This is safer than leaving it <sil=0.320> ,COMMA having the memory reused elsewhere <sil=0.503> ,COMMA then changing it via the duff pointer <sil=0.964> .PERIOD This sort of mistake is very hard to track down <sil=0.913> .PERIOD It is very important to always free malloc()-ed memory when you are done with it <sil=0.634> ,COMMA or you will cause what is known as a "memory leak" <sil=0.962> .PERIOD There are a couple of functions related to malloc() <sil=0.988> .PERIOD One is calloc() <sil=0.574> ,COMMA which allows you to allocate memory and initialize it's value in one go <sil=0.913> .PERIOD void *calloc(size_t number <sil=0.446> ,COMMA size_t size) <sil=0.432> ;SEMICOLON The other function is realloc() <sil=0.492> ,COMMA which allows you to expand a region of memory obtained by malloc() <sil=0.498> ,COMMA whilst retaining its current contents <sil=0.954> .PERIOD void *realloc(void *pointer <sil=0.364> ,COMMA size_t size) <sil=0.546> ;SEMICOLON The new <sil=0.434> ,COMMA expanded region of memory need not be in the same place as the original


    new_i_ptr = (int *)realloc( i_ptr <sil=0.320> ,COMMA sizeof(int)*larger_nelements_wanted ) <sil=0.591> ;SEMICOLON if ( new_i_ptr ) {
/*    Successfully expanded */
      i_ptr = new_i_ptr <sil=0.497> ;SEMICOLON /* Don't free anything here <sil=0.917> !EXCLAMATIONMARK */
    } else {
/*    Couldn't get the extra memory <sil=0.546> ,COMMA stick with the existing pointer */
    }

so in this example the memory may have changed location <sil=0.482> ,COMMA but the original content will have been copied to the new location <sil=0.911> .PERIOD Note how I use a new pointer <sil=0.336> ,COMMA new_i_ptr <sil=0.494> ,COMMA to check that the relocation was successful <sil=0.909> .PERIOD This is essential because if you directly assigned to the pointer to the memory you were trying to realloc and the call failed (returning NULL) you would have no way to free the memory originally pointed to by i_ptr <sil=0.975> .PERIOD /*  Never do this - always assign the return value to a different pointer */
    i_ptr = (int *)realloc( i_ptr <sil=0.500> ,COMMA sizeof(int)*larger_nelements_wanted ) <sil=0.499> ;SEMICOLON A final couple of warnings about pointers <sil=0.919> .PERIOD Firstly <sil=0.597> ,COMMA the [] operator has a higher precedence than the * <sil=0.512> ,COMMA so int *array[] means an array of pointers to int <sil=0.557> ,COMMA not a pointer to an array of ints <sil=0.994> .PERIOD Secondly <sil=0.402> ,COMMA the following two statements are not equivalent:


extern int  is[] <sil=0.339> ;SEMICOLON /* This declares an int array <sil=0.399> ,COMMA defined elsewhere */
extern int *is <sil=0.640> ;SEMICOLON /* This declares a pointer to int <sil=0.548> ,COMMA defined elsewhere */

The compiler will actually generate code you did not intend <sil=0.459> ,COMMA and probably cause an ACCVIO if you confuse these <sil=0.900> .PERIOD This is because an access via a pointer first looks at the address of the pointer <sil=0.528> ,COMMA gets the pointer value stored there <sil=0.574> ,COMMA and uses that as the base address for lookups <sil=0.929> .PERIOD Access via an array name uses the address of the array itself as the base address for lookups <sil=0.960> .PERIOD Draw a diagram if you are confused <sil=0.956> !EXCLAMATIONMARK Using the EXT and DEFINE_GLOBALS macros <sil=0.531> ,COMMA explained later <sil=0.315> ,COMMA should stop this ever happening to you <sil=0.978> .PERIOD Structures and Unions
Structures and unions in C are pretty much like their Fortran counterparts <sil=0.924> .PERIOD The general form of a structure declaration is
struct optional_structure_identifier {what's in it} optional_instance <sil=0.458> ;SEMICOLON I suggest that you always specify optional_structure_identifier <sil=0.323> ,COMMA then declare the instances of the structure later in a manner similar to the way we used enum <sil=0.918> .PERIOD Example:


/*     C Example */                    |*     Fortran Example
                                       |
struct oscar_location_s {              |      STRUCTURE /OSCAR_LOCATION_S/
  int x <sil=0.572> ;SEMICOLON |        INTEGER X
  int y <sil=0.647> ;SEMICOLON |        INTEGER Y
} <sil=0.539> ;SEMICOLON /* Note the semicolon <sil=0.318> ;SEMICOLON */          |      END STRUCTURE <sil=0.910> .PERIOD | <sil=0.931> .PERIOD int main( int argc <sil=0.466> ,COMMA char *argv[] )     | <sil=0.985> .PERIOD {                                      | <sil=0.911> .PERIOD struct oscar_location_s loc <sil=0.591> ;SEMICOLON |      RECORD /OSCAR_LOCATION_S/ LOC <sil=0.962> .PERIOD | <sil=0.963> .PERIOD loc <sil=0.915> .PERIOD x = 100 <sil=0.594> ;SEMICOLON |      LOC <sil=0.949> .PERIOD X = 100
    loc <sil=0.932> .PERIOD y =  50 <sil=0.603> ;SEMICOLON |      LOC <sil=0.948> .PERIOD Y =  50 <sil=0.969> .PERIOD | <sil=0.965> .PERIOD }                                      |

Similarly with unions <sil=0.383> ,COMMA the following trivial example shows how they might be declared and used:


/*     C Example */                    |*     Fortran Example
                                       |
union hat_u {                          |      STRUCTURE /HAT_U/
  int   mileage <sil=0.433> ;SEMICOLON |        UNION
  float hotel_cost <sil=0.399> ;SEMICOLON |          MAP
} <sil=0.331> ;SEMICOLON |            INTEGER MILEAGE <sil=0.939> .PERIOD |          END MAP
int main( int argc <sil=0.525> ,COMMA char *argv[] )     |          MAP
{                                      |            REAL HOTEL_COST
    int was_tow <sil=0.541> ;SEMICOLON |          END MAP
    union hat_u cost <sil=0.481> ;SEMICOLON |        END UNION <sil=0.965> .PERIOD |      END STRUCTURE
    if ( was_tow ) {                   | <sil=0.944> .PERIOD cost <sil=0.961> .PERIOD mileage = 100 <sil=0.591> ;SEMICOLON |      IF ( WAS_TOW ) THEN
    } else {                           |        COST <sil=0.953> .PERIOD MILEAGE = 100
      cost <sil=0.915> .PERIOD hotel_cost =  45 <sil=0.982> .PERIOD 50 <sil=0.544> ;SEMICOLON |      ELSE
    }                                  |        COST <sil=0.939> .PERIOD HOTEL_COST =  45 <sil=0.938> .PERIOD 50 <sil=0.986> .PERIOD |      ENDIF <sil=0.989> .PERIOD | <sil=0.913> .PERIOD }                                      | <sil=0.949> .PERIOD Notice that you don't need the MAP - END MAP sequence in C that is used in DEC Fortran <sil=0.969> .PERIOD Everything in the union { body } acts as though it is sandwiched between MAP - END MAP <sil=0.958> .PERIOD Structures may contain pointer references to themselves <sil=0.473> ,COMMA which is very handy for implementing linked lists:


struct list_s {
  struct list_s *prev <sil=0.564> ;SEMICOLON struct list_s *next <sil=0.348> ;SEMICOLON void *data_ptr <sil=0.431> ;SEMICOLON } <sil=0.340> ;SEMICOLON When you declare a pointer to a structure <sil=0.508> ,COMMA let's call it p <sil=0.396> ,COMMA there is a potential trap in using the pointer because the binding of the structure member operator <sil=0.425> ,COMMA  <sil=0.918> .PERIOD  <sil=0.617> ,COMMA is higher than the * dereference operator <sil=0.960> .PERIOD Hence *p <sil=0.937> .PERIOD thing means lookup the member "thing" of p <sil=0.441> ,COMMA and use that as an address for the dereference <sil=0.992> .PERIOD What you really want is (*p) <sil=0.937> .PERIOD thing <sil=0.941> .PERIOD This is a bit ugly <sil=0.606> ,COMMA so C provides the -> operator <sil=0.932> .PERIOD  <sil=0.974> .PERIOD struct my_struct_s my_struct <sil=0.448> ;SEMICOLON struct my_struct_s *struct_ptr <sil=0.375> ;SEMICOLON  <sil=1.000> .PERIOD struct_ptr = &my_struct <sil=0.305> ;SEMICOLON (*struct_ptr) <sil=0.906> .PERIOD thing = 1 <sil=0.444> ;SEMICOLON /* "thing" = 1 in struct pointed to by struct_ptr*/
    struct_ptr->thing = 1 <sil=0.454> ;SEMICOLON /* Same as above */ <sil=0.915> .PERIOD This is good place to introduce a program example kindly provided by Rob Cannings <sil=0.979> .PERIOD This uses cunning (Cannings <sil=0.871> ?QUESTIONMARK ) pointer manipulation to create a binary sorted tree <sil=0.979> .PERIOD /*---- Illustration of pointer manipulation ("treesort <sil=0.955> .PERIOD c") -------------------*/
/* Example provided by Rob Cannings:                                          */
/* (Excess white space removed by Phil O <sil=0.933> .PERIOD  <sil=0.945> ;SEMICOLON -))                                */
/* We implement a sorting routine with the sorted list stored in a tree <sil=0.908> .PERIOD */

/* ANSI C Headers */
#include <stdlib <sil=0.987> .PERIOD h>
#include <stdio <sil=0.989> .PERIOD h>

/* Structures */
struct treeNode {
  int data <sil=0.556> ;SEMICOLON struct treeNode *pLeft <sil=0.630> ;SEMICOLON struct treeNode *pRight <sil=0.637> ;SEMICOLON } <sil=0.639> ;SEMICOLON /* Function prototypes */
void AddNode(struct treeNode **ppNode <sil=0.425> ,COMMA struct treeNode *pNewNode) <sil=0.477> ;SEMICOLON void Dump(struct treeNode *pNode) <sil=0.390> ;SEMICOLON /* Defines and macros */
#define NUMBER_OF_NUMBERS 4

/* Main Program starts here */
int main(int argc <sil=0.634> ,COMMA char *argv[])
{
    int i <sil=0.442> ;SEMICOLON int toBeSorted[NUMBER_OF_NUMBERS] = { 93 <sil=0.375> ,COMMA 27 <sil=0.616> ,COMMA 15 <sil=0.462> ,COMMA 47} <sil=0.641> ;SEMICOLON struct treeNode dataNode[NUMBER_OF_NUMBERS] <sil=0.345> ;SEMICOLON struct treeNode *pSortedTree <sil=0.437> ;SEMICOLON struct treeNode *pNewNode <sil=0.627> ;SEMICOLON /*  End of declarations <sil=0.923> .PERIOD  <sil=0.533> .PERIOD  <sil=0.519> .PERIOD */

/*  Initialise one node for each item of data */
    for (i = 0 <sil=0.536> ;SEMICOLON i < NUMBER_OF_NUMBERS <sil=0.545> ;SEMICOLON i++) {
      dataNode[i] <sil=0.956> .PERIOD pLeft = NULL <sil=0.364> ;SEMICOLON dataNode[i] <sil=0.969> .PERIOD pRight = NULL <sil=0.445> ;SEMICOLON dataNode[i] <sil=0.949> .PERIOD data = toBeSorted[i] <sil=0.573> ;SEMICOLON }

/*  Build a sorted tree out of the data nodes <sil=0.544> ,COMMA printing it */
/*  out after each new node is added to the tree           */
    pSortedTree = NULL <sil=0.403> ;SEMICOLON /* the tree starts as just as a stump */

    for (i = 0 <sil=0.424> ;SEMICOLON i < NUMBER_OF_NUMBERS <sil=0.555> ;SEMICOLON i++) {
      pNewNode = &dataNode[i] <sil=0.331> ;SEMICOLON AddNode(&pSortedTree <sil=0.574> ,COMMA pNewNode) <sil=0.432> ;SEMICOLON printf("\nSorted list of %d items:\n" <sil=0.388> ,COMMA i + 1) <sil=0.305> ;SEMICOLON Dump(pSortedTree) <sil=0.598> ;SEMICOLON }
    exit(EXIT_SUCCESS) <sil=0.344> ;SEMICOLON }

void AddNode(struct treeNode **ppSortedTree <sil=0.552> ,COMMA struct treeNode *pNewNode)
{
    struct treeNode *pCurrentNode <sil=0.448> ;SEMICOLON /*  End of declarations <sil=0.956> .PERIOD  <sil=0.480> .PERIOD  <sil=0.633> .PERIOD */

    pCurrentNode = *ppSortedTree <sil=0.368> ;SEMICOLON /* ppSortedTree is a pointer to a pointer */

/*  Have we reached the end of a branch <sil=0.887> ?QUESTIONMARK */
    if (pCurrentNode == NULL) {
      *ppSortedTree = pNewNode <sil=0.628> ;SEMICOLON } else {
/*    We have not reached the end of a branch */
      if (pCurrentNode->data > pNewNode->data) {
        AddNode(&(pCurrentNode->pRight) <sil=0.338> ,COMMA pNewNode) <sil=0.562> ;SEMICOLON } else {
        AddNode(&(pCurrentNode->pLeft) <sil=0.498> ,COMMA pNewNode) <sil=0.311> ;SEMICOLON }
    }
}

void Dump(struct treeNode *pNode)
{
/*  End of declarations <sil=0.973> .PERIOD  <sil=0.378> .PERIOD  <sil=0.506> .PERIOD */
    if (pNode <sil=0.976> !EXCLAMATIONMARK = NULL) {
      Dump(pNode->pLeft) <sil=0.398> ;SEMICOLON printf("%d\n" <sil=0.312> ,COMMA pNode->data) <sil=0.333> ;SEMICOLON Dump(pNode->pRight) <sil=0.404> ;SEMICOLON }
}

      Programming Challenge 6
      _______________________
      
        Compile and link  "treesort <sil=0.941> .PERIOD c" with the debugger <sil=0.931> .PERIOD Step through and
      experiment with looking at pointers <sil=0.633> ,COMMA and looking at the things they
      point to <sil=0.608> ,COMMA e <sil=0.932> .PERIOD g <sil=0.910> .PERIOD EXAMINE *pNode <sil=0.979> .PERIOD Modify the  program so you  can add
      numbers with a single argument function call <sil=0.975> .PERIOD Sometimes it is useful to know what offset a structure member has from the start of the structure <sil=0.913> .PERIOD There is a useful macro defined in <stddef <sil=0.917> .PERIOD h> called offsetof which will calculate the offset of a structure member from that start of the structure <sil=0.941> .PERIOD byte_offset = offsetof(struct my_struct_s <sil=0.563> ,COMMA thing) <sil=0.480> ;SEMICOLON The first argument to the offsetof macro is a TYPE <sil=0.341> ,COMMA not a variable name <sil=0.954> .PERIOD An example of this is shown in the "key <sil=0.943> .PERIOD c" example program later in the course <sil=0.928> .PERIOD Typedef
The typedef statement lets you define a new name for a pre-existing type <sil=0.969> .PERIOD It doesn't create a new type itself <sil=0.979> .PERIOD An example should make the usage clear <sil=0.992> .PERIOD Imagine you wanted to store coordinates <sil=0.563> ,COMMA and initially you thought they could all fit in a short int <sil=0.905> .PERIOD You might decide to typedef the coordinate declarations like this:


    typedef  short int  Coordinate_t <sil=0.503> ;SEMICOLON  <sil=0.978> .PERIOD Coordinate_t x[MAX_POINTS] <sil=0.566> ,COMMA y[MAX_POINTS] <sil=0.468> ;SEMICOLON  <sil=0.961> .PERIOD Later on it might transpire that increased resolution means that you need more than a short int <sil=0.945> .PERIOD All you need do then is


    typedef  long int  Coordinate_t <sil=0.508> ;SEMICOLON Be careful and sparing in your use of typedef <sil=0.979> .PERIOD Don't use typedef for everything so that no-one can tell the true type of anything <sil=0.923> .PERIOD Some people like to use typedef with structures <sil=0.385> ,COMMA struct coord_s {
      int x <sil=0.322> ;SEMICOLON int y <sil=0.582> ;SEMICOLON } <sil=0.429> ;SEMICOLON typedef  struct coord_s  Coordinate_t <sil=0.400> ;SEMICOLON  <sil=0.931> .PERIOD Coordinate_t points[MAX_POINTS] <sil=0.479> ;SEMICOLON  <sil=0.999> .PERIOD points[i] <sil=0.983> .PERIOD x = 100 <sil=0.455> ;SEMICOLON points[i] <sil=0.944> .PERIOD y =  50 <sil=0.323> ;SEMICOLON  <sil=0.972> .PERIOD whereas others argue that this masks the fact that coordinates are really structures and that it would be clearer to use


    struct  coord_s  points[MAX_POINTS] <sil=0.418> ;SEMICOLON I would suggest that you put all your structure and typedefs in one place <sil=0.366> ,COMMA like in a header file <sil=0.440> ,COMMA and use whatever makes the code uncluttered and easy to follow <sil=0.922> .PERIOD One place where I think typedef does improve clarity is when defining pointers to functions <sil=0.912> .PERIOD typedef int (*verify_cb_func_ptr)( Bodget b <sil=0.496> ,COMMA PxPointer cdata <sil=0.487> ,COMMA PxCBstruct cbs ) <sil=0.361> ;SEMICOLON declares verify_cb_func_ptr as a pointer to a function returning an int <sil=0.498> ,COMMA with 3 arguments of the types shown <sil=0.934> .PERIOD Note that the type returned by the functions themselves is int <sil=0.901> .PERIOD int verify_name( Bodget b <sil=0.375> ,COMMA PxPointer cdata <sil=0.524> ,COMMA PxCBstruct cbs ) <sil=0.545> ;SEMICOLON  <sil=0.984> .PERIOD verify_cb_func_ptr vcb <sil=0.479> ;SEMICOLON  <sil=0.994> .PERIOD vcb = verify_name <sil=0.414> ;SEMICOLON i = (*vcb)( b <sil=0.540> ,COMMA cdata <sil=0.593> ,COMMA cbs) <sil=0.341> ;SEMICOLON /* Note how to call function thru pointer */ <sil=0.927> .PERIOD The brackets around the (*vcb) are needed because the function brackets () take precedence over * <sil=0.934> .PERIOD Header Files
I have cunningly tripled up the HELLO program to demonstrate the use of printf <sil=0.432> ,COMMA which is a "stdio" function <sil=0.314> ,COMMA the for ( <sil=0.369> ;SEMICOLON  <sil=0.520> ;SEMICOLON ) loop <sil=0.411> ,COMMA and the exit(EXIT_SUCCESS) end-your-program function from "stdlib" <sil=0.956> .PERIOD These functions <sil=0.606> ,COMMA or others from these two libraries <sil=0.549> ,COMMA are so commonly used that it is a good idea to always include the <stdio <sil=1.000> .PERIOD h> and <stdlib <sil=0.980> .PERIOD h> ANSI standard header files in all your programs <sil=0.951> .PERIOD Header #include files in C can be specified in two ways:

#include <stdio <sil=0.939> .PERIOD h>

and


#include "myheader <sil=0.986> .PERIOD h"

The quoted "myheader <sil=0.919> .PERIOD h" form starts searching in the same directory as the file from which it is included <sil=0.601> ,COMMA then goes on to search in an implementation defined way <sil=0.937> .PERIOD The angle bracketed <stdio <sil=0.927> .PERIOD h> form follows "an implementation defined search path" <sil=0.938> .PERIOD In practise "implementation defined search path" tends to be the system libraries <sil=0.993> .PERIOD Under VAX C <sil=0.502> ,COMMA all the header files lived as <sil=0.955> .PERIOD h files in SYS$LIBRARY: <sil=0.948> .PERIOD Under DEC C <sil=0.516> ,COMMA they live in text libraries like DECC$RTLDEF <sil=0.935> .PERIOD TLB and SYS$STARLET_C <sil=0.968> .PERIOD TLB <sil=0.972> .PERIOD On Windows using Visual C++ 6 <sil=0.935> .PERIOD 0 they are in C:\Program Files\DevStudio\VC98\Include <sil=0.421> ,COMMA assuming that you installed Visual C++ on to your C: disk <sil=0.944> .PERIOD If you want to know the full search rules for VMS <sil=0.314> ,COMMA type

$ HELP CC LANGUAGE_TOPICS PREPROCESSOR #INCLUDE
You should always use the angle bracket <> form for ANSI header files <sil=0.329> ,COMMA and use the quoted form for your own headers <sil=0.327> ,COMMA e <sil=0.932> .PERIOD g <sil=0.997> .PERIOD #include "src$par:trntyp <sil=0.924> .PERIOD h"

The # symbol is known as the preprocessor operator <sil=0.994> .PERIOD When you perform a C compilation <sil=0.425> ,COMMA the first stage it goes through is preprocessing <sil=0.503> ,COMMA where all the # directives are obeyed <sil=0.446> ,COMMA and various inclusions and substitutions are made before the code is compiled <sil=0.952> .PERIOD The # sign must always be the first non-whitespace character on the line <sil=0.630> ,COMMA and is one of the few exceptions to the general free format of C code <sil=0.975> .PERIOD You can have spaces after the # <sil=0.375> ,COMMA and these are often useful when using #if constructs <sil=0.900> .PERIOD Another common preprocessor directive is #define <sil=0.913> .PERIOD This can be used to define "parameters" which you might want to use as array bounds for example <sil=0.320> ,COMMA but in addition it lets you define macros which take arguments and produce inline code using the arguments <sil=0.953> .PERIOD For example <sil=0.480> ,COMMA /* Some defines and macro definitions */
#define PI          3 <sil=0.983> .PERIOD 14159265358979
#define MAX(a <sil=0.557> ,COMMA b) (((a)>(b)) <sil=0.946> ?QUESTIONMARK (a):(b))
#define STRING_SIZE 16 <sil=0.950> .PERIOD  <sil=0.996> .PERIOD {
    char string[STRING_SIZE] <sil=0.588> ;SEMICOLON /* Using a #define'd array bound */ <sil=0.940> .PERIOD }

Notice that there are no semicolons at the end of the #define lines <sil=0.923> .PERIOD Leading and trailing blanks before the "token sequence" (the body of the macro or definition) are discarded <sil=0.428> ,COMMA although you can use \ at the end of a line to indicate that there is more of the macro on the next line <sil=0.901> .PERIOD In the second form of macro shown above <sil=0.489> ,COMMA you cannot have a space between the identifier <sil=0.538> ,COMMA MAX <sil=0.552> ,COMMA and the first "(" <sil=0.483> ,COMMA or the preprocessor will not know that the () delimit the parameter list for the macro expansion <sil=0.996> .PERIOD Also notice that (if you are a beginner) you haven't got a clue what is going on with that MAX macro <sil=0.921> !EXCLAMATIONMARK The #if <sil=0.392> ,COMMA #else <sil=0.369> ,COMMA #elif and #endif conditional preprocessor directives are used to include code selectively during preprocessing <sil=0.974> .PERIOD They can be used to test if a particular macro name has been defined (even as an empty string) <sil=0.912> .PERIOD A common use for this is stopping the same header file contents being included more than once <sil=0.900> .PERIOD For example <sil=0.315> ,COMMA imagine you had created a header file called "utils <sil=0.910> .PERIOD h" <sil=0.976> .PERIOD /*---- My header file for my util routines <sil=0.366> ,COMMA called "tla_utils <sil=0.957> .PERIOD h" -------------*/
#if <sil=0.948> !EXCLAMATIONMARK defined( TLA_UTILS_H )   /* Could have used #ifndef TLA_UTILS_H */
#define TLA_UTILS_H <sil=0.901> .PERIOD #if defined( __VMS )          /* Could have used #ifdef __VMS */
# include "vms_specific_stuff <sil=0.920> .PERIOD h"
#elif defined( UNIX )
# include "inferior_unix_alternative <sil=0.905> .PERIOD h"
#else
# include "oh_dear_it_must_be_dos <sil=0.952> .PERIOD h"
#endif <sil=0.943> .PERIOD /*  Do some stuff that should only be done once */ <sil=0.904> .PERIOD #ifndef DEFINE_GLOBALS
# define EXT extern
#endif <sil=0.975> .PERIOD #define MY_PROGRAM_ARRAY_LIMIT 100 <sil=0.990> .PERIOD EXT int   tla_global_int <sil=0.542> ;SEMICOLON  <sil=0.991> .PERIOD EXT const float tla_global_pi
#ifdef DEFINE_GLOBALS
 = 3 <sil=0.995> .PERIOD 14159265358979
#endif <sil=0.587> ;SEMICOLON  <sil=0.915> .PERIOD EXT char  tla_title_string[]
#ifdef DEFINE_GLOBALS
 = "Program Title"
#endif <sil=0.408> ;SEMICOLON  <sil=0.950> .PERIOD int MyFunction( int meaningful_name ) <sil=0.314> ;SEMICOLON /* This is not a function definition  */
                                        /* it is a "function prototype" which */
                                        /* allows arg and return val checking */ <sil=0.970> .PERIOD #endif  /* End of TLA_UTILS_H block */

This technique is widely used to enable selection of the correct code at compile time <sil=0.971> .PERIOD Try

$ HELP CC  Language_topics  Predefined_Macros  System_Identification_Macros
which will give you some of the predefined (by the compiler) macros that let you switch code on and off depending on <sil=0.590> ,COMMA say <sil=0.394> ,COMMA whether you are on a VAX or Alpha <sil=0.955> .PERIOD See K&R II pages 91 and 232 for more information on this subject <sil=0.945> .PERIOD The definition of the EXT macro is another useful technique for ensuring that you only DEFINE a variable once (ie <sil=0.965> .PERIOD actually allocate space for <sil=0.605> ,COMMA or initialize a variable with a value) <sil=0.928> .PERIOD Macros are explained in more detail below <sil=0.386> ,COMMA but basically the text (if any) associated with the macro name is substituted wherever the macro appears <sil=0.602> ,COMMA before compilation proper begins <sil=0.942> .PERIOD In your main program <sil=0.412> ,COMMA you #define DEFINE_GLOBALS and the header file then becomes <sil=0.972> .PERIOD int tla_global_int <sil=0.565> ;SEMICOLON  <sil=0.992> .PERIOD const float tla_global_pi = 3 <sil=0.992> .PERIOD 14159265358979 <sil=0.557> ;SEMICOLON  <sil=0.947> .PERIOD whereas any files of subroutines which don't #define DEFINE_GLOBALS will process the same header fragment as <sil=0.916> .PERIOD extern int tla_global_int <sil=0.309> ;SEMICOLON  <sil=0.911> .PERIOD extern const float tla_global_pi <sil=0.501> ;SEMICOLON  <sil=0.903> .PERIOD so the values are resolved at link time <sil=0.423> ,COMMA and won't be contradictory to the main program <sil=0.961> .PERIOD This technique saves having to have two versions of your header files (which inevitably get out of step) <sil=0.974> .PERIOD Macros and the <sil=0.962> ?QUESTIONMARK operator
Macros are preprocessed by the C preprocessor <sil=0.381> ,COMMA and the text of the macro <sil=0.327> ,COMMA along with any parameters <sil=0.594> ,COMMA are substituted for the macro itself <sil=0.911> .PERIOD Hence if you invoked the MAX macro shown previously <sil=0.424> ,COMMA the preprocessor would change the invocation

#define MAX(a <sil=0.585> ,COMMA b) (((a)>(b)) <sil=0.993> ?QUESTIONMARK (a):(b)) <sil=0.998> .PERIOD maxval = MAX( maxval <sil=0.463> ,COMMA this) <sil=0.372> ;SEMICOLON  <sil=0.947> .PERIOD to this before the compiler proper ever saw it:


       maxval = (((maxval)>(this)) <sil=0.982> ?QUESTIONMARK (maxval):(this)) <sil=0.385> ;SEMICOLON Removing some of the "guard brackets" you get this slightly more readable version


       maxval = (maxval > this) <sil=0.991> ?QUESTIONMARK maxval : this <sil=0.393> ;SEMICOLON The brackets around the parameters in the expansion are necessary to keep the meaning correct if <sil=0.457> ,COMMA say <sil=0.486> ,COMMA one of the arguments is a function call <sil=0.404> ,COMMA or complex expression <sil=0.951> .PERIOD Sometimes it is advisable to create a temporary variable to avoid "using" the parameters more than once <sil=0.604> ,COMMA and this will be explained later <sil=0.971> .PERIOD See page 229 - 231 of K&R II for a fuller explanation of defining macros <sil=0.967> .PERIOD Convention dictates that macros should be totally uppercase <sil=0.954> .PERIOD This is certainly the style used in the ANSI header files <sil=0.436> ,COMMA and it is generally best to make all your macros uppercase <sil=0.907> .PERIOD The <sil=0.986> ?QUESTIONMARK operator is a ternary operator <sil=0.496> ,COMMA i <sil=0.311> .PERIOD e <sil=0.458> .PERIOD it takes three operands <sil=0.943> .PERIOD It should be used sparingly <sil=0.649> ,COMMA and is a shorthand as illustrated below:

   value = (expression_1) <sil=0.962> ?QUESTIONMARK expression_2 : expression_3 <sil=0.574> ;SEMICOLON is (more or less) equivalent to

   if ( expression_1 ) {
     value = expression_2 <sil=0.391> ;SEMICOLON } else {
     value = expression_3 <sil=0.322> ;SEMICOLON } <sil=0.478> ;SEMICOLON The reason it is handy in macros is that it is best to avoid multiple <sil=0.412> ;SEMICOLON separated statements in a macro <sil=0.400> ,COMMA because that could well change the meaning of code <sil=0.940> .PERIOD Macros tend to be invoked on the assumption that they are a single statement and code meaning could change if they weren't <sil=0.627> ,COMMA e <sil=0.958> .PERIOD g <sil=0.986> .PERIOD if ( condition ) INVOKE_MACRO( bob ) <sil=0.515> ;SEMICOLON  <sil=0.649> .PERIOD By using the <sil=0.902> ?QUESTIONMARK operator you can get a single statement that still has some switching logic in it <sil=0.921> .PERIOD There is a trick to get round the single statement restriction <sil=0.451> ,COMMA and still behave nicely:


#define MULTI_STATEMENT_MACRO( arg )   do { \
                                           first_thing <sil=0.497> ;SEMICOLON \ <sil=0.970> .PERIOD last_thing <sil=0.426> ;SEMICOLON \
                                       } while (0)  /* DONT put a <sil=0.534> ;SEMICOLON at end <sil=0.932> !EXCLAMATIONMARK */

In C <sil=0.331> ,COMMA an expression is TRUE if it is ANY nonzero value <sil=0.581> ,COMMA or in the case of pointers <sil=0.601> ,COMMA if it doesn't compare equal to NULL <sil=0.986> .PERIOD The results of logical comparisons or other built-in operators is guaranteed to be 0 or 1 <sil=0.344> ,COMMA so


   i = ( 2 > 1) <sil=0.407> ;SEMICOLON /* Sets i to be 1 */
   i = ( 1 > 2) <sil=0.566> ;SEMICOLON /* Sets i to be 0 */

So <sil=0.649> ,COMMA in our MAX example ((a)>(b)) will be 1 <sil=0.365> ,COMMA i <sil=0.452> .PERIOD e <sil=0.620> .PERIOD TRUE <sil=0.633> ,COMMA if a is greater than b <sil=0.409> ,COMMA 0 otherwise <sil=0.959> .PERIOD So "expression_1" is TRUE if a > b <sil=0.978> .PERIOD Hence the value of "expression_2" i <sil=0.995> .PERIOD e <sil=0.437> .PERIOD a will be chosen <sil=0.970> .PERIOD Otherwise "expression_3" <sil=0.625> ,COMMA in this case b will be used <sil=1.000> .PERIOD "Why define MAX as a macro at all <sil=0.890> ?QUESTIONMARK " you might ask (pause until someone asks) <sil=0.991> .PERIOD Well the reason is that if you used a function <sil=0.561> ,COMMA you would need to write a version for floating point numbers <sil=0.395> ,COMMA another for ints <sil=0.556> ,COMMA another for long ints and so on <sil=0.915> .PERIOD Of course <sil=0.345> ,COMMA a macro can circumvent type checking <sil=0.532> ,COMMA which some people don't like very much <sil=0.584> ,COMMA so in C++ macros have been effectively eliminated for most purposes by "templates" which you can learn about in my STL Course <sil=0.906> .PERIOD When using the #if test mentioned in the "Header Files" section <sil=0.303> ,COMMA you can use relational tests on constant expressions <sil=0.922> .PERIOD Here is an example of checking that you are using Motif 1 <sil=0.960> .PERIOD 2 or greater


#if (XmVERSION >= 1 && XmREVISION > 1)
    XtSetArg( argl[narg] <sil=0.408> ,COMMA XmNtearOffModel <sil=0.346> ,COMMA XmTEAR_OFF_ENABLED ) <sil=0.393> ;SEMICOLON narg++ <sil=0.513> ;SEMICOLON #endif

The expression following the #if must either use the preprocessing operator defined(identifier) (which returns 1 if identifier has been #defined <sil=0.608> ,COMMA else 0) or be a constant expression <sil=0.988> .PERIOD This can be handy for defining a number of levels of debugging information <sil=0.958> .PERIOD The #if is also the safest way to "comment out" unused code <sil=0.573> ,COMMA rather than messing about making sure you haven't illegally nested comments <sil=0.967> .PERIOD For example:


#ifdef NEW_CODE_IS_RELIABLE
/*   New code that should be faster but hasn't been tested as much as the old */ <sil=0.920> .PERIOD #else
/*   Here is the old code that worked - don't want to remove it yet */ <sil=0.933> .PERIOD #endif

Clearly the first #if test will always fail in our lifetime because the macro will never be defined <sil=0.457> ,COMMA so the old code will not be compiled <sil=0.972> .PERIOD This technique avoids problems caused by inadvertent comment nesting <sil=0.939> .PERIOD Macros can be undefined using the #undef directive <sil=0.937> .PERIOD #define DEBUG 1 <sil=0.946> .PERIOD #ifdef DEBUG
    printf("The value of x is %d in routine Funcy\n" <sil=0.316> ,COMMA x) <sil=0.404> ;SEMICOLON /* Print out debug msg*/
#endif <sil=0.969> .PERIOD #undef DEBUG <sil=0.966> .PERIOD #ifdef DEBUG
    printf("The value of x is %d in routine Gibbon\n" <sil=0.555> ,COMMA x) <sil=0.375> ;SEMICOLON /* Not printed */
#endif <sil=0.988> .PERIOD You will need to #undef a macro if you want to use it again <sil=0.960> .PERIOD Complete redefinitions aren't allowed <sil=0.913> .PERIOD You can <sil=0.472> ,COMMA however <sil=0.917> ,COMMA define a macro more than once provided the tokens it expands to are the same <sil=0.650> ,COMMA ignoring whitespace <sil=0.933> .PERIOD This is known as a "benevolent redefinition" and is often used to get identical definitions of the NULL macro in several header files <sil=0.976> .PERIOD Avoid starting your macro names with _ and in particular __ because underbars are reserved for the implementations <sil=0.319> ,COMMA and double underbars are use for macros predefined by the standard <sil=0.907> .PERIOD For example <sil=0.593> ,COMMA the standard reserves __LINE__ <sil=0.563> ,COMMA __FILE__ <sil=0.381> ,COMMA __DATE__ <sil=0.510> ,COMMA __TIME__ and __STDC__ <sil=0.910> .PERIOD Look in K&R II page 233 for the meanings of these <sil=0.952> .PERIOD Occasionally it is useful to be able to use the macro arguments as strings <sil=0.954> .PERIOD This is done by using the # directly in front of the argument <sil=0.904> .PERIOD #define DEBUG_PRINT_INT( x ) (printf("int variable "#x" is %d" <sil=0.484> ,COMMA x))

#ifdef DEBUG
    DEBUG_PRINT_INT( i ) <sil=0.557> ;SEMICOLON /* Prints "int variable i is 10" or whatever */
#endif

Concatenation of macro arguments is also possible using the ## directive <sil=0.920> .PERIOD Some people like commas in big numbers <sil=0.646> ,COMMA so you might use it like this:


#define NICKS_MEGA_INT(a <sil=0.634> ,COMMA b <sil=0.629> ,COMMA c) a##b##c <sil=1.000> .PERIOD int i <sil=0.435> ;SEMICOLON  <sil=0.999> .PERIOD i = NICKS_MEGA_INT( 10 <sil=0.470> ,COMMA 000 <sil=0.470> ,COMMA 000 ) <sil=0.586> ;SEMICOLON /* same as 10000000 after expansion */ <sil=0.917> .PERIOD Then again <sil=0.369> ,COMMA you might not <sil=0.970> .PERIOD As a final thought for this section <sil=0.499> ,COMMA I will demonstrate a couple of benign uses for the <sil=0.930> ?QUESTIONMARK operator - it's not just there for the nasty things in life <sil=0.994> .PERIOD got_space = GetSpace(how_much) <sil=0.614> ;SEMICOLON /* Returns NULL if it fails */
    printf( got_space <sil=0.998> ?QUESTIONMARK "Success\n" : "Failure\n") <sil=0.390> ;SEMICOLON  <sil=0.956> .PERIOD /*  Avoid ACCVIO if pointer is NULL */
    printf( "Name is %s\n" <sil=0.393> ,COMMA name_ptr[i] <sil=0.908> ?QUESTIONMARK name_ptr[i] : "**Unknown**" ) <sil=0.602> ;SEMICOLON  <sil=0.932> .PERIOD /*  Handle plurals */
    printf( "Found %d item%s\n" <sil=0.575> ,COMMA nitems <sil=0.402> ,COMMA (nitems <sil=0.950> !EXCLAMATIONMARK = 1) <sil=0.874> ?QUESTIONMARK "s" : "" ) <sil=0.390> ;SEMICOLON The ACCVIO avoidance works because the expression that is NOT selected is guaranteed to be "thrown away" <sil=0.406> ,COMMA so the NULL pointer is never dereferenced

Finally <sil=0.518> ,COMMA remember my mentioning that it was a good idea to only reference macro arguments once if the macro was to be used like a function <sil=0.912> ?QUESTIONMARK The X Toolkit Intrinsics macro <sil=0.364> ,COMMA XtSetArg <sil=0.411> ,COMMA doesn't follow this sound advice <sil=0.950> .PERIOD It is defined like this:


#define XtSetArg(arg <sil=0.380> ,COMMA n <sil=0.631> ,COMMA d) \
    ((void)( (arg) <sil=0.922> .PERIOD name = (n) <sil=0.504> ,COMMA (arg) <sil=0.955> .PERIOD value = (XtArgVal)(d) ))

Notice that (arg) is referenced twice <sil=0.628> ,COMMA but only appears once in the macro argument list <sil=0.974> .PERIOD Hence the intuitive usage


    XtSetArg( argl[narg++] <sil=0.541> ,COMMA XmNtearOffModel <sil=0.629> ,COMMA XmTEAR_OFF_ENABLED ) <sil=0.538> ;SEMICOLON actually increments narg by two <sil=0.579> ,COMMA not one <sil=0.945> .PERIOD It therefore has to be used something like this


    XtSetArg( argl[narg] <sil=0.521> ,COMMA XmNtearOffModel <sil=0.618> ,COMMA XmTEAR_OFF_ENABLED ) <sil=0.536> ;SEMICOLON narg++ <sil=0.362> ;SEMICOLON If they had defined it like this


#define XtSetArg(arg <sil=0.590> ,COMMA n <sil=0.345> ,COMMA d) \
    do { Arg *_targ = &(arg) <sil=0.428> ;SEMICOLON \
        ( (void)( _targ->name = (n) <sil=0.619> ,COMMA _targ->value = (XtArgVal)(d) ) <sil=0.471> ;SEMICOLON ) \
    } while (0)

you would be able to use the argl[narg++] form <sil=0.978> .PERIOD This is something to be aware of if your pre or post decrements seem to be behaving strangely <sil=0.977> .PERIOD Obviously <sil=0.411> ,COMMA you should not actually redefine standard macros <sil=0.322> ,COMMA because this can lead to even more confusion <sil=0.907> .PERIOD Create your own version <sil=0.419> ,COMMA like SETARG if you feel the need <sil=0.927> .PERIOD Logical and Relational Operators
At this point I will gratuitously introduce the relational operators <sil=0.972> .PERIOD C        Means                      Fortran

      >    -  Greater than                ( <sil=0.907> .PERIOD GT <sil=0.915> .PERIOD )     -
      >=   -  Greater than or equal to    ( <sil=0.900> .PERIOD GE <sil=0.980> .PERIOD )      | Same precedence
      <    -  Less than                   ( <sil=0.903> .PERIOD LT <sil=0.923> .PERIOD )      | as each other <sil=0.474> ,COMMA <=   -  Less than or equal to       ( <sil=0.975> .PERIOD LE <sil=0.930> .PERIOD )     -  below */+-

      ==   -  Equal                       ( <sil=0.906> .PERIOD EQ <sil=0.956> .PERIOD )     -  Same as each
                                                        | other <sil=0.484> ,COMMA just <sil=0.953> !EXCLAMATIONMARK =   -  Not equal                   ( <sil=0.912> .PERIOD NE <sil=0.942> .PERIOD )     -  below < etc <sil=0.923> .PERIOD They are left to right associative <sil=0.436> ,COMMA and represent sequence points by which side effects of expressions must be complete <sil=0.932> .PERIOD E <sil=0.924> .PERIOD g <sil=0.903> .PERIOD if ( x*3 > y ) { <sil=0.915> .PERIOD }

guarantees that x will have been multiplied by three before comparison with y <sil=0.959> .PERIOD A word of caution about the equality operator <sil=0.584> ,COMMA == <sil=0.954> .PERIOD It is very easy to miss out the second = and this will still be a legal expression <sil=0.921> .PERIOD Example:


    if ( x = 3*12 ) { <sil=0.930> .PERIOD }

will always be true <sil=0.925> .PERIOD This is because <sil=0.478> ,COMMA in C <sil=0.609> ,COMMA expressions have a value <sil=0.334> ,COMMA propagated right-to-left <sil=0.918> .PERIOD So the value of ( x = 3 ) <sil=0.611> ,COMMA which calculates the right-hand side <sil=0.532> ,COMMA 36 <sil=0.382> ,COMMA and assigns it to x <sil=0.500> ,COMMA is 36 <sil=0.467> ,COMMA which is nonzero and hence always true <sil=0.993> .PERIOD So that mistake will cause the if {} body to be always executed <sil=0.491> ,COMMA and worse than that you will have unknowingly changed the value of x <sil=0.965> .PERIOD To avoid this <sil=0.319> ,COMMA some people like to write the test the other way round <sil=0.526> ,COMMA e <sil=0.978> .PERIOD g <sil=0.945> .PERIOD if ( 3*12 == x ) { <sil=0.950> .PERIOD }

Now <sil=0.410> ,COMMA if you miss of the second = you have an illegal expressions because you cannot assign 3*12 = x <sil=0.499> ,COMMA because 3*12 is not an lvalue (a modifiable location or symbol <sil=0.376> ,COMMA which can be on the left-hand side of the = sign in an expression) <sil=0.960> .PERIOD The logical operators are (in decreasing precedence)


      C        Means                      Fortran

      &&   -  Logical AND                ( <sil=0.915> .PERIOD AND <sil=0.967> .PERIOD )  

      ||   -  Logical OR                 ( <sil=0.980> .PERIOD OR <sil=0.967> .PERIOD )  

and are below the relational operators in precedence <sil=0.954> .PERIOD Hence the expression


    if ( j > 0 && i*3 > 12  ||  i <sil=0.977> !EXCLAMATIONMARK = k ) <sil=0.935> .PERIOD  <sil=0.349> .PERIOD  <sil=0.330> .PERIOD is the same as


    if (    (  ( j > 0 )  &&  ( (i*3) > 12 )  )    ||    ( i <sil=0.939> !EXCLAMATIONMARK = k )  ) <sil=0.969> .PERIOD  <sil=0.464> .PERIOD  <sil=0.339> .PERIOD See K&R II page 52 for operator precedence <sil=0.968> .PERIOD Most people don't remember these <sil=0.389> ,COMMA but use brackets to make the meaning of more complex expressions quite clear <sil=0.962> .PERIOD The <sil=0.853> !EXCLAMATIONMARK as a unary operator is similar to Fortran <sil=0.963> .PERIOD NOT <sil=0.947> .PERIOD  <sil=0.597> ,COMMA so ( <sil=0.947> !EXCLAMATIONMARK x ) is true if x is equal to zero <sil=0.962> .PERIOD Bitwise Operators
There are 6 bit manipulation operators in C <sil=0.571> ,COMMA which can only be used with integers (signed or unsigned) <sil=0.996> .PERIOD These operators are

      << - Left shift <sil=0.488> ,COMMA bring in zero bits on right <sil=0.953> .PERIOD >> - Right shift <sil=0.958> .PERIOD Bring in 0s on left for unsigned integers <sil=0.562> ,COMMA implementation defined for signed integers <sil=0.976> .PERIOD ~  - One's complement <sil=0.949> .PERIOD Unary operator <sil=0.315> ,COMMA changes 0s to 1 <sil=0.371> ,COMMA 1's to 0 
      &  - Bitwise AND <sil=0.541> ,COMMA do not confuse with relational &&
      |  - Bitwise INclusive OR <sil=0.419> ,COMMA do not confuse with relational ||
      ^  - Bitwise EXclusive OR

Here are some examples:


    i = i << 2 <sil=0.432> ;SEMICOLON /* Multiply by 4 */
    i <<= 2 <sil=0.367> ;SEMICOLON /* Same as above */

    mask |= MSK_RW <sil=0.329> ;SEMICOLON /* Set the bits in mask that are set in MSK_RW */

    valuemask = GCForeground|GCBackground <sil=0.573> ;SEMICOLON /* Set the bits that are the OR of */
                                           /* GCForeground and GCBackground   */

    mask = ~opposite <sil=0.309> ;SEMICOLON /* mask is complementary bit pattern to opposite */

    mask |= 1UL << MSK_R_V <sil=0.464> ;SEMICOLON /* Shift unsigned long 1 left MSK_R_V bits */
                            /* and set that bit in mask                */

These are very useful for setting and unsetting flag bits <sil=0.544> ,COMMA but you must be aware of the size of object that you are dealing with <sil=0.987> .PERIOD By their very nature <sil=0.374> ,COMMA bitwise operators can make code more unportable <sil=0.977> .PERIOD Programming Challenge 7
      _______________________
      
        Use the bitwise  operators  to  determine  what your machine  does
      with  a  right   shift   of  a  negative  integer <sil=0.983> .PERIOD Write  some  bit
      manipulation and checking  functions <sil=0.972> .PERIOD Check  the  priority  of  the
      bitwise  operators and see  how this affects the  bracketing of your
      tests and expressions <sil=0.955> .PERIOD Function Prototypes
Here is an example program to determine whether signed char or unsigned char is the default on your machine <sil=0.967> .PERIOD This example introduces function prototypes <sil=0.941> .PERIOD These are very useful <sil=0.389> ,COMMA and whenever you write a set of functions you should ALWAYS create a <sil=0.942> .PERIOD h (header) file with the prototypes for those functions <sil=0.948> .PERIOD The reason prototypes are so useful is that they allow the compiler to check that you are calling a function with the right number of arguments <sil=0.591> ,COMMA and that the arguments themselves are of the correct type <sil=0.928> .PERIOD You should NEVER ignore warnings about argument numbers or types <sil=0.568> ,COMMA and you should only cast (see later <sil=0.512> ,COMMA but briefly <sil=0.636> ,COMMA the "cast" (float)3 is like the Fortran FLOAT(3) ) if you are absolutely sure what you are doing <sil=0.855> !EXCLAMATIONMARK Notice that the function prototype (for power in this example) is exactly the same as the function header <sil=0.590> ,COMMA but with a <sil=0.528> ;SEMICOLON where the body of the function would go <sil=0.964> .PERIOD The arguments named in the prototype are optional <sil=0.581> ,COMMA so we could have declared "int power( int <sil=0.451> ,COMMA int ) <sil=0.314> ;SEMICOLON " <sil=0.915> .PERIOD Don't ever do this <sil=0.927> .PERIOD Give the arguments either the same names as those in the function definition <sil=0.482> ,COMMA or maybe a more verbose name <sil=0.456> ,COMMA so that someone looking at your header file with your function prototypes can easily work out how they are meant to be called <sil=0.987> .PERIOD /*---- To sign or not to sign <sil=0.509> ,COMMA that is the example ("charsign <sil=0.904> .PERIOD c") ------------*/

/* ANSI C Headers */
#include <limits <sil=0.997> .PERIOD h>
#include <stdio <sil=0.967> .PERIOD h>
#include <stdlib <sil=0.966> .PERIOD h>

/* Function prototypes */
int power( int base <sil=0.588> ,COMMA int n ) <sil=0.313> ;SEMICOLON /* Main Program starts here */
int main( int argc <sil=0.426> ,COMMA char *argv[] )
{
    char c <sil=0.519> ;SEMICOLON unsigned char uc <sil=0.350> ;SEMICOLON /*  End of declarations <sil=0.951> .PERIOD  <sil=0.547> .PERIOD  <sil=0.491> .PERIOD */

/*  Set the top bit of both characters */
    c = power( 2 <sil=0.340> ,COMMA (CHAR_BIT-1) ) <sil=0.400> ;SEMICOLON uc = power( 2 <sil=0.538> ,COMMA (CHAR_BIT-1) ) <sil=0.560> ;SEMICOLON /*  Shift them both right by one bit <sil=0.457> ,COMMA >> is the right shift operator */
    c >>= 1 <sil=0.486> ;SEMICOLON uc >>= 1 <sil=0.347> ;SEMICOLON /*  Check for equality - check out the <sil=0.883> ?QUESTIONMARK ternary operator <sil=0.955> !EXCLAMATIONMARK */
    printf("Your computer has %ssigned char <sil=0.994> .PERIOD \n" <sil=0.349> ,COMMA ( c == uc ) <sil=0.987> ?QUESTIONMARK "un" : "" ) <sil=0.334> ;SEMICOLON exit(EXIT_SUCCESS) <sil=0.650> ;SEMICOLON }

/*---- Function to raise integer to a power <sil=0.572> ,COMMA nicked from K&R II <sil=0.460> ,COMMA page 25 -----*/
int power( int base <sil=0.484> ,COMMA int n )
{
    int i <sil=0.387> ,COMMA p <sil=0.457> ;SEMICOLON /*  End of declarations <sil=0.989> .PERIOD  <sil=0.332> .PERIOD  <sil=0.570> .PERIOD */
    p = 1 <sil=0.625> ;SEMICOLON for ( i = 1 <sil=0.483> ;SEMICOLON i <= n <sil=0.649> ;SEMICOLON i++) {
      p = p * base <sil=0.549> ;SEMICOLON }
    return( p ) <sil=0.571> ;SEMICOLON }

In this example <sil=0.617> ,COMMA power is a function that returns an int <sil=0.967> .PERIOD You can return any type except an array <sil=0.982> .PERIOD However <sil=0.432> ,COMMA you can return structures (which might contain an array) <sil=0.975> .PERIOD Similarly <sil=0.501> ,COMMA you can pass structures as arguments <sil=0.998> .PERIOD In general <sil=0.494> ,COMMA it is best to avoid passing or returning structures <sil=0.581> ,COMMA because there may be extra overhead due to structures being larger than machine registers <sil=0.325> ,COMMA hence they are often passed on the stack <sil=0.955> .PERIOD Return or pass a pointer instead <sil=0.991> .PERIOD DON'T return a pointer to a function-local <sil=0.515> ,COMMA automatic object <sil=0.932> !EXCLAMATIONMARK Either make the user pass you a maximum size and some memory into which you can write your structure/array <sil=0.607> ,COMMA or malloc() it and return that <sil=0.918> .PERIOD In the latter case you should document somewhere that it is up to the user to free() the memory when they are done with it <sil=0.966> .PERIOD If your function doesn't actually return a value <sil=0.364> ,COMMA like a Fortran SUBROUTINE <sil=0.542> ,COMMA it is declared as void <sil=0.938> .PERIOD The void keyword is also used to indicate that a function takes no arguments <sil=0.343> ,COMMA for example:


    void initialize_something(void) <sil=0.596> ;SEMICOLON would be used like this

    initialize_something() <sil=0.510> ;SEMICOLON The brackets are necessary <sil=0.553> ,COMMA even though there are no arguments <sil=0.593> ,COMMA so the compiler can tell that you intend to call a function <sil=0.935> .PERIOD Programming Challenge 8
      _______________________
      
        Hack the "charsign <sil=0.903> .PERIOD c" example to  try  and call power()  with  the
      wrong type of  argument (you might  declare a float variable and use
      that) <sil=0.967> .PERIOD See what  compiler message you  get <sil=0.989> .PERIOD Call it with  the  wrong
      number of  arguments (but  leave the prototype  unchanged) <sil=0.930> .PERIOD Create a
      new function <sil=0.324> ,COMMA powerf() that lets you raise a floating  point number
      to  any  power <sil=0.938> .PERIOD Try  HELP  CC  RUN-TIME_FUNCTIONS LOG  and  HELP  CC
      RUN-TIME_FUNCTIONS  EXP  for  clues <sil=0.967> .PERIOD The  print  format  conversion
      character  for a floating point  number  in printf  is "%f" <sil=0.927> .PERIOD Compile
      your program and wonder why you get the error
      
        %CC-I-IMPLICITFUNC <sil=0.382> ,COMMA In  this statement <sil=0.417> ,COMMA the  identifier "exp"  is
      implicitly declared as a function <sil=0.951> .PERIOD Remember  that when  you typed HELP CC  RUN-TIME_FUNCTIONS EXP  it
      told you to stick "#include <math <sil=0.963> .PERIOD h>" in your program <sil=0.974> .PERIOD Put it in and
      the error  should  go  away <sil=0.907> .PERIOD If  you  chose  to  make your  function
      something like
      

        float powerf( float base <sil=0.589> ,COMMA float exp) <sil=0.641> ;SEMICOLON Think about the fact that exp() didn't whinge when you passed it a
      float <sil=0.991> .PERIOD This is because when arguments are passed (by value always in
      C) <sil=0.439> ,COMMA they are (if possible) converted <sil=0.606> ,COMMA AS IF  BY  ASSIGNMENT <sil=0.599> ,COMMA to the
      type specified in the function prototype <sil=0.984> .PERIOD The order of evaluation of
      arguments is unspecified <sil=0.431> ,COMMA so never rely on it <sil=0.972> .PERIOD See K&R II  pages  45
      and 201-202 for a  detailed description  of this behaviour <sil=0.938> .PERIOD Finally
      when you have your powerf function  working <sil=0.326> ,COMMA think what  a git I am
      for not mentioning the "double pow(double base <sil=0.586> ,COMMA double exp) <sil=0.410> ;SEMICOLON "  which
      also exists in <math <sil=0.994> .PERIOD h> <sil=0.905> .PERIOD Casting (without the couch)
It is possible <sil=0.492> ,COMMA as mentioned earlier <sil=0.512> ,COMMA to call a function or perform an assignment to "the wrong type" <sil=0.982> .PERIOD This is called casting <sil=0.607> ,COMMA and the general form is
    (type_I_want_to_cast_to) expression_I_want_to_cast
For example

    int index <sil=0.412> ;SEMICOLON float realval <sil=0.640> ;SEMICOLON index = (int)realval <sil=0.418> ;SEMICOLON Because <sil=0.352> ,COMMA as explained in the example <sil=0.417> ,COMMA this is done by default when calling functions for which good prototypes have been declared <sil=0.315> ,COMMA it is generally only useful if calling older style "Classic C" functions where the arguments types have not been declared <sil=0.997> .PERIOD E <sil=0.901> .PERIOD g <sil=0.980> .PERIOD float funcy() <sil=0.618> ;SEMICOLON /* We know that this actually takes a double argument */ <sil=0.909> .PERIOD float f <sil=0.543> ;SEMICOLON  <sil=0.981> .PERIOD f = funcy( 100 ) <sil=0.350> ;SEMICOLON /* Unpredictable result */
    f = funcy( (double)100 ) <sil=0.451> ;SEMICOLON /* f is 10 <sil=0.910> .PERIOD 0 */

Declarations can be quite complicated <sil=0.520> ,COMMA and you should read and understand K&R II <sil=0.348> ,COMMA pages 122 to 126 <sil=0.953> .PERIOD There is a very good set of rules and a diagram for parsing declarations in "Expert C Programming" <sil=0.362> ,COMMA pages 75 to 78 <sil=0.458> ,COMMA and I strongly recommend everyone to read this <sil=0.925> .PERIOD Try to avoid casting <sil=0.360> ,COMMA except in the circumstances defined above <sil=0.338> ,COMMA and possibly when using the RTL function malloc() <sil=0.922> .PERIOD File IO Routines and Command Line Arguments
When your C program starts up <sil=0.392> ,COMMA it automatically creates three file streams for you <sil=0.981> .PERIOD These are known as stdin <sil=0.438> ,COMMA stdout and stderr <sil=0.629> ,COMMA which are usually the keyboard <sil=0.403> ,COMMA the terminal and the terminal again respectively <sil=0.918> .PERIOD If you have included <stdio <sil=0.935> .PERIOD h> (which you should have) the symbols stdin <sil=0.466> ,COMMA stdout and stderr are available for your use <sil=0.940> .PERIOD The functions from <stdio <sil=0.956> .PERIOD h> that have seen so far <sil=0.609> ,COMMA like printf <sil=0.624> ,COMMA write to stdout <sil=0.925> .PERIOD Others <sil=0.627> ,COMMA like scanf <sil=0.440> ,COMMA read from stdin <sil=0.910> .PERIOD Here is an example of using scanf to read keyboard input <sil=0.931> .PERIOD /*---- Keyboard Input C Example ("input <sil=0.902> .PERIOD c") ----------------------------------*/

/* ANSI C Headers */
#include <stdio <sil=0.991> .PERIOD h>
#include <stdlib <sil=0.932> .PERIOD h>

/* Main Program starts here */
int main( int argc <sil=0.598> ,COMMA char *argv[] )
{
    int i <sil=0.517> ;SEMICOLON float f <sil=0.368> ;SEMICOLON char string[80] <sil=0.550> ;SEMICOLON /*  End of declarations <sil=0.942> .PERIOD  <sil=0.324> .PERIOD  <sil=0.458> .PERIOD */

    printf("Enter a string <sil=0.348> ,COMMA a decimal and a real number separated by spaces\n") <sil=0.541> ;SEMICOLON scanf("%s %d %f" <sil=0.475> ,COMMA string <sil=0.389> ,COMMA &i <sil=0.503> ,COMMA &f) <sil=0.538> ;SEMICOLON /* Not good - no string length check */
    printf("You entered \"%s\" <sil=0.600> ,COMMA %d and %f\n" <sil=0.541> ,COMMA string <sil=0.600> ,COMMA i <sil=0.440> ,COMMA f) <sil=0.647> ;SEMICOLON exit(EXIT_SUCCESS) <sil=0.553> ;SEMICOLON }

Compile the program and enter some data <sil=0.967> .PERIOD Here is some example input and output <sil=0.968> .PERIOD Enter a string <sil=0.558> ,COMMA a decimal and a real number separated by spaces
  Hello 4 3 <sil=0.928> .PERIOD 14159
  You entered "Hello" <sil=0.509> ,COMMA 4 and 3 <sil=0.921> .PERIOD 141590
Each item is delimited by whitespace (which includes new lines <sil=0.367> ,COMMA of course) <sil=0.529> ,COMMA but you can use a scanset format specifier to overcome this <sil=0.627> ,COMMA "%[characters_wanted]" <sil=0.976> .PERIOD See the DEC C Run-Time Library Reference Manual <sil=0.540> ,COMMA Chapter 2 <sil=0.416> ,COMMA and Table 2-3 <sil=0.591> ,COMMA and K&R II page 246 for more information on this <sil=0.970> .PERIOD The scanf function actually returns an integer value <sil=0.555> ,COMMA which is the number of items successfully read in <sil=0.367> ,COMMA or the predefined macro value EOF if an error occurred <sil=0.991> .PERIOD Because you can't safely limit string input with scanf (which means you could unintentionally overwrite important memory locations and cause your program to crash by entering a string longer than the memory allocated for it) <sil=0.581> ,COMMA it is far better to use fgets() <sil=0.925> .PERIOD What you do is read a limited length string with fgets() <sil=0.549> ,COMMA the prototype for which is char *fgets( char *str <sil=0.355> ,COMMA int maxchar <sil=0.389> ,COMMA FILE *file_ptr) <sil=0.935> .PERIOD So if we had a first argument <sil=0.581> ,COMMA destination_string <sil=0.589> ,COMMA declared as char destination_string[STRING_SIZE] <sil=0.359> ,COMMA we would use sizeof(destination_string) for maxchar <sil=0.395> ,COMMA and stdin as the input FILE stream <sil=0.918> .PERIOD  <sil=0.909> .PERIOD char destination_string[STRING_SIZE] <sil=0.645> ;SEMICOLON char *pszResult <sil=0.629> ;SEMICOLON  <sil=0.933> .PERIOD pszResult = fgets( destination_string <sil=0.610> ,COMMA sizeof(destination_string) <sil=0.607> ,COMMA stdin ) <sil=0.439> ;SEMICOLON if ( <sil=0.883> !EXCLAMATIONMARK pszResult ) {
      /* Error or EOF (End Of File) */ <sil=0.974> .PERIOD } else {
      if ( destination_string[strlen(destination_string)-1] <sil=0.977> !EXCLAMATIONMARK = '\n' ) {
        /* Length limit means we didn't get all the input string */ <sil=0.929> .PERIOD } else {
        /* Got it all - do sscanf() or whatever */ <sil=0.934> .PERIOD }
    }

The fgets() function stops reading after the first newline character is encountered <sil=0.367> ,COMMA or <sil=0.551> ,COMMA if no newline is found <sil=0.325> ,COMMA it reads in at most maxchar-1 characters <sil=0.996> .PERIOD In either case the string is terminated with '\0' <sil=0.970> .PERIOD You can tell whether the length limit cut in by checking if the last character in the string is '\n' <sil=0.936> .PERIOD If it isn't <sil=0.499> ,COMMA then you may need to read more input <sil=0.989> .PERIOD This will require malloc()ing space enough for all the "segments" of the string and perhaps strncat()ing them together <sil=0.911> .PERIOD This is left as an exercise for the reader <sil=0.942> .PERIOD The resultant string is then parsed with sscanf() <sil=0.337> ,COMMA which takes its input from a string <sil=0.558> ;SEMICOLON destination_string in this description <sil=0.939> .PERIOD Failure to limit the length of an input string led to the infamous "finger" bug <sil=0.995> .PERIOD There is a function similar to fgets <sil=0.506> ,COMMA called gets() <sil=0.367> ,COMMA which was used in the original finger program (finger is a program which returns information about users on the target system) <sil=0.918> .PERIOD Never <sil=0.319> ,COMMA repeat never <sil=0.477> ,COMMA use gets <sil=0.987> .PERIOD It reads characters into the string pointed to by its argument <sil=0.537> ,COMMA with no length check <sil=0.934> .PERIOD This was exploited to overwrite the return address on the stack <sil=0.493> ,COMMA and make the "privileged" finger image execute some code (sent as a part of a long string) to create a command shell running with full privileges <sil=0.992> .PERIOD Programming Challenge 9
      _______________________
      
        Write  a  program  using  scanf <sil=0.613> ,COMMA or  fgets and  sscanf <sil=0.990> .PERIOD Try  out
      different conversion characters <sil=0.399> ,COMMA check the  effects  of giving  bad
      data <sil=0.918> .PERIOD The standard C file system is based on streams <sil=0.597> ,COMMA which are rather like unit numbers in Fortran <sil=0.933> .PERIOD Streams connect to devices <sil=0.319> ,COMMA such as files on disks <sil=0.349> ,COMMA terminals or printers <sil=0.961> .PERIOD By using file streams <sil=0.615> ,COMMA you are shielded from having to do the low level IO <sil=0.900> .PERIOD C recognises two types of stream which are text streams and binary streams <sil=0.970> .PERIOD Binary streams are written to and read from without any mucking about <sil=0.927> !EXCLAMATIONMARK Text streams can have <sil=0.432> ,COMMA or not have <sil=0.447> ,COMMA implementation defined line feeds and carriage returns <sil=0.920> .PERIOD Binary streams are usually used for writing out data in the machine's internal representation <sil=0.495> ,COMMA like an array of structures for example <sil=0.999> .PERIOD The type is determined when the file is opened with fopen() <sil=0.917> .PERIOD The following table show the access modes you can use with fopen() <sil=0.949> .PERIOD r   Open text file reading <sil=0.940> .PERIOD w   Open or create text file for writing <sil=0.403> ,COMMA discard previous contents <sil=0.961> .PERIOD (creates new version under VMS)
  a   Open or create for appending <sil=0.642> ,COMMA write at end of existing data <sil=0.940> .PERIOD r+  Open text file reading AND writing <sil=0.921> .PERIOD w+  Open or create text file for update <sil=0.484> ,COMMA discard previous contents <sil=0.993> .PERIOD (creates new version under VMS)
  a+  Open or create for appending <sil=0.621> ,COMMA write at end of existing data <sil=0.920> .PERIOD Add a "b" after the access mode letter <sil=0.304> ,COMMA and we are talking binary files <sil=0.951> .PERIOD Here is an example program to write and read back an array of data structure <sil=0.584> ,COMMA which will make everything remarkably clear <sil=0.956> .PERIOD /*---- File IO Example ("fileio <sil=0.964> .PERIOD c") ------------------------------------------*/

/*---- Put all #include files here -------------------------------------------*/
/* ANSI Headers */
#include <ctype <sil=0.925> .PERIOD h>    /* Character macros */
#include <errno <sil=0.909> .PERIOD h>    /* errno error codes */
#include <stdio <sil=0.982> .PERIOD h>    /* Standard I/O */
#include <stdlib <sil=0.929> .PERIOD h>   /* Standard Library */
#include <string <sil=0.929> .PERIOD h>   /* String Library */
#include <time <sil=0.930> .PERIOD h>     /* Time Library */

/*---- Put all #define statements here ---------------------------------------*/
#define PROGRAM_VERSION "1 <sil=0.925> .PERIOD 6"
#define TYPE_OF_FILE "TEST_DATA"
#define NDATA_POINTS 10

/*---- Put all structure definitions here ------------------------------------*/
/* Following structures MUST be packed tightly ie <sil=0.970> .PERIOD no member alignment -------*/
#ifdef __DECC
#pragma member_alignment save
# pragma nomember_alignment
#endif

struct file_header_s {
  char type[32] <sil=0.621> ;SEMICOLON char version[8] <sil=0.485> ;SEMICOLON char creator[20] <sil=0.441> ;SEMICOLON time_t time <sil=0.302> ;SEMICOLON } <sil=0.341> ;SEMICOLON struct data_s {
  short x <sil=0.347> ;SEMICOLON short y <sil=0.527> ;SEMICOLON char name[8] <sil=0.477> ;SEMICOLON } <sil=0.397> ;SEMICOLON #ifdef __DECC
# pragma member_alignment restore
#endif

int main(int argc <sil=0.380> ,COMMA char *argv[])
{
    struct data_s *data_ptr <sil=0.612> ;SEMICOLON struct file_header_s file_header <sil=0.338> ;SEMICOLON FILE *outfile <sil=0.572> ,COMMA *infile <sil=0.543> ;SEMICOLON int  i <sil=0.573> ,COMMA got_answer <sil=0.436> ;SEMICOLON char answer[8] <sil=0.451> ,COMMA yeno[4] <sil=0.548> ,COMMA node_user[20] <sil=0.448> ,COMMA filename[128] <sil=0.496> ;SEMICOLON char *c_ptr <sil=0.324> ;SEMICOLON long int ndata = 0 <sil=0.644> ,COMMA nitems = 0 <sil=0.540> ;SEMICOLON /*  End of declarations <sil=0.956> .PERIOD  <sil=0.337> .PERIOD  <sil=0.384> .PERIOD */

/*  Set up a default namne in case user hasn't specified one */
    if (argc < 2) {
      strcpy(filename <sil=0.358> ,COMMA "MYDATA <sil=0.949> .PERIOD DAT") <sil=0.390> ;SEMICOLON } else {
      strcpy(filename <sil=0.418> ,COMMA argv[1]) <sil=0.507> ;SEMICOLON }

/*  Get node name and user name */
#if <sil=0.928> !EXCLAMATIONMARK defined( _WIN32 )
    sprintf( node_user <sil=0.498> ,COMMA "%s%s" <sil=0.559> ,COMMA getenv("SYS$NODE") <sil=0.348> ,COMMA getenv("USER") ) <sil=0.450> ;SEMICOLON /* VMS */
#else
    sprintf( node_user <sil=0.569> ,COMMA "\\\\%s\\%s" <sil=0.362> ,COMMA getenv("COMPUTERNAME") <sil=0.493> ,COMMA getenv("USERNAME")) <sil=0.323> ;SEMICOLON #endif
/*  Convert to uppercase */
    c_ptr = node_user <sil=0.474> ;SEMICOLON while ( *c_ptr = toupper(*c_ptr) ) ++c_ptr <sil=0.486> ;SEMICOLON /* toupper lives in <ctype <sil=0.907> .PERIOD h> */

/*  Allocate data space and initialize it */
    data_ptr = (struct data_s *)malloc( sizeof(struct data_s)*NDATA_POINTS ) <sil=0.300> ;SEMICOLON if ( data_ptr ) {

      ndata = NDATA_POINTS <sil=0.575> ;SEMICOLON for ( i = 0 <sil=0.563> ;SEMICOLON i < ndata <sil=0.529> ;SEMICOLON i++) {
        data_ptr[i] <sil=0.902> .PERIOD x = data_ptr[i] <sil=0.915> .PERIOD y = i <sil=0.371> ;SEMICOLON sprintf(data_ptr[i] <sil=0.926> .PERIOD name <sil=0.452> ,COMMA "%3 <sil=0.934> .PERIOD 3d <sil=0.344> ,COMMA %3 <sil=0.933> .PERIOD 3d" <sil=0.405> ,COMMA data_ptr[i] <sil=0.972> .PERIOD x <sil=0.410> ,COMMA data_ptr[i] <sil=0.990> .PERIOD y ) <sil=0.428> ;SEMICOLON }

/*    Open the file for writing in binary mode */
      outfile = fopen(filename <sil=0.369> ,COMMA "wb") <sil=0.336> ;SEMICOLON if ( outfile <sil=0.935> !EXCLAMATIONMARK = NULL ) {

/*      Set up the header */
        strcpy(file_header <sil=0.978> .PERIOD type <sil=0.414> ,COMMA TYPE_OF_FILE) <sil=0.635> ;SEMICOLON strcpy(file_header <sil=0.934> .PERIOD version <sil=0.402> ,COMMA PROGRAM_VERSION) <sil=0.301> ;SEMICOLON sprintf(file_header <sil=0.930> .PERIOD creator <sil=0.407> ,COMMA "%s" <sil=0.455> ,COMMA node_user) <sil=0.374> ;SEMICOLON (void)time(&file_header <sil=0.973> .PERIOD time) <sil=0.638> ;SEMICOLON printf("Writing out the header\n") <sil=0.413> ;SEMICOLON /*      Items Written   Data Pointer   Size in bytes     No <sil=0.965> .PERIOD of items  stream */
/*        |                   |             |                |            |   */
/*        v                   v             v                v            v   */
        nitems = fwrite( &file_header <sil=0.421> ,COMMA sizeof(file_header) <sil=0.369> ,COMMA 1 <sil=0.611> ,COMMA outfile) <sil=0.367> ;SEMICOLON if ( ferror(outfile) ) {
          fprintf(stderr <sil=0.317> ,COMMA "Error writing file 'header':\n%s" <sil=0.374> ,COMMA strerror(errno)) <sil=0.499> ;SEMICOLON }

        printf("Writing out the number of data items <sil=0.504> ,COMMA %d\n" <sil=0.383> ,COMMA ndata) <sil=0.468> ;SEMICOLON nitems = fwrite( &ndata <sil=0.318> ,COMMA sizeof(ndata) <sil=0.440> ,COMMA 1 <sil=0.322> ,COMMA outfile) <sil=0.464> ;SEMICOLON if ( ferror(outfile) ) {
          fprintf(stderr <sil=0.583> ,COMMA "Error writing number of data items:\n%s" <sil=0.388> ,COMMA strerror(errno)) <sil=0.364> ;SEMICOLON }

        printf("Writing out the actual data data all in one chunk\n") <sil=0.324> ;SEMICOLON nitems = fwrite( data_ptr <sil=0.544> ,COMMA sizeof(struct data_s)*ndata <sil=0.373> ,COMMA 1 <sil=0.587> ,COMMA outfile) <sil=0.364> ;SEMICOLON if ( ferror(outfile) ) {
          fprintf(stderr <sil=0.526> ,COMMA "Error writing data:\n%s" <sil=0.300> ,COMMA strerror(errno)) <sil=0.399> ;SEMICOLON }

        printf("Closing output file\n") <sil=0.452> ;SEMICOLON fclose(outfile) <sil=0.428> ;SEMICOLON } else {
        fprintf(stderr <sil=0.642> ,COMMA "Error creating data file %s:\n%s" <sil=0.579> ,COMMA filename <sil=0.584> ,COMMA strerror(errno)) <sil=0.384> ;SEMICOLON }
    } else {
      fprintf(stderr <sil=0.601> ,COMMA "Couldn't allocate space for %d data structures\n" <sil=0.500> ,COMMA ndata) <sil=0.466> ;SEMICOLON }    

/*  Now optionally read the data back in and format */

    do {
      printf("\nRead data back in <sil=0.927> ?QUESTIONMARK [Y/N]: ") <sil=0.387> ;SEMICOLON fgets( yeno <sil=0.362> ,COMMA sizeof(yeno) <sil=0.452> ,COMMA stdin) <sil=0.583> ;SEMICOLON /* Reads in sizeof(yeno)-1 chars */
      got_answer = sscanf( yeno <sil=0.509> ,COMMA "%[YyNnTtFf]" <sil=0.448> ,COMMA answer) <sil=0.351> ;SEMICOLON } while ( <sil=0.945> !EXCLAMATIONMARK got_answer ) <sil=0.402> ;SEMICOLON if ( answer[0] == 'Y' ||  answer[0] == 'y' ||
         answer[0] == 'T' ||  answer[0] == 't' ) {
      printf( "Here we go <sil=0.969> .PERIOD  <sil=0.390> .PERIOD \n" ) <sil=0.363> ;SEMICOLON /*    Zero out the structures just to show there's no cheating */
      ndata = 0 <sil=0.583> ;SEMICOLON memset( &file_header <sil=0.560> ,COMMA 0 <sil=0.310> ,COMMA sizeof( file_header ) ) <sil=0.638> ;SEMICOLON memset( data_ptr <sil=0.561> ,COMMA 0 <sil=0.505> ,COMMA sizeof(struct data_s)*NDATA_POINTS ) <sil=0.577> ;SEMICOLON /*    Open the file for reading in binary mode */
      infile = fopen(filename <sil=0.385> ,COMMA "rb") <sil=0.636> ;SEMICOLON if ( infile <sil=0.974> !EXCLAMATIONMARK = NULL ) {

        printf("Reading in the header\n") <sil=0.452> ;SEMICOLON nitems = fread(&file_header <sil=0.396> ,COMMA sizeof(file_header) <sil=0.321> ,COMMA 1 <sil=0.417> ,COMMA infile) <sil=0.526> ;SEMICOLON if ( ferror(infile) ) {
          fprintf(stderr <sil=0.513> ,COMMA "Error reading file 'header':\n%s" <sil=0.376> ,COMMA strerror(errno)) <sil=0.377> ;SEMICOLON }

        printf("Header information:  file type %s\n" <sil=0.363> ,COMMA file_header <sil=0.936> .PERIOD type ) <sil=0.647> ;SEMICOLON printf("                       version %s\n" <sil=0.344> ,COMMA file_header <sil=0.903> .PERIOD version ) <sil=0.369> ;SEMICOLON printf("                    created by %s\n" <sil=0.542> ,COMMA file_header <sil=0.902> .PERIOD creator ) <sil=0.466> ;SEMICOLON printf("                            on %s\n" <sil=0.392> ,COMMA ctime( &file_header <sil=0.923> .PERIOD time ) ) <sil=0.639> ;SEMICOLON nitems = fread( &ndata <sil=0.329> ,COMMA sizeof(ndata) <sil=0.376> ,COMMA 1 <sil=0.629> ,COMMA infile) <sil=0.496> ;SEMICOLON printf("Read in the number of data items <sil=0.476> ,COMMA %d\n" <sil=0.370> ,COMMA ndata) <sil=0.634> ;SEMICOLON if ( ferror(infile) ) {
          fprintf(stderr <sil=0.308> ,COMMA "Error reading number of data items:\n%s" <sil=0.495> ,COMMA strerror(errno)) <sil=0.636> ;SEMICOLON }

        printf("Reading in the actual data data all in one chunk\n") <sil=0.608> ;SEMICOLON nitems = fread( data_ptr <sil=0.612> ,COMMA sizeof(struct data_s)*ndata <sil=0.551> ,COMMA 1 <sil=0.314> ,COMMA infile) <sil=0.336> ;SEMICOLON if ( ferror(infile) ) {
          fprintf(stderr <sil=0.452> ,COMMA "Error reading data:\n%s" <sil=0.624> ,COMMA strerror(errno)) <sil=0.373> ;SEMICOLON }

        printf("Closing intput file\n\n") <sil=0.535> ;SEMICOLON fclose(infile) <sil=0.340> ;SEMICOLON printf("Read in %d data items\n" <sil=0.526> ,COMMA ndata) <sil=0.323> ;SEMICOLON for ( i = 0 <sil=0.463> ;SEMICOLON i < ndata <sil=0.609> ;SEMICOLON i++) {
          printf("%3d) x:%3d <sil=0.485> ,COMMA y:%3d <sil=0.492> ,COMMA Label: %s\n" <sil=0.532> ,COMMA i <sil=0.518> ,COMMA data_ptr[i] <sil=0.994> .PERIOD x <sil=0.333> ,COMMA data_ptr[i] <sil=0.922> .PERIOD y <sil=0.356> ,COMMA data_ptr[i] <sil=0.903> .PERIOD name ) <sil=0.459> ;SEMICOLON }

      } else {
        fprintf(stderr <sil=0.340> ,COMMA "Error opening data file %s:\n%s" <sil=0.360> ,COMMA filename <sil=0.496> ,COMMA strerror(errno)) <sil=0.306> ;SEMICOLON }

    } else {
      printf( "OK - be like that\n" ) <sil=0.610> ;SEMICOLON }

    exit(EXIT_SUCCESS) <sil=0.497> ;SEMICOLON }

The strange #pragma directive is a standard way to do non-standard things <sil=0.479> ,COMMA like instruct the compiler to close-pack the data (i <sil=0.968> .PERIOD e <sil=0.428> .PERIOD don't use natural alignment) and is explained in §17 <sil=0.965> .PERIOD The "f" routines you can look up yourself in a book <sil=0.970> .PERIOD Several DEC system and library routines are used <sil=0.520> ,COMMA so the VMS headers <ssdef <sil=0.997> .PERIOD h> <sil=0.954> ,COMMA <starlet <sil=0.932> .PERIOD h> and <lib$routines <sil=0.924> .PERIOD h> are included <sil=0.977> .PERIOD Notice that the function calls are lowercase <sil=0.428> ,COMMA and there are no prototypes defined yet <sil=0.617> ,COMMA so you are on your own there if you get an argument wrong <sil=0.856> !EXCLAMATIONMARK This should change with future releases of DEC C <sil=0.932> .PERIOD The strerror routine is useful for getting a text error message <sil=0.924> .PERIOD After many library calls <sil=0.513> ,COMMA not just stdio calls <sil=0.436> ,COMMA an integer expression <sil=0.319> ,COMMA errno <sil=0.603> ,COMMA defined in <errno <sil=0.985> .PERIOD h> <sil=0.917> ,COMMA yields a non-zero value if an error occurs <sil=0.938> .PERIOD Be very careful making assumptions about errno <sil=0.645> ,COMMA because in many cases it isn't actually a variable but a macro <sil=0.451> ,COMMA which allows it <sil=0.557> ,COMMA for example <sil=0.339> ,COMMA to behave in a thread-safe manner <sil=0.968> .PERIOD This means <sil=0.328> ,COMMA however <sil=0.971> ,COMMA that it isn't safe to treat it as a global integer variable and take it's address and so forth <sil=0.966> .PERIOD The strerror function from <string <sil=0.940> .PERIOD h> converts the error number into a text string <sil=0.598> ,COMMA and the function value is a pointer to this string <sil=0.957> .PERIOD You must not modify this string <sil=0.467> ,COMMA and it will be overwritten by later calls to strerror <sil=0.923> .PERIOD This program reads in many bytes at a time with each read <sil=0.325> ,COMMA but there is a function <sil=0.569> ,COMMA fgetc <sil=0.475> ,COMMA to read a single character <sil=0.308> ,COMMA and a matching function <sil=0.321> ,COMMA ungetc which returns the last read character to the input stream to be read by the next fgetc <sil=0.903> .PERIOD This provides a kind of look-ahead function which is exploited by the next example program <sil=0.519> ,COMMA "calc <sil=0.960> .PERIOD c" <sil=0.398> ,COMMA provided by Neill Clift <sil=0.923> .PERIOD In this program <sil=0.308> ,COMMA getchar is used instead of fgetc <sil=0.963> .PERIOD It is equivalent to fgetc except that it reads from stdin <sil=0.933> .PERIOD This sturdy example is adapted from the very expression parser used by LID (a Y <sil=0.903> .PERIOD R <sil=0.959> .PERIOD L <sil=0.931> .PERIOD replacement for DEC's CDD <sil=0.522> ;SEMICOLON contact sales@yrl <sil=0.969> .PERIOD co <sil=0.947> .PERIOD uk if you are interested) <sil=0.913> .PERIOD /*---- Calculator expression evaluator example ("calc <sil=0.908> .PERIOD c") --------------------*/
/*
        History:
        Version         Name                    Date
        V01-001         Neill Clift             16-Mar-1995
                        Initial version
*/

/* ANSI Headers */
#include <ctype <sil=0.950> .PERIOD h>
#include <stdio <sil=0.951> .PERIOD h>
#include <stdlib <sil=0.991> .PERIOD h>

/* Function prototypes */
int parse_expression(void) <sil=0.382> ;SEMICOLON int parse_expression_factor(void) <sil=0.562> ;SEMICOLON int parse_expression_term(void) <sil=0.310> ;SEMICOLON int parse_literal(void) <sil=0.372> ;SEMICOLON int getnonwhite(void) <sil=0.539> ;SEMICOLON int match_token(int tomatch) <sil=0.638> ;SEMICOLON /* Start of main program */
int main( int argc <sil=0.511> ,COMMA char *argv[])
{
  int val <sil=0.470> ;SEMICOLON /*  End of declarations <sil=0.922> .PERIOD  <sil=0.593> .PERIOD  <sil=0.622> .PERIOD */

  printf("Enter expression terminated by <sil=0.366> ;SEMICOLON \n") <sil=0.627> ;SEMICOLON printf("Calc> ") <sil=0.564> ;SEMICOLON val = parse_expression() <sil=0.440> ;SEMICOLON if (match_token(' <sil=0.410> ;SEMICOLON ')) {
    printf("Result is %d\n" <sil=0.405> ,COMMA val) <sil=0.648> ;SEMICOLON } else {
    printf("Expression seems bust\n") <sil=0.344> ;SEMICOLON }
  exit(EXIT_SUCCESS) <sil=0.465> ;SEMICOLON }

/*---- Get the next character skipping white space ---------------------------*/
int getnonwhite(void)
{
    int c <sil=0.385> ;SEMICOLON /*  End of declarations <sil=0.922> .PERIOD  <sil=0.489> .PERIOD  <sil=0.309> .PERIOD */

    while (1) {
      c = getchar() <sil=0.576> ;SEMICOLON if (c == EOF) {
        break <sil=0.632> ;SEMICOLON } else if ( <sil=0.924> !EXCLAMATIONMARK isspace(c)) {
        break <sil=0.638> ;SEMICOLON }
    }
    return( c ) <sil=0.325> ;SEMICOLON }

/*--- Match single character against next input char <sil=0.998> .PERIOD If match then gobble ---*/
/*--- it up <sil=0.912> .PERIOD If we don't match it then push it back for future matches -------*/
int match_token(int tomatch)
{
    int c <sil=0.322> ;SEMICOLON /*  End of declarations <sil=0.997> .PERIOD  <sil=0.382> .PERIOD  <sil=0.579> .PERIOD */

    c = getnonwhite() <sil=0.429> ;SEMICOLON if (c == tomatch) {
      return( 1 ) <sil=0.601> ;SEMICOLON } else {
      ungetc(c <sil=0.455> ,COMMA stdin) <sil=0.650> ;SEMICOLON /* Put character back on input stream to be read again */
      return( 0 ) <sil=0.515> ;SEMICOLON }
}

/*---- Parse a single number from input +/- nnnnn  ---------------------------*/
int parse_literal(void)
{
    int retval <sil=0.606> ,COMMA st <sil=0.628> ;SEMICOLON /*  End of declarations <sil=0.974> .PERIOD  <sil=0.433> .PERIOD  <sil=0.642> .PERIOD */

    retval = 0 <sil=0.389> ;SEMICOLON st = scanf("%d" <sil=0.380> ,COMMA &retval) <sil=0.331> ;SEMICOLON if (st == EOF) {
      printf("Hit EOF looking for literal\n") <sil=0.526> ;SEMICOLON } else if (st == 0) {
      printf("Missing literal\n") <sil=0.628> ;SEMICOLON }

    return( retval ) <sil=0.449> ;SEMICOLON }

/*---- Syntax is:   Literal    or:   (expression)  ---------------------------*/
int parse_expression_factor(void)
{
  int retval <sil=0.599> ;SEMICOLON /*  End of declarations <sil=0.931> .PERIOD  <sil=0.648> .PERIOD  <sil=0.309> .PERIOD */

  if (match_token('(')) {
    retval = parse_expression() <sil=0.459> ;SEMICOLON if ( <sil=0.877> !EXCLAMATIONMARK match_token(')'))
      printf("Missing close bracket\n") <sil=0.539> ;SEMICOLON } else {
    retval = parse_literal() <sil=0.471> ;SEMICOLON }

  return( retval ) <sil=0.464> ;SEMICOLON }

/*---- Parse an expression term <sil=0.577> ,COMMA Syntax: <factor>{<multiplying_op><factor>} -*/
int parse_expression_term(void)
{
  int tmp <sil=0.539> ,COMMA mul <sil=0.386> ,COMMA opr <sil=0.497> ;SEMICOLON /*  End of declarations <sil=0.995> .PERIOD  <sil=0.461> .PERIOD  <sil=0.330> .PERIOD */

  tmp = parse_expression_factor() <sil=0.342> ;SEMICOLON while (1) {
    if (match_token('*')) {
      opr = 1 <sil=0.431> ;SEMICOLON } else if (match_token('/')) {
      opr = -1 <sil=0.332> ;SEMICOLON } else {
      break <sil=0.551> ;SEMICOLON }

    mul = parse_expression_factor() <sil=0.579> ;SEMICOLON if (opr == 1) {
      tmp = tmp * mul <sil=0.546> ;SEMICOLON } else if (mul == 0) {
      printf("Division by zero <sil=0.890> !EXCLAMATIONMARK \n") <sil=0.390> ;SEMICOLON } else {
      tmp = tmp / mul <sil=0.379> ;SEMICOLON }
  }
  return( tmp ) <sil=0.599> ;SEMICOLON }

/*---- Parse an expression <sil=0.471> ,COMMA Syntax: [+/-]<term>{<adding_op><term>} -----------*/
int parse_expression(void)
{
  int tmp <sil=0.549> ,COMMA mul <sil=0.390> ,COMMA add <sil=0.525> ;SEMICOLON /*  End of declarations <sil=0.983> .PERIOD  <sil=0.583> .PERIOD  <sil=0.647> .PERIOD */

  /* Check for leading + or - <sil=0.973> .PERIOD None means plus */

  if (match_token('+')) {
    mul = 1 <sil=0.624> ;SEMICOLON } else if (match_token('-')) {
    mul = -1 <sil=0.610> ;SEMICOLON } else {
    mul = 1 <sil=0.365> ;SEMICOLON }

  tmp = parse_expression_term() <sil=0.326> ;SEMICOLON tmp = tmp * mul <sil=0.411> ;SEMICOLON while (1) {
    if (match_token('+')) {
      mul = 1 <sil=0.382> ;SEMICOLON } else if (match_token('-')) {
      mul = -1 <sil=0.485> ;SEMICOLON } else {
      break <sil=0.539> ;SEMICOLON }
    add = parse_expression_term() <sil=0.601> ;SEMICOLON tmp = tmp + mul * add <sil=0.423> ;SEMICOLON } <sil=0.428> ;SEMICOLON return( tmp ) <sil=0.625> ;SEMICOLON }

A few other file routines are worth mentioning <sil=0.969> .PERIOD These are fgetpos <sil=0.365> ,COMMA fsetpos and fseek <sil=0.441> ,COMMA which generally apply to files open in binary mode <sil=0.968> .PERIOD They allow you to position to a particular byte within a file <sil=0.434> ,COMMA specified from the current position <sil=0.307> ,COMMA or the beginning or end of the file <sil=0.918> .PERIOD The fgetpos function returns the position in an object of type fpos_t <sil=0.425> ,COMMA which is only meaningful when used with fsetpos <sil=0.938> .PERIOD See K&R II page 248 for more details <sil=0.933> .PERIOD The fflush function allows you to flush cached data on an output stream if you want to do this before fclose <sil=0.458> ,COMMA which flushes anyway <sil=0.427> ,COMMA as does exit() <sil=0.919> .PERIOD To make sure that data is actually written to disk you must call a non-standard function like fsync after fflush - fflush on it's own doesn't guarantee that the data has actually been written to permanent storage <sil=0.915> .PERIOD Streams can be redirected using freopen <sil=0.475> ,COMMA and this is a commonly used method for making stdout get written to a file without having to change printf calls <sil=0.910> .PERIOD Testing for end of file is achieved by using the feof function <sil=0.958> .PERIOD A standard method for getting command line arguments is provided in C <sil=0.971> .PERIOD These are the arguments to the main program <sil=0.345> ,COMMA argc and argv <sil=0.973> .PERIOD The integer argc is the number of command line arguments <sil=0.441> ,COMMA and must be greater than or equal to zero <sil=0.981> .PERIOD The second argument <sil=0.539> ,COMMA argv <sil=0.586> ,COMMA is an array of pointers to characters <sil=0.915> .PERIOD If argc is zero <sil=0.442> ,COMMA then argv[0] must be the NULL pointer <sil=0.976> .PERIOD On most implementations <sil=0.539> ,COMMA it will be greater than zero <sil=0.384> ,COMMA and argv[0] points to the program name <sil=0.923> .PERIOD On some machines this will be a string like "myprog" <sil=0.955> .PERIOD On VMS or Windows NT systems it is the full file specification <sil=0.916> .PERIOD If the program name is not available <sil=0.323> ,COMMA argv[0] must point to the null character <sil=0.588> ,COMMA '\0' <sil=0.600> .PERIOD The elements argv[1] to argv[argc-1] <sil=0.354> ,COMMA if they exist <sil=0.324> ,COMMA point to strings which are implementation defined <sil=0.917> .PERIOD In practise <sil=0.526> ,COMMA these are usually the whitespace separated (unless "quoted") arguments supplied on the command line <sil=0.938> .PERIOD Under VMS <sil=0.474> ,COMMA command line arguments are converted to lowercase <sil=0.624> ,COMMA unless quoted <sil=0.976> .PERIOD The following example <sil=0.321> ,COMMA "args <sil=0.912> .PERIOD c" <sil=0.408> ,COMMA shows how to get the command line arguments <sil=0.933> .PERIOD /*---- Getting Command Line Arguments C Example ("args <sil=0.957> .PERIOD c") -------------------*/

/* ANSI C Headers */
#include <stdio <sil=0.985> .PERIOD h>
#include <stdlib <sil=0.951> .PERIOD h>

/* Main Program starts here */
int main( int argc <sil=0.587> ,COMMA char *argv[] )
{
    int i <sil=0.635> ;SEMICOLON /*  End of declarations <sil=0.961> .PERIOD  <sil=0.301> .PERIOD  <sil=0.370> .PERIOD */

    for ( i = 0 <sil=0.609> ;SEMICOLON i < argc <sil=0.453> ;SEMICOLON i++ ) {
      printf("Argument %d = \"%s\"\n" <sil=0.433> ,COMMA i <sil=0.508> ,COMMA argv[i] ) <sil=0.551> ;SEMICOLON }

    exit(EXIT_SUCCESS) <sil=0.459> ;SEMICOLON }

In order to make it work <sil=0.606> ,COMMA you must either run it like this (assuming you are in the directory containing the image)

$ MC SYS$DISK:[]ARGS HELLO WORLD
or define a symbol <sil=0.522> ,COMMA and invoke it as a "foreign command"

$ args:==$SYS$DISK:[]ARGS
$ args hello world again
      Programming Challenge 10
      ________________________
      
        Try the args  program <sil=0.930> .PERIOD With your  new-found skills <sil=0.488> ,COMMA modify Neill's
      calc program to take a command line argument expression <sil=0.493> ,COMMA or to behave
      in the existing manner if one is not supplied <sil=0.950> .PERIOD On VMS systems <sil=0.614> ,COMMA we often want to access keyed indexed files <sil=0.963> .PERIOD This is slightly more difficult than using the standard file functions <sil=0.621> ,COMMA because you have to set up the RMS (Record Management Structures) yourself <sil=0.976> .PERIOD If you want to do this <sil=0.306> ,COMMA you should really read the DEC C documentation about using RMS from C <sil=0.902> .PERIOD Alternatively you can ask your friendly local Clift for an example <sil=0.983> .PERIOD Here's one we prepared before the course <sil=0.301> ,COMMA "key <sil=0.968> .PERIOD c"


/*---- Keyed Index File C Demonstration Program ("key <sil=0.993> .PERIOD c") --------------------*/
/*
        History:
        Version         Name                    Date
        V01-001         Neill Clift             09-Mar-1995
                        Initial version
*/

/* ANSI Headers */
#include <stddef <sil=0.933> .PERIOD h>
#include <stdio <sil=0.914> .PERIOD h>
#include <stdlib <sil=0.958> .PERIOD h>
#include <string <sil=0.964> .PERIOD h>
#include <ctype <sil=0.979> .PERIOD h>

/* VMS Headers */
#include <rab <sil=0.930> .PERIOD h>                /* RMS RAB */
#include <rms <sil=0.918> .PERIOD h>                /* RMS access blocks etc */
#include <ssdef <sil=0.985> .PERIOD h>              /* System service completion codes */
#include <starlet <sil=0.987> .PERIOD h>
#include <lib$routines>

/* Defines and Macros */
#define NAME_SIZE  32        /* Size of person field */
#define PHONE_SIZE 20        /* Size of the phone number field */

/* Structure declarations */

struct phone_r {
/* Define the structure that will be the record of the keyed file <sil=0.971> .PERIOD */
/* It is indexed  with two keys for each of the structures fields <sil=0.923> .PERIOD */
   char name[NAME_SIZE] <sil=0.329> ;SEMICOLON char phone[PHONE_SIZE] <sil=0.557> ;SEMICOLON } <sil=0.465> ;SEMICOLON /* Global Variables - not externally visible */
static struct FAB    fab <sil=0.512> ;SEMICOLON /* FAB for file  */
static struct RAB    rab <sil=0.559> ;SEMICOLON /* RAB for file */
static struct NAM    nam <sil=0.614> ;SEMICOLON /* NAM block to report I/O errors nicely */
static struct XABKEY xabkey1 <sil=0.335> ,COMMA xabkey2 <sil=0.550> ;SEMICOLON /* XAB to define keys structure */

static char essbuf[NAM$C_MAXRSS] <sil=0.443> ;SEMICOLON /* Expanded file name */
static char rssbuf[NAM$C_MAXRSS] <sil=0.580> ;SEMICOLON /* Resultant file name */

static char keyname1[32] = "Person" <sil=0.585> ;SEMICOLON /* Name of first key */
static char keyname2[32] = "Phone" <sil=0.366> ;SEMICOLON /* Name of second key */

/*---- Routine to close the RMS file -----------------------------------------*/
int close_file( void )
{
   long int status <sil=0.324> ;SEMICOLON /* End of declarations <sil=0.998> .PERIOD  <sil=0.398> .PERIOD  <sil=0.495> .PERIOD */

   status = sys$close( &fab ) <sil=0.420> ;SEMICOLON return( status ) <sil=0.474> ;SEMICOLON }

/*---- Open/Create the keyed index file --------------------------------------*/
int create_file( char *filename )
{
   long int status <sil=0.393> ,COMMA status1 <sil=0.618> ;SEMICOLON /* End of declarations <sil=0.980> .PERIOD  <sil=0.515> .PERIOD  <sil=0.596> .PERIOD */

   fab = cc$rms_fab <sil=0.579> ;SEMICOLON /* initialise the FAB */
   fab <sil=0.918> .PERIOD fab$l_alq = 100 <sil=0.328> ;SEMICOLON /* Preallocate space */
   fab <sil=0.960> .PERIOD fab$w_deq = 100 <sil=0.534> ;SEMICOLON fab <sil=0.984> .PERIOD fab$b_fac = FAB$M_PUT|FAB$M_DEL|FAB$M_UPD <sil=0.420> ;SEMICOLON fab <sil=0.998> .PERIOD fab$l_fop = FAB$M_DFW|FAB$M_CIF <sil=0.639> ;SEMICOLON fab <sil=0.900> .PERIOD fab$b_org = FAB$C_IDX <sil=0.507> ;SEMICOLON fab <sil=0.921> .PERIOD fab$b_rfm = FAB$C_VAR <sil=0.531> ;SEMICOLON fab <sil=0.960> .PERIOD fab$l_fna = filename <sil=0.559> ;SEMICOLON fab <sil=0.977> .PERIOD fab$b_fns = strlen(filename) <sil=0.604> ;SEMICOLON fab <sil=0.944> .PERIOD fab$b_rat = FAB$M_CR <sil=0.412> ;SEMICOLON fab <sil=0.943> .PERIOD fab$l_xab = (char *) &xabkey1 <sil=0.348> ;SEMICOLON /* Init XABKEY to define key for name key */
   xabkey1 = cc$rms_xabkey <sil=0.504> ;SEMICOLON /* Initialise XABKEY structure */
   xabkey1 <sil=0.995> .PERIOD xab$b_bln  = XAB$C_KEYLEN <sil=0.635> ;SEMICOLON xabkey1 <sil=0.963> .PERIOD xab$b_cod  = XAB$C_KEY <sil=0.650> ;SEMICOLON xabkey1 <sil=0.960> .PERIOD xab$b_dtp  = XAB$C_STG <sil=0.390> ;SEMICOLON xabkey1 <sil=0.913> .PERIOD xab$b_ref  = 0 <sil=0.518> ;SEMICOLON /* Key zero */
   xabkey1 <sil=0.916> .PERIOD xab$l_knm  = (char *) &keyname1 <sil=0.320> ;SEMICOLON /* Key name */
   xabkey1 <sil=0.915> .PERIOD xab$l_nxt  = (char *) &xabkey2 <sil=0.502> ;SEMICOLON /* Next XAB in chain */
   /*
      The next two fields describe the section of the record that contain the
      key <sil=0.913> .PERIOD */
   xabkey1 <sil=0.996> .PERIOD xab$w_pos0 = offsetof(struct phone_r <sil=0.490> ,COMMA name) <sil=0.357> ;SEMICOLON xabkey1 <sil=0.928> .PERIOD xab$b_siz0 = NAME_SIZE <sil=0.530> ;SEMICOLON /* Init XABKEY to define key for phone kek */
   xabkey2 = cc$rms_xabkey <sil=0.446> ;SEMICOLON /* Initialise XABKEY structure */
   xabkey2 <sil=0.955> .PERIOD xab$b_bln  = XAB$C_KEYLEN <sil=0.587> ;SEMICOLON xabkey2 <sil=0.960> .PERIOD xab$b_cod  = XAB$C_KEY <sil=0.348> ;SEMICOLON xabkey2 <sil=0.962> .PERIOD xab$b_dtp  = XAB$C_STG <sil=0.434> ;SEMICOLON xabkey2 <sil=0.940> .PERIOD xab$b_ref  = 1 <sil=0.519> ;SEMICOLON /* Key one */
   xabkey2 <sil=0.989> .PERIOD xab$l_knm  = (char *) &keyname2 <sil=0.515> ;SEMICOLON xabkey2 <sil=0.975> .PERIOD xab$l_nxt  = 0 <sil=0.504> ;SEMICOLON xabkey2 <sil=0.917> .PERIOD xab$w_pos0 = offsetof(struct phone_r <sil=0.478> ,COMMA phone) <sil=0.416> ;SEMICOLON xabkey2 <sil=0.949> .PERIOD xab$b_siz0 = PHONE_SIZE <sil=0.327> ;SEMICOLON /*
      Init NAM block just for good file I/O error reporting <sil=0.942> .PERIOD We won't use it
      thought <sil=0.888> !EXCLAMATIONMARK */

   nam = cc$rms_nam <sil=0.311> ;SEMICOLON fab <sil=0.969> .PERIOD fab$l_nam = &nam <sil=0.567> ;SEMICOLON nam <sil=0.990> .PERIOD nam$b_rss = sizeof( rssbuf ) <sil=0.560> ;SEMICOLON nam <sil=0.966> .PERIOD nam$l_rsa = (char *) &rssbuf <sil=0.379> ;SEMICOLON nam <sil=0.950> .PERIOD nam$b_ess = sizeof( essbuf ) <sil=0.473> ;SEMICOLON nam <sil=0.980> .PERIOD nam$l_esa = (char *) &essbuf <sil=0.619> ;SEMICOLON status = sys$create( &fab ) <sil=0.379> ;SEMICOLON if ( <sil=0.866> !EXCLAMATIONMARK (status&SS$_NORMAL))
      return( status ) <sil=0.418> ;SEMICOLON rab = cc$rms_rab <sil=0.458> ;SEMICOLON /* initialise the RAB */
   rab <sil=0.962> .PERIOD rab$b_mbf = 127 <sil=0.552> ;SEMICOLON rab <sil=0.928> .PERIOD rab$b_mbc = 127 <sil=0.632> ;SEMICOLON rab <sil=0.967> .PERIOD rab$l_rop = RAB$M_WBH|RAB$M_RAH <sil=0.627> ;SEMICOLON  <sil=0.442> ;SEMICOLON rab <sil=0.965> .PERIOD rab$l_fab = &fab <sil=0.329> ;SEMICOLON status1 = sys$connect( &rab ) <sil=0.343> ;SEMICOLON if ( <sil=0.990> !EXCLAMATIONMARK (status1&SS$_NORMAL)) {
      status = status1 <sil=0.331> ;SEMICOLON sys$close( &fab ) <sil=0.599> ;SEMICOLON } <sil=0.492> ;SEMICOLON return( status ) <sil=0.621> ;SEMICOLON }

/*---- Write a record to the file --------------------------------------------*/
int put_record( char *name <sil=0.309> ,COMMA char *phone )
{
   long int status <sil=0.516> ;SEMICOLON struct phone_r phonerec <sil=0.609> ;SEMICOLON /* End of declarations <sil=0.968> .PERIOD  <sil=0.494> .PERIOD  <sil=0.496> .PERIOD */

   strncpy( phonerec <sil=0.919> .PERIOD name <sil=0.534> ,COMMA name <sil=0.531> ,COMMA sizeof(phonerec <sil=0.993> .PERIOD name) ) <sil=0.582> ;SEMICOLON strncpy( phonerec <sil=0.918> .PERIOD phone <sil=0.363> ,COMMA phone <sil=0.630> ,COMMA sizeof(phonerec <sil=0.904> .PERIOD phone) ) <sil=0.411> ;SEMICOLON rab <sil=0.903> .PERIOD rab$w_rsz = sizeof( phonerec ) <sil=0.554> ;SEMICOLON rab <sil=0.908> .PERIOD rab$l_rbf = (char *) &phonerec <sil=0.453> ;SEMICOLON rab <sil=0.992> .PERIOD rab$b_rac = RAB$C_KEY <sil=0.427> ;SEMICOLON rab <sil=0.976> .PERIOD rab$l_rop |= RAB$M_UIF <sil=0.472> ;SEMICOLON status = sys$put( &rab ) <sil=0.464> ;SEMICOLON return( status ) <sil=0.333> ;SEMICOLON }

/*---- Look a record up by name ----------------------------------------------*/
int get_record( char *name <sil=0.610> ,COMMA struct phone_r *phonerec )
{
   long int status <sil=0.532> ;SEMICOLON /* End of declarations <sil=0.986> .PERIOD  <sil=0.518> .PERIOD  <sil=0.531> .PERIOD */

   rab <sil=0.908> .PERIOD rab$w_usz = sizeof( *phonerec ) <sil=0.601> ;SEMICOLON rab <sil=0.998> .PERIOD rab$l_ubf = (char *) phonerec <sil=0.448> ;SEMICOLON rab <sil=0.967> .PERIOD rab$b_ksz = strlen( name ) <sil=0.421> ;SEMICOLON rab <sil=0.920> .PERIOD rab$l_kbf = (char *) name <sil=0.577> ;SEMICOLON rab <sil=0.904> .PERIOD rab$b_krf = 0 <sil=0.627> ;SEMICOLON rab <sil=0.964> .PERIOD rab$b_rac = RAB$C_KEY <sil=0.583> ;SEMICOLON rab <sil=0.951> .PERIOD rab$l_rop |= RAB$M_UIF <sil=0.516> ;SEMICOLON status = sys$get( &rab ) <sil=0.472> ;SEMICOLON return( status ) <sil=0.606> ;SEMICOLON }

/*---- Main Program starts here ----------------------------------------------*/
int main( int argc <sil=0.630> ,COMMA char *argv[] )
{
   long int status <sil=0.618> ;SEMICOLON struct phone_r phn <sil=0.565> ;SEMICOLON /* End of declarations <sil=0.996> .PERIOD  <sil=0.470> .PERIOD  <sil=0.325> .PERIOD */
   
   printf("Creating phone <sil=0.958> .PERIOD dat <sil=0.908> .PERIOD  <sil=0.362> .PERIOD  <sil=0.461> .PERIOD \n") <sil=0.356> ;SEMICOLON status = create_file("phone <sil=0.982> .PERIOD dat") <sil=0.338> ;SEMICOLON if ( <sil=0.965> !EXCLAMATIONMARK (status&SS$_NORMAL)) lib$signal( status ) <sil=0.532> ;SEMICOLON printf("Add record NEILL - 555 555 1417\n") <sil=0.510> ;SEMICOLON status = put_record ("NEILL" <sil=0.550> ,COMMA "555 555 1417") <sil=0.396> ;SEMICOLON if ( <sil=0.965> !EXCLAMATIONMARK (status&SS$_NORMAL)) lib$signal( status ) <sil=0.530> ;SEMICOLON printf("Add record PHIL - 555 555 6506\n") <sil=0.412> ;SEMICOLON status = put_record ("PHIL" <sil=0.374> ,COMMA "555 555 6506") <sil=0.425> ;SEMICOLON if ( <sil=0.931> !EXCLAMATIONMARK (status&SS$_NORMAL)) lib$signal( status ) <sil=0.408> ;SEMICOLON printf("Look record for PHIL\n") <sil=0.609> ;SEMICOLON status = get_record ("PHIL" <sil=0.301> ,COMMA &phn) <sil=0.316> ;SEMICOLON if ( <sil=0.950> !EXCLAMATIONMARK (status&SS$_NORMAL)) {
      lib$signal( status ) <sil=0.491> ;SEMICOLON } else {
      printf("Found %s - %s\n" <sil=0.558> ,COMMA phn <sil=0.987> .PERIOD name <sil=0.383> ,COMMA phn <sil=0.926> .PERIOD phone ) <sil=0.550> ;SEMICOLON }

   status = close_file() <sil=0.485> ;SEMICOLON if ( <sil=0.888> !EXCLAMATIONMARK (status&SS$_NORMAL)) lib$signal (status) <sil=0.357> ;SEMICOLON exit(EXIT_SUCCESS) <sil=0.631> ;SEMICOLON }

This will write out a data file <sil=0.528> ,COMMA PHONE <sil=0.939> .PERIOD DAT <sil=0.492> ,COMMA then do a lookup and find a record keyed on the name <sil=0.999> .PERIOD Try expanding the file with a few more records <sil=0.379> ,COMMA and experiment with the lookup <sil=0.966> .PERIOD Use this file to create your own database <sil=0.434> ,COMMA with different types of keys <sil=0.943> .PERIOD Miscellaneous Library Routines
The C standard specifies that the following headers and their related library routines must be available:

       <assert <sil=0.904> .PERIOD h>        <locale <sil=0.937> .PERIOD h>        <stddef <sil=0.975> .PERIOD h>
       <ctype <sil=0.949> .PERIOD h>         <math <sil=0.915> .PERIOD h>          <stdio <sil=0.934> .PERIOD h>
       <errno <sil=0.944> .PERIOD h>         <setjmp <sil=0.977> .PERIOD h>        <stdlib <sil=0.939> .PERIOD h>
       <float <sil=0.989> .PERIOD h>         <signal <sil=0.971> .PERIOD h>        <string <sil=0.968> .PERIOD h>
       <limits <sil=0.995> .PERIOD h>        <stdarg <sil=0.933> .PERIOD h>        <time <sil=0.941> .PERIOD h>

Obviously you should avoid using these names for your own header files <sil=0.971> .PERIOD In addition <sil=0.480> ,COMMA C++ also has <new <sil=0.909> .PERIOD h> and <iostream <sil=0.900> .PERIOD h> <sil=0.938> ,COMMA so don't use these either <sil=0.936> .PERIOD There are far too many routines in the standard libraries for me to describe them all <sil=0.556> ,COMMA which is as good an excuse as any not to bother <sil=0.993> .PERIOD I will <sil=0.614> ,COMMA however <sil=0.975> ,COMMA present a few program examples or program fragments for the more commonly used routines <sil=0.992> .PERIOD You should refer to the DEC C Run Time Library Manual <sil=0.546> ,COMMA using BookReader or MGBOOK to get the latest version <sil=0.466> ,COMMA and familiarize yourself with what is available <sil=0.947> .PERIOD VMS provides several Unix style functions in <unixlib <sil=0.905> .PERIOD h> and <unixio <sil=0.948> .PERIOD h> <sil=0.991> .PERIOD To be strictly accurate <sil=0.328> ,COMMA these are nonportable <sil=0.319> ,COMMA but they are available on many Unix systems <sil=0.967> .PERIOD One such function is getenv <sil=0.335> ,COMMA which <sil=0.562> ,COMMA in Unix land <sil=0.611> ,COMMA gets the string value of "environment variables" <sil=0.554> ,COMMA which roughly correspond to DCL symbols <sil=0.639> ,COMMA or logicals names <sil=0.977> .PERIOD On the VAX or Alpha <sil=0.456> ,COMMA the getenv function first looks for a logical name match <sil=0.435> ,COMMA and returns the translation if it finds one <sil=0.420> ,COMMA else it looks for a local symbol with the same name and returns the definition <sil=0.523> ,COMMA or <sil=0.596> ,COMMA if that wasn't found it looks for a global symbol <sil=0.962> .PERIOD Compile and run "symbols <sil=0.978> .PERIOD c" and try defining MYSYM as a symbol <sil=0.593> ,COMMA and as a logical name <sil=0.318> ,COMMA and see what output you get <sil=0.936> .PERIOD /*---- Getting Symbols or Logical Names C Example ("symbols <sil=0.931> .PERIOD c") --------------*/

/* ANSI C Headers */
#include <stdio <sil=0.919> .PERIOD h>
#include <stdlib <sil=0.972> .PERIOD h>

/* Main Program starts here */
int main( int argc <sil=0.526> ,COMMA char *argv[] )
{
    char *s_ptr <sil=0.446> ;SEMICOLON /*  End of declarations <sil=0.988> .PERIOD  <sil=0.538> .PERIOD  <sil=0.434> .PERIOD */

    printf("MYSYM = \"%s\"\n" <sil=0.467> ,COMMA ( s_ptr = getenv("MYSYM")) <sil=0.860> ?QUESTIONMARK s_ptr : "" ) <sil=0.510> ;SEMICOLON exit(EXIT_SUCCESS) <sil=0.570> ;SEMICOLON }

Getting the time is another commonly required function <sil=0.347> ,COMMA and C provides a number of standard routines for this purpose <sil=0.964> .PERIOD An example program demonstrates the use of various time routines <sil=0.415> ,COMMA including strftime <sil=0.457> ,COMMA which is very flexible in letting you form a formatted time string <sil=0.937> .PERIOD /*---- Getting the time ("time <sil=0.971> .PERIOD c") -------------------------------------------*/

/* ANSI C Headers */
#include <stdio <sil=0.996> .PERIOD h>
#include <stdlib <sil=0.966> .PERIOD h>
#include <time <sil=0.972> .PERIOD h>

/* Main Program starts here */
int main( int argc <sil=0.587> ,COMMA char *argv[] )
{
    time_t c_time <sil=0.591> ;SEMICOLON struct tm *c_time_rec <sil=0.499> ;SEMICOLON char string[80] <sil=0.648> ;SEMICOLON /*  End of declarations <sil=0.949> .PERIOD  <sil=0.406> .PERIOD  <sil=0.530> .PERIOD */

/*  Get the current time */
    time(&c_time) <sil=0.435> ;SEMICOLON /* c_time now contains seconds since January 1 <sil=0.407> ,COMMA 1970 */

/*  Convert this to a string using the ctime() function */
    printf("%s\n" <sil=0.499> ,COMMA ctime( &c_time ) ) <sil=0.535> ;SEMICOLON /*  Split the time into it's components - hours <sil=0.609> ,COMMA minutes <sil=0.638> ,COMMA seconds etc <sil=0.920> .PERIOD */
    c_time_rec = localtime( &c_time ) <sil=0.418> ;SEMICOLON /*  Selectively copy day of week into string */
    strftime( string <sil=0.338> ,COMMA sizeof(string)-1 <sil=0.341> ,COMMA "Today is %A" <sil=0.468> ,COMMA c_time_rec ) <sil=0.476> ;SEMICOLON /*  Print out the day of the week */
    printf("%s\n" <sil=0.601> ,COMMA string ) <sil=0.497> ;SEMICOLON exit(EXIT_SUCCESS) <sil=0.516> ;SEMICOLON }

It is important to use the standard defined types for time variables <sil=0.481> ,COMMA like time_t <sil=0.613> ,COMMA and not use <sil=0.382> ,COMMA say <sil=0.565> ,COMMA unsigned int because "you know that's what it is" <sil=0.977> .PERIOD I say this because some systems are going to have a 2038 bug <sil=0.431> ,COMMA a bit like the millenium bug <sil=0.649> ,COMMA caused by the number of seconds since January 1 <sil=0.601> ,COMMA 1970 exceeding the storage capacity of the type currently used for time_t <sil=0.936> .PERIOD Compiler vendors might well change time_t to be something completely different in future <sil=0.516> ,COMMA like a 64 bit quantity or perhaps a structure <sil=0.941> .PERIOD If you have used time_t throughout your code <sil=0.608> ,COMMA a simple recompilation and relink will be all that you need to do <sil=0.604> ,COMMA and this will avoid your name being cursed by later generations of programmers <sil=0.306> ,COMMA or your being ejected into space by HAL <sil=0.562> ;SEMICOLON -)

String-to-number conversion is a topic that frequently crops up in the comp <sil=0.981> .PERIOD lang <sil=0.941> .PERIOD c Usenet news group <sil=0.909> .PERIOD You have already met sprintf <sil=0.561> ,COMMA which is the number-to-string converter <sil=0.962> .PERIOD Other functions <sil=0.357> ,COMMA like atoi and atof convert strings to ints and floats <sil=0.369> ,COMMA and strtod and strtol convert strings to double and long respectively <sil=0.955> .PERIOD Random integer numbers <sil=0.346> ,COMMA seeded using srand <sil=0.374> ,COMMA can be obtained using the rand function <sil=0.636> ,COMMA and if you want floating point numbers <sil=0.615> ,COMMA cast the result of rand to float and divide by the macro value RAND_MAX <sil=0.395> ,COMMA also cast to float <sil=0.999> .PERIOD Searching and sorting routines <sil=0.478> ,COMMA bsearch and qsort are also provided <sil=0.981> .PERIOD They expect you to pass a pointer to a function which is used to determine whether objects compare equal <sil=0.423> ,COMMA greater than or less than <sil=0.523> ,COMMA then they do the sorting or searching <sil=0.422> ,COMMA using your function for the comparison <sil=0.993> .PERIOD The equivalent of LIB$SPAWN is the system() function <sil=0.914> .PERIOD The argument is either a command shell command <sil=0.405> ,COMMA or NULL to test whether a command shell is available <sil=0.987> .PERIOD if ( system(NULL) ) {
/*     Do VMS command */
       system("DIRECTORY")
     } else {
       fprintf(stderr <sil=0.363> ,COMMA "Sorry - no command shell available <sil=0.986> !EXCLAMATIONMARK ") <sil=0.344> ;SEMICOLON }

The atexit function lets you register exit handlers in FILO order <sil=0.378> ,COMMA which are called when the program exits <sil=0.907> .PERIOD These are useful for tidying up resources <sil=0.567> ,COMMA even if some deeply nested subroutine calls exit() <sil=0.908> .PERIOD Handlers for other types of condition can be registered using the signal() function <sil=0.953> .PERIOD In Unix <sil=0.542> ,COMMA signals are a bit like AST notifications <sil=0.968> .PERIOD They range from SIGALRM <sil=0.393> ,COMMA which lets you know when an alarm set by the alarm function has gone off <sil=0.437> ,COMMA to SIGINT which can be used to trap Ctrl C <sil=0.965> .PERIOD A pair of functions <sil=0.396> ,COMMA setjmp and longjmp provide one of the nearest thing I have seen to the mythical "comefrom" statement <sil=0.972> !EXCLAMATIONMARK An example showing you how to trap Ctrl C will demonstrate <sil=0.994> .PERIOD This program includes <signal <sil=0.960> .PERIOD h> and <setjmp <sil=0.951> .PERIOD h> <sil=0.955> ,COMMA and stores the position to which we want to return in saved_position <sil=0.371> ,COMMA which is of type jmp_buf <sil=0.951> .PERIOD You should never actually "look" at this <sil=0.435> ,COMMA because it is only meaningful as an argument to longjmp <sil=0.944> .PERIOD The second parameter to longjmp is an non-zero integer <sil=0.634> ,COMMA which will be returned as the value of setjmp when we come back to it from the longjmp <sil=0.975> .PERIOD Called directly <sil=0.527> ,COMMA setjmp returns zero <sil=0.941> .PERIOD The example "signal <sil=0.948> .PERIOD c" should make signal handling and longjmping clearer <sil=0.944> .PERIOD /*---- Signal and longjmp Example ("signal <sil=0.978> .PERIOD c") -------------------------------*/

/* ANSI C Headers */
#include <setjmp <sil=0.925> .PERIOD h>
#include <signal <sil=0.984> .PERIOD h>
#include <stdio <sil=0.964> .PERIOD h>
#include <stdlib <sil=0.962> .PERIOD h>

#if defined( _WIN32 )
# include "windows <sil=0.951> .PERIOD h"
#endif

/* Defines and macros */
#define MAX_COUNT 5

/* Global variables */
jmp_buf saved_position <sil=0.606> ;SEMICOLON /* Function prototypes */
void ctrl_c_handler( int scode ) <sil=0.568> ;SEMICOLON /* Main Program starts here */
int main( int argc <sil=0.325> ,COMMA char *argv[] )
{
    int icount <sil=0.488> ;SEMICOLON /*  End of declarations <sil=0.940> .PERIOD  <sil=0.615> .PERIOD  <sil=0.498> .PERIOD */

    icount = 0 <sil=0.444> ;SEMICOLON signal( SIGINT <sil=0.303> ,COMMA ctrl_c_handler ) <sil=0.341> ;SEMICOLON if ( <sil=0.918> !EXCLAMATIONMARK setjmp(saved_position) ) {
      for ( <sil=0.584> ;SEMICOLON icount < MAX_COUNT <sil=0.406> ;SEMICOLON ++icount ) {
        printf("At main line - looping #%d - enter Ctrl/C\n" <sil=0.436> ,COMMA icount) <sil=0.485> ;SEMICOLON #if <sil=0.956> !EXCLAMATIONMARK defined( _WIN32 )
        sleep( 10 ) <sil=0.405> ;SEMICOLON #else
        Sleep( 10000 ) <sil=0.483> ;SEMICOLON #endif
      } <sil=0.582> ;SEMICOLON } else {
      printf("Returned from Ctrl C handler - exiting early\n") <sil=0.436> ;SEMICOLON }

    exit(EXIT_SUCCESS) <sil=0.624> ;SEMICOLON }

void ctrl_c_handler( int scode )
{
/*  End of declarations <sil=0.903> .PERIOD  <sil=0.472> .PERIOD  <sil=0.641> .PERIOD */

    if ( scode == SIGINT ) {
      printf("Handling Ctrl C - return to position saved by setjmp()\n") <sil=0.486> ;SEMICOLON longjmp( saved_position <sil=0.556> ,COMMA 1 ) <sil=0.527> ;SEMICOLON /* Use any non-zero number */
    } else {
      printf("Strange - Ctrl C handler called with wrong signal code <sil=0.903> !EXCLAMATIONMARK \n") <sil=0.523> ;SEMICOLON }
}

To get "signal <sil=0.942> .PERIOD c" to link properly <sil=0.622> ,COMMA you must compile it with /PREFIX=ALL to properly prefix the nonstandard function call to sleep <sil=0.626> ,COMMA a <unixlib <sil=0.937> .PERIOD h> function <sil=0.988> .PERIOD All the recognised RTL functions are actually prefixed with "DECC$" by the compiler <sil=0.443> ,COMMA and this allows the linker to find them automatically at link time <sil=0.972> .PERIOD It is a good idea to get into the habit of using /PREFIX=ALL because this will cause warnings to be issued at link time if you inadvertently name any of your own functions so as to clash with inbuilt ones <sil=0.960> .PERIOD This example works slightly differently under Windows <sil=0.419> ,COMMA because although the Ctrl C handler is called <sil=0.454> ,COMMA the program then exits (this is the documented behaviour) <sil=0.965> .PERIOD Finally <sil=0.549> ,COMMA I will present an example of a function that can be called with variable arguments <sil=0.933> .PERIOD The C syntax for variable arguments is to use three dots <sil=0.353> ,COMMA  <sil=0.907> .PERIOD  <sil=0.446> .PERIOD  <sil=0.646> .PERIOD  <sil=0.428> ,COMMA to represent the variable arguments <sil=0.907> .PERIOD You must however <sil=0.490> ,COMMA specify at least one argument at the start of the parameter list <sil=0.905> .PERIOD In one way <sil=0.644> ,COMMA <stdarg <sil=0.924> .PERIOD h> routines are rather inferior to the nonstandard <varargs <sil=0.924> .PERIOD h> routines <sil=0.593> ,COMMA available on Unix and VMS <sil=0.302> ,COMMA because the latter can tell you how many arguments were passed <sil=0.369> ,COMMA whereas the former makes you tell the function in some way <sil=0.622> ,COMMA like the "%" conversion characters in a printf format string does <sil=0.952> .PERIOD Y <sil=0.978> .PERIOD R <sil=0.923> .PERIOD L <sil=0.978> .PERIOD programmers - for some examples of the nonstandard varargs mechanism (which you should avoid using if at all possible) see SRC$OLB:PRINTFILE <sil=0.934> .PERIOD C and FIFO <sil=0.927> .PERIOD C in GNRC <sil=0.947> .PERIOD Here is an example program using the standard stdargs mechanism <sil=0.477> ,COMMA called "vargs <sil=0.943> .PERIOD c" <sil=0.637> .PERIOD /*---- Variable Arguments C Example ("vargs <sil=0.952> .PERIOD c") ------------------------------*/

/* ANSI C Headers */
#include <stdarg <sil=0.966> .PERIOD h>
#include <stdio <sil=0.975> .PERIOD h>
#include <stdlib <sil=1.000> .PERIOD h>

/* Defines and macros */
#define END 0

/* Function prototypes */
int add_some_ints( int first <sil=0.363> ,COMMA  <sil=0.983> .PERIOD  <sil=0.585> .PERIOD  <sil=0.590> .PERIOD ) <sil=0.374> ;SEMICOLON /* Main Program starts here */
int main( int argc <sil=0.571> ,COMMA char *argv[] )
{
    int total <sil=0.481> ;SEMICOLON /*  End of declarations <sil=0.921> .PERIOD  <sil=0.609> .PERIOD  <sil=0.515> .PERIOD */

    total = add_some_ints( 1 <sil=0.356> ,COMMA 2 <sil=0.451> ,COMMA 3 <sil=0.618> ,COMMA 4 <sil=0.602> ,COMMA END) <sil=0.486> ;SEMICOLON printf("Total was %d\n" <sil=0.558> ,COMMA total ) <sil=0.379> ;SEMICOLON exit(EXIT_SUCCESS) <sil=0.458> ;SEMICOLON }

/*---- Rather pathetic function to add up some integers ----------------------*/
int add_some_ints( int first <sil=0.542> ,COMMA  <sil=0.964> .PERIOD  <sil=0.535> .PERIOD  <sil=0.559> .PERIOD )
{
    va_list ap <sil=0.452> ;SEMICOLON /* Use to point to each argument in turn */
    int inext <sil=0.317> ,COMMA sum <sil=0.534> ,COMMA icount <sil=0.568> ;SEMICOLON /*  End of declarations <sil=0.951> .PERIOD  <sil=0.627> .PERIOD  <sil=0.595> .PERIOD */

    icount = 1 <sil=0.504> ;SEMICOLON sum = first <sil=0.360> ;SEMICOLON va_start( ap <sil=0.361> ,COMMA first ) <sil=0.544> ;SEMICOLON /* Use last named argument - first in this case */

/*  End of args is marked by END <sil=0.419> ,COMMA which is zero */

    while ( inext = va_arg( ap <sil=0.527> ,COMMA int ) )  {    /* Second arg of va_arg is type */
     sum += inext <sil=0.335> ;SEMICOLON ++icount <sil=0.530> ;SEMICOLON }
    va_end( ap ) <sil=0.480> ;SEMICOLON /* Tidy up */

    printf("add_some_ints added %d integers\n" <sil=0.330> ,COMMA icount ) <sil=0.602> ;SEMICOLON return( sum ) <sil=0.648> ;SEMICOLON }

The best way to find out about the run time library functions is to look them up in K&R <sil=0.563> ,COMMA or with VMS HELP <sil=0.468> ,COMMA then have a go at using them <sil=0.957> .PERIOD Obfuscation
Obfuscation is the art of writing C so that no-one <sil=0.539> ,COMMA including the author <sil=0.404> ,COMMA has a clue what is going on <sil=0.955> .PERIOD Many people have been practising this for years in Fortran <sil=0.359> ,COMMA but C's #define definitely gives you the extra scope to really muddy the water <sil=0.934> .PERIOD Here are some examples taken from comp <sil=0.980> .PERIOD lang <sil=0.901> .PERIOD c <sil=0.979> ,COMMA compiled by conrad@student <sil=0.902> .PERIOD uni-kl <sil=0.984> .PERIOD de (Peter Conrad) <sil=0.536> ,COMMA of the contest to find the shortest C program to count from a given number i1 up to or down to a second number <sil=0.645> ,COMMA i2 <sil=0.963> .PERIOD To compile these you will need to use CC/DEFINE="o(arg)=printf(""%d"" <sil=0.578> ,COMMA arg)" <sil=0.408> ,COMMA which is a bit of a cheat <sil=0.921> .PERIOD In no particular order (they are all 69 bytes):

[01] main(a <sil=0.646> ,COMMA y <sil=0.339> ,COMMA d)int*y <sil=0.344> ;SEMICOLON {for(a=atoi(y[1]) <sil=0.483> ;SEMICOLON o(a) <sil=0.626> ,COMMA d=atoi(y[2])-a <sil=0.632> ;SEMICOLON )a+=(d|1)%2 <sil=0.490> ;SEMICOLON }
[02] main(c <sil=0.436> ,COMMA v <sil=0.649> ,COMMA x)int*v <sil=0.388> ;SEMICOLON {for(c=atoi(v[1]) <sil=0.395> ;SEMICOLON o(c) <sil=0.473> ,COMMA x=atoi(v[2])-c <sil=0.361> ;SEMICOLON c+=(x|1)%2) <sil=0.619> ;SEMICOLON }
[03] main(a <sil=0.610> ,COMMA v)int*v <sil=0.433> ;SEMICOLON {for(a=atoi(*++v) <sil=0.468> ;SEMICOLON o(a) <sil=0.647> ,COMMA *v=atoi(v[1])-a <sil=0.604> ;SEMICOLON a+=*v>>31|1) <sil=0.604> ;SEMICOLON }
[04] main(i <sil=0.387> ,COMMA v <sil=0.647> ,COMMA j)int*v <sil=0.425> ;SEMICOLON {for(i=atoi(v[1]) <sil=0.532> ;SEMICOLON o(i) <sil=0.394> ,COMMA j=atoi(v[2])-i <sil=0.468> ;SEMICOLON i+=(j|1)%2) <sil=0.406> ;SEMICOLON }
[05] main(c <sil=0.432> ,COMMA d){int*v=d <sil=0.442> ;SEMICOLON for(c=atoi(v[1]) <sil=0.611> ;SEMICOLON o(c) <sil=0.641> ,COMMA d=atoi(v[2])-c <sil=0.514> ;SEMICOLON c+=d>>31|1) <sil=0.567> ;SEMICOLON }
[06] main(d <sil=0.400> ,COMMA O <sil=0.608> ,COMMA _)int*O <sil=0.363> ;SEMICOLON {for(_=atoi(O[1]) <sil=0.376> ;SEMICOLON o(_) <sil=0.386> ,COMMA d=_-atoi(O[2]) <sil=0.445> ;SEMICOLON _-=d>>-1|1) <sil=0.648> ;SEMICOLON }
[07] main(a <sil=0.365> ,COMMA v)int*v <sil=0.422> ;SEMICOLON {for(a=atoi(v[1]) <sil=0.450> ;SEMICOLON o(a) <sil=0.322> ,COMMA *v=atoi(v[2])-a <sil=0.412> ;SEMICOLON a+=*v>>31|1) <sil=0.519> ;SEMICOLON }
[08] main(a <sil=0.345> ,COMMA b)int*b <sil=0.354> ;SEMICOLON {for(a=atoi(*++b) <sil=0.420> ;SEMICOLON o(a) <sil=0.606> ,COMMA *b=atoi(b[1])-a <sil=0.386> ;SEMICOLON a+=(*b|1)%2) <sil=0.557> ;SEMICOLON }
[09] main(a <sil=0.510> ,COMMA b)int*b <sil=0.539> ;SEMICOLON {for(a=atoi(b[1]) <sil=0.606> ;SEMICOLON o(a) <sil=0.476> ,COMMA *b=atoi(b[2])-a <sil=0.619> ;SEMICOLON a+=*b>>31|1) <sil=0.510> ;SEMICOLON }
[10] main(J <sil=0.448> ,COMMA _)int*_ <sil=0.484> ;SEMICOLON {for(J=atoi(*++_) <sil=0.388> ;SEMICOLON o(J) <sil=0.402> ,COMMA *_=atoi(_[1])-J <sil=0.583> ;SEMICOLON J+=(*_|1)%2) <sil=0.447> ;SEMICOLON }
[11] main(i <sil=0.456> ,COMMA b <sil=0.450> ,COMMA j)int*b <sil=0.588> ;SEMICOLON {for(i=atoi(b[1]) <sil=0.314> ;SEMICOLON o(i) <sil=0.335> ,COMMA j=i-atoi(b[2]) <sil=0.540> ;SEMICOLON i-=j>>31|1) <sil=0.650> ;SEMICOLON }
[12] main(k <sil=0.574> ,COMMA j <sil=0.413> ,COMMA i)int*j <sil=0.414> ;SEMICOLON {for(k=atoi(j[1]) <sil=0.580> ;SEMICOLON o(k) <sil=0.512> ,COMMA i=atoi(j[2])-k <sil=0.335> ;SEMICOLON k+=(i|1)%2) <sil=0.647> ;SEMICOLON }
[13] main(n <sil=0.531> ,COMMA a <sil=0.523> ,COMMA e)int*a <sil=0.497> ;SEMICOLON {for(n=atoi(a[1]) <sil=0.366> ;SEMICOLON o(n) <sil=0.594> ,COMMA e=atoi(a[2])-n <sil=0.569> ;SEMICOLON n+=e>>31|1) <sil=0.645> ;SEMICOLON }
[14] a <sil=0.595> ;SEMICOLON main(c <sil=0.626> ,COMMA d)int*d <sil=0.383> ;SEMICOLON {for(a=atoi(d[1]) <sil=0.473> ;SEMICOLON o(a) <sil=0.618> ,COMMA c=atoi(d[2])-a <sil=0.578> ;SEMICOLON a+=(c|1)%2) <sil=0.406> ;SEMICOLON }
[15] main(n <sil=0.424> ,COMMA c <sil=0.975> ,COMMA d)int*c <sil=0.493> ;SEMICOLON {for(n=atoi(c[1]) <sil=0.392> ;SEMICOLON o(n) <sil=0.609> ,COMMA d=atoi(c[2])-n <sil=0.611> ;SEMICOLON n+=d>>31|1) <sil=0.530> ;SEMICOLON }
[16] main(d <sil=0.374> ,COMMA a)int*a <sil=0.351> ;SEMICOLON {for(d=atoi(a[1]) <sil=0.406> ;SEMICOLON o(d) <sil=0.608> ,COMMA *a=atoi(a[2])-d <sil=0.597> ;SEMICOLON d+=(*a|1)%2) <sil=0.473> ;SEMICOLON }
[17] *p <sil=0.483> ;SEMICOLON main(i <sil=0.359> ,COMMA x){for(i=atoi((p=x)[1]) <sil=0.379> ;SEMICOLON o(i) <sil=0.484> ,COMMA x=atoi(p[2])-i <sil=0.460> ;SEMICOLON x>0 <sil=0.860> ?QUESTIONMARK i++:i--) <sil=0.448> ;SEMICOLON }
[18] main(c <sil=0.474> ,COMMA v <sil=0.504> ,COMMA d)int*v <sil=0.626> ;SEMICOLON {for(c=atoi(v[1]) <sil=0.423> ;SEMICOLON o(c) <sil=0.463> ,COMMA d=atoi(v[2])-c <sil=0.609> ;SEMICOLON c+=d>>31|1) <sil=0.639> ;SEMICOLON }
[19] main(c <sil=0.414> ,COMMA v <sil=0.542> ,COMMA d)int*v <sil=0.515> ;SEMICOLON {for(c=atoi(v[1]) <sil=0.416> ;SEMICOLON d <sil=0.576> ;SEMICOLON o(d>0 <sil=0.976> ?QUESTIONMARK c++:c--))d=atoi(v[2])-c <sil=0.462> ;SEMICOLON }
These are the winners of the 1 <sil=0.981> .PERIOD Int'l Kaiserslautern Shortest C Contest (the numbers refer to the programs above):

[01] Lars C <sil=0.989> .PERIOD Hassing <lch@cci <sil=0.960> .PERIOD dk>
[02] Stefan Bock <sbock@informatik <sil=0.947> .PERIOD uni-kl <sil=0.949> .PERIOD de>
[03] Heather Downs <heathbar@natasha <sil=0.944> .PERIOD tele <sil=0.969> .PERIOD iastate <sil=0.921> .PERIOD edu>
[04] Patrick Seemann <tele@tubul <sil=0.959> .PERIOD limmat <sil=0.959> .PERIOD net <sil=0.976> .PERIOD ch>
[05] Roland Nagel <nagel@informatik <sil=0.961> .PERIOD uni-kl <sil=0.938> .PERIOD de>
[06] Klaus Singvogel <kssingvo@immd4 <sil=0.991> .PERIOD informatik <sil=0.917> .PERIOD uni-erlangen <sil=0.943> .PERIOD de> <sil=0.336> ,COMMA Michael Schroeder <mlschroe@faui43 <sil=0.995> .PERIOD informatik <sil=0.943> .PERIOD uni-erlangen <sil=0.965> .PERIOD de> <sil=0.313> ,COMMA Markus Kuhn <mskuhn@cip <sil=0.938> .PERIOD informatik <sil=0.978> .PERIOD uni-erlangen <sil=0.967> .PERIOD de>
[07] Markus Simmer <simmer@iml <sil=0.963> .PERIOD fhg <sil=0.976> .PERIOD de>
[08] Willy Seibert <ws@osix <sil=0.980> .PERIOD materna <sil=0.933> .PERIOD de>
[09] Oliver Bianzano <oli@ap-pc818c <sil=0.965> .PERIOD physik <sil=0.947> .PERIOD uni-karlsruhe <sil=0.995> .PERIOD de>
[10] Jens Schweikhardt <jenssch@ibhinfo <sil=0.946> .PERIOD hemminger-gdv <sil=0.991> .PERIOD de>
[11] Thomas Omerzu <omerzu@quantum <sil=0.977> .PERIOD de> <sil=0.369> ,COMMA Matthias Sachs <sachs@quantum <sil=0.908> .PERIOD de> <sil=0.481> ,COMMA Udo Salewski <salewski@quantum <sil=0.904> .PERIOD de>
[12] Jahn Rentmeister <WIJARE@wi <sil=0.942> .PERIOD uni-muenster <sil=0.928> .PERIOD de>
[13] Gregor Hoffleit <flight@mathi <sil=0.941> .PERIOD uni-heidelberg <sil=0.956> .PERIOD de>
[14] John Rochester <jr@cs <sil=0.924> .PERIOD mun <sil=0.950> .PERIOD ca>
[15] Markus Siegert <siegertm@nemeter <sil=0.958> .PERIOD dinoco <sil=0.910> .PERIOD de>
[16] Siegmar Zaeske <zaeske@detlef <sil=0.930> .PERIOD informatik <sil=0.985> .PERIOD uni-dortmund <sil=0.945> .PERIOD de>
[17] Arnd Gerns <gerns@informatik <sil=0.986> .PERIOD uni-hildesheim <sil=0.914> .PERIOD de> <sil=0.573> ,COMMA Dirk Eiden <eiden@informatik <sil=0.998> .PERIOD uni-hildesheim <sil=0.956> .PERIOD de> <sil=0.307> ,COMMA Steffen Moeller <moeller@informatik <sil=0.981> .PERIOD uni-hildesheim <sil=0.920> .PERIOD de>
[18] James C <sil=0.930> .PERIOD Hu <jxh@pride <sil=0.982> .PERIOD cs <sil=0.952> .PERIOD wustl <sil=0.987> .PERIOD edu>
[19] Frank Neblung <neblung@informatik <sil=0.924> .PERIOD uni-kl <sil=0.929> .PERIOD de>
I think you would agree that these would not be much fun to maintain <sil=0.887> !EXCLAMATIONMARK Another favourite pastime for obfuscators is the self-producing program <sil=0.953> .PERIOD Here is one of my favourites - strictly ANSI compliant <sil=0.637> ,COMMA including all headers <sil=0.502> ,COMMA by Ashley Roll <sil=0.991> .PERIOD #include <stdio <sil=0.947> .PERIOD h> /* Ashley Roll aroll@gucis <sil=0.947> .PERIOD cit <sil=0.974> .PERIOD gu <sil=0.954> .PERIOD edu <sil=0.990> .PERIOD au */
main(){char *s <sil=0.626> ,COMMA *a <sil=0.641> ,COMMA *t <sil=0.323> ;SEMICOLON for(t=s="7}|wzarq6*gbr}{<~ <sil=0.426> ,COMMA 6 <sil=0.533> ;SEMICOLON @6Ug~zqm6H{zz6uh{zzVsaw}g<\\\
w}b<sa<qra<ua6@ <sil=0.337> ;SEMICOLON yu}|>=ow~uh6@g:@u:@b/t{h>b)g)8_8/@g/g <sil=0.912> ?QUESTIONMARK  <sil=0.412> ?QUESTIONMARK = }t>@g))3K3=t{h>u)b\\\
/@u/u <sil=0.923> ?QUESTIONMARK  <sil=0.333> ?QUESTIONMARK =o@u))3JJ3+fh}|bt>8JJJJJJJ|8=0fabw~uh>@u=/i qzgq@g5)3JJ3+fabw~uh>@g9%\\\
L(%=0%/i6 <sil=0.592> ;SEMICOLON @6Sh}tt}b~6A|}dqhg}bm:6Xh}gxu|q6Uagbhuz}u6@ <sil=0.628> ;SEMICOLON " <sil=0.354> ;SEMICOLON *s <sil=0.387> ;SEMICOLON s++)
if(*s=='_')for(a=t <sil=0.458> ;SEMICOLON *a <sil=0.375> ;SEMICOLON a++){*a=='\\' <sil=0.893> ?QUESTIONMARK printf("\\\\\\\n"):putchar(*a) <sil=0.527> ;SEMICOLON }
else*s <sil=0.900> !EXCLAMATIONMARK ='\\' <sil=0.860> ?QUESTIONMARK putchar(*s-1^21):1 <sil=0.478> ;SEMICOLON } /* Griffith University <sil=0.540> ,COMMA Brisbane Australia */

This is in the course directory <sil=0.333> ,COMMA called "self <sil=0.938> .PERIOD c" <sil=0.448> .PERIOD As a final treat <sil=0.320> ,COMMA here is a festive Christmas program <sil=0.333> ,COMMA "xmas <sil=0.972> .PERIOD c" <sil=0.411> ,COMMA by eeibht@eeiud <sil=0.918> .PERIOD ericsson <sil=0.934> .PERIOD se (Brendan Hassett) <sil=0.521> ,COMMA based on the more traditional <sil=0.422> ,COMMA but equally obfuscated program by Ian Phillipps <sil=0.937> .PERIOD /*
From: eeibht@eeiud <sil=0.941> .PERIOD ericsson <sil=0.936> .PERIOD se (Brendan Hassett)
+------------------------------------------------------------------+
| Brendan Hassett      Tel +353-902-74601 ext 1109    ECN 830-1109 |
| eeibht@eeiud <sil=0.953> .PERIOD ericsson <sil=1.000> .PERIOD se   EEI <sil=0.983> .PERIOD EEIBHT@memo <sil=0.953> .PERIOD ericsson <sil=0.953> .PERIOD se     ~~~   |
| Ericsson Systems Expertise Ltd <sil=0.386> ,COMMA Athlone <sil=0.539> ,COMMA Ireland <sil=0.490> ,COMMA EU <sil=0.988> .PERIOD ( o o ) |
+--------------------------------------------------------ooO-(_)-Ooo
#include <disclaimer <sil=0.949> .PERIOD h>
*/

/*
  Based on an original program by Ian Phillipps <sil=0.306> ,COMMA Cambridge Consultants Ltd <sil=0.959> .PERIOD  <sil=0.610> ,COMMA Cambridge <sil=0.377> ,COMMA England
*/

#include <stdio <sil=0.979> .PERIOD h>
#define __ main

__(t <sil=0.570> ,COMMA _ <sil=0.473> ,COMMA a)
char
*
a <sil=0.402> ;SEMICOLON {
	return <sil=0.896> !EXCLAMATIONMARK 0<t <sil=0.935> ?QUESTIONMARK t<3 <sil=0.886> ?QUESTIONMARK __(-79 <sil=0.648> ,COMMA -13 <sil=0.467> ,COMMA a+
__(-87 <sil=0.648> ,COMMA 1-_ <sil=0.626> ,COMMA __(-86 <sil=0.459> ,COMMA 0 <sil=0.485> ,COMMA a+1 )


+a)):

1 <sil=0.616> ,COMMA t<_ <sil=0.931> ?QUESTIONMARK __(t+1 <sil=0.456> ,COMMA _ <sil=0.434> ,COMMA a )
:3 <sil=0.375> ,COMMA __ ( -94 <sil=0.378> ,COMMA -27+t <sil=0.570> ,COMMA a )
&&t == 2 <sil=0.919> ?QUESTIONMARK _
<13 <sil=0.983> ?QUESTIONMARK __ ( 2 <sil=0.378> ,COMMA _+1 <sil=0.429> ,COMMA "%s %d %d\n" )

:9:16:
t<0 <sil=1.000> ?QUESTIONMARK t<-72 <sil=0.907> ?QUESTIONMARK __( _ <sil=0.417> ,COMMA t <sil=0.406> ,COMMA "k <sil=0.586> ,COMMA #n'+ <sil=0.359> ,COMMA #'/\
*{}w+/\
w#cdnr/\
+ <sil=0.503> ,COMMA {}r/\
*de}+ <sil=0.622> ,COMMA /\
*{*+ <sil=0.448> ,COMMA /\
w{%+ <sil=0.321> ,COMMA /\
w#q#n+ <sil=0.325> ,COMMA /\
#{l <sil=0.314> ,COMMA + <sil=0.581> ,COMMA /\
n{n+ <sil=0.628> ,COMMA /\
+#n+ <sil=0.569> ,COMMA /# <sil=0.306> ;SEMICOLON \
#q#n+ <sil=0.458> ,COMMA /\
+k# <sil=0.500> ;SEMICOLON *+ <sil=0.330> ,COMMA /\
'-el' ))# }#r]'K:'K n l#}'w {r'+d'K# <sil=0.949> !EXCLAMATIONMARK /\
+# <sil=0.501> ;SEMICOLON  <sil=0.494> ;SEMICOLON '+ <sil=0.513> ,COMMA #K'{+w' '*# +e}#] <sil=0.980> !EXCLAMATIONMARK /\
w :'{+w'nd+'we))d}+#r] <sil=0.983> !EXCLAMATIONMARK /\
c <sil=0.438> ,COMMA nl#'+ <sil=0.381> ,COMMA #'rdceK#n+ +{dn] <sil=0.973> !EXCLAMATIONMARK /\
- <sil=0.391> ;SEMICOLON K#'{+'dn'+ <sil=0.402> ,COMMA #' <sil=0.418> ,COMMA }rk }#] <sil=0.907> !EXCLAMATIONMARK /\
*{nr' 'k :' }denr'{+] <sil=0.995> !EXCLAMATIONMARK /\
w :'+ <sil=0.520> ,COMMA #:'n##r' n'e)l} r#] <sil=0.945> !EXCLAMATIONMARK /\
}#{nw+ <sil=0.450> ;SEMICOLON  <sil=0.364> ;SEMICOLON '+ <sil=0.524> ,COMMA #'wd*+k }#] <sil=0.976> !EXCLAMATIONMARK /\
 w['*d}' 'reK)] <sil=0.943> !EXCLAMATIONMARK /\
ew#' 'r#-ell#}] <sil=0.880> !EXCLAMATIONMARK /\
+}:'+d'}#)}drec#'{+] <sil=0.926> !EXCLAMATIONMARK /\
 w['+ <sil=0.420> ,COMMA #K' <sil=0.451> ,COMMA dk'+ <sil=0.629> ,COMMA #:'r{r'{+] <sil=0.901> !EXCLAMATIONMARK /\
w##'{*'{+' <sil=0.551> ,COMMA ))#nw' l {n( <sil=0.942> !EXCLAMATIONMARK  <sil=0.623> !EXCLAMATIONMARK /")
:
t<-50 <sil=0.855> ?QUESTIONMARK _==*a <sil=0.902> ?QUESTIONMARK putchar(a[31]):

__(-65 <sil=0.602> ,COMMA _ <sil=0.517> ,COMMA a+1)
:
__((*a == '/') + t <sil=0.609> ,COMMA _ <sil=0.433> ,COMMA a + 1 )
:

0<t <sil=0.871> ?QUESTIONMARK __ ( 2 <sil=0.348> ,COMMA 2 <sil=0.349> ,COMMA "%s")
:*a=='/'||

__(0 <sil=0.455> ,COMMA __(-61 <sil=0.332> ,COMMA *a <sil=0.567> ,COMMA " <sil=0.994> !EXCLAMATIONMARK ek <sil=0.578> ;SEMICOLON dc i@bK'(q)-[w]*\
%n+r3#l <sil=0.379> ,COMMA {}:\nuwloca-O\ <sil=0.603> ;SEMICOLON m <sil=0.951> .PERIOD vpbks <sil=0.366> ,COMMA fxntdCeghiry") <sil=0.592> ,COMMA a+1) <sil=0.597> ;SEMICOLON }

Beat that <sil=0.986> .PERIOD This evokes a slight whinge in DEC C's strictest ANSI mode <sil=0.488> ,COMMA because main takes more than two parameters <sil=0.475> ,COMMA but compile <sil=0.452> ,COMMA link <sil=0.559> ,COMMA run and enjoy <sil=0.879> !EXCLAMATIONMARK Changing from VAX C or K&R C to ANSI Compliant DEC C
The main change with DEC C for VAX or Alpha is that it is much stricter than K&R/VAX C <sil=0.905> .PERIOD I have found this to be a very good thing (apart from the pain of bug fixing <sil=0.992> !EXCLAMATIONMARK ) because it has brought to light hitherto undiscovered errors - the type of thing that causes intermittent faults <sil=0.856> !EXCLAMATIONMARK You tend to get a lot of informational messages about "implicitly declared functions" (like exit) where people have been lazy and not included <stdlib <sil=0.972> .PERIOD h> and <stdio <sil=0.966> .PERIOD h> <sil=0.998> .PERIOD You can always turn informational warnings off <sil=0.544> ,COMMA but this is a bit suspect because you then don't get alerted to other problems that might be important <sil=0.912> .PERIOD I usually just ensure that every bit of code has

#include <stdlib <sil=0.954> .PERIOD h>
#include <stdio <sil=0.923> .PERIOD h>

at the top <sil=0.961> .PERIOD Make sure that all exit()s are exit(EXIT_SUCCESS) or exit(EXIT_FAILURE) <sil=0.933> .PERIOD Avoid "magic number" exit codes <sil=0.975> .PERIOD Unix programmers often think that everyone understands that exit(0) means no problems <sil=0.605> ,COMMA and often don't use the ANSI exit(EXIT_SUCCESS) which will be correct for any O <sil=0.937> .PERIOD S <sil=0.992> .PERIOD  <sil=0.611> .PERIOD If you specifically want to return a VMS status (other than normal successful completion) then use #ifdef __VMS for the VMS specific part where possible <sil=0.976> .PERIOD In a nutshell <sil=0.306> ,COMMA make sure that you write ANSI C <sil=0.927> .PERIOD All the programs that I have converted to ANSI C have still worked under VAX C <sil=0.496> ,COMMA provided I use #pragma in certain places (see later) <sil=0.997> .PERIOD I prefer #pragma solutions to just adding global qualifiers <sil=0.625> ,COMMA because they are closer to the machine-specific code <sil=0.615> ,COMMA and flag the fact that you are doing something special <sil=0.908> .PERIOD Using Object Libraries
On VMS platforms you might well be putting several main programs in one library and hence want to use the MAIN_PROGRAM macro to show that myprog( <sil=0.931> .PERIOD  <sil=0.416> .PERIOD  <sil=0.617> .PERIOD ) is really main( <sil=0.981> .PERIOD  <sil=0.492> .PERIOD  <sil=0.417> .PERIOD ) <sil=0.905> .PERIOD The use of MAIN_PROGRAM is nonportable <sil=0.623> ,COMMA and hence the compiler will whinge <sil=0.942> .PERIOD Similarly you might be using variant_unions for <sil=0.370> ,COMMA say <sil=0.481> ,COMMA VMS item lists <sil=0.412> ,COMMA which are so VMS specific that you are happy to use the nonportable extension in that (limited) portion of code because it is convenient <sil=0.985> .PERIOD To stop complaints about this sort of thing <sil=0.495> ,COMMA I do the following (which works with VAX C and DEC C) <sil=0.912> .PERIOD  <sil=0.589> .PERIOD  <sil=0.544> .PERIOD #ifdef __VMS
#  ifdef __DECC
#    pragma message save
#    pragma message disable portable
#  endif

int myprog(int argc <sil=0.384> ,COMMA char *argv[])
MAIN_PROGRAM /* VMS specific macro to identify main() */

#  ifdef __DECC
#    pragma message restore
#  endif
#else

int main(int argc <sil=0.302> ,COMMA char *argv[]) /* Standard C version */

#endif

Here is an example of a VMS item list for system service calls <sil=0.932> .PERIOD  <sil=0.552> .PERIOD  <sil=0.333> .PERIOD #ifdef __DECC
# pragma message save
# pragma message disable portable
#endif
/*  VMS Item List structure */
struct item_list {
  variant_union {
    variant_struct {
      short int w_buflen <sil=0.638> ;SEMICOLON short int w_code <sil=0.454> ;SEMICOLON long int *l_bufptr <sil=0.523> ;SEMICOLON long int *l_retlenptr <sil=0.586> ;SEMICOLON } list_structure <sil=0.599> ;SEMICOLON int end_list <sil=0.487> ;SEMICOLON } whole_list <sil=0.610> ;SEMICOLON } <sil=0.616> ;SEMICOLON #ifdef __DECC
# pragma message restore
#endif

Obviously <sil=0.617> ,COMMA completely nonportable constructs should be used sparingly <sil=0.510> ,COMMA because although we have turned the error off <sil=0.562> ,COMMA they are still nonstandard <sil=0.993> !EXCLAMATIONMARK Structure Alignment
Watch out for arrays of structures <sil=0.424> ,COMMA or structures populated by data reads from disk <sil=0.977> .PERIOD DEC C for Alpha likes to have structure members aligned on natural boundaries which will confuse your code if (say) you read in from disk some data written out by a VAX C or DEC C on VAX program <sil=0.962> .PERIOD Make sure that structures like this are tightly packed <sil=0.950> .PERIOD I tend to do this <sil=0.910> .PERIOD  <sil=0.556> .PERIOD  <sil=0.432> .PERIOD /* Following structures MUST be packed tightly ie <sil=0.905> .PERIOD no member alignment */
#ifdef __DECC
# pragma member_alignment save /* Push current default alignment on to 'stack'*/
# pragma nomember_alignment
#endif

struct my_struct_s    my_struct <sil=0.380> ;SEMICOLON struct other_struct_s other_struct <sil=0.350> ;SEMICOLON #ifdef __DECC
# pragma member_alignment restore /* Restore previous default alignment */
#endif

Don't be tempted to force nomember_alignment for everything <sil=0.997> .PERIOD Restrict it to individual structures as shown above <sil=0.999> .PERIOD Imposing it globally is likely to cause performance penalties <sil=0.566> ,COMMA or mysterious crashes if you call routines that expect natural alignment <sil=0.975> .PERIOD Accessing Fortran Common Blocks
External models have changed between VAX C and DEC C <sil=0.460> ,COMMA so C code that accesses Fortran common blocks should beware <sil=0.963> .PERIOD On the Alpha <sil=0.307> ,COMMA the default for Fortran common blocks is now NOSHR <sil=0.940> .PERIOD VAX Fortran uses SHR as the default <sil=0.950> .PERIOD DEC C on the other hand <sil=0.631> ,COMMA wants RELAXED_REFDEF <sil=0.949> .PERIOD Try the following for a "normal" common block <sil=0.592> ,COMMA ie <sil=0.985> .PERIOD not a global section <sil=0.973> .PERIOD  <sil=0.484> .PERIOD  <sil=0.457> .PERIOD /* FORTRAN common blocks are extern to everything -----------------------*/
#ifdef __DECC
# pragma extern_model save
#endif

#ifdef __DECC
# ifdef __ALPHA
/* Default if not overridden by options file is NOSHR for Alpha Fortran common*/
#  pragma extern_model common_block noshr
# else
/* Default if not overridden by options file is SHR for VAX Fortran common */
#  pragma extern_model common_block shr
# endif
#endif

extern struct {
  int a <sil=0.406> ;SEMICOLON /* These names don't matter <sil=0.605> ,COMMA type/size must be correct */
  int b <sil=0.474> ;SEMICOLON int c <sil=0.317> ;SEMICOLON char string[40] <sil=0.618> ;SEMICOLON } COMBLK <sil=0.536> ;SEMICOLON /* Case matters if linker is case sensitive */

#ifdef __DECC
# pragma extern_model restore
#endif

Then if your Fortran common block looked like this <sil=0.994> .PERIOD  <sil=0.545> .PERIOD  <sil=0.515> .PERIOD *
*     Common:
*
      INTEGER A
      INTEGER B
      INTEGER C
      CHARACTER*40 STRING
      COMMON /COMBLK/ A <sil=0.515> ,COMMA B <sil=0.549> ,COMMA C <sil=0.309> ,COMMA STRING <sil=0.986> .PERIOD  <sil=0.409> .PERIOD  <sil=0.620> .PERIOD your C function would access the members thus


void SET_FORTRAN_COMMON(void)
{
    COMBLK <sil=0.904> .PERIOD a = 1 <sil=0.513> ;SEMICOLON COMBLK <sil=0.972> .PERIOD b = 2 <sil=0.613> ;SEMICOLON COMBLK <sil=0.961> .PERIOD c = 3 <sil=0.646> ;SEMICOLON sprintf(COMBLK <sil=0.935> .PERIOD string <sil=0.456> ,COMMA "Hello World") <sil=0.649> ;SEMICOLON }

Accessing Global Sections
If you were trying to access a global section <sil=0.394> ,COMMA named PATSEC in this example <sil=0.524> ,COMMA you would have to look at the options file to see the PSECT attributes (or if you were lucky <sil=0.491> ,COMMA the attributes might be specified in the <sil=0.975> .PERIOD CMN file itself with a $CDEC compiler directive) <sil=0.987> .PERIOD For PATSEC <sil=0.357> ,COMMA you need the NOSHR option <sil=0.991> .PERIOD  <sil=0.469> .PERIOD  <sil=0.344> .PERIOD #ifdef __DECC
# pragma extern_model common_block noshr
#endif <sil=0.946> .PERIOD extern struct {struct patsec patsec <sil=0.616> ;SEMICOLON } ZZZZ_PATSEC <sil=0.461> ;SEMICOLON  <sil=0.912> .PERIOD #ifdef __DECC
# pragma extern_model restore
#endif

Then you can refer to it like this <sil=0.942> .PERIOD  <sil=0.342> .PERIOD  <sil=0.457> .PERIOD num = ZZZZ_PATSEC <sil=0.996> .PERIOD patsec <sil=0.947> .PERIOD ckp <sil=0.987> .PERIOD apt[ndx-1] <sil=0.988> .PERIOD patrol <sil=0.517> ;SEMICOLON Here the common block _containing_ the patsec structure is called ZZZZ_PATSEC <sil=0.339> ,COMMA but we need to specify <sil=0.982> .PERIOD patsec even though the common block in that case only contains one item (Previous example had <sil=0.916> .PERIOD a <sil=0.528> ,COMMA  <sil=0.940> .PERIOD b <sil=0.444> ,COMMA  <sil=0.973> .PERIOD c and <sil=0.927> .PERIOD string) <sil=0.922> .PERIOD Passing Fortran style strings
Fortran expects strings to be passed by descriptor <sil=0.631> ,COMMA or <sil=0.426> ,COMMA more precisely <sil=0.412> ,COMMA it expects to receive the address of a descriptor <sil=0.306> ,COMMA which is a structure containing a pointer to a string <sil=0.484> ,COMMA its length and its type and class <sil=0.968> .PERIOD A string descriptor structure looks like this <sil=0.924> .PERIOD  <sil=0.627> .PERIOD  <sil=0.635> .PERIOD struct  dsc$descriptor_s
{
  unsigned short  dsc$w_length <sil=0.642> ;SEMICOLON /* length of data item in bytes <sil=0.315> ,COMMA or if dsc$b_dtype is DSC$K_DTYPE_V <sil=0.517> ,COMMA bits <sil=0.518> ,COMMA or if dsc$b_dtype is DSC$K_DTYPE_P <sil=0.549> ,COMMA digits (4 bits each) */
  unsigned char   dsc$b_dtype <sil=0.543> ;SEMICOLON /* data type code */
  unsigned char   dsc$b_class <sil=0.627> ;SEMICOLON /* descriptor class code = DSC$K_CLASS_S */
  char            *dsc$a_pointer <sil=0.558> ;SEMICOLON /* address of first byte of data storage */
} <sil=0.403> ;SEMICOLON It is often convenient to use the $DESCRIPTOR macro defined in >descrip <sil=0.990> .PERIOD h< to set up a descriptor <sil=0.943> .PERIOD This expects the address of the string to be _constant_ so you must declare the string referred to by the descriptor as static to avoid compilation warnings <sil=0.940> .PERIOD Example:


    static char user[16] <sil=0.622> ;SEMICOLON $DESCRIPTOR( user_dsc <sil=0.348> ,COMMA user ) <sil=0.546> ;SEMICOLON  <sil=0.954> .PERIOD istatus = CALL_FORTRAN_ROUTINE( &user_dsc ) <sil=0.404> ;SEMICOLON  <sil=0.987> .PERIOD Be aware that the $DESCRIPTOR macro will set the string length to be one less than sizeof(string) to allow for the fact that C may have a terminating null character <sil=0.962> .PERIOD Hence <sil=0.390> ,COMMA in the example above <sil=0.337> ,COMMA CALL_FORTRAN_ROUTINE will think it has been passed a CHARACTER*15 string <sil=0.961> .PERIOD VMS Message Codes
In Fortran we often use EXTERNAL CARS__ERROPEN to get the linker to pull in the correct message code as a "global value" <sil=0.955> .PERIOD In C <sil=0.485> ,COMMA this is how to do the same thing portably <sil=0.967> .PERIOD #ifdef __DECC
# pragma extern_model save
# pragma extern_model globalvalue
#else
# ifdef VAXC
#  define extern globalvalue
# endif
#endif

/* Put _declarations_ of message parameters here */
extern  cars__erropen <sil=0.411> ,COMMA cars__errconn <sil=0.488> ,COMMA cars__errread <sil=0.312> ,COMMA cars__errwrite <sil=0.630> ;SEMICOLON #ifdef __DECC
# pragma extern_model restore
#else
# ifdef VAXC
#  undef extern
# endif
#endif

If you wanted to use the same codes on a different machine <sil=0.638> ,COMMA you could then define the integer error code values in a separate <sil=0.916> .PERIOD c file and link against the error code object <sil=0.932> .PERIOD Why learn C <sil=0.885> ?QUESTIONMARK C is the most commonly used programming language for writing operating systems <sil=0.987> .PERIOD The first operating system written in C is Unix <sil=0.944> .PERIOD Later operating systems like GNU/Linux were all written in C <sil=0.964> .PERIOD Not only is C the language of operating systems <sil=0.532> ,COMMA it is the precursor and inspiration for almost all of the most popular high-level languages available today <sil=0.922> .PERIOD In fact <sil=0.550> ,COMMA Perl <sil=0.617> ,COMMA PHP <sil=0.423> ,COMMA Python and Ruby are all written in C <sil=0.918> .PERIOD By way of analogy <sil=0.575> ,COMMA let's say that you were going to be learning Spanish <sil=0.560> ,COMMA Italian <sil=0.483> ,COMMA French <sil=0.400> ,COMMA or Romanian <sil=0.906> .PERIOD Do you think knowing Latin would be helpful <sil=0.912> ?QUESTIONMARK Just as Latin was the basis of all of those languages <sil=0.639> ,COMMA knowing C will enable you to understand and appreciate an entire family of programming languages built upon the traditions of C <sil=0.994> .PERIOD Knowledge of C enables freedom <sil=0.987> .PERIOD Why C <sil=0.316> ,COMMA and not assembly language <sil=0.925> ?QUESTIONMARK While assembly language can provide speed and maximum control of the program <sil=0.409> ,COMMA C provides portability <sil=0.928> .PERIOD Different processors are programmed using different Assembly languages and having to choose and learn only one of them is too arbitrary <sil=0.983> .PERIOD In fact <sil=0.607> ,COMMA one of the main strengths of C is that it combines universality and portability across various computer architectures while retaining most of the control of the hardware provided by assembly language <sil=0.953> .PERIOD For example <sil=0.611> ,COMMA C programs can be compiled and run on the HP 50g calculator (ARM11 processor) <sil=0.370> ,COMMA the TI-89 calculator (6800012 processor) <sil=0.627> ,COMMA Palm OS Cobalt smartphones (ARM processor) <sil=0.394> ,COMMA the original iMac (PowerPC13) <sil=0.458> ,COMMA the Arduino (Atmel AVR14) <sil=0.516> ,COMMA and the Intel iMac (Intel15 Core 2 Duo) <sil=0.954> .PERIOD Each of these devices has its own assembly language that is completely incompatible with the assembly language of any other <sil=0.918> .PERIOD Assembly <sil=0.635> ,COMMA while extremely powerful <sil=0.514> ,COMMA is simply too difficult to program large applications and hard to read or interpret in a logical way <sil=0.965> .PERIOD C is a compiled language <sil=0.365> ,COMMA which creates fast and efficient executable files <sil=0.972> .PERIOD It is also a small “what you see is all you get” language: a C statement corresponds to at most a handful of assembly statements <sil=0.304> ,COMMA everything else is provided by library functions <sil=0.945> .PERIOD So is it any wonder that C is such a popular language <sil=0.909> ?QUESTIONMARK Like toppling dominoes <sil=0.627> ,COMMA the next generation of programs follows the trend of its ancestors <sil=0.961> .PERIOD Operating systems designed in C always have system libraries designed in C <sil=0.950> .PERIOD Those system libraries are in turn used to create higher-level libraries (like OpenGL <sil=0.388> ,COMMA or GTK) <sil=0.512> ,COMMA and the designers of those libraries often decide to use the language the system libraries used <sil=0.988> .PERIOD Application developers use the higher-level libraries to design word processors <sil=0.366> ,COMMA games <sil=0.330> ,COMMA media players and the like <sil=0.928> .PERIOD Many of them will choose to program in the language that the higher level library uses <sil=0.991> .PERIOD And the pattern continues on and on and on <sil=0.942> .PERIOD  <sil=0.324> .PERIOD  <sil=0.539> .PERIOD Why C <sil=0.552> ,COMMA and not another language <sil=0.956> ?QUESTIONMARK The primary design of C is to produce portable code while maintaining performance and minimizing footprint (CPU time <sil=0.499> ,COMMA memory usage <sil=0.432> ,COMMA disk I/O <sil=0.303> ,COMMA etc <sil=0.932> .PERIOD ) <sil=0.570> .PERIOD This is useful for operating systems <sil=0.346> ,COMMA embedded systems or other programs where performance matters a lot (“high-level” interface would affect performance) <sil=0.958> .PERIOD With C it’s relatively easy to keep a mental picture of what a given line really does <sil=0.574> ,COMMA because most of the things are written explicitly in the code <sil=0.934> .PERIOD C has a big codebase for low level applications <sil=0.916> .PERIOD It is the “native” language of UNIX <sil=0.532> ,COMMA which makes it flexible and portable <sil=0.938> .PERIOD It is a stable and mature language which is unlikely to disappear for a long time and has been ported to most <sil=0.596> ,COMMA if not all <sil=0.585> ,COMMA platforms <sil=0.966> .PERIOD One powerful reason is memory allocation <sil=0.961> .PERIOD Unlike most programming languages <sil=0.541> ,COMMA C allows the programmer to write directly to memory <sil=0.969> .PERIOD Key constructs in C such as structs <sil=0.393> ,COMMA pointers and arrays are designed to structure and manipulate memory in an efficient <sil=0.528> ,COMMA machine independent fashion <sil=0.929> .PERIOD In particular <sil=0.621> ,COMMA C gives control over the memory layout of data structures <sil=0.974> .PERIOD Moreover dynamic memory allocation is under the control of the programmer (which also means that memory deallocation has to be done by the programmer) <sil=0.945> .PERIOD Languages like Java and Perl shield the programmer from having to manage most details of memory allocation and pointers (except for memory leaks and some other forms of excess memory usage) <sil=0.929> .PERIOD This can be useful since dealing with memory allocation when building a high-level program is a highly error-prone process <sil=0.995> .PERIOD However <sil=0.350> ,COMMA when dealing with low-level code such as the part of the OS that controls a device <sil=0.452> ,COMMA C provides a uniform <sil=0.363> ,COMMA clean interface <sil=0.994> .PERIOD These capabilities just do not exist in most other languages <sil=0.925> .PERIOD While Perl <sil=0.405> ,COMMA PHP <sil=0.503> ,COMMA Python and Ruby may be powerful and support many features not provided by default in C <sil=0.609> ,COMMA they are not normally implemented in their own language <sil=0.924> .PERIOD Rather <sil=0.456> ,COMMA most such languages initially relied on being written in C (or another high-performance programming language) <sil=0.514> ,COMMA and would require their implementation be ported to a new platform before they can be used <sil=0.922> .PERIOD As with all programming languages <sil=0.644> ,COMMA whether you want to choose C over another high-level language is a matter of opinion and both technical and business requirements could dictate which language is required <sil=0.918> .PERIOD History 
The field of computing as we know it today started in 1947 with three scientists at Bell Telephone Laboratories—William Shockley <sil=0.537> ,COMMA Walter Brattain <sil=0.614> ,COMMA and John Bardeen —and their groundbreaking invention: the transistor <sil=0.906> .PERIOD In 1956 <sil=0.435> ,COMMA the first fully transistor-based computer <sil=0.625> ,COMMA the TX-0 <sil=0.383> ,COMMA was completed at MIT <sil=0.986> .PERIOD The first integrated circuit was created in 1958 by Jack Kilby at Texas Instruments <sil=0.460> ,COMMA but the first high-level programming language existed even before then <sil=0.915> .PERIOD ”The Fortran project” was originally developed in 1954 by IBM <sil=0.942> .PERIOD A shortening of ”The IBM Mathematical Formula Translating System” <sil=0.371> ,COMMA the project had the purpose of creating and fostering development of a procedural <sil=0.584> ,COMMA imperative programming language that was especially suited to numeric computation and scientific computing <sil=0.952> .PERIOD It was a breakthrough in terms of productivity and programming ease (compared to assembly language) and speed (Fortran programs ran nearly as fast as <sil=0.322> ,COMMA and in some cases <sil=0.592> ,COMMA just as fast as <sil=0.377> ,COMMA programs written in assembly) <sil=0.932> .PERIOD Furthermore <sil=0.565> ,COMMA Fortran was written at a high-enough level (and thus was machine independent enough) to become the first widely adopted programming language <sil=0.913> .PERIOD The Algorithmic Language (Algol 58) was derived from Fortran in 1958 and evolved into Algol 6010 in 1960 <sil=0.949> .PERIOD The Combined Programming Language (CPL) was then created out of Algol 60 in 1963 <sil=0.901> .PERIOD In 1967 <sil=0.625> ,COMMA it evolved into Basic CPL <sil=0.327> ,COMMA which was itself <sil=0.548> ,COMMA the base for B13 in 1969 <sil=0.973> .PERIOD Finally <sil=0.626> ,COMMA B <sil=0.644> ,COMMA the root of C <sil=0.580> ,COMMA was created in 1971 <sil=0.916> .PERIOD C was the direct successor of B <sil=0.372> ,COMMA a stripped down version of BCPL <sil=0.351> ,COMMA created by Ken Thompson at Bell Labs <sil=0.438> ,COMMA that was also a compiled language - User's Reference to B <sil=0.482> ,COMMA used in early internal versions of the UNIX operating system <sil=0.970> .PERIOD As noted in Ritchie's C History: ”The B compiler on the PDP-7 did not generate machine instructions <sil=0.505> ,COMMA but instead 'threaded code' <sil=0.442> ,COMMA an interpretive scheme in which the compiler's output consists of a sequence of addresses of code fragments that perform the elementary operations <sil=0.916> .PERIOD The operations typically — in particular for B — act on a simple stack machine” <sil=0.977> .PERIOD Thompson and Dennis Ritchie <sil=0.355> ,COMMA also working at Bell Labs <sil=0.518> ,COMMA improved B and called the result NB <sil=0.983> .PERIOD Further extensions to NB created its logical successor <sil=0.578> ,COMMA C <sil=0.994> .PERIOD Most of UNIX was rewritten in NB <sil=0.598> ,COMMA and then C <sil=0.515> ,COMMA which resulted in a more portable operating system <sil=0.919> .PERIOD The portability of UNIX was the main reason for the initial popularity of both UNIX and C <sil=0.930> .PERIOD Rather than creating a new operating system for each new machine <sil=0.516> ,COMMA system programmers could simply write the few system-dependent parts required for the machine <sil=0.520> ,COMMA and then write a C compiler for the new system <sil=0.990> .PERIOD Since most of the system utilities were thus written in C <sil=0.498> ,COMMA it simply made sense to also write new utilities in C <sil=0.979> .PERIOD The American National Standards Institute began work on standardizing the C language in 1983 <sil=0.473> ,COMMA and completed the standard in 1989 <sil=0.995> .PERIOD The standard <sil=0.526> ,COMMA ANSI X3 <sil=0.926> .PERIOD 159-1989 ”Programming Language C” <sil=0.511> ,COMMA served as the basis for all implementations of C compilers <sil=0.969> .PERIOD The standards were later updated in 1990 and 1999 <sil=0.609> ,COMMA allowing for features that were either in common use <sil=0.629> ,COMMA or were appearing in C++ <sil=0.955> .PERIOD What you need before you can learn
Getting Started
The goal of this book is to introduce you to and teach you the C programming language <sil=0.948> .PERIOD Basic computer literacy is assumed <sil=0.331> ,COMMA but no special knowledge is needed <sil=0.919> .PERIOD Before you can start programming in C <sil=0.351> ,COMMA you will need a C compiler <sil=0.911> .PERIOD A compiler is a program that converts C code into executable machine code <sil=0.901> .PERIOD The minimum software requirements to program in C is a text editor18 <sil=0.647> ,COMMA as opposed to a word processor <sil=0.964> .PERIOD A plain text Notepad editor can be used but it does not offer any advanced capabilities such as syntax highlighting and code completion <sil=0.988> .PERIOD There are many text editors (see List of Text Editors) <sil=0.538> ,COMMA among the most popular are Notepad++21 for Windows as well as Atom <sil=0.416> ,COMMA Sublime Text <sil=0.551> ,COMMA gedit <sil=0.316> ,COMMA Vim and Emacs which are also available on other operating systems (“cross-platform”) <sil=0.921> .PERIOD These text editors come with syntax highlighting and line numbers <sil=0.377> ,COMMA which makes code easier to read at a glance <sil=0.508> ,COMMA and to spot syntax errors <sil=0.949> .PERIOD Though not absolutely needed <sil=0.597> ,COMMA many programmers prefer and recommend using an Integrated development environment (IDE) instead of a text editor <sil=0.959> .PERIOD An IDE is a suite of programs that developers need <sil=0.493> ,COMMA combined into one convenient package <sil=0.346> ,COMMA usually with a graphical user interface <sil=0.947> .PERIOD These programs include a text editor and file browser and are sometimes bundled with an easily accessible compiler <sil=0.964> .PERIOD They also typically include a debugger <sil=0.530> ,COMMA a tool that will enable you to do such things as step through the program you develop manually one source code line at a time <sil=0.503> ,COMMA or alter data as an aid to finding and correcting programming errors <sil=0.906> .PERIOD Many IDEs do not offer their users a console-based interface to the compiler and for executing the developed program but offer only graphical buttons <sil=0.950> .PERIOD For beginners it is recommended not to use such an IDE <sil=0.620> ,COMMA since it hides most of what is going on <sil=0.939> .PERIOD Using the command line builds up familiarity with the toolchain <sil=0.935> .PERIOD Such an IDE may still be useful to somebody with programming experience who knows how the IDE works <sil=0.937> .PERIOD So as a general guideline: Do not use an IDE unless you know what the IDE does <sil=0.906> !EXCLAMATIONMARK On GNU/Linux <sil=0.532> ,COMMA GCC is almost always included by default <sil=0.999> .PERIOD On Microsoft Windows <sil=0.518> ,COMMA Dev-C++ is recommended for beginners because it is easy to use <sil=0.617> ,COMMA free <sil=0.463> ,COMMA and simple to install <sil=0.961> .PERIOD Although the initial developer (Bloodshed) hasn’t updated it since 2005 <sil=0.580> ,COMMA a new version appeared in 2011 <sil=0.424> ,COMMA made by an independent programmer <sil=0.488> ,COMMA and is being actively developed <sil=0.993> .PERIOD An alternate option for those working only in the Windows environment is the proprietary Microsoft Visual Studio Express which is free of charge and has an excellent debugger <sil=0.912> .PERIOD On Mac OS X <sil=0.398> ,COMMA the Xcode IDE provides the compilers needed to compile various source files <sil=0.904> .PERIOD The newer versions do not include the command line tools <sil=0.942> .PERIOD They need to be downloaded via Xcode->Preferences->Downloads <sil=0.990> .PERIOD Using a Compiler
Dev-C++
Dev C++ is an Integrated Development Environment (IDE) for the C++ programming language <sil=0.610> ,COMMA available from Bloodshed Software <sil=0.938> .PERIOD An updated version is available at Orwell Dev-C++ <sil=0.936> .PERIOD C++ is a programming language which contains within itself most of the C language <sil=0.605> ,COMMA plus extensions <sil=0.902> .PERIOD Most C++ compilers will compile C programs <sil=0.333> ,COMMA sometimes with a few adjustments (like invoking them with a different name or command line switch) <sil=0.963> .PERIOD Therefore <sil=0.393> ,COMMA you can use Dev C++ for C development <sil=0.940> .PERIOD However <sil=0.420> ,COMMA Dev C++ is not the compiler <sil=0.937> .PERIOD It is designed to use the MinGW or Cygwin versions of GCC - both of which can be obtained as part of the Dev C++ package <sil=0.392> ,COMMA although they are completely different projects <sil=0.912> .PERIOD Dev C++ simply provides an editor <sil=0.629> ,COMMA syntax highlighting <sil=0.330> ,COMMA some facilities for the visualisation of code (like class and package browsing) and a graphical interface to the chosen compiler <sil=0.915> .PERIOD Because Dev C++ analyses the error messages produced by the compiler and attempts to distinguish the line numbers from the errors themselves <sil=0.542> ,COMMA the use of other compiler software is discouraged since the format of their error messages is likely to be different <sil=0.982> .PERIOD The latest version of Dev-C++ is a beta for version 5 <sil=0.967> .PERIOD However <sil=0.561> ,COMMA it still has a significant number of bugs <sil=0.911> .PERIOD All the features are there <sil=0.381> ,COMMA and it is quite usable <sil=0.920> .PERIOD It is considered one of the best free software C IDEs available for Windows <sil=0.945> .PERIOD A version of Dev C++ for Linux is in the pipeline <sil=0.904> .PERIOD It is not quite usable yet <sil=0.589> ,COMMA however <sil=0.975> .PERIOD Linux users already have a wealth of IDEs available <sil=0.917> .PERIOD (e <sil=0.979> .PERIOD g <sil=0.955> .PERIOD KDevelop and Anjuta) <sil=0.946> .PERIOD Most of the graphical text editors <sil=0.384> ,COMMA and other common editors such as emacs and vim <sil=0.416> ,COMMA support syntax highlighting <sil=0.936> .PERIOD GCC The GNU Compiler Collection (GCC) is a free/libre set of compilers developed by the Free Software Foundation <sil=0.950> .PERIOD Steps for Obtaining the GCC Compiler if You're on GNU/Linux On GNU/Linux <sil=0.458> ,COMMA Installing the GNU C Compiler can vary in method from distribution to distribution <sil=0.936> .PERIOD (Type in cc -v to see if it is installed already <sil=0.955> .PERIOD ) 
• For Ubuntu <sil=0.438> ,COMMA install the GCC compiler (along with other necessary tools) by using sudo apt-get install build-essential <sil=0.487> ,COMMA or by using Synaptic <sil=0.923> .PERIOD You do not need Universe enabled <sil=0.903> .PERIOD • For Debian <sil=0.342> ,COMMA install the GCC compiler (as root) by using apt-get install gcc <sil=0.956> .PERIOD • For Fedora Core <sil=0.440> ,COMMA install the GCC compiler (as root) by using yum install gcc <sil=0.907> .PERIOD • For Redhat <sil=0.431> ,COMMA get a GCC RPM <sil=0.509> ,COMMA e <sil=0.931> .PERIOD g <sil=0.988> .PERIOD using Rpmfind and then install (as root) using rpm -ivh gcc-version-release <sil=0.997> .PERIOD arch <sil=0.945> .PERIOD rpm 
• For Mandrake <sil=0.341> ,COMMA install the GCC compiler (as root) by using urpmi gcc 
• For Slackware <sil=0.555> ,COMMA the package is available on their website - simply download <sil=0.428> ,COMMA and type installpkg gcc-xxxxx <sil=0.941> .PERIOD tgz 
• For Gentoo <sil=0.580> ,COMMA you should already have GCC installed as it will have been used when you first installed <sil=0.919> .PERIOD To update it run (as root) emerge -uav gcc <sil=0.930> .PERIOD • For Arch Linux <sil=0.593> ,COMMA install the GCC compiler (as root) by using pacman -S gcc <sil=0.958> .PERIOD • If you cannot become root <sil=0.397> ,COMMA get the GCC tarball from ftp://ftp <sil=0.983> .PERIOD gnu <sil=0.991> .PERIOD org/ and follow the instructions in it to compile and install in your home directory <sil=0.951> .PERIOD Be warned though <sil=0.459> ,COMMA you need a C compiler to do that - yes <sil=0.585> ,COMMA GCC itself is written in C <sil=0.916> .PERIOD • You can use some commercial C compiler/IDE <sil=0.948> .PERIOD Steps for Obtaining the GCC Compiler if You're on BSD Family Systems
• For Mac OS X <sil=0.496> ,COMMA FreeBSD <sil=0.398> ,COMMA NetBSD <sil=0.519> ,COMMA OpenBSD <sil=0.392> ,COMMA DragonFly BSD <sil=0.613> ,COMMA Darwin the port of GNU gcc is available in the base system <sil=0.573> ,COMMA or it could be obtained using the ports collection or pkgsrc <sil=0.925> .PERIOD Steps for Obtaining the GCC Compiler if You're on Windows There are two ways to use GCC on Windows: Cygwin and MinGW <sil=0.920> .PERIOD Applications compiled with Cygwin will not run on any computer without Cygwin <sil=0.445> ,COMMA so MinGW is recommended <sil=0.970> .PERIOD MinGW is simpler to install <sil=0.454> ,COMMA and takes less disk space <sil=0.932> .PERIOD To get MinGW <sil=0.632> ,COMMA do this: 
1 Go to http://sourceforge <sil=0.979> .PERIOD net/projects/mingw/ download and save this to your hard drive <sil=0.970> .PERIOD 2 Once the download is finished <sil=0.381> ,COMMA open it and follow the instructions <sil=0.947> .PERIOD You can also choose to install additional compilers <sil=0.443> ,COMMA or the tool Make <sil=0.560> ,COMMA but these aren't necessary <sil=0.902> .PERIOD 3 Now you need to set your PATH <sil=0.976> .PERIOD Right-click on ”My computer” and click ”Properties” <sil=0.932> .PERIOD Go to the ”Advanced” tab and click on ”Environment variables” <sil=0.947> .PERIOD Go to the ”System variables” section and scroll down until you see ”Path” <sil=0.981> .PERIOD Click on it <sil=0.619> ,COMMA then click ”edit” <sil=0.962> .PERIOD Add ” <sil=0.501> ;SEMICOLON C:\mingw\bin\” (without the quotes) to the end <sil=0.935> .PERIOD 4 To test if GCC works <sil=0.521> ,COMMA open a command prompt and type ”gcc” <sil=0.968> .PERIOD You should get the message ”gcc: fatal error: no input files compilation terminated” <sil=0.991> .PERIOD If you get this message <sil=0.573> ,COMMA GCC is installed correctly <sil=0.933> .PERIOD To get Cygwin <sil=0.515> ,COMMA do this: 
1 Go to http://www <sil=0.946> .PERIOD cygwin <sil=0.976> .PERIOD com and click on the ”Install Cygwin Now” button in the upper right corner of the page <sil=0.991> .PERIOD 2 Click ”run” in the window that pops up <sil=0.362> ,COMMA and click ”next” several times <sil=0.650> ,COMMA accepting all the default settings <sil=0.989> .PERIOD 3 Choose any of the Download sites (”ftp <sil=0.963> .PERIOD easynet <sil=0.959> .PERIOD be” <sil=0.440> ,COMMA etc <sil=0.991> .PERIOD ) when that window comes up <sil=0.499> ;SEMICOLON press ”next” and the Cygwin installer should start downloading <sil=0.921> .PERIOD 4 When the ”Select Packages” window appears <sil=0.580> ,COMMA scroll down to the heading ”Devel” and click on the ”+” by it <sil=0.964> .PERIOD In the list of packages that now displays <sil=0.634> ,COMMA scroll down and find the ”gcc-core” package <sil=0.478> ;SEMICOLON this is the compiler <sil=0.950> .PERIOD Click once on the word ”Skip” <sil=0.535> ,COMMA and it should change to some number like ”3 <sil=0.968> .PERIOD 4” etc <sil=0.995> .PERIOD (the version number) <sil=0.396> ,COMMA and an ”X” will appear next to ”gcc-core” and several other related packages that will now be downloaded <sil=0.990> .PERIOD 5 Click ”next” and the compiler as well as the Cygwin tools should start downloading <sil=0.584> ;SEMICOLON this could take a while <sil=0.993> .PERIOD While you're waiting for the installation to finish <sil=0.320> ,COMMA download any text-editor designed for programming <sil=0.955> .PERIOD While Cygwin does include some <sil=0.417> ,COMMA you may prefer doing a web search to find other alternatives <sil=0.917> .PERIOD While using a stock text editor is possible <sil=0.556> ,COMMA it is not ideal <sil=0.923> .PERIOD 6 Once the Cygwin downloads are finished and you have clicked ”next” <sil=0.548> ,COMMA etc <sil=0.921> .PERIOD to finish the installation <sil=0.311> ,COMMA double-click the Cygwin icon on your desktop to begin the Cygwin ”command prompt” <sil=0.957> .PERIOD Your home directory will automatically be set up in the Cygwin folder <sil=0.388> ,COMMA which now should be at ”C:\cygwin” (the Cygwin folder is in some ways like a small unix/linux computer on your Windows machine -- not technically of course <sil=0.565> ,COMMA but it may be helpful to think of it that way) <sil=0.986> .PERIOD 7 Type ”gcc” at the Cygwin prompt and press ”enter” <sil=0.306> ;SEMICOLON if ”gcc: no input files” or something like it appears you have succeeded and now have the gcc compiler on your computer (and congratulations -- you have also just received your first error message <sil=0.985> !EXCLAMATIONMARK ) <sil=0.384> .PERIOD The current stable (usable) version of GCC is 4 <sil=0.946> .PERIOD 9 <sil=0.968> .PERIOD 1 published on 2014-07-16 <sil=0.524> ,COMMA which supports several platforms <sil=0.958> .PERIOD In fact <sil=0.647> ,COMMA GCC is not only a C compiler <sil=0.562> ,COMMA but a family of compilers for several languages <sil=0.527> ,COMMA such as C++ <sil=0.555> ,COMMA Ada <sil=0.398> ,COMMA Java <sil=0.630> ,COMMA and Fortran <sil=0.941> .PERIOD Embedded systems
• Most CPUs are microcontrollers in embedded systems <sil=0.378> ,COMMA often programmed in C <sil=0.513> ,COMMA but most of the compilers mentioned above (except GCC) do not support such CPUs <sil=0.952> .PERIOD For specialized compilers that do support embedded systems <sil=0.511> ,COMMA see Embedded Systems/C Programming <sil=0.972> .PERIOD Other C compilers
We have a long list of C compilers in a much later section of this Wikibook <sil=0.960> .PERIOD Which of those compilers would be suitable for beginning C programmers <sil=0.548> ,COMMA that we should say a few words about getting started with that particular compiler in this section of this Wikibook <sil=0.859> ?QUESTIONMARK Beginning C
Intro exercise
The ”Hello <sil=0.399> ,COMMA World <sil=0.950> !EXCLAMATIONMARK ” Program 
Tradition dictates that we begin with a very simple program <sil=0.324> ,COMMA which simply displays the characters ”Hello <sil=0.520> ,COMMA World <sil=0.901> !EXCLAMATIONMARK ” on the screen and immediately exits <sil=0.958> .PERIOD Type the following source code in your preferred text editor/IDE and save this in a file named hello <sil=0.952> .PERIOD c <sil=0.951> .PERIOD #include <stdio <sil=0.911> .PERIOD h>
int main(void) 
{
printf("Hello <sil=0.471> ,COMMA World <sil=0.952> !EXCLAMATIONMARK \n") <sil=0.399> ;SEMICOLON return 0 <sil=0.606> ;SEMICOLON }
Source code analysis
Below are described the parts the program is composed of <sil=0.930> .PERIOD The various details will be introduced and explained in later chapters <sil=0.919> .PERIOD #include <stdio <sil=0.933> .PERIOD h>
This is a preprocessor directive <sil=0.948> .PERIOD Preprocessor directives instruct a part of the compiler - the preprocessor - to modify the code we've written before it is compiled <sil=0.909> .PERIOD In this case <sil=0.508> ,COMMA the #include directive is retrieving C code from the standard stdio <sil=0.960> .PERIOD h file <sil=0.940> .PERIOD Files used in this way are called header files and are saved with the <sil=0.981> .PERIOD h extension <sil=0.932> .PERIOD In this program <sil=0.632> ,COMMA the only part we needed from stdio <sil=0.917> .PERIOD h is the printf function <sil=0.955> .PERIOD int main(void)
The function named main is the starting point of all C programs <sil=0.959> .PERIOD In computer science <sil=0.650> ,COMMA the term function tends to be used a bit more loosely than in mathematics <sil=0.472> ,COMMA since functions often express imperative ideas (as in the case of C) - that is <sil=0.459> ,COMMA how-to processes instead of declarations <sil=0.972> .PERIOD For now <sil=0.625> ,COMMA it suffices to say that functions let us define a complex process that we want to reference frequently <sil=0.913> .PERIOD printf("Hello World <sil=0.910> !EXCLAMATIONMARK \n") <sil=0.355> ;SEMICOLON This line is of particular interest <sil=0.485> ,COMMA because it produces the actual output on the console (also known as the terminal in the context of Unix-like operating systems) <sil=0.511> ,COMMA a traditional text based interface to system utilities and programs <sil=0.933> .PERIOD return 0 <sil=0.383> ;SEMICOLON Finally <sil=0.500> ,COMMA we consider this line <sil=0.981> .PERIOD When terminating our program <sil=0.442> ,COMMA it is useful to be able to let the operating system know whether or not the program succeeded <sil=0.931> .PERIOD We do this with an exit status <sil=0.581> ,COMMA which we send to the operating system with a return statement in the main function <sil=0.960> .PERIOD In this case <sil=0.602> ,COMMA we provide an exit status of 0 to indicate that execution succeeded without error <sil=0.969> .PERIOD As our programs grow in complexity <sil=0.587> ,COMMA we can use other integers as codes to indicate various types of errors <sil=0.987> .PERIOD This style of providing exit statuses is a long standing convention <sil=0.957> .PERIOD Compiling
Unix-like
If you are using a Unix(-like) system <sil=0.574> ,COMMA such as GNU/Linux <sil=0.460> ,COMMA Mac OS X <sil=0.528> ,COMMA or Solaris <sil=0.431> ,COMMA it will probably have GCC installed <sil=0.919> .PERIOD Open the virtual console or a terminal emulator and enter the following:
gcc hello <sil=0.922> .PERIOD c
Then run the program by typing: <sil=0.909> .PERIOD /a <sil=0.923> .PERIOD out
You should see Hello <sil=0.609> ,COMMA World <sil=0.954> !EXCLAMATIONMARK printed after the last prompt <sil=0.924> .PERIOD To see the exit status of the last program you ran <sil=0.313> ,COMMA type:
echo $ <sil=0.990> ?QUESTIONMARK This shows the value the main function has returned <sil=0.617> ,COMMA which is 0 in the above example <sil=0.932> .PERIOD There are a lot of options you can use with the gcc compiler <sil=0.910> .PERIOD For example <sil=0.441> ,COMMA if you want the output to have a name other than a <sil=0.916> .PERIOD out <sil=0.388> ,COMMA you can use the -o option <sil=0.957> .PERIOD The following shows a few examples:
-o
indicates that the next parameter is the name of the resulting program (or library) <sil=0.945> .PERIOD If this option is not specified <sil=0.390> ,COMMA the compiled program will <sil=0.336> ,COMMA for historic reasons <sil=0.336> ,COMMA end up in a file called ”a <sil=0.988> .PERIOD out” or ”a <sil=0.943> .PERIOD exe” (for cygwin users) <sil=0.940> .PERIOD -Wall
indicates that gcc should warn about many types of suspicious code that are likely to be incorrect <sil=1.000> .PERIOD You can use these options to create a program called ”helloworld” instead of ”a <sil=0.979> .PERIOD out” by typing:
gcc -o helloworld hello <sil=0.938> .PERIOD c -Wall
Now you can run it by typing: <sil=0.987> .PERIOD /helloworld
All the options are well documented in the manual for GCC <sil=0.953> .PERIOD On IDEs
If you are using an IDE you may have to select console project <sil=0.636> ,COMMA and to compile you just select build from the menu or the toolbar <sil=0.970> .PERIOD The executable will appear inside the project folder <sil=0.363> ,COMMA but you should have a menu button so you can just run the executable from the IDE <sil=0.982> .PERIOD The process is roughly the same on all IDEs <sil=0.985> .PERIOD Preliminaries
Before learning C syntax and programming constructs <sil=0.606> ,COMMA it is important to learn the meaning of a few key terms that are central in understanding C <sil=0.909> .PERIOD Block Structure <sil=0.637> ,COMMA Statements <sil=0.402> ,COMMA Whitespace <sil=0.391> ,COMMA and Scope
Note: Sentences delimited with '/*' and '*/' are comments <sil=0.400> ,COMMA and the compiler ignores them <sil=0.951> .PERIOD They are described in Programming Structure and Style <sil=0.924> .PERIOD Now we are about to discuss the basic structure of a C program <sil=0.976> .PERIOD If you're familiar with PASCAL <sil=0.524> ,COMMA you may have heard it referred to as a block-structured language <sil=0.996> .PERIOD C does not have complete block structure (and you'll find out why when you go over functions in detail) but it is still very important to understand what blocks are and how to use them <sil=0.914> .PERIOD So what is in a block <sil=0.892> ?QUESTIONMARK Generally <sil=0.329> ,COMMA a block consists of executable statements <sil=0.921> .PERIOD Before blocks are explained <sil=0.397> ,COMMA what is a statement <sil=0.989> ?QUESTIONMARK One way to put it is that statements are the text the compiler will attempt to turn into executable instructions <sil=0.348> ,COMMA and the whitespace that surrounds them <sil=0.998> .PERIOD An easier way to put it is that statements are bits of code that do things <sil=0.326> ,COMMA like this:
int i = 6 <sil=0.313> ;SEMICOLON This declares a variable of type integer <sil=0.316> ,COMMA initializes it to the value 6 <sil=0.390> ,COMMA which can be later accessed with the identifier 'i' <sil=0.903> .PERIOD The various data types are introduced in the chapter Variables <sil=0.966> .PERIOD You might have noticed the semicolon at the end of the statement <sil=0.909> .PERIOD Statements in C always end with a semicolon ( <sil=0.559> ;SEMICOLON ) character <sil=0.900> .PERIOD Leaving off the semicolon is a common mistake that a lot of people make <sil=0.372> ,COMMA beginners and experts alike <sil=0.862> !EXCLAMATIONMARK So until it becomes second nature <sil=0.482> ,COMMA be sure to double check your statements <sil=0.925> !EXCLAMATIONMARK Since C is a ”free-format” language <sil=0.445> ,COMMA several statements can share a single line in the source file <sil=0.466> ,COMMA like so:
/* this declares the variables 'i' <sil=0.396> ,COMMA 'test' <sil=0.348> ,COMMA 'foo' <sil=0.557> ,COMMA and 'bar' note that ONLY 'bar' is set to six <sil=0.934> !EXCLAMATIONMARK */ 
int i <sil=0.483> ,COMMA test <sil=0.420> ,COMMA foo <sil=0.360> ,COMMA bar = 6 <sil=0.321> ;SEMICOLON There are several kinds of statements <sil=0.635> ,COMMA and you've seen some of them <sil=0.426> ,COMMA such as the assignment (i = 6 <sil=0.369> ;SEMICOLON ) <sil=0.453> .PERIOD A substantial portion of this book deals with statement construction <sil=0.927> .PERIOD Now back to blocks <sil=0.913> .PERIOD In C <sil=0.533> ,COMMA blocks begin with an opening brace "{" and end with a closing brace "}" <sil=0.946> .PERIOD Blocks can contain other blocks which can contain their own blocks <sil=0.630> ,COMMA and so on <sil=0.963> .PERIOD Let's show an example of blocks <sil=0.953> .PERIOD int main(void) 
{ /* this is a 'block' */ 
int i = 5 <sil=0.563> ;SEMICOLON { 
/* this is also a 'block' <sil=0.476> ,COMMA nested inside the outer block */ 
int i = 6 <sil=0.302> ;SEMICOLON } 
return 0 <sil=0.362> ;SEMICOLON }
You can use blocks with preceding statements <sil=0.304> ,COMMA such as the main function declaration (and other statements to be taught) <sil=0.490> ,COMMA but you can also use blocks by themselves <sil=0.994> .PERIOD Whitespace refers to the tab <sil=0.466> ,COMMA space and newline characters that separate the text characters that make up the source code <sil=0.921> .PERIOD Like many things in life <sil=0.404> ,COMMA it's hard to appreciate whitespace until it's gone <sil=0.923> .PERIOD To a C compiler <sil=0.405> ,COMMA the source code
printf("Hello world") <sil=0.574> ;SEMICOLON return 0 <sil=0.521> ;SEMICOLON is the same as 
printf("Hello world") <sil=0.547> ;SEMICOLON return 0 <sil=0.575> ;SEMICOLON which is also the same as 
printf ( "Hello world") <sil=0.549> ;SEMICOLON return 0 <sil=0.538> ;SEMICOLON The compiler simply ignores most whitespace (except when it separates e <sil=0.960> .PERIOD g <sil=0.932> .PERIOD return from 0) <sil=0.954> .PERIOD However <sil=0.542> ,COMMA it is common practice to use spaces (or tabs) to organize source code for human readability <sil=0.926> .PERIOD Most of the time we do not want other functions or other programmer's routines accessing data that we are currently manipulating <sil=0.986> .PERIOD This is why it is important to understand the concept of scope <sil=0.907> .PERIOD Scopes describes the level at which a piece of data or a function is visible <sil=0.902> .PERIOD There are two kinds of scopes in C <sil=0.467> ,COMMA local and global <sil=0.970> .PERIOD When we speak of something being global <sil=0.455> ,COMMA we speak of something that can be seen or manipulated from anywhere in the program <sil=0.982> .PERIOD When we speak of something being local <sil=0.503> ,COMMA we speak of something that can be seen or manipulated only within the block it was declared <sil=0.920> .PERIOD Let's show some examples <sil=0.444> ,COMMA to give a better picture of the idea of scopes <sil=0.956> .PERIOD int i = 5 <sil=0.477> ;SEMICOLON /* this is a 'global' variable <sil=0.394> ,COMMA it can be accessed from anywhere in the program */ 
/* this is a function <sil=0.326> ,COMMA all variables inside of it are "local" to the function <sil=0.966> .PERIOD */
int main(void) 
{ 
int i = 6 <sil=0.534> ;SEMICOLON /* 'i' now equals 6 */ printf("%d\n" <sil=0.317> ,COMMA i) <sil=0.317> ;SEMICOLON /*prints a '6' to the screen <sil=0.352> ,COMMA instead of the global variable of 'i' <sil=0.389> ,COMMA which is 5 */
 return 0 <sil=0.475> ;SEMICOLON }
That shows a decent example of local and global <sil=0.556> ,COMMA but what about different scopes inside of functions <sil=0.858> ?QUESTIONMARK (you'll learn more about functions later <sil=0.593> ,COMMA for now <sil=0.597> ,COMMA just focus on the ”main” part <sil=0.925> .PERIOD )
/* the main function */ 
int main(void)
{ 
/* this is the beginning of a 'block' <sil=0.393> ,COMMA you read about those above */
int i = 6 <sil=0.603> ;SEMICOLON /* this is the first variable of this 'block' <sil=0.406> ,COMMA 'i' */
{ 
/* this is a new 'block' <sil=0.327> ,COMMA and because it's a different block <sil=0.581> ,COMMA it has its own scope */
/* this is also a variable called 'i' <sil=0.620> ,COMMA but in a different 'block' <sil=0.554> ,COMMA because it's in a different 'block' than the old 'i' <sil=0.622> ,COMMA it doesn't affect the old one <sil=1.000> !EXCLAMATIONMARK */
int i = 5 <sil=0.491> ;SEMICOLON printf("%d\n" <sil=0.543> ,COMMA i) <sil=0.649> ;SEMICOLON /* prints a '5' onto the screen */
} 
/* now we're back into the old block */
printf("%d\n" <sil=0.384> ,COMMA i) <sil=0.446> ;SEMICOLON /* prints a '6' onto the screen */ 
return 0 <sil=0.554> ;SEMICOLON }
Basics of Using Functions
Functions are a big part of programming <sil=0.980> .PERIOD A function is a special kind of block that performs a well-defined task <sil=0.909> .PERIOD If a function is well-designed <sil=0.472> ,COMMA it can enable a programmer to perform a task without knowing anything about how the function works <sil=0.942> .PERIOD The act of requesting a function to perform its task is called a function call <sil=0.927> .PERIOD Many functions require a caller to hand it certain pieces of data needed to perform its task <sil=0.606> ;SEMICOLON these are called arguments <sil=0.950> .PERIOD Many functions also return a value to the caller when they're finished <sil=0.333> ;SEMICOLON this is called a return value (the return value in the above program is 0) <sil=0.986> .PERIOD The things you need to know before calling a function are: 
• What the function does 
• The data type (discussed later) of the arguments and what they mean 
• The data type of the return value and what it means
Many functions use the return value for the result of a computation <sil=0.989> .PERIOD Some functions use the return value to indicate whether they successfully completed their work <sil=0.928> .PERIOD As you have seen in the intro exercise <sil=0.492> ,COMMA the main function uses the return value to provide an exit status to the operating system <sil=0.909> .PERIOD All code other than global data definitions and declarations needs to be a part of a function <sil=0.944> .PERIOD Usually <sil=0.502> ,COMMA you're free to call a function whatever you wish to <sil=0.934> .PERIOD The only restriction is that every executable program needs to have one <sil=0.313> ,COMMA and only one <sil=0.588> ,COMMA main function <sil=0.360> ,COMMA which is where the program begins executing <sil=0.961> .PERIOD We will discuss functions in more detail in a later chapter <sil=0.485> ,COMMA C Programming/Procedures and functions <sil=0.952> .PERIOD The Standard Library
In 1983 <sil=0.561> ,COMMA when C was in the process of becoming standardized <sil=0.333> ,COMMA the American National Standards Institute (ANSI) formed a committee to establish a standard specification of C known as ”ANSI C” <sil=0.962> .PERIOD That standard specification created a basic set of functions common to each implementation of C <sil=0.396> ,COMMA which is referred to as the Standard Library <sil=0.946> .PERIOD The Standard Library provides functions for tasks such as input/output <sil=0.392> ,COMMA string manipulation <sil=0.528> ,COMMA mathematics <sil=0.565> ,COMMA files <sil=0.592> ,COMMA and memory allocation <sil=0.912> .PERIOD The Standard Library does not provide functions that are dependent on specific hardware or operating systems <sil=0.537> ,COMMA like graphics <sil=0.319> ,COMMA sound <sil=0.496> ,COMMA or networking <sil=0.916> .PERIOD In the ”Hello <sil=0.393> ,COMMA World” program <sil=0.600> ,COMMA a Standard Library function is used (printf) which outputs lines of text to the standard output stream <sil=0.924> .PERIOD Compiling
Having covered the basic concepts of C programming <sil=0.340> ,COMMA we can now briefly discuss the process of compilation <sil=0.970> .PERIOD Like any programming language <sil=0.421> ,COMMA C by itself is completely incomprehensible to a microprocessor <sil=0.950> .PERIOD Its purpose is to provide an intuitive way for humans to provide instructions that can be easily converted into machine code that is comprehensible to a microprocessor <sil=0.959> .PERIOD The compiler is what takes this code <sil=0.354> ,COMMA and translates it into the machine code <sil=0.969> .PERIOD To those new to programming <sil=0.596> ,COMMA this seems fairly simple <sil=0.955> .PERIOD A naive compiler might read in every source file <sil=0.350> ,COMMA translate everything into machine code <sil=0.568> ,COMMA and write out an executable <sil=0.993> .PERIOD This could work <sil=0.563> ,COMMA but has two serious problems <sil=0.996> .PERIOD First <sil=0.374> ,COMMA for a large project <sil=0.477> ,COMMA the computer may not have enough memory to read all of the source code at once <sil=0.934> .PERIOD Second <sil=0.473> ,COMMA if you make a change to a single source file <sil=0.472> ,COMMA you would rather not have to recompile the entire application <sil=0.971> .PERIOD To deal with these problems <sil=0.572> ,COMMA compilers break their job down into steps <sil=0.351> ;SEMICOLON for each source file (each <sil=0.917> .PERIOD c file) <sil=0.352> ,COMMA the compiler reads the file <sil=0.336> ,COMMA reads the files it references with #include <sil=0.552> ,COMMA and translates it to machine code <sil=0.978> .PERIOD The result of this is an ”object file” ( <sil=0.964> .PERIOD o) <sil=0.910> .PERIOD Once every object file is made <sil=0.347> ,COMMA a ”linker” collects all of the object files and writes the actual program <sil=0.990> .PERIOD This way <sil=0.576> ,COMMA if you change one source file <sil=0.309> ,COMMA only that file needs to be recompiled and then the application needs to be re-linked <sil=0.924> .PERIOD Without going into the painful details <sil=0.424> ,COMMA it can be beneficial to have a superficial understanding of the compilation process <sil=0.964> .PERIOD Preprocessor
The preprocessor provides the ability for the inclusion of header files <sil=0.559> ,COMMA macro expansions <sil=0.409> ,COMMA conditional compilation <sil=0.307> ,COMMA and line control <sil=0.991> .PERIOD Many times you will need to give special instructions to your compiler <sil=0.962> .PERIOD This is done by inserting preprocessor directives2 into your code <sil=0.984> .PERIOD When you begin compiling your code <sil=0.609> ,COMMA a special program called the preprocessor scans the source code and performs simple substitution of tokenized strings for others according to predefined rules <sil=0.939> .PERIOD The C preprocessor is not a part of the C language <sil=0.922> .PERIOD All preprocessor directives begin with the hash character (#) <sil=0.938> .PERIOD You can see one preprocessor directive in the Hello world program3 <sil=0.964> .PERIOD Example: 
#include <stdio <sil=0.918> .PERIOD h>
This directive causes the header to be included into your program <sil=0.937> .PERIOD Other directives such as #pragma control compiler settings and macros <sil=0.905> .PERIOD The result of the preprocessing stage is a text string <sil=0.985> .PERIOD You can think of the preprocessor as a non-interactive text editor that prepares your code for the compilation step <sil=0.947> .PERIOD The language of preprocessor directives is agnostic to the grammar of C <sil=0.379> ,COMMA so the C preprocessor can also be used independently to process other kinds of text files <sil=0.971> .PERIOD Syntax Checking 
This step ensures that the code is valid and will sequence into an executable program <sil=0.912> .PERIOD Under most compilers <sil=0.540> ,COMMA you may get messages or warnings indicating potential issues with your program (such as a conditional statement always being true or false <sil=0.523> ,COMMA etc <sil=0.941> .PERIOD ) 
When an error is detected in the program <sil=0.464> ,COMMA the compiler will normally report the file name and line that is preventing compilation <sil=0.962> .PERIOD Object Code 
The compiler produces a machine code equivalent of the source code that can then be linked into the final program <sil=0.988> .PERIOD The code itself can't be executed yet <sil=0.372> ,COMMA as it has to complete the linking stage <sil=0.964> .PERIOD It's important to note after discussing the basics that compilation is a ”one way street” <sil=0.997> .PERIOD That is <sil=0.557> ,COMMA compiling a C source file into machine code is easy <sil=0.327> ,COMMA but ”decompiling” (turning machine code into the C source that creates it) is not <sil=0.902> .PERIOD Decompilers for C do exist <sil=0.494> ,COMMA but the code they create is hard to understand and only useful for reverse engineering <sil=0.937> .PERIOD Linking 
Linking combines the separate object codes into one complete program by integrating libraries and the code and producing either an executable program6 or a library <sil=0.923> .PERIOD Linking is performed by a linker <sil=0.346> ,COMMA which is often part of a compiler <sil=0.940> .PERIOD Common errors during this stage are either missing functions <sil=0.488> ,COMMA or duplicate functions <sil=0.940> .PERIOD Automation 
For large C projects <sil=0.585> ,COMMA many programmers choose to automate compilation <sil=0.558> ,COMMA both in order to reduce user interaction requirements and to speed up the process by only recompiling modified files <sil=0.990> .PERIOD Most integrated development environments have some kind of project management <sil=0.404> ,COMMA which makes such automation very easy <sil=0.924> .PERIOD However <sil=0.558> ,COMMA the project management files are often only usable for users of the same integrated development environment <sil=0.612> ,COMMA so all developers would need to use the same IDE <sil=0.981> .PERIOD On UNIX-like systems <sil=0.645> ,COMMA make and Makefiles are often used to accomplish the same <sil=0.938> .PERIOD Make is traditional and flexible and is available as one of the standard developer tools on most Unix and GNU distributions <sil=0.926> .PERIOD Makefiles have been extended by the GNU Autotools <sil=0.606> ,COMMA composed of Automake and Autoconf for making software compilable <sil=0.630> ,COMMA testable <sil=0.385> ,COMMA translatable and configurable on many different kinds of machines <sil=0.983> .PERIOD Automake and Autoconf are described in detail in their respective manuals <sil=0.977> .PERIOD The Autotools are often perceived to be complicated and various simpler build systems have been developed <sil=0.990> .PERIOD Many components of the GNOME project12 now use the declarative Meson build system13 which is less flexible but instead focuses on providing the features most commonly needed from a build system in a simple way <sil=0.998> .PERIOD Other popular build systems for programs written in the C language include CMake14 and Waf15 <sil=0.973> .PERIOD Once gcc is installed <sil=0.383> ,COMMA it can be called with a list of c source files that have been written but not yet compiled <sil=0.974> .PERIOD eg <sil=0.997> .PERIOD there is a main <sil=0.902> .PERIOD c file that includes some functions described in myfun <sil=0.922> .PERIOD h and implemented in myfun_a <sil=0.934> .PERIOD c and myfun_b <sil=0.957> .PERIOD c <sil=0.618> ,COMMA then it is enough to write 
gcc main <sil=0.930> .PERIOD c myfun_a <sil=0.935> .PERIOD c myfun_b <sil=0.922> .PERIOD c
myfun <sil=0.926> .PERIOD h is included in main <sil=0.925> .PERIOD c <sil=0.975> ,COMMA but if is in a separate header files directory <sil=0.606> ,COMMA then that directory can be listed after a ”-I ” switch <sil=0.908> .PERIOD In larger programs <sil=0.309> ,COMMA Makefiles and gnu make program can compile c files into intermediate files ending with suffix <sil=1.000> .PERIOD o which can be linked by gcc <sil=0.904> .PERIOD How to compile each object file is usually described in the Makefile with the object file as a label ending with a colon followed by two spaces (tabs are often bad characters) followed by a list of other files that are dependencies <sil=0.373> ,COMMA eg <sil=0.971> .PERIOD  <sil=0.987> .PERIOD c files and <sil=0.941> .PERIOD o files compiled in another section <sil=0.596> ,COMMA and on the next line <sil=0.355> ,COMMA the invocation of gcc that is required <sil=0.928> .PERIOD Typing man make or info make often gives the information needed to jog the memory on how to use make <sil=0.367> ,COMMA and the same goes for gcc <sil=0.605> ,COMMA although gcc has a lot of option switches <sil=0.648> ,COMMA the main ones being -g to generate debugging for gdb to allow it to show source code during stepping through of the machine code program <sil=0.993> .PERIOD gdb has a 'h' command that shows what it can do <sil=0.416> ,COMMA and is usually started with 'gdb a <sil=0.903> .PERIOD out' if a <sil=0.937> .PERIOD out is the anonymous executable machine code file that was compiled by gcc <sil=0.927> .PERIOD Structure and style
C Structure and Style 
This is a basic introduction to a good code style in the C Programming Language <sil=0.979> .PERIOD It is designed to provide information on how to effectively use indentation <sil=0.428> ,COMMA comments <sil=0.544> ,COMMA and other elements that will make your C code more readable <sil=0.944> .PERIOD It is not a tutorial on actually programming in C <sil=0.986> .PERIOD As a beginning programmer <sil=0.548> ,COMMA the point of creating structure in the programs' code might not be clear <sil=0.533> ,COMMA as the compiler doesn't care about the difference <sil=0.940> .PERIOD However <sil=0.578> ,COMMA as programs become complex <sil=0.509> ,COMMA chances are that writing the program has become a joint effort <sil=0.958> .PERIOD (Or others might want to see how it was accomplished <sil=0.905> .PERIOD Or you may have to read it again years later <sil=0.981> .PERIOD )
Wellwritten code also helps you get an overview of what the code does <sil=0.983> .PERIOD Therefore <sil=0.488> ,COMMA the code is no longer designed purely for a compiler to read <sil=0.931> .PERIOD In the following sections <sil=0.529> ,COMMA we will attempt to explain good programming practices that will in turn make your programs clearer <sil=0.951> .PERIOD Introduction In C <sil=0.389> ,COMMA programs are composed of statements <sil=0.978> .PERIOD These statements are terminated with a semicolon <sil=0.448> ,COMMA and are collected in sections known as functions <sil=0.943> .PERIOD By convention <sil=0.313> ,COMMA a statement should be kept on its own line <sil=0.519> ,COMMA as shown in the example below: 
#include <stdio <sil=0.991> .PERIOD h> 
int main(void) 
{ 
printf("Hello <sil=0.571> ,COMMA World <sil=0.866> !EXCLAMATIONMARK \n") <sil=0.452> ;SEMICOLON return 0 <sil=0.324> ;SEMICOLON } 
The following block of code is essentially the same: while it contains exactly the same code <sil=0.630> ,COMMA and will compile and execute with the same result <sil=0.530> ,COMMA the removal of spacing causes an essential difference <sil=0.510> ,COMMA making it harder to read: 
#include <stdio <sil=0.992> .PERIOD h>
int main(void) 
{
printf("Hello <sil=0.620> ,COMMA World <sil=0.977> !EXCLAMATIONMARK \n") <sil=0.622> ;SEMICOLON return 0 <sil=0.460> ;SEMICOLON } 
The simple use of indents and line breaks can greatly improve the readability of the code <sil=0.409> ;SEMICOLON without making any impact whatsoever on how the code performs <sil=0.975> .PERIOD By having readable code <sil=0.376> ,COMMA it is much easier to see where functions and procedures end <sil=0.451> ,COMMA and which lines are part of which loops and procedures <sil=0.996> .PERIOD This lesson is going to focus on improving the coding style of an example piece of code which applies a formula and prints the result <sil=0.996> .PERIOD You will later see how to write code for such tasks in more detail <sil=0.329> ,COMMA but for now you should focus on how the code looks and not on what it does <sil=0.908> .PERIOD Line Breaks and Indentation 
The addition of white space inside your code is arguably the most important part of good code structure <sil=0.915> .PERIOD Effective use of white space can create a visual scale of how your code flows <sil=0.303> ,COMMA which can be very important when returning to your code when you want to maintain it <sil=0.940> .PERIOD Line Breaks
With minimal line breaks <sil=0.437> ,COMMA code is barely readable by humans <sil=0.317> ,COMMA and may be hard to debug or understand: 
1 #include <stdio <sil=0.953> .PERIOD h>
2 int main(void) { int revenue = 80 <sil=0.446> ;SEMICOLON int cost = 50 <sil=0.381> ;SEMICOLON int roi <sil=0.578> ;SEMICOLON roi = (100 * (revenue - cost)) / cost <sil=0.358> ;SEMICOLON 3 if (roi >= 0) { printf ("%d\n" <sil=0.540> ,COMMA roi) <sil=0.467> ;SEMICOLON } return 0 <sil=0.643> ;SEMICOLON } 
Rather than putting everything on one line <sil=0.550> ,COMMA it is much more readable to break up long lines so that each statement and declaration goes on its own line <sil=0.988> .PERIOD After inserting line breaks <sil=0.391> ,COMMA the code will look like this: 
1 #include <stdio <sil=0.920> .PERIOD h>
2 int main(void) { 
3 int revenue = 80 <sil=0.363> ;SEMICOLON 4 int cost = 50 <sil=0.369> ;SEMICOLON 5 int roi <sil=0.592> ;SEMICOLON 6 roi = (100 * (revenue - cost)) / cost <sil=0.436> ;SEMICOLON 7 if (roi >= 0) { 
8 printf ("%d\n" <sil=0.370> ,COMMA roi) <sil=0.312> ;SEMICOLON 9 } 
10 return 0 <sil=0.317> ;SEMICOLON 11 }
Blank Lines 
Blank lines should be used to offset the main components of your code <sil=0.984> .PERIOD Always use them 
• After precompiler declarations <sil=0.970> .PERIOD • After new variables are declared <sil=0.945> .PERIOD • Use your own judgment for finding other places where components should be separated <sil=0.946> .PERIOD Based on these two rules <sil=0.323> ,COMMA there should now be at least two line breaks added <sil=0.918> .PERIOD • After line 1 <sil=0.366> ,COMMA because line 1 has a preprocessor directive <sil=0.998> .PERIOD • After line 5 <sil=0.401> ,COMMA because line 5 contains a variable declaration <sil=0.951> .PERIOD This will make the code much more readable than it was before: 
The following lines of code have line breaks between functions <sil=0.412> ,COMMA but without indentation <sil=0.923> .PERIOD 1 #include 
2 
3 int main(void) { 
4 
5 int revenue = 80 <sil=0.483> ;SEMICOLON 6 int cost = 50 <sil=0.444> ;SEMICOLON 7 
8 int roi <sil=0.328> ;SEMICOLON 9 
10 roi = (100 * (revenue - cost)) / cost <sil=0.459> ;SEMICOLON 11 
12 if (roi >= 0) { 
13 printf ("%d\n" <sil=0.315> ,COMMA roi) <sil=0.639> ;SEMICOLON 14 } 
15 
16 return 0 <sil=0.614> ;SEMICOLON 17 } 
But this still isn't as readable as it can be <sil=0.941> .PERIOD Indentation
Note: Many text editors automatically indent appropriately when you hit the enter/return key <sil=0.904> .PERIOD Although adding simple line breaks between key blocks of code can make code easier to read <sil=0.433> ,COMMA it provides no information about the block structure of the program <sil=0.960> .PERIOD Using the tab key can be very helpful now: indentation visually separates paths of execution by moving their starting points to a new column in the line <sil=0.918> .PERIOD This simple practice will make it much easier to read and understand code <sil=0.994> .PERIOD Indentation follows a fairly simple rule: 
• All code inside a new block should be indented by one tab more than the code in the previous path <sil=0.974> .PERIOD Based on the code from the previous section <sil=0.543> ,COMMA there are two blocks requiring indentation: 
• Lines 4 to 16 
• Line 13 
1 #include 
2 
3 int main(void) { 
4 
5 int revenue = 80 <sil=0.375> ;SEMICOLON 6 int cost = 50 <sil=0.471> ;SEMICOLON 7 
8 int roi <sil=0.307> ;SEMICOLON 9 
10 roi = (100 * (revenue - cost)) / cost <sil=0.500> ;SEMICOLON 11 
12 if (roi >= 0) { 
13 printf ("%d\n" <sil=0.518> ,COMMA roi) <sil=0.483> ;SEMICOLON 14 } 
15 
16 return 0 <sil=0.407> ;SEMICOLON 17 } 
It is now fairly obvious as to which parts of the program fit inside which blocks <sil=0.999> .PERIOD You can tell which parts of the program the coder has intended to be conditional <sil=0.482> ,COMMA and which ones he or she has not <sil=0.925> .PERIOD Although it might not be immediately noticeable <sil=0.579> ,COMMA once many nested paths get added to the structure of the program <sil=0.489> ,COMMA the use of indentation can be very important <sil=0.917> .PERIOD This indentation makes the structure of your program clear <sil=0.928> .PERIOD It is claimed that research has shown that an indentation size between 2 to 4 characters is easier to read than 8 character indents <sil=0.908> .PERIOD However <sil=0.367> ,COMMA an indent of 8 characters may still be in use for some systems <sil=0.956> .PERIOD Comments 
Comments in code can be useful for a variety of purposes <sil=0.997> .PERIOD They provide the easiest way to set off specific parts of code (and their purpose) <sil=0.415> ;SEMICOLON as well as providing a visual ”split” between various parts of your code <sil=0.911> .PERIOD Having good comments throughout your code will make it much easier to remember what specific parts of your code do <sil=0.945> .PERIOD Comments in modern flavors of C (and many other languages) can come in two forms: 
1 //Single Line Comments (added by C99 standard <sil=0.388> ,COMMA famously known as c++ style of 
2 comments) 
and
1 /*Multi-Line 
2 Comments 
3 (only form of comments supported by C89 standard)*/ 
Note that Single line comments are a more recent addition to C <sil=0.398> ,COMMA so some compilers may not support them <sil=0.990> .PERIOD A recent version of GCC will have no problems supporting them <sil=0.933> .PERIOD This section is going to focus on the various uses of each form of commentary <sil=0.982> .PERIOD Single-line Comments Single-line comments are most useful for simple 'side' notes that explain what certain parts of the code do <sil=0.995> .PERIOD The best places to put these comments are next to variable declarations <sil=0.425> ,COMMA and next to pieces of code that may need explanation <sil=0.957> .PERIOD Comments should make clear the intention and ideas behind the corresponding code <sil=0.932> .PERIOD What is immediately obvious from reading the code does not belong in a comment <sil=0.957> .PERIOD Based on our previous program <sil=0.306> ,COMMA there are various good places to place comments 
• Line 5 and/or 6 <sil=0.618> ,COMMA to explain what 'int revenue' and 'int cost' represent <sil=0.419> ,COMMA • Line 8 <sil=0.551> ,COMMA to explain what the variable 'roi' is going to be used for <sil=0.529> ,COMMA • Line 10 <sil=0.414> ,COMMA to explain the idea of the calculation <sil=0.457> ,COMMA • Line 12 <sil=0.486> ,COMMA to explain the purpose of the 'if' <sil=0.970> .PERIOD This will make our program look something like 
#include int main(void)
{ 
int revenue = 80 <sil=0.508> ;SEMICOLON // as of 2016 
int cost = 50 <sil=0.301> ;SEMICOLON int roi <sil=0.614> ;SEMICOLON // return on investment in percent 
roi = (100 * (revenue - cost)) / cost <sil=0.561> ;SEMICOLON // formula from accounting book 
if (roi >= 0) { // we don't care about negative roi 
printf ("%d\n" <sil=0.580> ,COMMA roi) <sil=0.592> ;SEMICOLON } 
return 0 <sil=0.526> ;SEMICOLON }
Multi-line Comments
Multi-line comments are most useful for long explanations of code <sil=0.980> .PERIOD They can be used as copyright/licensing notices <sil=0.313> ,COMMA and they can also be used to explain the purpose of a block of code <sil=0.908> .PERIOD This can be useful for two reasons: 
They make your functions easier to understand <sil=0.431> ,COMMA and they make it easier to spot errors in code <sil=0.912> .PERIOD If you know what a block is supposed to do <sil=0.517> ,COMMA then it is much easier to find the piece of code that is responsible if an error occurs <sil=0.908> .PERIOD As an example <sil=0.349> ,COMMA suppose we had a program that was designed to print ”Hello <sil=0.504> ,COMMA World <sil=0.979> !EXCLAMATIONMARK ” a certain number of lines <sil=0.578> ,COMMA a specified number of times <sil=0.943> .PERIOD There would be many for loops in this program <sil=0.955> .PERIOD For this example <sil=0.559> ,COMMA we shall call the number of lines i <sil=0.339> ,COMMA and the number of strings per line as j <sil=0.929> .PERIOD A good example of a multi-line comment that describes 'for' loop is purpose would be: 
/* For Loop (int i)
Loops the following procedure i times (for number of lines) <sil=0.938> .PERIOD Performs 'for' loop j on each loop <sil=0.548> ,COMMA and prints a new line at end of each loop <sil=0.955> .PERIOD */ 
This provides a good explanation of what is purpose is <sil=0.493> ,COMMA whilst not going into detail of what j does <sil=0.918> .PERIOD By going into detail over what the specific path does (and not ones inside it) <sil=0.479> ,COMMA it will be easier to troubleshoot the path <sil=0.996> .PERIOD Similarly <sil=0.567> ,COMMA you should always include a multi-line comment before each function <sil=0.603> ,COMMA to explain the role <sil=0.454> ,COMMA preconditions and postconditions of each function <sil=0.942> .PERIOD Always leave the technical details to the individual blocks inside your program - this makes it easier to troubleshoot <sil=0.963> .PERIOD A function descriptor should look something like: 
/* Function : int hworld (int i <sil=0.589> ,COMMA int j)
	Input	: int i (Number of lines) <sil=0.480> ,COMMA int j (Number of instances per line)
Output : 0 (on success)
  Procedure: Prints "Hello <sil=0.520> ,COMMA World <sil=0.964> !EXCLAMATIONMARK " j times <sil=0.521> ,COMMA and a new line to standard output over i lines <sil=0.982> .PERIOD */
This system allows for an at-a-glance explanation of what the function should do <sil=0.910> .PERIOD You can then go into detail over how each aspect of the program is achieved later on in the program <sil=0.984> .PERIOD Finally <sil=0.456> ,COMMA if you like to have aesthetically-pleasing source code <sil=0.612> ,COMMA the multi-line comment system allows for the easy addition of comment boxes <sil=0.928> .PERIOD These make the comments stand out much more than they would without otherwise <sil=0.943> .PERIOD They look like this <sil=0.939> .PERIOD /***************************************
* This is a multi line comment* That is nearly surrounded by a * Cool <sil=0.438> ,COMMA starry border <sil=0.955> !EXCLAMATIONMARK ***************************************/
Applied to our original program <sil=0.342> ,COMMA we can now include a much more descriptive and readable source code:
#include <stdio <sil=0.976> .PERIOD h>
int main(void){ /****
********************************************************************************
* Function: int main(void)
* Input	: none
* Output : Returns 0 on success
    * Procedure: Prints 2016's return on investment in percent if it is notnegative <sil=0.926> .PERIOD ***** *******************************************************************************/ int revenue = 80 <sil=0.601> ;SEMICOLON // as of 2016
int cost = 50 <sil=0.351> ;SEMICOLON int roi <sil=0.632> ;SEMICOLON // return on investment in percent
roi = (100 * (revenue - cost)) / cost <sil=0.523> ;SEMICOLON // formula from accounting book
if (roi >= 0) {	// we don't care about negative roi printf ("%d\n" <sil=0.495> ,COMMA roi) <sil=0.311> ;SEMICOLON }
   return 0 <sil=0.491> ;SEMICOLON }
This will allow any outside users of the program an easy way to comprehend what the code functions are and how they operate <sil=0.945> .PERIOD It also inhibits uncertainty with other like-named functions <sil=0.902> .PERIOD A few programmers add a column of stars on the right side of a block comment:
/***************************************
* This is a multi line comment	*
* that is completely surrounded by a *
* cool <sil=0.619> ,COMMA starry border <sil=0.980> !EXCLAMATIONMARK *
***************************************/
But most programmers don't put any stars on the right side of a block comment <sil=0.925> .PERIOD They feel that aligning the right side is a waste of time <sil=0.968> .PERIOD Comments written in source files can be used for documenting source code automatically by using popular tools like Doxygen <sil=0.969> .PERIOD Variables
Like most programming languages <sil=0.460> ,COMMA C is able to use and process named variables and their contents <sil=0.956> .PERIOD Variables are simply names used to refer to some location in memory – a location that holds a value with which we are working <sil=0.976> .PERIOD It may help to think of variables as a placeholder for a value <sil=0.923> .PERIOD You can think of a variable as being equivalent to its assigned value <sil=0.902> .PERIOD So <sil=0.319> ,COMMA if you have a variable i that is initialized (set equal) to 4 <sil=0.309> ,COMMA then it follows that i + 1 will equal 5 <sil=0.972> .PERIOD Since C is a relatively low-level programming language <sil=0.501> ,COMMA before a C program can utilize memory to store a variable it must claim the memory needed to store the values for a variable <sil=0.935> .PERIOD This is done by declaring variables <sil=0.912> .PERIOD Declaring variables is the way in which a C program shows the number of variables it needs <sil=0.490> ,COMMA what they are going to be named <sil=0.586> ,COMMA and how much memory they will need <sil=0.959> .PERIOD Within the C programming language <sil=0.333> ,COMMA when managing and working with variables <sil=0.502> ,COMMA it is important to know the type of variables and the size of these types <sil=0.956> .PERIOD A type’s size is the amount of computer memory required to store one value of this type <sil=0.922> .PERIOD Since C is a fairly lowlevel programming language <sil=0.523> ,COMMA the size of types can be specific to the hardware and compiler used – that is <sil=0.337> ,COMMA how the language is made to work on one type of machine can be different from how it is made to work on another <sil=0.931> .PERIOD All variables in C are typed <sil=0.984> .PERIOD That is <sil=0.422> ,COMMA every variable declared must be assigned as a certain type of variable <sil=0.964> .PERIOD Declaring <sil=0.618> ,COMMA Initializing <sil=0.649> ,COMMA and Assigning Variables
Here is an example of declaring an integer <sil=0.341> ,COMMA which we've called some_number <sil=0.950> .PERIOD (Note the semicolon at the end of the line <sil=0.484> ;SEMICOLON that is how your compiler separates one program statement from another <sil=0.972> .PERIOD ) 
int some_number <sil=0.310> ;SEMICOLON This statement means we're declaring some space for a variable called some_number <sil=0.367> ,COMMA which will be used to store integer data <sil=0.982> .PERIOD Note that we must specify the type of data that a variable will store <sil=0.972> .PERIOD There are specific keywords to do this – we'll look at them in the next section <sil=0.909> .PERIOD Multiple variables can be declared with one statement <sil=0.606> ,COMMA like this:
int anumber <sil=0.368> ,COMMA anothernumber <sil=0.431> ,COMMA yetanothernumber <sil=0.490> ;SEMICOLON We can also declare and assign some content to a variable at the same time <sil=0.921> .PERIOD int some_number = 3 <sil=0.515> ;SEMICOLON This is called initialization <sil=0.960> .PERIOD In early versions of C <sil=0.650> ,COMMA variables had to be declared at the beginning of a block <sil=0.928> .PERIOD In C99 it is allowed to mix declarations and statements arbitrarily – but doing so is not usual <sil=0.515> ,COMMA because it is rarely necessary <sil=0.368> ,COMMA some compilers still don’t support C99 (portability) <sil=0.489> ,COMMA and it may <sil=0.530> ,COMMA because it is uncommon yet <sil=0.454> ,COMMA irritate fellow programmers (maintainability) <sil=0.996> .PERIOD After declaring variables <sil=0.509> ,COMMA you can assign a value to a variable later on using a statement like this: some_number = 3 <sil=0.319> ;SEMICOLON You can also assign a variable the value of another variable <sil=0.534> ,COMMA like so:
anumber = anothernumber <sil=0.317> ;SEMICOLON Or assign multiple variables the same value with one statement: 
anumber = anothernumber = yetanothernumber = 3 <sil=0.366> ;SEMICOLON This is because the assignment x = y returns the value of the assignment <sil=0.947> .PERIOD x = y = z is really shorthand for x = (y = z) <sil=0.980> .PERIOD Naming Variables
Variable names in C are made up of letters (upper and lower case) and digits <sil=0.928> .PERIOD The underscore character (”_”) is also permitted <sil=0.919> .PERIOD Names must not begin with a digit <sil=0.980> .PERIOD Unlike some languages (such as Perl and some BASIC dialects) <sil=0.408> ,COMMA C does not use any special prefix characters on variable names <sil=0.969> .PERIOD Some examples of valid (but not very descriptive) C variable names:
foo Bar BAZ foo_bar _foo42
_
QuUx
Some examples of invalid C variable names:
2foo	(must not begin with a digit) my foo (spaces not allowed in names) $foo	($ not allowed -- only letters <sil=0.540> ,COMMA and _) while (language keywords cannot be used as names)
As the last example suggests <sil=0.609> ,COMMA certain words are reserved as keywords in the language <sil=0.327> ,COMMA and these cannot be used as variable names <sil=0.990> .PERIOD It is not allowed to use the same name for multiple variables in the same scope <sil=0.943> .PERIOD When working with other developers <sil=0.433> ,COMMA you should therefore take steps to avoid using the same name Literals for global variables or function names <sil=0.952> .PERIOD Some large projects adhere to naming guidelines to avoid duplicate names and for consistency <sil=0.917> .PERIOD In addition there are certain sets of names that <sil=0.317> ,COMMA while not language keywords <sil=0.622> ,COMMA are reserved for one reason or another <sil=0.920> .PERIOD For example <sil=0.563> ,COMMA a C compiler might use certain names ”behind the scenes” <sil=0.523> ,COMMA and this might cause problems for a program that attempts to use them <sil=0.934> .PERIOD Also <sil=0.348> ,COMMA some names are reserved for possible future use in the C standard library <sil=0.937> .PERIOD The rules for determining exactly what names are reserved (and in what contexts they are reserved) are too complicated to describe here <sil=0.325> ,COMMA and as a beginner you don't need to worry about them much anyway <sil=0.956> .PERIOD For now <sil=0.462> ,COMMA just avoid using names that begin with an underscore character <sil=0.957> .PERIOD The naming rules for C variables also apply to naming other language constructs such as function names <sil=0.343> ,COMMA struct tags <sil=0.432> ,COMMA and macros <sil=0.521> ,COMMA all of which will be covered later <sil=0.989> .PERIOD Literals
Anytime within a program in which you specify a value explicitly instead of referring to a variable or some other form of data <sil=0.580> ,COMMA that value is referred to as a literal <sil=0.920> .PERIOD In the initialization example above <sil=0.354> ,COMMA 3 is a literal <sil=0.934> .PERIOD Literals can either take a form defined by their type (more on that soon) <sil=0.578> ,COMMA or one can use hexadecimal (hex) notation to directly insert data into a variable regardless of its type <sil=0.901> .PERIOD Hex numbers are always preceded with 0x <sil=0.977> .PERIOD For now <sil=0.581> ,COMMA though <sil=0.947> ,COMMA you probably shouldn't be too concerned with hex <sil=0.984> .PERIOD The Four Basic Data Types 
In Standard C there are four basic data types <sil=0.962> .PERIOD They are int <sil=0.393> ,COMMA char <sil=0.449> ,COMMA float <sil=0.459> ,COMMA and double <sil=0.932> .PERIOD We will briefly describe them here <sil=0.562> ,COMMA then go into more detail in C Programming/Types <sil=0.979> .PERIOD The int type
The int type stores integers in the form of ”whole numbers” <sil=0.936> .PERIOD An integer is typically the size of one machine word <sil=0.563> ,COMMA which on most modern home PCs is 32 bits (4 octets) <sil=0.905> .PERIOD Examples of literals are whole numbers (integers) such as 1 <sil=0.347> ,COMMA 2 <sil=0.577> ,COMMA 3 <sil=0.313> ,COMMA 10 <sil=0.556> ,COMMA 100 <sil=0.954> .PERIOD  <sil=0.347> .PERIOD  <sil=0.377> .PERIOD When int is 32 bits (4 octets) <sil=0.376> ,COMMA it can store any whole number (integer) between -2147483648 and 2147483647 <sil=0.989> .PERIOD A 32 bit word (number) has the possibility of representing any one number out of 4294967296 possibilities (2 to the power of 32) <sil=0.928> .PERIOD If you want to declare a new int variable <sil=0.575> ,COMMA use the int keyword <sil=0.995> .PERIOD For example:
int numberOfStudents <sil=0.625> ,COMMA i <sil=0.602> ,COMMA j=5 <sil=0.361> ;SEMICOLON In this declaration we declare 3 variables <sil=0.554> ,COMMA numberOfStudents <sil=0.473> ,COMMA i and j <sil=0.569> ,COMMA j here is assigned the literal 5 <sil=0.925> .PERIOD The char type
The char type is capable of holding any member of the execution character set <sil=0.912> .PERIOD It stores the same kind of data as an int (i <sil=0.924> .PERIOD e <sil=0.310> .PERIOD integers) <sil=0.375> ,COMMA but typically has a size of one byte <sil=0.907> .PERIOD The size of a byte is specified by the macro CHAR_BIT which specifies the number of bits in a char (byte) <sil=0.968> .PERIOD In standard C it never can be less than 8 bits <sil=0.950> .PERIOD A variable of type char is most often used to store character data <sil=0.641> ,COMMA hence its name <sil=0.947> .PERIOD Most implementations use the ASCII character set as the execution character set <sil=0.419> ,COMMA but it's best not to know or care about that unless the actual values are important <sil=0.957> .PERIOD Examples of character literals are 'a' <sil=0.322> ,COMMA 'b' <sil=0.633> ,COMMA '1' <sil=0.398> ,COMMA etc <sil=0.999> .PERIOD  <sil=0.618> ,COMMA as well as some special characters such as '\0' (the null character) and '\n' (newline <sil=0.307> ,COMMA recall ”Hello <sil=0.387> ,COMMA World”) <sil=0.974> .PERIOD Note that the char value must be enclosed within single quotations <sil=0.912> .PERIOD When we initialize a character variable <sil=0.312> ,COMMA we can do it two ways <sil=0.968> .PERIOD One is preferred <sil=0.429> ,COMMA the other way is bad programming practice <sil=0.980> .PERIOD The first way is to write char letter1 = 'a' <sil=0.365> ;SEMICOLON This is good programming practice in that it allows a person reading your code to understand that letter1 is being initialized with the letter 'a' to start off with <sil=0.945> .PERIOD The second way <sil=0.381> ,COMMA which should not be used when you are coding letter characters <sil=0.303> ,COMMA is to write char letter2 = 97 <sil=0.511> ;SEMICOLON /* in ASCII <sil=0.309> ,COMMA 97 = 'a' */
This is considered by some to be extremely bad practice <sil=0.433> ,COMMA if we are using it to store a character <sil=0.308> ,COMMA not a small number <sil=0.330> ,COMMA in that if someone reads your code <sil=0.587> ,COMMA most readers are forced to look up what character corresponds with the number 97 in the encoding scheme <sil=0.937> .PERIOD In the end <sil=0.640> ,COMMA letter1 and letter2 store both the same thing – the letter 'a' <sil=0.607> ,COMMA but the first method is clearer <sil=0.356> ,COMMA easier to debug <sil=0.584> ,COMMA and much more straightforward <sil=0.970> .PERIOD One important thing to mention is that characters for numerals are represented differently from their corresponding number <sil=0.498> ,COMMA i <sil=0.391> .PERIOD e <sil=0.320> .PERIOD '1' is not equal to 1 <sil=0.990> .PERIOD In short <sil=0.603> ,COMMA any single entry that is enclosed within 'single quotes' <sil=0.997> .PERIOD There is one more kind of literal that needs to be explained in connection with chars: the string literal <sil=0.931> .PERIOD A string is a series of characters <sil=0.560> ,COMMA usually intended to be displayed <sil=0.978> .PERIOD They are surrounded by double quotations (” ” <sil=0.324> ,COMMA not ' ') <sil=0.903> .PERIOD An example of a string literal is the ”Hello <sil=0.437> ,COMMA World <sil=0.933> !EXCLAMATIONMARK \n” in the ”Hello <sil=0.330> ,COMMA World” example <sil=0.987> .PERIOD The string literal is assigned to a character array <sil=0.347> ,COMMA arrays are described later <sil=0.919> .PERIOD Example:
const char MY_CONSTANT_PEDANTIC_ITCH[] = "learn the usage context <sil=0.971> .PERIOD \n" <sil=0.625> ;SEMICOLON printf("Square brackets after a variable name means it is a pointer to a string
of memory blocks the size of the type of the array element <sil=0.968> .PERIOD \n") <sil=0.330> ;SEMICOLON The float type
float is short for floating point <sil=0.950> .PERIOD It stores inexact representations of real numbers <sil=0.407> ,COMMA both integer and non-integer values <sil=0.972> .PERIOD It can be used with numbers that are much greater than the greatest possible int <sil=0.961> .PERIOD float literals must be suffixed with F or f <sil=0.971> .PERIOD Examples are: 3 <sil=0.986> .PERIOD 1415926f <sil=0.518> ,COMMA 4 <sil=0.415> .PERIOD 0f <sil=0.520> ,COMMA 6 <sil=0.952> .PERIOD 022e+23f <sil=0.943> .PERIOD It is important to note that floating-point numbers are inexact <sil=0.981> .PERIOD Some numbers like 0 <sil=0.985> .PERIOD 1f cannot be represented exactly as floats but will have a small error <sil=0.953> .PERIOD Very large and very small numbers will have less precision and arithmetic operations are sometimes not associative or distributive because of a lack of precision <sil=0.927> .PERIOD Nonetheless <sil=0.558> ,COMMA floating-point numbers are most commonly used for approximating real numbers and operations on them are efficient on modern microprocessors <sil=0.905> .PERIOD Floating-point arithmetic is explained in more detail on Wikipedia <sil=0.932> .PERIOD float variables can be declared using the float keyword <sil=0.957> .PERIOD A float is only one machine word in size <sil=0.903> .PERIOD Therefore <sil=0.309> ,COMMA it is used when less precision than a double provides is required <sil=0.980> .PERIOD The double type
The double and float types are very similar <sil=0.953> .PERIOD The float type allows you to store singleprecision floating point numbers <sil=0.425> ,COMMA while the double keyword allows you to store doubleprecision floating point numbers – real numbers <sil=0.448> ,COMMA in other words <sil=0.940> .PERIOD Its size is typically two machine words <sil=0.329> ,COMMA or 8 bytes on most machines <sil=0.958> .PERIOD Examples of double literals are 3 <sil=0.981> .PERIOD 1415926535897932 <sil=0.381> ,COMMA 4 <sil=0.522> .PERIOD 0 <sil=0.586> ,COMMA 6 <sil=0.942> .PERIOD 022e+23 (scientific notation) <sil=0.927> .PERIOD If you use 4 instead of 4 <sil=0.978> .PERIOD 0 <sil=0.636> ,COMMA the 4 will be interpreted as an int <sil=0.990> .PERIOD The distinction between floats and doubles was made because of the differing sizes of the two types <sil=0.936> .PERIOD When C was first used <sil=0.485> ,COMMA space was at a minimum and so the judicious use of a float instead of a double saved some memory <sil=0.913> .PERIOD Nowadays <sil=0.415> ,COMMA with memory more freely available <sil=0.527> ,COMMA you rarely need to conserve memory like this – it may be better to use doubles consistently <sil=0.942> .PERIOD Indeed <sil=0.439> ,COMMA some C implementations use doubles instead of floats when you declare a float variable <sil=0.990> .PERIOD If you want to use a double variable <sil=0.465> ,COMMA use the double keyword <sil=0.933> .PERIOD sizeof
If you have any doubts as to the amount of memory actually used by any variable (and this goes for types we'll discuss later <sil=0.583> ,COMMA also) <sil=0.437> ,COMMA you can use the sizeof operator to find out for sure <sil=0.989> .PERIOD (For completeness <sil=0.541> ,COMMA it is important to mention that sizeof is a unary operator <sil=0.334> ,COMMA not a function <sil=0.377> .PERIOD ) Its syntax is:
sizeof object sizeof(type)
The two expressions above return the size of the object and type specified <sil=0.607> ,COMMA in bytes <sil=0.578> .PERIOD The return type is size_t (defined in the header <stddef <sil=0.987> .PERIOD h>) which is an unsigned value <sil=0.932> .PERIOD Here's an example usage:
size_t size <sil=0.528> ;SEMICOLON int i <sil=0.407> ;SEMICOLON size = sizeof(i) <sil=0.602> ;SEMICOLON size will be set to 4 <sil=0.349> ,COMMA assuming CHAR_BIT is defined as 8 <sil=0.340> ,COMMA and an integer is 32 bits wide <sil=0.914> .PERIOD The value of sizeof's result is the number of bytes <sil=0.974> .PERIOD Note that when sizeof is applied to a char <sil=0.562> ,COMMA the result is 1 <sil=0.513> ;SEMICOLON that is:
sizeof(char) always returns 1 <sil=0.902> .PERIOD Data type modifiers
One can alter the data storage of any data type by preceding it with certain modifiers <sil=0.970> .PERIOD long and short are modifiers that make it possible for a data type to use either more or less memory <sil=0.941> .PERIOD The int keyword need not follow the short and long keywords <sil=0.960> .PERIOD This is most commonly the case <sil=0.993> .PERIOD A short can be used where the values fall within a lesser range than that of an int <sil=0.585> ,COMMA typically -32768 to 32767 <sil=0.998> .PERIOD A long can be used to contain an extended range of values <sil=0.918> .PERIOD It is not guaranteed that a short uses less memory than an int <sil=0.414> ,COMMA nor is it guaranteed that a long takes up more memory than an int <sil=0.937> .PERIOD It is only guaranteed that sizeof(short) <= sizeof(int) <= sizeof(long) <sil=0.976> .PERIOD Typically a short is 2 bytes <sil=0.428> ,COMMA an int is 4 bytes <sil=0.344> ,COMMA and a long either 4 or 8 bytes <sil=0.910> .PERIOD Modern C compilers also provide long long which is typically an 8 byte integer <sil=0.974> .PERIOD In all of the types described above <sil=0.306> ,COMMA one bit is used to indicate the sign (positive or negative) of a value <sil=0.910> .PERIOD If you decide that a variable will never hold a negative value <sil=0.474> ,COMMA you may use the unsigned modifier to use that one bit for storing other data <sil=0.522> ,COMMA effectively doubling the range of values while mandating that those values be positive <sil=0.971> .PERIOD The unsigned specifier also may be used without a trailing int <sil=0.493> ,COMMA in which case the size defaults to that of an int <sil=0.945> .PERIOD There is also a signed modifier which is the opposite <sil=0.544> ,COMMA but it is not necessary <sil=0.390> ,COMMA except for certain uses of char <sil=0.573> ,COMMA and seldom used since all types (except char) are signed by default <sil=0.989> .PERIOD To use a modifier <sil=0.635> ,COMMA just declare a variable with the data type and relevant modifiers:
unsigned short int usi <sil=0.538> ;SEMICOLON /* fully qualified -- unsigned short int */
short si <sil=0.337> ;SEMICOLON /* short int */
unsigned long uli <sil=0.535> ;SEMICOLON /* unsigned long int */
const qualifier
When the const qualifier is used <sil=0.348> ,COMMA the declared variable must be initialized at declaration <sil=0.974> .PERIOD It is then not allowed to be changed <sil=0.970> .PERIOD While the idea of a variable that never changes may not seem useful <sil=0.407> ,COMMA there are good reasons to use const <sil=0.951> .PERIOD For one thing <sil=0.477> ,COMMA many compilers can perform some small optimizations on data when it knows that data will never change <sil=0.977> .PERIOD For example <sil=0.631> ,COMMA if you need the value of <sil=0.851> ?QUESTIONMARK in your calculations <sil=0.560> ,COMMA you can declare a const variable of pi <sil=0.399> ,COMMA so a program or another function written by someone else cannot change the value of pi <sil=0.991> .PERIOD Note that a Standard conforming compiler must issue a warning if an attempt is made to change a const variable - but after doing so the compiler is free to ignore the const qualifier <sil=0.920> .PERIOD Magic numbers
When you write C programs <sil=0.502> ,COMMA you may be tempted to write code that will depend on certain numbers <sil=0.972> .PERIOD For example <sil=0.527> ,COMMA you may be writing a program for a grocery store <sil=0.991> .PERIOD This complex program has thousands upon thousands of lines of code <sil=0.945> .PERIOD The programmer decides to represent the cost of a can of corn <sil=0.628> ,COMMA currently 99 cents <sil=0.314> ,COMMA as a literal throughout the code <sil=0.924> .PERIOD Now <sil=0.424> ,COMMA assume the cost of a can of corn changes to 89 cents <sil=0.907> .PERIOD The programmer must now go in and manually change each entry of 99 cents to 89 <sil=0.914> .PERIOD While this is not that big of a problem <sil=0.527> ,COMMA considering the ”global find-replace” function of many text editors <sil=0.478> ,COMMA consider another problem: the cost of a can of green beans is also initially 99 cents <sil=0.933> .PERIOD To reliably change the price <sil=0.384> ,COMMA you have to look at every occurrence of the number 99 <sil=0.983> .PERIOD C possesses certain functionality to avoid this <sil=0.986> .PERIOD This functionality is approximately equivalent <sil=0.602> ,COMMA though one method can be useful in one circumstance <sil=0.645> ,COMMA over another <sil=0.925> .PERIOD Using the const keyword
The const keyword helps eradicate magic numbers <sil=0.905> .PERIOD By declaring a variable const corn at the beginning of a block <sil=0.472> ,COMMA a programmer can simply change that const and not have to worry about setting the value elsewhere <sil=0.936> .PERIOD There is also another method for avoiding magic numbers <sil=0.946> .PERIOD It is much more flexible than const <sil=0.613> ,COMMA and also much more problematic in many ways <sil=0.961> .PERIOD It also involves the preprocessor <sil=0.393> ,COMMA as opposed to the compiler <sil=1.000> .PERIOD Behold <sil=0.913> .PERIOD  <sil=0.568> .PERIOD  <sil=0.369> .PERIOD #define
When you write programs <sil=0.562> ,COMMA you can create what is known as a macro <sil=0.390> ,COMMA so when the computer is reading your code <sil=0.620> ,COMMA it will replace all instances of a word with the specified expression <sil=0.925> .PERIOD Here's an example <sil=0.949> .PERIOD If you write
#define PRICE_OF_CORN 0 <sil=0.952> .PERIOD 99
when you want to <sil=0.570> ,COMMA for example <sil=0.583> ,COMMA print the price of corn <sil=0.558> ,COMMA you use the word PRICE_OF_CORN instead of the number 0 <sil=0.907> .PERIOD 99 – the preprocessor will replace all instances of PRICE_OF_CORN with 0 <sil=0.932> .PERIOD 99 <sil=0.500> ,COMMA which the compiler will interpret as the literal double 0 <sil=0.972> .PERIOD 99 <sil=0.411> .PERIOD The preprocessor performs substitution <sil=0.457> ,COMMA that is <sil=0.436> ,COMMA PRICE_OF_CORN is replaced by 0 <sil=0.994> .PERIOD 99 so this means there is no need for a semicolon <sil=0.955> .PERIOD It is important to note that #define has basically the same functionality as the ”find-andreplace” function in a lot of text editors/word processors <sil=0.938> .PERIOD For some purposes <sil=0.308> ,COMMA #define can be harmfully used <sil=0.596> ,COMMA and it is usually preferable to use const if #define is unnecessary <sil=0.985> .PERIOD It is possible <sil=0.443> ,COMMA for instance <sil=0.428> ,COMMA to #define <sil=0.400> ,COMMA say <sil=0.451> ,COMMA a macro DOG as the number 3 <sil=0.541> ,COMMA but if you try to print the macro <sil=0.459> ,COMMA thinking that DOG represents a string that you can show on the screen <sil=0.558> ,COMMA the program will have an error <sil=0.956> .PERIOD #define also has no regard for type <sil=0.908> .PERIOD It disregards the structure of your program <sil=0.510> ,COMMA replacing the text everywhere (in effect <sil=0.469> ,COMMA disregarding scope) <sil=0.369> ,COMMA which could be advantageous in some circumstances <sil=0.504> ,COMMA but can be the source of problematic bugs <sil=0.941> .PERIOD You will see further instances of the #define directive later in the text <sil=0.988> .PERIOD It is good convention to write #defined words in all capitals <sil=0.422> ,COMMA so a programmer will know that this is not a variable that you have declared but a #defined macro <sil=0.988> .PERIOD It is not necessary to end a preprocessor directive such as #define with a semicolon <sil=0.536> ;SEMICOLON in fact <sil=0.639> ,COMMA some compilers may warn you about unnecessary tokens in your code if you do <sil=0.906> .PERIOD Scope 
In the Basic Concepts section <sil=0.649> ,COMMA the concept of scope was introduced <sil=0.963> .PERIOD It is important to revisit the distinction between local types and global types <sil=0.555> ,COMMA and how to declare variables of each <sil=0.940> .PERIOD To declare a local variable <sil=0.609> ,COMMA you place the declaration at the beginning (i <sil=0.946> .PERIOD e <sil=0.372> .PERIOD before any non-declarative statements) of the block to which the variable is intended to be local <sil=0.903> .PERIOD To declare a global variable <sil=0.591> ,COMMA declare the variable outside of any block <sil=0.921> .PERIOD If a variable is global <sil=0.512> ,COMMA it can be read <sil=0.505> ,COMMA and written <sil=0.508> ,COMMA from anywhere in your program <sil=0.923> .PERIOD Global variables are not considered good programming practice <sil=0.377> ,COMMA and should be avoided whenever possible <sil=0.945> .PERIOD They inhibit code readability <sil=0.627> ,COMMA create naming conflicts <sil=0.462> ,COMMA waste memory <sil=0.642> ,COMMA and can create difficult-to-trace bugs <sil=0.919> .PERIOD Excessive usage of globals is usually a sign of laziness or poor design <sil=0.993> .PERIOD However <sil=0.571> ,COMMA if there is a situation where local variables may create more obtuse and unreadable code <sil=0.546> ,COMMA there's no shame in using globals <sil=0.947> .PERIOD Other Modifiers
Included here <sil=0.409> ,COMMA for completeness <sil=0.409> ,COMMA are more of the modifiers that standard C provides <sil=0.959> .PERIOD For the beginning programmer <sil=0.340> ,COMMA static and extern may be useful <sil=0.939> .PERIOD volatile is more of interest to advanced programmers <sil=0.911> .PERIOD register and auto are largely deprecated and are generally not of interest to either beginning or advanced programmers <sil=0.993> .PERIOD static
static is sometimes a useful keyword <sil=0.986> .PERIOD It is a common misbelief that the only purpose is to make a variable stay in memory <sil=0.902> .PERIOD When you declare a function or global variable as static <sil=0.307> ,COMMA you cannot access the function or variable through the extern (see below) keyword from other files in your project <sil=0.967> .PERIOD This is called static linkage <sil=0.967> .PERIOD When you declare a local variable as static <sil=0.305> ,COMMA it is created just like any other variable <sil=0.943> .PERIOD However <sil=0.342> ,COMMA when the variable goes out of scope (i <sil=0.988> .PERIOD e <sil=0.638> .PERIOD the block it was local to is finished) the variable stays in memory <sil=0.623> ,COMMA retaining its value <sil=0.965> .PERIOD The variable stays in memory until the program ends <sil=0.922> .PERIOD While this behaviour resembles that of global variables <sil=0.627> ,COMMA static variables still obey scope rules and therefore cannot be accessed outside of their scope <sil=0.984> .PERIOD This is called static storage duration <sil=0.992> .PERIOD Variables declared static are initialized to zero (or for pointers <sil=0.515> ,COMMA NULL<ref name=””NULLor-zero>http://c-faq <sil=0.924> .PERIOD com/null/nullor0 <sil=0.955> .PERIOD html - NULL or 0 <sil=0.544> ,COMMA which should you use <sil=0.912> ?QUESTIONMARK ) by default <sil=0.976> .PERIOD They can be initialized explicitly on declaration to any constant value <sil=0.911> .PERIOD The initialization is made just once <sil=0.571> ,COMMA at compile time <sil=0.925> .PERIOD You can use static in (at least) two different ways <sil=0.905> .PERIOD Consider this code <sil=0.557> ,COMMA and imagine it is in a file called jfile <sil=0.933> .PERIOD c:
#include <stdio <sil=0.964> .PERIOD h> static int j = 0 <sil=0.415> ;SEMICOLON void up(void) {
/* k is set to 0 when the program starts <sil=0.927> .PERIOD The line is then "ignored"
* for the rest of the program (i <sil=0.939> .PERIOD e <sil=0.433> .PERIOD * k is not set to 0 every time up()
* is called)
*/
static int k = 0 <sil=0.466> ;SEMICOLON j++ <sil=0.310> ;SEMICOLON k++ <sil=0.595> ;SEMICOLON printf("up() called <sil=0.911> .PERIOD k= %2d <sil=0.343> ,COMMA j= %2d\n" <sil=0.566> ,COMMA k <sil=0.479> ,COMMA j) <sil=0.636> ;SEMICOLON }
void down(void)
{
static int k = 0 <sil=0.402> ;SEMICOLON j-- <sil=0.583> ;SEMICOLON k-- <sil=0.397> ;SEMICOLON printf("down() called <sil=0.923> .PERIOD k= %2d <sil=0.426> ,COMMA j= %2d\n" <sil=0.362> ,COMMA k <sil=0.461> ,COMMA j) <sil=0.566> ;SEMICOLON }
int main(void)
{ int i <sil=0.620> ;SEMICOLON /* call the up function 3 times <sil=0.436> ,COMMA then the down function 2 times */
for (i = 0 <sil=0.510> ;SEMICOLON i < 3 <sil=0.533> ;SEMICOLON i++) up() <sil=0.523> ;SEMICOLON for (i = 0 <sil=0.532> ;SEMICOLON i < 2 <sil=0.450> ;SEMICOLON i++) down() <sil=0.603> ;SEMICOLON return 0 <sil=0.646> ;SEMICOLON }
The j variable is accessible by both up and down and retains its value <sil=0.978> .PERIOD The k variables also retain their value <sil=0.410> ,COMMA but they are two different variables <sil=0.372> ,COMMA one in each of their scopes <sil=0.990> .PERIOD Static variables are a good way to implement encapsulation <sil=0.571> ,COMMA a term from the object-oriented way of thinking that effectively means not allowing changes to be made to a variable except through function calls <sil=0.914> .PERIOD Running the program above will produce the following output:
up() called <sil=0.936> .PERIOD k= 1 <sil=0.330> ,COMMA j= 1 up() called <sil=0.983> .PERIOD k= 2 <sil=0.346> ,COMMA j= 2 up() called <sil=0.957> .PERIOD k= 3 <sil=0.415> ,COMMA j= 3 down() called <sil=0.907> .PERIOD k= -1 <sil=0.444> ,COMMA j= 2 down() called <sil=0.937> .PERIOD k= -2 <sil=0.446> ,COMMA j= 1
Features of static variables :
* Keyword used	- static
* Storage	- Memory
* Default value	- Zero
* Scope	- Local to the block in which it is declared
* Lifetime	- Value persists between different function calls
* Keyword optionality - Mandatory to use the keyword
extern
extern is used when a file needs to access a variable in another file that it may not have #included directly <sil=0.909> .PERIOD Therefore <sil=0.572> ,COMMA extern does not actually carve out space for a new variable <sil=0.559> ,COMMA it just provides the compiler with sufficient information to access the remote variable <sil=0.904> .PERIOD Features of extern variable : 
  * Keyword used	- extern
  * Storage	- Memory
  * Default value	- Zero
  * Scope	- Global (all over the program)
  * Lifetime	- Value persists till the program's execution comes to an end
  * Keyword optionality - Optional if declared outside all the functions
volatile
volatile is a special type of modifier which informs the compiler that the value of the variable may be changed by external entities other than the program itself <sil=0.942> .PERIOD This is necessary for certain programs compiled with optimizations – if a variable were not defined volatile then the compiler may assume that certain operations involving the variable are safe to optimize away when in fact they aren't <sil=0.970> .PERIOD volatile is particularly relevant when working with embedded systems (where a program may not have complete control of a variable) and multi-threaded applications <sil=0.951> .PERIOD auto
auto is a modifier which specifies an ”automatic” variable that is automatically created when in scope and destroyed when out of scope <sil=0.911> .PERIOD If you think this sounds like pretty much what you've been doing all along when you declare a variable <sil=0.570> ,COMMA you're right: all declared items within a block are implicitly ”automatic” <sil=0.933> .PERIOD For this reason <sil=0.408> ,COMMA the auto keyword is more like the answer to a trivia question than a useful modifier <sil=0.513> ,COMMA and there are lots of very competent programmers that are unaware of its existence <sil=0.954> .PERIOD Features of automatic variables :
  * Keyword used	- auto
  * Storage	- Memory
  * Default value	- Garbage value (random value)
  * Scope	- Local to the block in which it is defined
  * Lifetime	- Value persists while the control remains within the block
  * Keyword optionality – Optional
register
register is a hint to the compiler to attempt to optimize the storage of the given variable by storing it in a register of the computer's CPU when the program is run <sil=1.000> .PERIOD Most optimizing compilers do this anyway <sil=0.551> ,COMMA so use of this keyword is often unnecessary <sil=0.901> .PERIOD In fact <sil=0.498> ,COMMA ANSI C states that a compiler can ignore this keyword if it so desires – and many do <sil=0.966> .PERIOD Microsoft Visual C++ is an example of an implementation that completely ignores the register keyword <sil=0.952> .PERIOD Features of register variables :
  * Keyword used	- register
  * Storage	- CPU registers (values can be retrieved faster than from memory)
  * Default value	- Garbage value
  * Scope	- Local to the block in which it is defined
  * Lifetime	- Value persists while the control remains within the block
  * Keyword optionality - Mandatory to use the keyword
Concepts
• Variables
• Types
• Data Structures
• Arrays
Error handling
C does not provide direct support for error handling (also known as exception handling) <sil=0.946> .PERIOD By convention <sil=0.615> ,COMMA the programmer is expected to prevent errors from occurring in the first place <sil=0.473> ,COMMA and test return values from functions <sil=0.987> .PERIOD For example <sil=0.401> ,COMMA -1 and NULL are used in several functions such as socket() (Unix socket programming) or malloc() respectively to indicate problems that the programmer should be aware about <sil=0.914> .PERIOD In a worst case scenario where there is an unavoidable error and no way to recover from it <sil=0.616> ,COMMA a C programmer usually tries to log the error and ”gracefully” terminate the program <sil=0.910> .PERIOD There is an external variable called ”errno” <sil=0.397> ,COMMA accessible by the programs after including <errno <sil=0.995> .PERIOD h> - that file comes from the definition of the possible errors that can occur in some Operating Systems (e <sil=0.997> .PERIOD g <sil=0.998> .PERIOD Linux - in this case <sil=0.495> ,COMMA the definition is in include/asm-generic/errno <sil=0.939> .PERIOD h) when programs ask for resources <sil=0.996> .PERIOD Such variable indexes error descriptions accessible by the function 'strerror( errno )' <sil=0.929> .PERIOD The following code tests the return value from the library function malloc to see if dynamic memory allocation completed properly:
#include <stdio <sil=0.956> .PERIOD h>
/* perror */
#include <errno <sil=0.995> .PERIOD h>
/* errno */
#include <stdlib <sil=0.938> .PERIOD h>
/* malloc <sil=0.541> ,COMMA free <sil=0.362> ,COMMA exit */
int main(void)
{
/* Pointer to char <sil=0.641> ,COMMA requesting dynamic allocation of 2 <sil=0.330> ,COMMA 000 <sil=0.376> ,COMMA 000 <sil=0.315> ,COMMA 000
* storage elements (declared as an integer constant of type
* unsigned long int) <sil=0.969> .PERIOD * (If your system has less than 2 GB of memory
* available <sil=0.400> ,COMMA then this call to malloc will fail <sil=0.901> .PERIOD )
 */ char *ptr = malloc(2000000000UL) <sil=0.596> ;SEMICOLON if (ptr == NULL) {
perror("malloc failed") <sil=0.478> ;SEMICOLON /* here you might want to exit the program or compensate for that you don't have 2GB available
*/
} else {
/* The rest of the code hereafter can assume that 2 <sil=0.432> ,COMMA 000 <sil=0.421> ,COMMA 000 <sil=0.645> ,COMMA 000 * chars were successfully allocated <sil=0.947> .PERIOD  <sil=0.578> .PERIOD  <sil=0.628> .PERIOD */ free(ptr) <sil=0.387> ;SEMICOLON }
exit(EXIT_SUCCESS) <sil=0.499> ;SEMICOLON /* exiting program */
}
The code snippet above shows the use of the return value of the library function malloc to check for errors <sil=0.914> .PERIOD Many library functions have return values that flag errors <sil=0.354> ,COMMA and thus should be checked by the astute programmer <sil=0.927> .PERIOD In the snippet above <sil=0.604> ,COMMA a NULL pointer returned from malloc signals an error in allocation <sil=0.559> ,COMMA so the program exits <sil=0.991> .PERIOD In more complicated Error handling implementations <sil=0.329> ,COMMA the program might try to handle the error and try to recover from the failed memory allocation <sil=0.998> .PERIOD Preventing divide by zero errors
A common pitfall made by C programmers is not checking if a divisor is zero before a division command <sil=0.945> .PERIOD The following code will produce a runtime error and in most cases <sil=0.417> ,COMMA exit <sil=0.970> .PERIOD int dividend = 50 <sil=0.601> ;SEMICOLON int divisor = 0 <sil=0.431> ;SEMICOLON int quotient <sil=0.648> ;SEMICOLON quotient = (dividend/divisor) <sil=0.513> ;SEMICOLON /* This will produce a runtime error <sil=0.887> !EXCLAMATIONMARK */ 
For reasons beyond the scope of this document <sil=0.606> ,COMMA you must check or make sure that a divisor is never zero <sil=0.916> .PERIOD Alternatively <sil=0.306> ,COMMA for *nix processes <sil=0.631> ,COMMA you can stop the OS from terminating your process by blocking the SIGFPE signal <sil=0.977> .PERIOD The code below fixes this by checking if the divisor is zero before dividing <sil=0.942> .PERIOD #include <stdio <sil=0.998> .PERIOD h> /* for fprintf and stderr */
#include <stdlib <sil=0.987> .PERIOD h> /* for exit */ int main( void )
{ int dividend = 50 <sil=0.382> ;SEMICOLON int divisor = 0 <sil=0.644> ;SEMICOLON int quotient <sil=0.608> ;SEMICOLON if (divisor == 0) {
/* Example handling of this error <sil=0.991> .PERIOD Writing a message to stderr <sil=0.312> ,COMMA and * exiting with failure <sil=0.975> .PERIOD */ fprintf(stderr <sil=0.547> ,COMMA "Division by zero <sil=0.939> !EXCLAMATIONMARK Aborting <sil=0.936> .PERIOD  <sil=0.453> .PERIOD  <sil=0.527> .PERIOD \n") <sil=0.396> ;SEMICOLON exit(EXIT_FAILURE) <sil=0.416> ;SEMICOLON /* indicate failure <sil=0.939> .PERIOD */
}
quotient = dividend / divisor <sil=0.372> ;SEMICOLON exit(EXIT_SUCCESS) <sil=0.466> ;SEMICOLON /* indicate success <sil=0.989> .PERIOD */
}
Signals
In some cases <sil=0.307> ,COMMA the environment may respond to a programming error in C by raising a signal <sil=0.926> .PERIOD Signals are events raised by the host environment or operating system to indicate that a specific error or critical event has occurred (e <sil=0.931> .PERIOD g <sil=0.930> .PERIOD a division by zero <sil=0.323> ,COMMA interrupt <sil=0.396> ,COMMA and so on <sil=0.927> .PERIOD ) However <sil=0.640> ,COMMA these signals are not meant to be used as a means of error catching <sil=0.456> ;SEMICOLON they usually indicate a critical event that will interfere with normal program flow <sil=0.909> .PERIOD To handle signals <sil=0.547> ,COMMA a program needs to use the signal <sil=0.930> .PERIOD h header file <sil=0.962> .PERIOD A signal handler will need to be defined <sil=0.621> ,COMMA and the signal() function is then called to allow the given signal to be handled <sil=0.926> .PERIOD Some signals that are raised to an exception within your code (e <sil=0.991> .PERIOD g <sil=0.910> .PERIOD a division by zero) are unlikely to allow your program to recover <sil=0.980> .PERIOD These signal handlers will be required to instead ensure that some resources are properly cleaned up before the program terminates <sil=0.986> .PERIOD This example creates a signal handler and raises the signal:
#include <signal <sil=0.932> .PERIOD h>
#include <stdio <sil=0.922> .PERIOD h> #include <stdlib <sil=0.982> .PERIOD h>
static void catch_function(int signal) { puts("Interactive attention signal caught <sil=0.940> .PERIOD ") <sil=0.383> ;SEMICOLON }
int main(void) { if (signal(SIGINT <sil=0.592> ,COMMA catch_function) == SIG_ERR) { fputs("An error occurred while setting a signal handler <sil=0.934> .PERIOD \n" <sil=0.407> ,COMMA stderr) <sil=0.613> ;SEMICOLON return EXIT_FAILURE <sil=0.640> ;SEMICOLON }
puts("Raising the interactive attention signal <sil=0.956> .PERIOD ") <sil=0.321> ;SEMICOLON if (raise(SIGINT) <sil=0.855> !EXCLAMATIONMARK = 0) { fputs("Error raising the signal <sil=0.944> .PERIOD \n" <sil=0.603> ,COMMA stderr) <sil=0.511> ;SEMICOLON return EXIT_FAILURE <sil=0.473> ;SEMICOLON }
puts("Exiting <sil=0.949> .PERIOD ") <sil=0.642> ;SEMICOLON return 0 <sil=0.359> ;SEMICOLON }
setjmp
The setjmp function can be used to emulate the exception handling feature of other programming languages <sil=0.955> .PERIOD The first call to setjmp provides a reference point to returning to a given function <sil=0.471> ,COMMA and is valid as long as the function containing setjmp() doesn't return or exit <sil=0.977> .PERIOD A call to longjmp causes the execution to return to the point of the associated setjmp call <sil=0.947> .PERIOD #include <stdio <sil=0.939> .PERIOD h> #include <setjmp <sil=0.986> .PERIOD h> jmp_buf test1 <sil=0.341> ;SEMICOLON void tryjump()
{ longjmp(test1 <sil=0.479> ,COMMA 3) <sil=0.375> ;SEMICOLON }
int main (void)
{ if (setjmp(test1)==0) { printf ("setjmp() returned 0 <sil=0.975> .PERIOD ") <sil=0.474> ;SEMICOLON tryjump() <sil=0.556> ;SEMICOLON } else { printf ("setjmp returned from a longjmp function call <sil=0.929> .PERIOD ") <sil=0.363> ;SEMICOLON }
}
The values of non-volatile variables may be corrupted when setjmp returns from a longjmp call <sil=0.906> .PERIOD While setjmp() and longjmp() may be used for error handling <sil=0.593> ,COMMA it is generally preferred to use the return value of a function to indicate an error <sil=0.527> ,COMMA if possible <sil=0.979> .PERIOD Simple Input and Output
When you take time to consider it <sil=0.640> ,COMMA a computer would be pretty useless without some way to talk to the people who use it <sil=0.907> .PERIOD Just like we need information in order to accomplish tasks <sil=0.476> ,COMMA so do computers <sil=0.963> .PERIOD And just as we supply information to others so that they can do tasks <sil=0.554> ,COMMA so do computers <sil=0.915> .PERIOD These supplies and returns of information to a computer are called input and output <sil=0.936> .PERIOD 'Input' is information supplied to a computer or program <sil=0.961> .PERIOD 'Output' is information provided by a computer or program <sil=0.979> .PERIOD Frequently <sil=0.303> ,COMMA computer programmers will lump the discussion in the more general term input/output or simply <sil=0.496> ,COMMA I/O <sil=0.940> .PERIOD In C <sil=0.577> ,COMMA there are many different ways for a program to communicate with the user <sil=0.964> .PERIOD Amazingly <sil=0.300> ,COMMA the most simple methods usually taught to beginning programmers may also be the most powerful <sil=0.972> .PERIOD In the Hello <sil=0.513> ,COMMA World <sil=0.956> !EXCLAMATIONMARK 1 example at the beginning of this text <sil=0.630> ,COMMA we were introduced to a Standard Library file stdio <sil=0.907> .PERIOD h <sil=0.969> ,COMMA and one of its functions <sil=0.377> ,COMMA printf() <sil=0.993> .PERIOD Here we discuss more of the functions that stdio <sil=0.915> .PERIOD h gives us <sil=0.964> .PERIOD Output using printf()
Recall from the beginning of this text the demonstration program duplicated below:
#include <stdio <sil=1.000> .PERIOD h>
int main(void)
{ printf("Hello <sil=0.545> ,COMMA World <sil=0.943> !EXCLAMATIONMARK ") <sil=0.648> ;SEMICOLON return 0 <sil=0.457> ;SEMICOLON }
If you compile and run this program <sil=0.324> ,COMMA you will see the sentence below show up on your screen:
Hello <sil=0.596> ,COMMA world <sil=0.907> !EXCLAMATIONMARK This amazing accomplishment was achieved by using the function printf() <sil=0.919> .PERIOD A function is like a ”black box” that does something for you without exposing the internals inside <sil=0.933> .PERIOD We can write functions ourselves in C <sil=0.519> ,COMMA but we will cover that later <sil=0.924> .PERIOD You have seen that to use printf() one puts text <sil=0.498> ,COMMA surrounded by quotes <sil=0.490> ,COMMA in between the parentheses <sil=0.943> .PERIOD We call the text surrounded by quotes a literal string (or just a string) <sil=0.450> ,COMMA and we call that string an argument to printf <sil=0.953> .PERIOD Simple Input and Output
As a note of explanation <sil=0.547> ,COMMA it is sometimes convenient to include the open and closing parentheses after a function name to remind us that it is <sil=0.548> ,COMMA indeed <sil=0.511> ,COMMA a function <sil=0.925> .PERIOD However usually when the name of the function we are talking about is understood <sil=0.407> ,COMMA it is not necessary <sil=0.934> .PERIOD As you can see in the example above <sil=0.461> ,COMMA using printf() can be as simple as typing in some text <sil=0.364> ,COMMA surrounded by double quotes (note that these are double quotes and not two single quotes) <sil=0.939> .PERIOD So <sil=0.641> ,COMMA for example <sil=0.607> ,COMMA you can print any string by placing it as an argument to the printf() function:
printf(”This sentence will print out exactly as you see it <sil=0.963> .PERIOD  <sil=0.380> .PERIOD  <sil=0.308> .PERIOD ”) <sil=0.312> ;SEMICOLON And once it is contained in a proper main() function <sil=0.324> ,COMMA it will show:
This sentence will print out exactly as you see it <sil=0.945> .PERIOD  <sil=0.331> .PERIOD  <sil=0.392> .PERIOD Printing numbers and escape sequences
Placeholder codes
The printf() function is a powerful function <sil=0.398> ,COMMA and is probably the most-used function in C programs <sil=0.996> .PERIOD For example <sil=0.479> ,COMMA let us look at a problem <sil=0.936> .PERIOD Say we don't know what 19 + 31 is <sil=0.908> .PERIOD Let's use C to get the answer <sil=0.991> .PERIOD We start writing
#include "stdio <sil=0.926> .PERIOD h" // this is important <sil=0.365> ,COMMA since printf
// can't be used without this header
int main(void)
{ printf("19+31 is") <sil=0.459> ;SEMICOLON But here we are stuck <sil=0.883> !EXCLAMATIONMARK printf() only prints strings <sil=0.982> !EXCLAMATIONMARK Thankfully <sil=0.316> ,COMMA printf has methods for printing numbers <sil=0.971> .PERIOD What we do is put a placeholder format code in the string <sil=0.947> .PERIOD We write:
printf("19+31 is '''%d'''" <sil=0.452> ,COMMA 19+31) <sil=0.330> ;SEMICOLON The placeholder %d literally ”holds the place” for the actual number that is the result of adding 19 to 31 <sil=0.906> .PERIOD These placeholders are called format specifiers <sil=0.985> .PERIOD Many other format specifiers work with printf() <sil=0.980> .PERIOD If we have a floating-point number <sil=0.416> ,COMMA we can use %f to print out a floating-point number <sil=0.626> ,COMMA decimal point and all <sil=0.963> .PERIOD Other format specifiers are:
• %d - int (same as %i)
• %ld - long int (same as %li)
• %f – float
• %lf – double 
• %c - char
• %s - string
• %x - hexadecimal
A complete listing of all the format specifiers for printf() is on Wikipedia <sil=0.960> .PERIOD Tabs and newlines
printf() will not put line breaks in at the end of each statement: we must do this ourselves <sil=0.978> .PERIOD But how <sil=0.952> ?QUESTIONMARK What we can do is use the newline escape character <sil=0.904> .PERIOD An escape character is a special character that we can write but will do something special onscreen <sil=0.493> ,COMMA such as make a beep <sil=0.458> ,COMMA write a tab <sil=0.571> ,COMMA and so on <sil=0.928> .PERIOD To write a newline we write \n <sil=0.925> .PERIOD All escape characters start with a backslash <sil=0.903> .PERIOD So to achieve the output above <sil=0.327> ,COMMA we write
printf(" 1905\n312 +\n-----\n") <sil=0.624> ;SEMICOLON or to be a bit more clear <sil=0.337> ,COMMA we can break this long printf statement over several lines <sil=0.971> .PERIOD So our program will be
#include <stdio <sil=0.972> .PERIOD h>
int main(void)
{ printf(" 1905\n") <sil=0.488> ;SEMICOLON printf("312 +\n") <sil=0.444> ;SEMICOLON printf("-----\n") <sil=0.484> ;SEMICOLON printf("%d" <sil=0.364> ,COMMA 1905+312) <sil=0.564> ;SEMICOLON return 0 <sil=0.472> ;SEMICOLON }
There are other escape characters we can use <sil=0.909> .PERIOD Another common one is to use \t to write a tab <sil=0.999> .PERIOD You can use \a to ring the computer's bell <sil=0.542> ,COMMA but you should not use this very much in your programs <sil=0.649> ,COMMA as excessive use of sound is not very friendly to the user <sil=0.981> .PERIOD Simple Input and Output
Other output methods
puts()
The puts() function is a very simple way to send a string to the screen when you have no placeholders to be concerned about <sil=0.966> .PERIOD It works very much like the printf() function we saw in the ”Hello <sil=0.629> ,COMMA World <sil=0.927> !EXCLAMATIONMARK ” example:
puts("Print this string <sil=0.916> .PERIOD ") <sil=0.560> ;SEMICOLON will print to the screen:
Print this string <sil=0.981> .PERIOD followed by the newline character (as discussed above) <sil=0.948> .PERIOD (The puts function appends a newline character to its output <sil=0.901> .PERIOD )
Input using scanf()
The scanf() function is the input method equivalent to the printf() output function - simple yet powerful <sil=0.940> .PERIOD In its simplest invocation <sil=0.402> ,COMMA the scanf format string holds a single placeholder representing the type of value that will be entered by the user <sil=0.942> .PERIOD These placeholders are mostly the same as the printf() function - %d for ints <sil=0.520> ,COMMA %f for floats <sil=0.516> ,COMMA and %lf for doubles <sil=0.950> .PERIOD There is <sil=0.351> ,COMMA however <sil=0.993> ,COMMA one variation to scanf() as compared to printf() <sil=0.931> .PERIOD The scanf() function requires the memory address of the variable to which you want to save the input value <sil=0.997> .PERIOD While pointers (variables storing memory addresses) can be used here <sil=0.403> ,COMMA this is a concept that won't be approached until later in the text <sil=0.990> .PERIOD Instead <sil=0.594> ,COMMA the simple technique is to use the address-of operator <sil=0.579> ,COMMA & <sil=0.421> .PERIOD For now it may be best to consider this ”magic” before we discuss pointers <sil=0.971> .PERIOD A typical application might be like this:
#include "stdio <sil=0.993> .PERIOD h"
int main(void)
{ int a <sil=0.537> ;SEMICOLON printf("Please input an integer value: ") <sil=0.644> ;SEMICOLON scanf("%d" <sil=0.394> ,COMMA &a) <sil=0.649> ;SEMICOLON printf("You entered: %d\n" <sil=0.372> ,COMMA a) <sil=0.600> ;SEMICOLON return 0 <sil=0.643> ;SEMICOLON }
If you were to describe the effect of the scanf() function call above <sil=0.526> ,COMMA it might read as: ”Read in an integer from the user and store it at the address of variable a ” <sil=0.906> .PERIOD If you are trying to input a string using scanf <sil=0.499> ,COMMA you should not include the & operator <sil=0.957> .PERIOD The code below will produce a runtime error and the program will likely crash <sil=0.943> .PERIOD scanf("%s" <sil=0.530> ,COMMA &a) <sil=0.375> ;SEMICOLON The correct usage would be:
scanf("%s" <sil=0.310> ,COMMA a) <sil=0.326> ;SEMICOLON This is because <sil=0.456> ,COMMA whenever you use a format specifier for a string (%s) <sil=0.336> ,COMMA the variable that you use to store the value will be an array and <sil=0.589> ,COMMA the array names (in this case - a) themselves point out to their base address and hence <sil=0.603> ,COMMA the address of operator is not required <sil=0.915> .PERIOD (Although <sil=0.644> ,COMMA this is vulnerable to Buffer overflow <sil=0.997> .PERIOD fgets() is preferred to scanf()) <sil=0.945> .PERIOD Note on inputs: When data is typed at a keyboard <sil=0.365> ,COMMA the information does not go straight to the program that is running <sil=0.966> .PERIOD It is first stored in what is known as a buffer - a small amount of memory reserved for the input source <sil=0.924> .PERIOD Sometimes there will be data left in the buffer when the program wants to read from the input source <sil=0.472> ,COMMA and the scanf() function will read this data instead of waiting for the user to type something <sil=1.000> .PERIOD Some may suggest you use the function fflush(stdin) <sil=0.443> ,COMMA which may work as desired on some computers <sil=0.528> ,COMMA but isn't considered good practice <sil=0.529> ,COMMA as you will see later <sil=0.920> .PERIOD Doing this has the downfall that if you take your code to a different computer with a different compiler <sil=0.398> ,COMMA your code may not work properly <sil=0.979> .PERIOD Simple math
Arithmetic Operators
In C <sil=0.363> ,COMMA simple math is very easy to handle <sil=0.929> .PERIOD The following operators exist: + (addition) <sil=0.397> ,COMMA - (subtraction) <sil=0.609> ,COMMA * (multiplication) <sil=0.604> ,COMMA / (division) <sil=0.449> ,COMMA and % (modulus) <sil=0.468> ;SEMICOLON You likely know all of them from your math classes - except <sil=0.377> ,COMMA perhaps <sil=0.538> ,COMMA modulus <sil=0.994> .PERIOD It returns the remainder of a division (e <sil=0.952> .PERIOD g <sil=0.973> .PERIOD 5 % 2 = 1) <sil=0.913> .PERIOD (Modulus is not defined for floating-point numbers <sil=0.420> ,COMMA but the math <sil=0.963> .PERIOD h library has an fmod function <sil=0.964> .PERIOD )
Care must be taken with the modulus <sil=0.514> ,COMMA because it's not the equivalent of the mathematical modulus: (-5) % 2 is not 1 <sil=0.408> ,COMMA but -1 <sil=0.933> .PERIOD Division of integers will return an integer <sil=0.349> ,COMMA and the division of a negative integer by a positive integer will round towards zero instead of rounding down (e <sil=0.910> .PERIOD g <sil=0.996> .PERIOD (-5) / 3 = -1 instead of -2) <sil=0.943> .PERIOD However <sil=0.435> ,COMMA it is always true that for all integer a and nonzero integer b <sil=0.313> ,COMMA ((a / b) * b) + (a % b) == a <sil=0.924> .PERIOD There is no inline operator to do exponentiation (e <sil=0.933> .PERIOD g <sil=0.948> .PERIOD 5 ^ 2 is not 25 [it is 7 <sil=0.362> ;SEMICOLON ^ is the exclusive-or operator] <sil=0.574> ,COMMA and 5 ** 2 is an error) <sil=0.455> ,COMMA but there is a power function <sil=0.913> .PERIOD The mathematical order of operations does apply <sil=0.918> .PERIOD For example (2 + 3) * 2 = 10 while 2 + 3 * 2 = 8 <sil=0.910> .PERIOD Multiplicative operators have precedence over additive operators <sil=0.914> .PERIOD #include <stdio <sil=0.987> .PERIOD h>
int main(void)
{
int i = 0 <sil=0.565> ,COMMA j = 0 <sil=0.420> ;SEMICOLON /* while i is less than 5 AND j is less than 5 <sil=0.311> ,COMMA loop */ while( (i < 5) && (j < 5) )
{
/* postfix increment <sil=0.556> ,COMMA i++
* the value of i is read and then incremented
 */ printf("i: %d\t" <sil=0.439> ,COMMA i++) <sil=0.410> ;SEMICOLON /*
* prefix increment <sil=0.399> ,COMMA ++j
* the value of j is incremented and then read
 */ printf("j: %d\n" <sil=0.615> ,COMMA ++j) <sil=0.558> ;SEMICOLON } printf("At the end they have both equal values:\ni: %d\tj: %d\n" <sil=0.341> ,COMMA i <sil=0.521> ,COMMA j) <sil=0.304> ;SEMICOLON getchar() <sil=0.486> ;SEMICOLON /* pause */ return 0 <sil=0.345> ;SEMICOLON }
will display the following:
i: 0	j: 1 i: 1	j: 2 i: 2	j: 3 i: 3	j: 4 i: 4	j: 5
At the end they have both equal values: i: 5	j: 5
Assignment Operators
The assignment operators are = <sil=0.395> ,COMMA *= <sil=0.362> ,COMMA /= <sil=0.621> ,COMMA %= <sil=0.348> ,COMMA += <sil=0.621> ,COMMA -= <sil=0.528> ,COMMA <<= <sil=0.383> ,COMMA >>= <sil=0.418> ,COMMA &= <sil=0.363> ,COMMA ^= <sil=0.425> ,COMMA and |= <sil=0.984> .PERIOD The = operator stores the value of the right operand into the location determined by the left operand <sil=0.572> ,COMMA which must be an lvalue (a value that has an address <sil=0.435> ,COMMA and therefore can be assigned to) <sil=0.973> .PERIOD For the others <sil=0.568> ,COMMA x op= y is shorthand for x = x op (y <sil=0.940> .PERIOD Hence <sil=0.506> ,COMMA the following expressions are the same:
1 <sil=0.993> .PERIOD x += y	-	x = x+y
2 <sil=0.925> .PERIOD x -= y	-	x = x-y
3 <sil=0.958> .PERIOD x *= y	-	x = x*y
4 <sil=0.940> .PERIOD x /= y	-	x = x/y
5 <sil=0.949> .PERIOD x %= y	-	x = x%y
The value of the assignment expression is the value of the left operand after the assignment <sil=0.937> .PERIOD Thus <sil=0.612> ,COMMA assignments can be chained <sil=0.546> ;SEMICOLON e <sil=0.996> .PERIOD g <sil=0.919> .PERIOD the expression a = b = c = 0 <sil=0.483> ;SEMICOLON would assign the value zero to all three variables <sil=0.941> .PERIOD Logical Operators
The logical operators are && (and) <sil=0.423> ,COMMA and || (or) <sil=0.936> .PERIOD Both of these operators produce 1 if the relationship is true and 0 for false <sil=0.988> .PERIOD Both of these operators short-circuit <sil=0.575> ;SEMICOLON if the result of the expression can be determined from the first operand <sil=0.325> ,COMMA the second is ignored <sil=0.966> .PERIOD The && operator has higher precedence than the || operator <sil=0.933> .PERIOD && is used to evaluate expressions left to right <sil=0.387> ,COMMA and returns a 1 if both statements are true <sil=0.915> .PERIOD int x = 7 <sil=0.471> ;SEMICOLON int y = 5 <sil=0.609> ;SEMICOLON if(x == 7 && y == 5) { <sil=0.903> .PERIOD  <sil=0.500> .PERIOD  <sil=0.617> .PERIOD }
Here <sil=0.397> ,COMMA the && operator checks the left-most expression <sil=0.495> ,COMMA then the expression to its right <sil=0.998> .PERIOD If there were more than two expressions chained (e <sil=0.995> .PERIOD g <sil=0.921> .PERIOD x && y && z) <sil=0.528> ,COMMA the operator would Relational and Equality Operators check x first <sil=0.532> ,COMMA then y <sil=0.343> ,COMMA then continue rightwards to z if neither x or y is zero <sil=0.941> .PERIOD Since both statements return true <sil=0.470> ,COMMA the && operator returns true <sil=0.549> ,COMMA and the code block is executed <sil=0.940> .PERIOD if(x == 5 && y == 5) { <sil=0.999> .PERIOD  <sil=0.478> .PERIOD  <sil=0.432> .PERIOD }
The && operator checks in the same way as before <sil=0.549> ,COMMA and finds that the first expression is false <sil=0.997> .PERIOD The && operator stops evaluating as soon as it finds a statement to be false <sil=0.405> ,COMMA and returns a false <sil=0.992> .PERIOD || is used to evaluate expressions left to right <sil=0.509> ,COMMA and returns a 1 if either of the expressions are true <sil=0.976> .PERIOD /* Use the same variables as before <sil=0.974> .PERIOD */
if(x == 2 || y == 5) { // the || statement checks both expressions <sil=0.637> ,COMMA finds
that the latter is true <sil=0.326> ,COMMA and returns true <sil=0.968> .PERIOD  <sil=0.497> .PERIOD  <sil=0.331> .PERIOD }
The || operator here checks the left-most expression <sil=0.476> ,COMMA finds it false <sil=0.391> ,COMMA but continues to evaluate the next expression <sil=0.922> .PERIOD It finds that the next expression returns true <sil=0.628> ,COMMA stops <sil=0.456> ,COMMA and returns a 1 <sil=0.930> .PERIOD Much how the && operator ceases when it finds an expression that returns false <sil=0.645> ,COMMA the || operator ceases when it finds an expression that returns true <sil=0.971> .PERIOD It is worth noting that C does not have Boolean values (true and false) commonly found in other languages <sil=0.972> .PERIOD It instead interprets a 0 as false <sil=0.486> ,COMMA and any nonzero value as true <sil=0.962> .PERIOD The conditional operator
The ternary <sil=0.897> ?QUESTIONMARK : operator is the conditional operator <sil=0.933> .PERIOD The expression (x <sil=0.936> ?QUESTIONMARK y : z) has the value of y if x is nonzero <sil=0.484> ,COMMA z otherwise <sil=0.957> .PERIOD Example:
int x = 0 <sil=0.476> ;SEMICOLON int y <sil=0.540> ;SEMICOLON y = (x <sil=0.950> ?QUESTIONMARK 10 : 6) <sil=0.580> ;SEMICOLON /* The parentheses are technically not necessary as assignment
has a lower precedence than the conditional operator <sil=0.394> ,COMMA but it's there for clarity <sil=0.995> .PERIOD */
The expression x evaluates to 0 <sil=0.964> .PERIOD The ternary operator then looks for the ”if-false” value <sil=0.605> ,COMMA which in this case <sil=0.506> ,COMMA is 6 <sil=0.997> .PERIOD It returns that <sil=0.338> ,COMMA so y is equal to six <sil=0.957> .PERIOD Had x been a non-zero <sil=0.446> ,COMMA then the expression would have returned a 10 <sil=0.970> .PERIOD Relational and Equality Operators
The relational binary operators < (less than) <sil=0.596> ,COMMA > (greater than) <sil=0.618> ,COMMA <= (less than or equal) <sil=0.384> ,COMMA and >= (greater than or equal) operators return a value of 1 if the result of the operation is true <sil=0.334> ,COMMA 0 if false <sil=0.940> .PERIOD The equality binary operators == (equals) and <sil=0.862> !EXCLAMATIONMARK = (not equals) operators are similar to the relational operators except that their precedence is lower <sil=0.972> .PERIOD Type Casting
A parenthesized type name followed by a cast expression is a cast expression <sil=0.922> .PERIOD The parenthesized type name has the effect of forcing the cast expression into the type specified by the type name in parentheses <sil=0.929> .PERIOD For arithmetic types <sil=0.523> ,COMMA this either does not change the value of the expression <sil=0.508> ,COMMA or truncates the value of the expression if the expression is an integer and the new type is smaller than the previous type <sil=0.918> .PERIOD An example of casting a float as an int:
float pi = 3 <sil=0.982> .PERIOD 141592 <sil=0.460> ;SEMICOLON int truncated_pi = (int)pi <sil=0.483> ;SEMICOLON // truncated_pi == 3 An example of casting a char as an int:
char my_char = 'A' <sil=0.542> ;SEMICOLON int my_int = (int)my_char <sil=0.449> ;SEMICOLON // my_int == 65 <sil=0.478> ,COMMA which is the ASCII value of 'A' 
The Shift Operators (which may be used to rotate bits)
Shift functions are often used in low-level I/O hardware interfacing <sil=0.926> .PERIOD Shift and rotate functions are heavily used in cryptography and software floating point emulation <sil=0.921> .PERIOD Other than that <sil=0.316> ,COMMA shifts can be used in place of division or multiplication by a power of two <sil=0.908> .PERIOD Many processors have dedicated function blocks to make these operations fast -- see Microprocessor Design/Shift and Rotate Blocks <sil=0.991> .PERIOD On processors which have such blocks <sil=0.599> ,COMMA most C compilers compile shift and rotate operators to a single assembly-language instruction -- see X86 Assembly/Shift and Rotate <sil=0.969> .PERIOD shift left
The << operator shifts the binary representation to the left <sil=0.358> ,COMMA dropping the most significant bits and appending it with zero bits <sil=0.976> .PERIOD The result is equivalent to multiplying the integer by a power of two <sil=0.983> .PERIOD unsigned shift right
The unsigned shift right operator <sil=0.438> ,COMMA also sometimes called the logical right shift operator <sil=0.972> .PERIOD It shifts the binary representation to the right <sil=0.577> ,COMMA dropping the least significant bits and prepending it with zeros <sil=0.979> .PERIOD The >> operator is equivalent to division by a power of two for unsigned integers <sil=0.972> .PERIOD signed shift right
The signed shift right operator <sil=0.589> ,COMMA also sometimes called the arithmetic right shift operator <sil=0.993> .PERIOD It shifts the binary representation to the right <sil=0.621> ,COMMA dropping the least significant bit <sil=0.510> ,COMMA but prepending it with copies of the original sign bit <sil=0.900> .PERIOD The >> operator is not equivalent to division for signed integers <sil=0.993> .PERIOD In C <sil=0.412> ,COMMA the behavior of the >> operator depends on the data type it acts on <sil=0.932> .PERIOD Therefore <sil=0.579> ,COMMA a signed and an unsigned right shift looks exactly the same <sil=0.639> ,COMMA but produces a different result in some cases <sil=0.920> .PERIOD Contrary to popular belief <sil=0.558> ,COMMA it is possible to write C code that compiles down to the ”rotate” assembly language instruction (on CPUs that have such an instruction) <sil=0.920> .PERIOD Most compilers recognize this idiom:
  unsigned int x <sil=0.301> ;SEMICOLON unsigned int y <sil=0.443> ;SEMICOLON /* <sil=0.971> .PERIOD  <sil=0.389> .PERIOD  <sil=0.475> .PERIOD */ y = (x >> shift) | (x << (32 - shift)) <sil=0.607> ;SEMICOLON and compile it to a single 32 bit rotate instruction <sil=0.975> .PERIOD On some systems <sil=0.367> ,COMMA this may be ”#define”ed as a macro or defined as an inline function called something like ”rightrotate32” or ”rotr32” or ”ror32” in a standard header file like ”bitops <sil=0.975> .PERIOD h” <sil=0.941> .PERIOD rotate left
Most compilers recognize this idiom:
unsigned int x <sil=0.365> ;SEMICOLON unsigned int y <sil=0.408> ;SEMICOLON /* <sil=0.989> .PERIOD  <sil=0.329> .PERIOD  <sil=0.303> .PERIOD */ y = (x << shift) | (x >> (32 - shift)) <sil=0.426> ;SEMICOLON and compile it to a single 32 bit rotate instruction <sil=0.905> .PERIOD On some systems <sil=0.350> ,COMMA this may be ”#define”ed as a macro or defined as an inline function called something like ”leftrotate32” or ”rotl32” in a header file like ”bitops <sil=0.962> .PERIOD h” <sil=0.950> .PERIOD Relational and equality operators
The relational binary operators < (less than) <sil=0.395> ,COMMA > (greater than) <sil=0.518> ,COMMA <= (less than or equal) <sil=0.368> ,COMMA and >= (greater than or equal) operators return a value of 1 if the result of the operation is true <sil=0.581> ,COMMA 0 if false <sil=1.000> .PERIOD The equality binary operators == (equals) and <sil=0.957> !EXCLAMATIONMARK = (not equals) operators are similar to the relational operators except that their precedence is lower <sil=0.915> .PERIOD Bitwise Operators
The bitwise operators are & (and) <sil=0.601> ,COMMA ^ (exclusive or) and | (inclusive or) <sil=0.939> .PERIOD The & operator has higher precedence than ^ <sil=0.449> ,COMMA which has higher precedence than | <sil=0.913> .PERIOD The values being operated upon must be integral <sil=0.549> ;SEMICOLON the result is integral <sil=0.990> .PERIOD One use for the bitwise operators is to emulate bit flags <sil=0.985> .PERIOD These flags can be set with OR <sil=0.551> ,COMMA tested with AND <sil=0.602> ,COMMA flipped with XOR <sil=0.446> ,COMMA and cleared with AND NOT <sil=0.954> .PERIOD For example:
/* This code is a sample for bitwise operations <sil=0.939> .PERIOD */
#define BITFLAG1	(1)
#define BITFLAG2	(2)
#define BITFLAG3	(4) /* They are powers of 2 */
unsigned bitbucket = 0U <sil=0.640> ;SEMICOLON /* Clear all */
bitbucket |= BITFLAG1 <sil=0.606> ;SEMICOLON /* Set bit flag 1 */
bitbucket &= ~BITFLAG2 <sil=0.547> ;SEMICOLON /* Clear bit flag 2 */
bitbucket ^= BITFLAG3 <sil=0.618> ;SEMICOLON /* Flip the state of bit flag 3 from off to on or vice versa */
if (bitbucket & BITFLAG3) { /* bit flag 3 is set */
} else {
/* bit flag 3 is not set */
}
Comma Operator
The operator with the least precedence is the comma operator <sil=0.908> .PERIOD The value of the expression x <sil=0.324> ,COMMA y will evaluate both x and y <sil=0.348> ,COMMA but provides the value of y <sil=0.918> .PERIOD This operator is useful for including multiple actions in one statement (e <sil=0.990> .PERIOD g <sil=0.959> .PERIOD within a for loop conditional) <sil=0.905> .PERIOD Here are some small examples of the comma operator:
int i <sil=0.305> ,COMMA x <sil=0.355> ;SEMICOLON /* Declares two ints <sil=0.568> ,COMMA i and x <sil=0.312> ,COMMA in one declaration <sil=0.949> .PERIOD Technically <sil=0.567> ,COMMA this is not the comma operator <sil=0.927> .PERIOD */
/* this loop initializes x and i to 0 <sil=0.405> ,COMMA then runs the loop */
for (x = 0 <sil=0.555> ,COMMA i = 0 <sil=0.441> ;SEMICOLON i <= 6 <sil=0.571> ;SEMICOLON i++) { printf("x = %d <sil=0.451> ,COMMA and i = %d\n" <sil=0.496> ,COMMA x <sil=0.523> ,COMMA i) <sil=0.531> ;SEMICOLON }
Further math
The <math <sil=0.941> .PERIOD h> header contains prototypes for several functions that deal with mathematics <sil=0.906> .PERIOD In the 1990 version of the ISO standard <sil=0.393> ,COMMA only the double versions of the functions were specified <sil=0.550> ;SEMICOLON the 1999 version added the float and long double versions <sil=0.956> .PERIOD To use these math functions <sil=0.532> ,COMMA you must link your program with the math library <sil=0.952> .PERIOD For some compilers (including GCC) <sil=0.441> ,COMMA you must specify the additional parameter -lm <sil=0.943> .PERIOD The math functions may produce one of two kinds of errors <sil=0.993> .PERIOD Domain errors occur when the parameters to the functions are invalid <sil=0.468> ,COMMA such as a negative number as a parameter to sqrt (the square root function) <sil=0.923> .PERIOD Range errors occur when the result of the function cannot be expressed in that particular floating-point type <sil=0.522> ,COMMA such as pow(1000 <sil=0.930> .PERIOD 0 <sil=0.584> ,COMMA 1000 <sil=0.923> .PERIOD 0) if the maximum value of a double is around 10308 <sil=0.987> .PERIOD The functions can be grouped into the following categories:
Trigonometric functions
The acos and asin functions
The acos functions return the arccosine of their arguments in radians <sil=0.557> ,COMMA and the asin functions return the arcsine of their arguments in radians <sil=0.925> .PERIOD All functions expect the argument in the range [-1 <sil=0.498> ,COMMA +1] <sil=0.920> .PERIOD The arccosine returns a value in the range [0 <sil=0.558> ,COMMA  <sil=0.361> ?QUESTIONMARK ] <sil=0.368> ;SEMICOLON the arcsine returns a value in the range [- <sil=0.998> ?QUESTIONMARK /2 <sil=0.342> ,COMMA + <sil=0.464> ?QUESTIONMARK /2] <sil=0.924> .PERIOD #include <math <sil=0.932> .PERIOD h> float asinf(float x) <sil=0.365> ;SEMICOLON /* C99 */ float acosf(float x) <sil=0.418> ;SEMICOLON /* C99 */ double asin(double x) <sil=0.551> ;SEMICOLON double acos(double x) <sil=0.447> ;SEMICOLON long double asinl(long double x) <sil=0.361> ;SEMICOLON /* C99 */ long double acosl(long double x) <sil=0.375> ;SEMICOLON /* C99 */
The atan and atan2 functions
The atan functions return the arctangent of their arguments in radians <sil=0.318> ,COMMA and the atan2 function return the arctangent of y/x in radians <sil=0.925> .PERIOD The atan functions return a value in the range [- <sil=0.999> ?QUESTIONMARK /2 <sil=0.537> ,COMMA + <sil=0.584> ?QUESTIONMARK /2] (the reason why ± <sil=0.989> ?QUESTIONMARK /2 are included in the range is because the floating-point value may represent infinity <sil=0.447> ,COMMA and atan(± <sil=0.966> ?QUESTIONMARK ) = ± <sil=0.876> ?QUESTIONMARK /2) <sil=0.315> ;SEMICOLON the atan2 functions return a value in the range [- <sil=0.855> ?QUESTIONMARK  <sil=0.622> ,COMMA + <sil=0.433> ?QUESTIONMARK ] <sil=0.616> .PERIOD For atan2 <sil=0.404> ,COMMA a domain error may occur if both arguments are zero <sil=0.957> .PERIOD #include <math <sil=0.907> .PERIOD h> float atanf(float x) <sil=0.445> ;SEMICOLON /* C99 */ float atan2f(float y <sil=0.571> ,COMMA float x) <sil=0.390> ;SEMICOLON /* C99 */
double atan(double x) <sil=0.635> ;SEMICOLON double atan2(double y <sil=0.356> ,COMMA double x) <sil=0.439> ;SEMICOLON long double atanl(long double x) <sil=0.615> ;SEMICOLON /* C99 */ long double atan2l(long double y <sil=0.528> ,COMMA long double x) <sil=0.617> ;SEMICOLON /* C99 */

The cos <sil=0.319> ,COMMA sin <sil=0.583> ,COMMA and tan functions
The cos <sil=0.429> ,COMMA sin <sil=0.454> ,COMMA and tan functions return the cosine <sil=0.509> ,COMMA sine <sil=0.565> ,COMMA and tangent of the argument <sil=0.337> ,COMMA expressed in radians <sil=0.968> .PERIOD #include <math <sil=0.978> .PERIOD h> float cosf(float x) <sil=0.537> ;SEMICOLON /* C99 */ float sinf(float x) <sil=0.498> ;SEMICOLON /* C99 */ float tanf(float x) <sil=0.562> ;SEMICOLON /* C99 */ double cos(double x) <sil=0.342> ;SEMICOLON double sin(double x) <sil=0.542> ;SEMICOLON double tan(double x) <sil=0.528> ;SEMICOLON long double cosl(long double x) <sil=0.385> ;SEMICOLON /* C99 */ long double sinl(long double x) <sil=0.643> ;SEMICOLON /* C99 */ long double tanl(long double x) <sil=0.459> ;SEMICOLON /* C99 */
Hyperbolic functions
The cosh <sil=0.478> ,COMMA sinh and tanh functions compute the hyperbolic cosine <sil=0.328> ,COMMA the hyperbolic sine <sil=0.632> ,COMMA and the hyperbolic tangent of the argument respectively <sil=0.987> .PERIOD For the hyperbolic sine and cosine functions <sil=0.540> ,COMMA a range error occurs if the magnitude of the argument is too large <sil=0.992> .PERIOD The acosh functions compute the inverse hyperbolic cosine of the argument <sil=0.922> .PERIOD A domain error occurs for arguments less than 1 <sil=0.965> .PERIOD The asinh functions compute the inverse hyperbolic sine of the argument <sil=0.965> .PERIOD The atanh functions compute the inverse hyperbolic tangent of the argument <sil=0.911> .PERIOD A domain error occurs if the argument is not in the interval [-1 <sil=0.484> ,COMMA +1] <sil=0.914> .PERIOD A range error may occur if the argument equals -1 or +1 <sil=0.939> .PERIOD #include <math <sil=0.938> .PERIOD h> float coshf(float x) <sil=0.599> ;SEMICOLON /* C99 */ float sinhf(float x) <sil=0.636> ;SEMICOLON /* C99 */ float tanhf(float x) <sil=0.363> ;SEMICOLON /* C99 */ double cosh(double x) <sil=0.343> ;SEMICOLON double sinh(double x) <sil=0.389> ;SEMICOLON double tanh(double x) <sil=0.338> ;SEMICOLON long double coshl(long double x) <sil=0.498> ;SEMICOLON /* C99 */ long double sinhl(long double x) <sil=0.524> ;SEMICOLON /* C99 */ long double tanhl(long double x) <sil=0.432> ;SEMICOLON /* C99 */ float acoshf(float x) <sil=0.425> ;SEMICOLON /* C99 */ float asinhf(float x) <sil=0.363> ;SEMICOLON /* C99 */ float atanhf(float x) <sil=0.421> ;SEMICOLON /* C99 */ double acosh(double x) <sil=0.335> ;SEMICOLON /* C99 */
atanh(double x) <sil=0.582> ;SEMICOLON /* C99 */ long double acoshl(long double x) <sil=0.416> ;SEMICOLON /* C99 */ long double asinhl(long double x) <sil=0.576> ;SEMICOLON /* C99 */ long double atanhl(long double x) <sil=0.612> ;SEMICOLON /* C99 */
Exponential and logarithmic functions
The exp <sil=0.326> ,COMMA exp2 <sil=0.514> ,COMMA and expm1 functions
The exp functions compute the base-e exponential function of x (ex) <sil=0.949> .PERIOD A range error occurs if the magnitude of x is too large <sil=0.958> .PERIOD The exp2 functions compute the base-2 exponential function of x (2x) <sil=0.945> .PERIOD A range error occurs if the magnitude of x is too large <sil=0.909> .PERIOD The expm1 functions compute the base-e exponential function of the argument <sil=0.347> ,COMMA minus 1 <sil=0.969> .PERIOD A range error occurs if the magnitude of x is too large <sil=0.952> .PERIOD #include <math <sil=0.948> .PERIOD h> float expf(float x) <sil=0.542> ;SEMICOLON /* C99 */ double exp(double x) <sil=0.556> ;SEMICOLON long double expl(long double x) <sil=0.530> ;SEMICOLON /* C99 */ float exp2f(float x) <sil=0.587> ;SEMICOLON /* C99 */ double exp2(double x) <sil=0.487> ;SEMICOLON /* C99 */ long double exp2l(long double x) <sil=0.521> ;SEMICOLON /* C99 */ float expm1f(float x) <sil=0.320> ;SEMICOLON /* C99 */ double expm1(double x) <sil=0.354> ;SEMICOLON /* C99 */ long double expm1l(long double x) <sil=0.362> ;SEMICOLON /* C99 */
The frexp <sil=0.596> ,COMMA ldexp <sil=0.359> ,COMMA modf <sil=0.337> ,COMMA scalbn <sil=0.436> ,COMMA and scalbln functions
These functions are heavily used in software floating-point emulators <sil=0.566> ,COMMA but are otherwise rarely directly called <sil=0.924> .PERIOD Inside the computer <sil=0.621> ,COMMA each floating point number is represented by two parts:
• The significand is either in the range [1/2 <sil=0.339> ,COMMA 1) <sil=0.563> ,COMMA or it equals zero <sil=0.970> .PERIOD • The exponent is an integer <sil=0.961> .PERIOD The value of a floating point number v is v = significand×2exponent <sil=0.997> .PERIOD The frexp functions break the argument floating point number value into those two parts <sil=0.490> ,COMMA the exponent and significand <sil=0.930> .PERIOD After breaking it apart <sil=0.416> ,COMMA it stores the exponent in the int object pointed to by ex <sil=0.498> ,COMMA and returns the significand <sil=0.992> .PERIOD In other words <sil=0.541> ,COMMA the value returned is a copy of the given floating point number but with an exponent replaced by 0 <sil=0.987> .PERIOD If value is zero <sil=0.533> ,COMMA both parts of the result are zero <sil=0.904> .PERIOD The ldexp functions multiply a floating-point number by a integral power of 2 and return the result <sil=0.975> .PERIOD In other words <sil=0.343> ,COMMA it returns copy of the given floating point number with the exponent increased by ex <sil=0.932> .PERIOD A range error may occur <sil=0.962> .PERIOD The modf functions break the argument value into integer and fraction parts <sil=0.458> ,COMMA each of which has the same sign as the argument <sil=0.933> .PERIOD They store the integer part in the object pointed to by *iptr and return the fraction part <sil=0.901> .PERIOD The *iptr is a floating-point type <sil=0.637> ,COMMA rather than an ”int” type <sil=0.403> ,COMMA because it might be used to store an integer like 1 000 000 000 000 000 000 000 which is too big to fit in an int <sil=0.977> .PERIOD The scalbn and scalbln compute x × FLT_RADIXn <sil=0.981> .PERIOD FLT_RADIX is the base of the floatingpoint system <sil=0.509> ;SEMICOLON if it is 2 <sil=0.464> ,COMMA the functions are equivalent to ldexp <sil=0.911> .PERIOD #include <math <sil=0.979> .PERIOD h> float frexpf(float value <sil=0.512> ,COMMA int *ex) <sil=0.345> ;SEMICOLON /* C99 */ double frexp(double value <sil=0.532> ,COMMA int *ex) <sil=0.522> ;SEMICOLON long double frexpl(long double value <sil=0.463> ,COMMA int *ex) <sil=0.458> ;SEMICOLON /* C99 */ float ldexpf(float x <sil=0.485> ,COMMA int ex) <sil=0.563> ;SEMICOLON /* C99 */ double ldexp(double x <sil=0.470> ,COMMA int ex) <sil=0.382> ;SEMICOLON long double ldexpl(long double x <sil=0.360> ,COMMA int ex) <sil=0.472> ;SEMICOLON /* C99 */ float modff(float value <sil=0.635> ,COMMA float *iptr) <sil=0.638> ;SEMICOLON /* C99 */ double modf(double value <sil=0.627> ,COMMA double *iptr) <sil=0.387> ;SEMICOLON long double modfl(long double value <sil=0.354> ,COMMA long double *iptr) <sil=0.530> ;SEMICOLON /* C99 */

float scalbnf(float x <sil=0.522> ,COMMA int ex) <sil=0.464> ;SEMICOLON /* C99 */ double scalbn(double x <sil=0.366> ,COMMA int ex) <sil=0.593> ;SEMICOLON /* C99 */ long double scalbnl(long double x <sil=0.419> ,COMMA int ex) <sil=0.606> ;SEMICOLON /* C99 */ float scalblnf(float x <sil=0.600> ,COMMA long int ex) <sil=0.389> ;SEMICOLON /* C99 */ double scalbln(double x <sil=0.437> ,COMMA long int ex) <sil=0.366> ;SEMICOLON /* C99 */ long double scalblnl(long double x <sil=0.363> ,COMMA long int ex) <sil=0.403> ;SEMICOLON /* C99 */

Most C floating point libraries also implement the IEEE754-recommended nextafter() <sil=0.616> ,COMMA nextUp( ) <sil=0.377> ,COMMA and nextDown( ) functions <sil=0.995> .PERIOD The log <sil=0.611> ,COMMA log2 <sil=0.618> ,COMMA log1p <sil=0.501> ,COMMA and log10 functions
The log functions compute the base-e natural (not common) logarithm of the argument and return the result <sil=0.904> .PERIOD A domain error occurs if the argument is negative <sil=0.924> .PERIOD A range error may occur if the argument is zero <sil=0.904> .PERIOD The log1p functions compute the base-e natural (not common) logarithm of one plus the argument and return the result <sil=0.921> .PERIOD A domain error occurs if the argument is less than -1 <sil=0.917> .PERIOD A range error may occur if the argument is -1 <sil=0.992> .PERIOD The log10 functions compute the common (base-10) logarithm of the argument and return the result <sil=0.996> .PERIOD A domain error occurs if the argument is negative <sil=0.935> .PERIOD A range error may occur if the argument is zero <sil=0.904> .PERIOD The log2 functions compute the base-2 logarithm of the argument and return the result <sil=0.940> .PERIOD A domain error occurs if the argument is negative <sil=0.974> .PERIOD A range error may occur if the argument is zero <sil=0.981> .PERIOD #include <math <sil=0.922> .PERIOD h> float logf(float x) <sil=0.587> ;SEMICOLON /* C99 */ double log(double x) <sil=0.348> ;SEMICOLON long double logl(long double x) <sil=0.605> ;SEMICOLON /* C99 */ float log1pf(float x) <sil=0.354> ;SEMICOLON /* C99 */ double log1p(double x) <sil=0.399> ;SEMICOLON /* C99 */ long double log1pl(long double x) <sil=0.435> ;SEMICOLON /* C99 */ float log10f(float x) <sil=0.499> ;SEMICOLON /* C99 */ double log10(double x) <sil=0.610> ;SEMICOLON long double log10l(long double x) <sil=0.608> ;SEMICOLON /* C99 */ float log2f(float x) <sil=0.357> ;SEMICOLON /* C99 */ double log2(double x) <sil=0.456> ;SEMICOLON /* C99 */ long double log2l(long double x) <sil=0.649> ;SEMICOLON /* C99 */
The ilogb and logb functions
The ilogb functions extract the exponent of x as a signed int value <sil=0.939> .PERIOD If x is zero <sil=0.606> ,COMMA they return the value FP_ILOGB0 <sil=0.582> ;SEMICOLON if x is infinite <sil=0.605> ,COMMA they return the value INT_MAX <sil=0.611> ;SEMICOLON if x is not-anumber they return the value FP_ILOGBNAN <sil=0.593> ;SEMICOLON otherwise <sil=0.575> ,COMMA they are equivalent to calling the corresponding logb function and casting the returned value to type int <sil=0.938> .PERIOD A range error may occur if x is zero <sil=0.971> .PERIOD FP_ILOGB0 and FP_ILOGBNAN are macros defined in math <sil=0.933> .PERIOD h <sil=0.932> ;SEMICOLON INT_MAX is a macro defined in limits <sil=0.973> .PERIOD h <sil=0.953> .PERIOD The logb functions extract the exponent of x as a signed integer value in floating-point format <sil=0.964> .PERIOD If x is subnormal <sil=0.530> ,COMMA it is treated as if it were normalized <sil=0.387> ;SEMICOLON thus <sil=0.322> ,COMMA for positive finite x <sil=0.530> ,COMMA 1 <sil=0.449> ?QUESTIONMARK x × FLT_RADIX-logb(x) < FLT_RADIX <sil=0.971> .PERIOD FLT_RADIX is the radix for floating-point numbers <sil=0.615> ,COMMA defined in the float <sil=0.952> .PERIOD h header <sil=0.908> .PERIOD #include <math <sil=0.934> .PERIOD h> int ilogbf(float x) <sil=0.477> ;SEMICOLON /* C99 */ int ilogb(double x) <sil=0.480> ;SEMICOLON /* C99 */ int ilogbl(long double x) <sil=0.337> ;SEMICOLON /* C99 */

float logbf(float x) <sil=0.492> ;SEMICOLON /* C99 */ double logb(double x) <sil=0.581> ;SEMICOLON /* C99 */ long double logbl(long double x) <sil=0.490> ;SEMICOLON /* C99 */

Power functions
The pow functions
The pow functions compute x raised to the power y and return the result <sil=0.910> .PERIOD A domain error occurs if x is negative and y is not an integral value <sil=0.987> .PERIOD A domain error occurs if the result cannot be represented when x is zero and y is less than or equal to zero <sil=0.960> .PERIOD A range error may occur <sil=0.958> .PERIOD #include <math <sil=0.985> .PERIOD h>
float powf(float x <sil=0.358> ,COMMA float y) <sil=0.645> ;SEMICOLON /* C99 */ double pow(double x <sil=0.523> ,COMMA double y) <sil=0.542> ;SEMICOLON long double powl(long double x <sil=0.347> ,COMMA long double y) <sil=0.316> ;SEMICOLON /* C99 */

The sqrt functions
The sqrt functions compute the positive square root of x and return the result <sil=0.981> .PERIOD A domain error occurs if the argument is negative <sil=0.938> .PERIOD #include <math <sil=0.963> .PERIOD h> float sqrtf(float x) <sil=0.635> ;SEMICOLON /* C99 */ double sqrt(double x) <sil=0.449> ;SEMICOLON long double sqrtl(long double x) <sil=0.625> ;SEMICOLON /* C99 */

The cbrt functions
The cbrt functions compute the cube root of x and return the result <sil=0.928> .PERIOD #include <math <sil=0.920> .PERIOD h> float cbrtf(float x) <sil=0.493> ;SEMICOLON /* C99 */ double cbrt(double x) <sil=0.576> ;SEMICOLON /* C99 */ long double cbrtl(long double x) <sil=0.520> ;SEMICOLON /* C99 */

The hypot functions
The hypot functions compute the square root of the sums of the squares of x and y <sil=0.310> ,COMMA without overflow or underflow <sil=0.487> ,COMMA and return the result <sil=1.000> .PERIOD #include <math <sil=0.941> .PERIOD h>
float hypotf(float x <sil=0.577> ,COMMA float y) <sil=0.365> ;SEMICOLON /* C99 */ double hypot(double x <sil=0.597> ,COMMA double y) <sil=0.477> ;SEMICOLON /* C99 */ long double hypotl(long double x <sil=0.629> ,COMMA long double y) <sil=0.644> ;SEMICOLON /* C99 */

Nearest integer <sil=0.370> ,COMMA absolute value <sil=0.619> ,COMMA and remainder functions
The ceil and floor functions
The ceil functions compute the smallest integral value not less than x and return the result <sil=0.593> ;SEMICOLON the floor functions compute the largest integral value not greater than x and return the result <sil=0.920> .PERIOD #include <math <sil=0.970> .PERIOD h> float ceilf(float x) <sil=0.618> ;SEMICOLON /* C99 */ double ceil(double x) <sil=0.480> ;SEMICOLON long double ceill(long double x) <sil=0.633> ;SEMICOLON /* C99 */ float floorf(float x) <sil=0.435> ;SEMICOLON /* C99 */ double floor(double x) <sil=0.436> ;SEMICOLON long double floorl(long double x) <sil=0.329> ;SEMICOLON /* C99 */
The fabs functions
The fabs functions compute the absolute value of a floating-point number x and return the result <sil=0.906> .PERIOD #include <math <sil=0.983> .PERIOD h> float fabsf(float x) <sil=0.535> ;SEMICOLON /* C99 */ double fabs(double x) <sil=0.542> ;SEMICOLON long double fabsl(long double x) <sil=0.327> ;SEMICOLON /* C99 */

The fmod functions
The fmod functions compute the floating-point remainder of x/y and return the value x i * y <sil=0.402> ,COMMA for some integer i such that <sil=0.498> ,COMMA if y is nonzero <sil=0.491> ,COMMA the result has the same sign as x and magnitude less than the magnitude of y <sil=0.931> .PERIOD If y is zero <sil=0.390> ,COMMA whether a domain error occurs or the fmod functions return zero is implementation-defined <sil=0.996> .PERIOD #include <math <sil=0.960> .PERIOD h>
float fmodf(float x <sil=0.585> ,COMMA float y) <sil=0.572> ;SEMICOLON /* C99 */ double fmod(double x <sil=0.604> ,COMMA double y) <sil=0.368> ;SEMICOLON long double fmodl(long double x <sil=0.457> ,COMMA long double y) <sil=0.340> ;SEMICOLON /* C99 */

The nearbyint <sil=0.347> ,COMMA rint <sil=0.550> ,COMMA lrint <sil=0.503> ,COMMA and llrint functions
The nearbyint functions round their argument to an integer value in floating-point format <sil=0.585> ,COMMA using the current rounding direction and without raising the ”inexact” floating-point exception <sil=0.928> .PERIOD The rint functions are similar to the nearbyint functions except that they can raise the ”inexact” floating-point exception if the result differs in value from the argument <sil=0.994> .PERIOD The lrint and llrint functions round their arguments to the nearest integer value according to the current rounding direction <sil=0.947> .PERIOD If the result is outside the range of values of the return type <sil=0.588> ,COMMA the numeric result is undefined and a range error may occur if the magnitude of the argument is too large <sil=0.913> .PERIOD #include <math <sil=0.928> .PERIOD h> float nearbyintf(float x) <sil=0.571> ;SEMICOLON /* C99 */ double nearbyint(double x) <sil=0.513> ;SEMICOLON /* C99 */ long double nearbyintl(long double x) <sil=0.630> ;SEMICOLON /* C99 */ float rintf(float x) <sil=0.605> ;SEMICOLON /* C99 */ double rint(double x) <sil=0.345> ;SEMICOLON /* C99 */ long double rintl(long double x) <sil=0.455> ;SEMICOLON /* C99 */ long int lrintf(float x) <sil=0.319> ;SEMICOLON /* C99 */ long int lrint(double x) <sil=0.500> ;SEMICOLON /* C99 */ long int lrintl(long double x) <sil=0.577> ;SEMICOLON /* C99 */ long long int llrintf(float x) <sil=0.430> ;SEMICOLON /* C99 */ long long int llrint(double x) <sil=0.319> ;SEMICOLON /* C99 */ long long int llrintl(long double x) <sil=0.400> ;SEMICOLON /* C99 */
The round <sil=0.498> ,COMMA lround <sil=0.570> ,COMMA and llround functions
The round functions round the argument to the nearest integer value in floating-point format <sil=0.409> ,COMMA rounding halfway cases away from zero <sil=0.357> ,COMMA regardless of the current rounding direction <sil=0.926> .PERIOD The lround and llround functions round the argument to the nearest integer value <sil=0.432> ,COMMA rounding halfway cases away from zero <sil=0.303> ,COMMA regardless of the current rounding direction <sil=0.941> .PERIOD If the result is outside the range of values of the return type <sil=0.325> ,COMMA the numeric result is undefined and a range error may occur if the magnitude of the argument is too large <sil=0.957> .PERIOD #include <math <sil=0.905> .PERIOD h> float roundf(float x) <sil=0.572> ;SEMICOLON /* C99 */ double round(double x) <sil=0.374> ;SEMICOLON /* C99 */ long double roundl(long double x) <sil=0.457> ;SEMICOLON /* C99 */ long int lroundf(float x) <sil=0.572> ;SEMICOLON /* C99 */ long int lround(double x) <sil=0.490> ;SEMICOLON /* C99 */ long int lroundl(long double x) <sil=0.303> ;SEMICOLON /* C99 */ long long int llroundf(float x) <sil=0.416> ;SEMICOLON /* C99 */ long long int llround(double x) <sil=0.430> ;SEMICOLON /* C99 */ long long int llroundl(long double x) <sil=0.575> ;SEMICOLON /* C99 */
The trunc functions
The trunc functions round their argument to the integer value in floating-point format that is nearest but no larger in magnitude than the argument <sil=0.972> .PERIOD #include <math <sil=0.928> .PERIOD h> float truncf(float x) <sil=0.542> ;SEMICOLON /* C99 */ double trunc(double x) <sil=0.522> ;SEMICOLON /* C99 */ long double truncl(long double x) <sil=0.329> ;SEMICOLON /* C99 */

The remainder functions
The remainder functions compute the remainder x REM y as defined by IEC 60559 <sil=0.928> .PERIOD The definition reads <sil=0.351> ,COMMA ”When y <sil=0.913> ?QUESTIONMARK 0 <sil=0.503> ,COMMA the remainder r = x REM y is defined regardless of the rounding mode by the mathematical reduction r = x - ny <sil=0.516> ,COMMA where n is the integer nearest the exact value of x/y <sil=0.641> ;SEMICOLON whenever |n - x/y| = ½ <sil=0.586> ,COMMA then n is even <sil=0.967> .PERIOD Thus <sil=0.560> ,COMMA the remainder is always exact <sil=0.952> .PERIOD If r = 0 <sil=0.538> ,COMMA its sign shall be that of x <sil=0.921> .PERIOD ” 
This definition is applicable for all implementations <sil=0.914> .PERIOD #include <math <sil=0.925> .PERIOD h> float remainderf(float x <sil=0.626> ,COMMA float y) <sil=0.591> ;SEMICOLON /* C99 */ double remainder(double x <sil=0.603> ,COMMA double y) <sil=0.311> ;SEMICOLON /* C99 */ long double remainderl(long double x <sil=0.407> ,COMMA long double y) <sil=0.563> ;SEMICOLON /* C99 */

The remquo functions
The remquo functions return the same remainder as the remainder functions <sil=0.925> .PERIOD In the object pointed to by quo <sil=0.519> ,COMMA they store a value whose sign is the sign of x/y and whose magnitude is congruent modulo 2n to the magnitude of the integral quotient of x/y <sil=0.359> ,COMMA where n is an implementation-defined integer greater than or equal to 3 <sil=0.934> .PERIOD #include <math <sil=0.951> .PERIOD h>
float remquof(float x <sil=0.478> ,COMMA float y <sil=0.382> ,COMMA int *quo) <sil=0.596> ;SEMICOLON /* C99 */ double remquo(double x <sil=0.493> ,COMMA double y <sil=0.566> ,COMMA int *quo) <sil=0.384> ;SEMICOLON /* C99 */ long double remquol(long double x <sil=0.647> ,COMMA long double y <sil=0.612> ,COMMA int *quo) <sil=0.401> ;SEMICOLON /* C99 */

Error and gamma functions
The erf functions compute the error function of the argument t2 dt <sil=0.633> ;SEMICOLON the erfc functions compute the complimentary error function of the argument (that is <sil=0.613> ,COMMA 1 erf x) <sil=0.953> .PERIOD For the erfc functions <sil=0.456> ,COMMA a range error may occur if the argument is too large <sil=0.986> .PERIOD The lgamma functions compute the natural logarithm of the absolute value of the gamma of the argument (that is <sil=0.385> ,COMMA loge| <sil=0.956> ?QUESTIONMARK (x)|) <sil=0.902> .PERIOD A range error may occur if the argument is a negative integer or zero <sil=0.907> .PERIOD The tgamma functions compute the gamma of the argument (that is <sil=0.544> ,COMMA  <sil=0.958> ?QUESTIONMARK (x)) <sil=0.989> .PERIOD A domain error occurs if the argument is a negative integer or if the result cannot be represented when the argument is zero <sil=0.921> .PERIOD A range error may occur <sil=0.934> .PERIOD #include <math <sil=0.926> .PERIOD h> float erff(float x) <sil=0.429> ;SEMICOLON /* C99 */ double erf(double x) <sil=0.413> ;SEMICOLON /* C99 */ long double erfl(long double x) <sil=0.587> ;SEMICOLON /* C99 */ float erfcf(float x) <sil=0.567> ;SEMICOLON /* C99 */ double erfc(double x) <sil=0.470> ;SEMICOLON /* C99 */ long double erfcl(long double x) <sil=0.425> ;SEMICOLON /* C99 */ float lgammaf(float x) <sil=0.599> ;SEMICOLON /* C99 */ double lgamma(double x) <sil=0.341> ;SEMICOLON /* C99 */ long double lgammal(long double x) <sil=0.572> ;SEMICOLON /* C99 */ float tgammaf(float x) <sil=0.513> ;SEMICOLON /* C99 */
double tgamma(double x) <sil=0.513> ;SEMICOLON /* C99 */ long double tgammal(long double x) <sil=0.509> ;SEMICOLON /* C99 */
Control
Very few programs follow exactly one control path and have each instruction stated explicitly <sil=0.939> .PERIOD In order to program effectively <sil=0.504> ,COMMA it is necessary to understand how one can alter the steps taken by a program due to user input or other conditions <sil=0.468> ,COMMA how some steps can be executed many times with few lines of code <sil=0.604> ,COMMA and how programs can appear to demonstrate a rudimentary grasp of logic <sil=0.979> .PERIOD C constructs known as conditionals and loops grant this power <sil=0.975> .PERIOD From this point forward <sil=0.328> ,COMMA it is necessary to understand what is usually meant by the word block <sil=0.908> .PERIOD A block is a group of code statements that are associated and intended to be executed as a unit <sil=0.945> .PERIOD In C <sil=0.458> ,COMMA the beginning of a block of code is denoted with { (left curly) <sil=0.445> ,COMMA and the end of a block is denoted with } <sil=0.957> .PERIOD It is not necessary to place a semicolon after the end of a block <sil=0.978> .PERIOD Blocks can be empty <sil=0.587> ,COMMA as in {} <sil=0.911> .PERIOD Blocks can also be nested <sil=0.335> ;SEMICOLON i <sil=0.517> .PERIOD e <sil=0.437> .PERIOD there can be blocks of code within larger blocks <sil=0.955> .PERIOD Conditionals
There is likely no meaningful program written in which a computer does not demonstrate basic decision-making skills <sil=0.970> .PERIOD It can actually be argued that there is no meaningful human activity in which some sort of decision-making <sil=0.424> ,COMMA instinctual or otherwise <sil=0.493> ,COMMA does not take place <sil=0.938> .PERIOD For example <sil=0.328> ,COMMA when driving a car and approaching a traffic light <sil=0.617> ,COMMA one does not think <sil=0.385> ,COMMA ”I will continue driving through the intersection <sil=0.981> .PERIOD ” 
Rather <sil=0.534> ,COMMA one thinks <sil=0.534> ,COMMA ”I will stop if the light is red <sil=0.387> ,COMMA go if the light is green <sil=0.567> ,COMMA and if yellow go only if I am traveling at a certain speed a certain distance from the intersection <sil=0.971> .PERIOD ”
These kinds of processes can be simulated in C using conditionals <sil=0.975> .PERIOD A conditional is a statement that instructs the computer to execute a certain block of code or alter certain data only if a specific condition has been met <sil=0.960> .PERIOD The most common conditional is the If-Else statement <sil=0.612> ,COMMA with conditional expressions and Switch-Case statements typically used as more shorthanded methods <sil=0.932> .PERIOD Before one can understand conditional statements <sil=0.415> ,COMMA it is first necessary to understand how C expresses logical relations <sil=0.979> .PERIOD C treats logic as being arithmetic <sil=0.965> .PERIOD The value 0 (zero) represents false <sil=0.631> ,COMMA and all other values represent true <sil=0.980> .PERIOD If you chose some particular value to represent true and then compare values against it <sil=0.579> ,COMMA sooner or later your code will fail when your assumed value (often 1) turns out to be incorrect <sil=0.917> .PERIOD Code written by people uncomfortable with the C language can often be identified by the usage of #define to make a ”TRUE” value <sil=0.949> .PERIOD Because logic is arithmetic in C <sil=0.504> ,COMMA arithmetic operators and logical operators are one and the same <sil=0.982> .PERIOD Nevertheless <sil=0.618> ,COMMA there are a number of operators that are typically associated with logic:
Relational and Equivalence Expressions:
a < b
 1 if a is less than b <sil=0.314> ,COMMA 0 otherwise <sil=0.947> .PERIOD a > b
 1 if a is greater than b <sil=0.516> ,COMMA 0 otherwise <sil=0.949> .PERIOD a <= b
 1 if a is less than or equal to b <sil=0.428> ,COMMA 0 otherwise <sil=0.983> .PERIOD a >= b
 1 if a is greater than or equal to b <sil=0.484> ,COMMA 0 otherwise <sil=0.994> .PERIOD a == b
 1 if a is equal to b <sil=0.357> ,COMMA 0 otherwise <sil=0.921> .PERIOD a <sil=0.502> !EXCLAMATIONMARK = b
1 if a is not equal to b <sil=0.431> ,COMMA 0 otherwise
New programmers should take special note of the fact that the ”equal to” operator is == <sil=0.333> ,COMMA not = <sil=0.926> .PERIOD This is the cause of numerous coding mistakes and is often a difficult-to-find bug <sil=0.629> ,COMMA as the expression (a = b) sets a equal to b and subsequently evaluates to b <sil=0.646> ;SEMICOLON but the expression (a == b) <sil=0.543> ,COMMA which is usually intended <sil=0.510> ,COMMA checks if a is equal to b <sil=0.921> .PERIOD It needs to be pointed out that <sil=0.438> ,COMMA if you confuse = with == <sil=0.633> ,COMMA your mistake will often not be brought to your attention by the compiler <sil=0.968> .PERIOD A statement such as if (c = 20) {}is considered perfectly valid by the language <sil=0.572> ,COMMA but will always assign 20 to c and evaluate as true <sil=0.919> .PERIOD A simple technique to avoid this kind of bug (in many <sil=0.414> ,COMMA not all cases) is to put the constant first <sil=0.940> .PERIOD This will cause the compiler to issue an error <sil=0.648> ,COMMA if == got misspelled with = <sil=0.986> .PERIOD Note that C does not have a dedicated boolean type as many other languages do <sil=0.991> .PERIOD 0 means false and anything else true <sil=0.902> .PERIOD So the following are equivalent:
if (foo()) {
  // do something }
and
if (foo() <sil=0.969> !EXCLAMATIONMARK = 0) {
  // do something }
Often #define TRUE 1 and #define FALSE 0 are used to work around the lack of a boolean type <sil=0.939> .PERIOD This is bad practice <sil=0.589> ,COMMA since it makes assumptions that do not hold <sil=0.948> .PERIOD It is a better idea to indicate what you are actually expecting as a result from a function call <sil=0.320> ,COMMA as there are many different ways of indicating error conditions <sil=0.613> ,COMMA depending on the situation <sil=0.935> .PERIOD if (strstr("foo" <sil=0.602> ,COMMA bar) >= 0) { // bar contains "foo" }
Here <sil=0.318> ,COMMA strstr returns the index where the substring foo is found and -1 if it was not found <sil=0.952> .PERIOD Note that this would fail with the TRUE definition mentioned in the previous paragraph <sil=0.977> .PERIOD It would also not produce the expected results if we omitted the >= 0 <sil=0.976> .PERIOD One other thing to note is that the relational expressions do not evaluate as they would in mathematical texts <sil=0.931> .PERIOD That is <sil=0.578> ,COMMA an expression myMin < value < myMax does not evaluate as you probably think it might <sil=0.937> .PERIOD Mathematically <sil=0.461> ,COMMA this would test whether or not value is between myMin and myMax <sil=0.960> .PERIOD But in C <sil=0.466> ,COMMA what happens is that value is first compared with myMin <sil=0.981> .PERIOD This produces either a 0 or a 1 <sil=0.978> .PERIOD It is this value that is compared against myMax <sil=0.983> .PERIOD Example:
int value = 20 <sil=0.616> ;SEMICOLON /* <sil=0.948> .PERIOD  <sil=0.508> .PERIOD  <sil=0.577> .PERIOD */ if (0 < value < 10) { // don't do this <sil=0.877> !EXCLAMATIONMARK it always evaluates to "true" <sil=0.948> !EXCLAMATIONMARK /* do some stuff */
}
Because value is greater than 0 <sil=0.315> ,COMMA the first comparison produces a value of 1 <sil=0.946> .PERIOD Now 1 is compared to be less than 10 <sil=0.562> ,COMMA which is true <sil=0.630> ,COMMA so the statements in the if are executed <sil=0.941> .PERIOD This probably is not what the programmer expected <sil=0.939> .PERIOD The appropriate code would be
int value = 20 <sil=0.336> ;SEMICOLON /* <sil=0.963> .PERIOD  <sil=0.647> .PERIOD  <sil=0.515> .PERIOD */ if (0 < value && value < 10) {	// the && means "and" /* do some stuff */
}
Logical Expressions
a || b when EITHER a or b is true (or both) <sil=0.373> ,COMMA the result is 1 <sil=0.428> ,COMMA otherwise the result is 0 <sil=0.929> .PERIOD a && b when BOTH a and b are true <sil=0.576> ,COMMA the result is 1 <sil=0.559> ,COMMA otherwise the result is 0 <sil=0.997> .PERIOD  <sil=0.959> !EXCLAMATIONMARK a when a is true <sil=0.306> ,COMMA the result is 0 <sil=0.650> ,COMMA when a is 0 <sil=0.529> ,COMMA the result is 1 <sil=0.459> .PERIOD Here's an example of a larger logical expression <sil=0.969> .PERIOD In the statement:
e = ((a && b) || (c > d)) <sil=0.640> ;SEMICOLON e is set equal to 1 if a and b are non-zero <sil=0.356> ,COMMA or if c is greater than d <sil=0.941> .PERIOD In all other cases <sil=0.628> ,COMMA e is set to 0 <sil=0.938> .PERIOD C uses short circuit evaluation of logical expressions <sil=0.933> .PERIOD That is to say <sil=0.614> ,COMMA once it is able to determine the truth of a logical expression <sil=0.352> ,COMMA it does no further evaluation <sil=0.959> .PERIOD This is often useful as in the following:
int myArray[12] <sil=0.519> ;SEMICOLON  <sil=0.965> .PERIOD  <sil=0.557> .PERIOD  <sil=0.364> .PERIOD  <sil=0.598> .PERIOD if (i < 12 && myArray[i] > 3) { <sil=0.913> .PERIOD  <sil=0.462> .PERIOD  <sil=0.402> .PERIOD  <sil=0.601> .PERIOD In the snippet of code <sil=0.571> ,COMMA the comparison of i with 12 is done first <sil=0.955> .PERIOD If it evaluates to 0 (false) <sil=0.566> ,COMMA i would be out of bounds as an index to myArray <sil=0.991> .PERIOD In this case <sil=0.468> ,COMMA the program never attempts to access myArray[i] since the truth of the expression is known to be false <sil=0.910> .PERIOD Hence we need not worry here about trying to access an out-of-bounds array element if it is already known that i is greater than or equal to zero <sil=0.976> .PERIOD A similar thing happens with expressions involving the or || operator <sil=0.985> .PERIOD while (doThis() || doThat()) <sil=0.908> .PERIOD  <sil=0.629> .PERIOD  <sil=0.578> .PERIOD doThat() is never called if doThis() returns a non-zero (true) value <sil=0.908> .PERIOD Bitwise Boolean Expressions
The bitwise operators work bit by bit on the operands <sil=0.928> .PERIOD The operands must be of integral type (one of the types used for integers) <sil=0.955> .PERIOD The six bitwise operators are & (AND) <sil=0.541> ,COMMA | (OR) <sil=0.361> ,COMMA ^ (exclusive OR <sil=0.609> ,COMMA commonly called XOR) <sil=0.310> ,COMMA ~ (NOT <sil=0.613> ,COMMA which changes 1 to 0 and 0 to 1) <sil=0.308> ,COMMA << (shift left) <sil=0.533> ,COMMA and >> (shift right) <sil=0.990> .PERIOD The negation operator is a unary operator which precedes the operand <sil=0.958> .PERIOD The others are binary operators which lie between the two operands <sil=0.946> .PERIOD The precedence of these operators is lower than that of the relational and equivalence operators <sil=0.324> ;SEMICOLON it is often required to parenthesize expressions involving bitwise operators <sil=0.979> .PERIOD For this section <sil=0.337> ,COMMA recall that a number starting with 0x is hexadecimal <sil=0.442> ,COMMA or hex for short <sil=0.932> .PERIOD Unlike the normal decimal system using powers of 10 and digits 0123456789 <sil=0.362> ,COMMA hex uses powers of 16 and digits 0123456789abcdef <sil=0.908> .PERIOD Hexadecimal is commonly used in C programs because a programmer can quickly convert it to or from binary (powers of 2 and digits 01) <sil=0.910> .PERIOD C does not directly support binary notation <sil=0.439> ,COMMA which would be really verbose anyway <sil=0.901> .PERIOD a & b
bitwise boolean and of a and b
  0xc & 0xa produces the value 0x8 (in binary <sil=0.523> ,COMMA 1100 & 1010 produces 1000) a | b
bitwise boolean or of a and b
0xc | 0xa produces the value 0xe (in binary <sil=0.573> ,COMMA 1100 | 1010 produces 1110)
a ^ b
bitwise xor of a and b
0xc ^ 0xa produces the value 0x6 (in binary <sil=0.384> ,COMMA 1100 ^ 1010 produces 0110)
~a
bitwise complement of a <sil=0.933> .PERIOD ~0xc produces the value -1-0xc (in binary <sil=0.495> ,COMMA ~1100 produces <sil=0.928> .PERIOD  <sil=0.582> .PERIOD  <sil=0.320> .PERIOD 11110011 where ” <sil=0.961> .PERIOD  <sil=0.455> .PERIOD  <sil=0.437> .PERIOD ” may be many more 1 bits) a << b
shift a left by b (multiply a by 2b)
 0xc << 1 produces the value 0x18 (in binary <sil=0.381> ,COMMA 1100 << 1 produces the value 11000) a >> b
shift a right by b (divide a by 2b)
0xc >> 1 produces the value 0x6 (in binary <sil=0.557> ,COMMA 1100 >> 1 produces the value 110)
The If-Else statement
If-Else provides a way to instruct the computer to execute a block of code only if certain conditions have been met <sil=0.932> .PERIOD The syntax of an If-Else construct is:
if (/* condition goes here */) {
/* if the condition is non-zero (true) <sil=0.412> ,COMMA this code will execute */
} else {
  /* if the condition is 0 (false) <sil=0.575> ,COMMA this code will execute */ }
The first block of code executes if the condition in parentheses directly after the if evaluates to non-zero (true) <sil=0.334> ;SEMICOLON otherwise <sil=0.405> ,COMMA the second block executes <sil=0.900> .PERIOD The else and following block of code are completely optional <sil=0.930> .PERIOD If there is no need to execute code if a condition is not true <sil=0.542> ,COMMA leave it out <sil=0.933> .PERIOD Also <sil=0.330> ,COMMA keep in mind that an if can directly follow an else statement <sil=0.915> .PERIOD While this can occasionally be useful <sil=0.362> ,COMMA chaining more than two or three if-elses in this fashion is considered bad programming practice <sil=0.976> .PERIOD We can get around this with the Switch-Case construct described later <sil=0.931> .PERIOD Two other general syntax notes need to be made that you will also see in other control constructs: First <sil=0.497> ,COMMA note that there is no semicolon after if or else <sil=0.955> .PERIOD There could be <sil=0.567> ,COMMA but the block (code enclosed in { and }) takes the place of that <sil=0.971> .PERIOD Second <sil=0.536> ,COMMA if you only intend to execute one statement as a result of an if or else <sil=0.497> ,COMMA curly braces are not needed <sil=0.914> .PERIOD However <sil=0.602> ,COMMA many programmers believe that inserting curly braces anyway in this case is good coding practice <sil=0.960> .PERIOD The following code sets a variable c equal to the greater of two variables a and b <sil=0.414> ,COMMA or 0 if a and b are equal <sil=0.945> .PERIOD if (a > b) {
c = a <sil=0.306> ;SEMICOLON } else if (b > a) { c = b <sil=0.548> ;SEMICOLON } else { c = 0 <sil=0.349> ;SEMICOLON }
Consider this question: why can't you just forget about else and write the code like:
if (a > b) {
c = a <sil=0.617> ;SEMICOLON }
if (a < b) {
c = b <sil=0.591> ;SEMICOLON }
if (a == b) {
c = 0 <sil=0.462> ;SEMICOLON }
There are several answers to this <sil=0.939> .PERIOD Most importantly <sil=0.586> ,COMMA if your conditionals are not mutually exclusive <sil=0.513> ,COMMA two cases could execute instead of only one <sil=0.975> .PERIOD If the code was different and the value of a or b changes somehow (e <sil=0.972> .PERIOD g <sil=0.911> .PERIOD : you reset the lesser of a and b to 0 after the comparison) during one of the blocks <sil=0.975> ?QUESTIONMARK You could end up with multiple if statements being invoked <sil=0.414> ,COMMA which is not your intent <sil=0.973> .PERIOD Also <sil=0.628> ,COMMA evaluating if conditionals takes processor time <sil=0.939> .PERIOD If you use else to handle these situations <sil=0.316> ,COMMA in the case above assuming (a > b) is non-zero (true) <sil=0.575> ,COMMA the program is spared the expense of evaluating additional if statements <sil=0.960> .PERIOD The bottom line is that it is usually best to insert an else clause for all cases in which a conditional will not evaluate to non-zero (true) <sil=0.914> .PERIOD The conditional expression
A conditional expression is a way to set values conditionally in a more shorthand fashion than If-Else <sil=0.944> .PERIOD The syntax is:
(/* logical expression goes here */) <sil=0.864> ?QUESTIONMARK (/* if non-zero (true) */) : (/* if 0 (false) */)
The logical expression is evaluated <sil=0.984> .PERIOD If it is non-zero (true) <sil=0.418> ,COMMA the overall conditional expression evaluates to the expression placed between the <sil=0.958> ?QUESTIONMARK and : <sil=0.353> ,COMMA otherwise <sil=0.588> ,COMMA it evaluates to the expression after the : <sil=0.985> .PERIOD Therefore <sil=0.374> ,COMMA the above example (changing its function slightly such that c is set to b when a and b are equal) becomes:
c = (a > b) <sil=0.937> ?QUESTIONMARK a : b <sil=0.366> ;SEMICOLON Conditional expressions can sometimes clarify the intent of the code <sil=0.941> .PERIOD Nesting the conditional operator should usually be avoided <sil=0.972> .PERIOD It's best to use conditional expressions only when the expressions for a and b are simple <sil=0.908> .PERIOD Also <sil=0.487> ,COMMA contrary to a common beginner belief <sil=0.489> ,COMMA conditional expressions do not make for faster code <sil=0.948> .PERIOD As tempting as it is to assume that fewer lines of code result in faster execution times <sil=0.627> ,COMMA there is no such correlation <sil=0.953> .PERIOD The Switch-Case statement
Say you write a program where the user inputs a number 1-5 (corresponding to student grades <sil=0.578> ,COMMA A(represented as 1)-D(4) and F(5)) <sil=0.619> ,COMMA stores it in a variable grade and the program responds by printing to the screen the associated letter grade <sil=0.924> .PERIOD If you implemented this using If-Else <sil=0.510> ,COMMA your code would look something like this:
if (grade == 1) { printf("A\n") <sil=0.383> ;SEMICOLON } else if (grade == 2) { printf("B\n") <sil=0.535> ;SEMICOLON } else if /* etc <sil=0.970> .PERIOD etc <sil=0.922> .PERIOD */
Having a long chain of if-else-if-else-if-else can be a pain <sil=0.488> ,COMMA both for the programmer and anyone reading the code <sil=0.931> .PERIOD Fortunately <sil=0.348> ,COMMA there's a solution: the Switch-Case construct <sil=0.371> ,COMMA of which the basic syntax is:
switch (/* integer or enum goes here */) { case /* potential value of the aforementioned int or enum */:
  /* code */ case /* a different potential value */: /* different code */
/* insert additional cases as needed */ default:
/* more code */
}
The Switch-Case construct takes a variable <sil=0.608> ,COMMA usually an int or an enum <sil=0.399> ,COMMA placed after switch <sil=0.649> ,COMMA and compares it to the value following the case keyword <sil=0.957> .PERIOD If the variable is equal to the value specified after case <sil=0.579> ,COMMA the construct ”activates” <sil=0.589> ,COMMA or begins executing the code after the case statement <sil=0.974> .PERIOD Once the construct has ”activated” <sil=0.639> ,COMMA there will be no further evaluation of cases <sil=0.987> .PERIOD Switch-Case is syntactically ”weird” in that no braces are required for code associated with a case <sil=0.961> .PERIOD Very important: Typically <sil=0.646> ,COMMA the last statement for each case is a break statement <sil=0.924> .PERIOD This causes program execution to jump to the statement following the closing bracket of the switch statement <sil=0.358> ,COMMA which is what one would normally want to happen <sil=0.902> .PERIOD However if the break statement is omitted <sil=0.641> ,COMMA program execution continues with the first line of the next case <sil=0.314> ,COMMA if any <sil=0.977> .PERIOD This is called a fall-through <sil=0.952> .PERIOD When a programmer desires this action <sil=0.311> ,COMMA a comment should be placed at the end of the block of statements indicating the desire to fall through <sil=0.937> .PERIOD Otherwise another programmer maintaining the code could consider the omission of the 'break' to be an error <sil=0.512> ,COMMA and inadvertently 'correct' the problem <sil=0.945> .PERIOD Here's an example:
switch (someVariable) { case 1: printf("This code handles case 1\n") <sil=0.365> ;SEMICOLON break <sil=0.312> ;SEMICOLON case 2:
printf("This prints when someVariable is 2 <sil=0.396> ,COMMA along with <sil=0.937> .PERIOD  <sil=0.605> .PERIOD  <sil=0.532> .PERIOD \n") <sil=0.307> ;SEMICOLON /* FALL THROUGH */ case 3: printf("This prints when someVariable is either 2 or 3 <sil=0.966> .PERIOD \n" ) <sil=0.344> ;SEMICOLON break <sil=0.360> ;SEMICOLON }
If a default case is specified <sil=0.348> ,COMMA the associated statements are executed if none of the other cases match <sil=0.927> .PERIOD A default case is optional <sil=0.992> .PERIOD Here's a switch statement that corresponds to the sequence of if - else if statements above <sil=0.970> .PERIOD Back to our example above <sil=0.937> .PERIOD Here's what it would look like as Switch-Case:
switch (grade) { case 1:
  printf("A\n") <sil=0.336> ;SEMICOLON break <sil=0.619> ;SEMICOLON case 2: printf("B\n") <sil=0.470> ;SEMICOLON break <sil=0.433> ;SEMICOLON case 3:
printf("C\n") <sil=0.422> ;SEMICOLON break <sil=0.313> ;SEMICOLON case 4:
  printf("D\n") <sil=0.553> ;SEMICOLON break <sil=0.545> ;SEMICOLON default: printf("F\n") <sil=0.474> ;SEMICOLON break <sil=0.493> ;SEMICOLON }
A set of statements to execute can be grouped with more than one value of the variable as in the following example <sil=0.912> .PERIOD (the fall-through comment is not necessary here because the intended behavior is obvious)
switch (something) { case 2: case 3:
case 4:
/* some statements to execute for 2 <sil=0.563> ,COMMA 3 or 4 */ break <sil=0.447> ;SEMICOLON case 1:
default:
  /* some statements to execute for 1 or other than 2 <sil=0.355> ,COMMA 3 <sil=0.326> ,COMMA and 4 */ break <sil=0.331> ;SEMICOLON }
Switch-Case constructs are particularly useful when used in conjunction with user defined enum data types <sil=0.966> .PERIOD Some compilers are capable of warning about an unhandled enum value <sil=0.565> ,COMMA which may be helpful for avoiding bugs <sil=0.987> .PERIOD Loops
Often in computer programming <sil=0.621> ,COMMA it is necessary to perform a certain action a certain number of times or until a certain condition is met <sil=0.963> .PERIOD It is impractical and tedious to simply type a certain statement or group of statements a large number of times <sil=0.394> ,COMMA not to mention that this approach is too inflexible and unintuitive to be counted on to stop when a certain event has happened <sil=0.919> .PERIOD As a real-world analogy <sil=0.553> ,COMMA someone asks a dishwasher at a restaurant what he did all night <sil=0.914> .PERIOD He will respond <sil=0.496> ,COMMA ”I washed dishes all night long <sil=0.960> .PERIOD ” 
He is not likely to respond <sil=0.626> ,COMMA ”I washed a dish <sil=0.539> ,COMMA then washed a dish <sil=0.649> ,COMMA then washed a dish <sil=0.521> ,COMMA then <sil=0.917> .PERIOD  <sil=0.384> .PERIOD  <sil=0.578> .PERIOD ” <sil=0.966> .PERIOD The constructs that enable computers to perform certain repetitive tasks are called loops <sil=0.991> .PERIOD While loops
A while loop is the most basic type of loop <sil=0.950> .PERIOD It will run as long as the condition is non-zero (true) <sil=0.916> .PERIOD For example <sil=0.637> ,COMMA if you try the following <sil=0.435> ,COMMA the program will appear to lock up and you will have to manually close the program down <sil=0.951> .PERIOD A situation where the conditions for exiting the loop will never become true is called an infinite loop <sil=0.960> .PERIOD int a = 1 <sil=0.625> ;SEMICOLON while (42) { a = a * 2 <sil=0.539> ;SEMICOLON }
Here is another example of a while loop <sil=1.000> .PERIOD It prints out all the powers of two less than 100 <sil=0.959> .PERIOD int a = 1 <sil=0.333> ;SEMICOLON while (a < 100) {
printf("a is %d \n" <sil=0.479> ,COMMA a) <sil=0.366> ;SEMICOLON a = a * 2 <sil=0.463> ;SEMICOLON }
The flow of all loops can also be controlled by break and continue statements <sil=0.916> .PERIOD A break statement will immediately exit the enclosing loop <sil=0.983> .PERIOD A continue statement will skip the remainder of the block and start at the controlling conditional statement again <sil=0.989> .PERIOD For example:
int a = 1 <sil=0.370> ;SEMICOLON while (42) { // loops until the break statement in the loop is executed
printf("a is %d " <sil=0.458> ,COMMA a) <sil=0.591> ;SEMICOLON a = a * 2 <sil=0.386> ;SEMICOLON if (a > 100) { break <sil=0.304> ;SEMICOLON } else if (a == 64) { continue <sil=0.409> ;SEMICOLON // Immediately restarts at while <sil=0.571> ,COMMA skips next step
}
  printf("a is not 64\n") <sil=0.535> ;SEMICOLON }
In this example <sil=0.345> ,COMMA the computer prints the value of a as usual <sil=0.406> ,COMMA and prints a notice that a is not 64 (unless it was skipped by the continue statement) <sil=0.981> .PERIOD Similar to If above <sil=0.345> ,COMMA braces for the block of code associated with a While loop can be omitted if the code consists of only one statement <sil=0.432> ,COMMA for example:
int a = 1 <sil=0.479> ;SEMICOLON while (a < 100) a = a * 2 <sil=0.483> ;SEMICOLON This will merely increase a until a is not less than 100 <sil=0.928> .PERIOD When the computer reaches the end of the while loop <sil=0.416> ,COMMA it always goes back to the while statement at the top of the loop <sil=0.438> ,COMMA where it re-evaluates the controlling condition <sil=0.921> .PERIOD If that condition is ”true” at that instant -- even if it was temporarily 0 for a few statements inside the loop -- then the computer begins executing the statements inside the loop again <sil=0.355> ;SEMICOLON otherwise the computer exits the loop <sil=0.909> .PERIOD The computer does not ”continuously check” the controlling condition of a while loop during the execution of that loop <sil=0.971> .PERIOD It only ”peeks” at the controlling condition each time it reaches the while at the top of the loop <sil=0.924> .PERIOD It is very important to note <sil=0.418> ,COMMA once the controlling condition of a While loop becomes 0 (false) <sil=0.464> ,COMMA the loop will not terminate until the block of code is finished and it is time to reevaluate the conditional <sil=0.963> .PERIOD If you need to terminate a While loop immediately upon reaching a certain condition <sil=0.494> ,COMMA consider using break <sil=0.909> .PERIOD A common idiom is to write:
int i = 5 <sil=0.557> ;SEMICOLON while (i--) {
printf("java and c# can't do this\n") <sil=0.511> ;SEMICOLON }
This executes the code in the while loop 5 times <sil=0.550> ,COMMA with i having values that range from 4 down to 0 (inside the loop) <sil=0.919> .PERIOD Conveniently <sil=0.478> ,COMMA these are the values needed to access every item of an array containing 5 elements <sil=0.982> .PERIOD For loops
For loops generally look something like this:
for (initialization <sil=0.362> ;SEMICOLON test <sil=0.557> ;SEMICOLON increment) {
/* code */ }
The initialization statement is executed exactly once - before the first evaluation of the test condition <sil=0.951> .PERIOD Typically <sil=0.308> ,COMMA it is used to assign an initial value to some variable <sil=0.622> ,COMMA although this is not strictly necessary <sil=0.950> .PERIOD The initialization statement can also be used to declare and initialize variables used in the loop <sil=0.966> .PERIOD The test expression is evaluated each time before the code in the for loop executes <sil=0.917> .PERIOD If this expression evaluates as 0 (false) when it is checked (i <sil=0.943> .PERIOD e <sil=0.335> .PERIOD if the expression is not true) <sil=0.475> ,COMMA the loop is not (re)entered and execution continues normally at the code immediately following the FOR-loop <sil=0.962> .PERIOD If the expression is non-zero (true) <sil=0.379> ,COMMA the code within the braces of the loop is executed <sil=0.919> .PERIOD After each iteration of the loop <sil=0.552> ,COMMA the increment statement is executed <sil=0.926> .PERIOD This often is used to increment the loop index for the loop <sil=0.526> ,COMMA the variable initialized in the initialization expression and tested in the test expression <sil=0.924> .PERIOD Following this statement execution <sil=0.633> ,COMMA control returns to the top of the loop <sil=0.363> ,COMMA where the test action occurs <sil=0.937> .PERIOD If a continue statement is executed within the for loop <sil=0.542> ,COMMA the increment statement would be the next one executed <sil=0.956> .PERIOD Each of these parts of the for statement is optional and may be omitted <sil=0.993> .PERIOD Because of the free-form nature of the for statement <sil=0.381> ,COMMA some fairly fancy things can be done with it <sil=0.948> .PERIOD Often a for loop is used to loop through items in an array <sil=0.460> ,COMMA processing each item at a time <sil=0.952> .PERIOD int myArray[12] <sil=0.373> ;SEMICOLON int ix <sil=0.515> ;SEMICOLON for (ix = 0 <sil=0.599> ;SEMICOLON ix < 12 <sil=0.606> ;SEMICOLON ix++) {
myArray[ix] = 5 * ix + 3 <sil=0.392> ;SEMICOLON }
The above for loop initializes each of the 12 elements of myArray <sil=0.921> .PERIOD The loop index can start from any value <sil=0.936> .PERIOD In the following case it starts from 1 <sil=0.905> .PERIOD for (ix = 1 <sil=0.558> ;SEMICOLON ix <= 10 <sil=0.541> ;SEMICOLON ix++) { printf("%d " <sil=0.631> ,COMMA ix) <sil=0.301> ;SEMICOLON }
which will print
1 2 3 4 5 6 7 8 9 10
You will most often use loop indexes that start from 0 <sil=0.332> ,COMMA since arrays are indexed at zero <sil=0.577> ,COMMA but you will sometimes use other values to initialize a loop index as well <sil=0.985> .PERIOD The increment action can do other things <sil=0.437> ,COMMA such as decrement <sil=0.925> .PERIOD So this kind of loop is common:
for (i = 5 <sil=0.449> ;SEMICOLON i > 0 <sil=0.524> ;SEMICOLON i--) { printf("%d " <sil=0.431> ,COMMA i) <sil=0.459> ;SEMICOLON }
which yields
5 4 3 2 1
Here's an example where the test condition is simply a variable <sil=0.946> .PERIOD If the variable has a value of 0 or NULL <sil=0.446> ,COMMA the loop exits <sil=0.620> ,COMMA otherwise the statements in the body of the loop are executed <sil=0.909> .PERIOD for (t = list_head <sil=0.395> ;SEMICOLON t <sil=0.387> ;SEMICOLON t = NextItem(t)) { /* body of loop */
}
A WHILE loop can be used to do the same thing as a FOR loop <sil=0.357> ,COMMA however a FOR loop is a more condensed way to perform a set number of repetitions since all of the necessary information is in a one line statement <sil=0.957> .PERIOD A FOR loop can also be given no conditions <sil=0.417> ,COMMA for example:
for ( <sil=0.480> ;SEMICOLON  <sil=0.318> ;SEMICOLON ) {
  /* block of statements */ }
This is called an infinite loop since it will loop forever unless there is a break statement within the statements of the for loop <sil=0.989> .PERIOD The empty test condition effectively evaluates as true <sil=0.966> .PERIOD It is also common to use the comma operator in for loops to execute multiple statements <sil=0.911> .PERIOD int i <sil=0.512> ,COMMA j <sil=0.371> ,COMMA n = 10 <sil=0.623> ;SEMICOLON for (i = 0 <sil=0.395> ,COMMA j = 0 <sil=0.433> ;SEMICOLON i <= n <sil=0.317> ;SEMICOLON i++ <sil=0.342> ,COMMA j += 2) {
printf("i = %d <sil=0.521> ,COMMA j = %d \n" <sil=0.547> ,COMMA i <sil=0.428> ,COMMA j) <sil=0.382> ;SEMICOLON }
Special care should be taken when designing or refactoring the conditional part <sil=0.545> ,COMMA especially whether using < or <= <sil=0.435> ,COMMA whether start and stop should be corrected by 1 <sil=0.593> ,COMMA and in case of prefix- and postfix-notations <sil=0.922> .PERIOD (On a 100 yards promenade with a tree every 10 yards there are 11 trees <sil=0.937> .PERIOD )
int i <sil=0.572> ,COMMA n = 10 <sil=0.358> ;SEMICOLON for (i = 0 <sil=0.384> ;SEMICOLON i < n <sil=0.438> ;SEMICOLON i++)
  printf("%d " <sil=0.585> ,COMMA i) <sil=0.539> ;SEMICOLON // processed n times => 0 1 2 3 <sil=0.946> .PERIOD  <sil=0.649> .PERIOD  <sil=0.542> .PERIOD (n-1) printf("\n") <sil=0.398> ;SEMICOLON for (i = 0 <sil=0.380> ;SEMICOLON i <= n <sil=0.574> ;SEMICOLON i++)
  printf("%d " <sil=0.362> ,COMMA i) <sil=0.536> ;SEMICOLON // processed (n+1) times => 0 1 2 3 <sil=0.999> .PERIOD  <sil=0.550> .PERIOD  <sil=0.628> .PERIOD n printf("\n") <sil=0.547> ;SEMICOLON for (i = n <sil=0.609> ;SEMICOLON i-- <sil=0.392> ;SEMICOLON )
  printf("%d " <sil=0.561> ,COMMA i) <sil=0.439> ;SEMICOLON // processed n times => (n-1) <sil=0.984> .PERIOD  <sil=0.413> .PERIOD  <sil=0.616> .PERIOD 3 2 1 0 printf("\n") <sil=0.402> ;SEMICOLON for (i = n <sil=0.533> ;SEMICOLON --i <sil=0.357> ;SEMICOLON )
  printf("%d " <sil=0.476> ,COMMA i) <sil=0.501> ;SEMICOLON // processed (n-1) times => (n-1) <sil=0.949> .PERIOD  <sil=0.594> .PERIOD  <sil=0.385> .PERIOD 4 3 2 1 printf("\n") <sil=0.575> ;SEMICOLON Do-While loops
A DO-WHILE loop is a post-check while loop <sil=0.630> ,COMMA which means that it checks the condition after each run <sil=0.979> .PERIOD As a result <sil=0.463> ,COMMA even if the condition is zero (false) <sil=0.372> ,COMMA it will run at least once <sil=0.903> .PERIOD It follows the form of:
do {
/* do stuff */
} while (condition) <sil=0.402> ;SEMICOLON Note the terminating semicolon <sil=0.940> .PERIOD This is required for correct syntax <sil=0.997> .PERIOD Since this is also a type of while loop <sil=0.571> ,COMMA break and continue statements within the loop function accordingly <sil=0.912> .PERIOD A continue statement causes a jump to the test of the condition and a break statement exits the loop <sil=0.929> .PERIOD It is worth noting that Do-While and While are functionally almost identical <sil=0.528> ,COMMA with one important difference: Do-While loops are always guaranteed to execute at least once <sil=0.520> ,COMMA but While loops will not execute at all if their condition is 0 (false) on the first evaluation <sil=0.987> .PERIOD One last thing: goto
goto is a very simple and traditional control mechanism <sil=0.984> .PERIOD It is a statement used to immediately and unconditionally jump to another line of code <sil=0.901> .PERIOD To use goto <sil=0.349> ,COMMA you must place a label at a point in your program <sil=0.919> .PERIOD A label consists of a name followed by a colon (:) on a line by itself <sil=0.997> .PERIOD Then <sil=0.599> ,COMMA you can type ”goto label <sil=0.318> ;SEMICOLON ” at the desired point in your program <sil=0.927> .PERIOD The code will then continue executing beginning with label <sil=0.904> .PERIOD This looks like:
MyLabel:
/* some code */ goto MyLabel <sil=0.590> ;SEMICOLON The ability to transfer the flow of control enabled by gotos is so powerful that <sil=0.389> ,COMMA in addition to the simple if <sil=0.380> ,COMMA all other control constructs can be written using gotos instead <sil=0.995> .PERIOD Here <sil=0.398> ,COMMA we can let ”S” and ”T” be any arbitrary statements:
if (''cond'') { S <sil=0.309> ;SEMICOLON } else {
T <sil=0.457> ;SEMICOLON }
/* <sil=0.935> .PERIOD  <sil=0.499> .PERIOD  <sil=0.515> .PERIOD */
The same statement could be accomplished using two gotos and two labels:
if (''cond'') goto Label1 <sil=0.316> ;SEMICOLON T <sil=0.580> ;SEMICOLON goto Label2 <sil=0.338> ;SEMICOLON Label1:
  S <sil=0.334> ;SEMICOLON Label2:
/* <sil=0.962> .PERIOD  <sil=0.373> .PERIOD  <sil=0.344> .PERIOD */
Here <sil=0.380> ,COMMA the first goto is conditional on the value of ”cond” <sil=0.976> .PERIOD The second goto is unconditional <sil=0.941> .PERIOD We can perform the same translation on a loop:
while (''cond1'') { S <sil=0.395> ;SEMICOLON if (''cond2'')
break <sil=0.556> ;SEMICOLON T <sil=0.565> ;SEMICOLON }
/* <sil=0.912> .PERIOD  <sil=0.396> .PERIOD  <sil=0.518> .PERIOD */
Which can be written as:
Start: if ( <sil=0.910> !EXCLAMATIONMARK ''cond1'') goto End <sil=0.519> ;SEMICOLON S <sil=0.532> ;SEMICOLON if (''cond2'') goto End <sil=0.339> ;SEMICOLON T <sil=0.444> ;SEMICOLON goto Start <sil=0.340> ;SEMICOLON End:
/* <sil=0.966> .PERIOD  <sil=0.301> .PERIOD  <sil=0.608> .PERIOD */
As these cases demonstrate <sil=0.304> ,COMMA often the structure of what your program is doing can usually be expressed without using gotos <sil=0.924> .PERIOD Undisciplined use of gotos can create unreadable <sil=0.441> ,COMMA unmaintainable code when more idiomatic alternatives (such as if-elses <sil=0.305> ,COMMA or for loops) can better express your structure <sil=0.981> .PERIOD Theoretically <sil=0.589> ,COMMA the goto construct does not ever have to be used <sil=0.543> ,COMMA but there are cases when it can increase readability <sil=0.402> ,COMMA avoid code duplication <sil=0.441> ,COMMA or make control variables unnecessary <sil=0.909> .PERIOD You should consider first mastering the idiomatic solutions <sil=0.551> ,COMMA and use goto only when necessary <sil=0.907> .PERIOD Keep in mind that many <sil=0.567> ,COMMA if not most <sil=0.568> ,COMMA C style guidelines strictly forbid use of goto <sil=0.512> ,COMMA with the only common exceptions being the following examples <sil=0.973> .PERIOD One use of goto is to break out of a deeply nested loop <sil=0.951> .PERIOD Since break will not work (it can only escape one loop) <sil=0.400> ,COMMA goto can be used to jump completely outside the loop <sil=0.992> .PERIOD Breaking outside of deeply nested loops without the use of the goto is always possible <sil=0.479> ,COMMA but often involves the creation and testing of extra variables that may make the resulting code far less readable than it would be with goto <sil=0.954> .PERIOD The use of goto makes it easy to undo actions in an orderly fashion <sil=0.466> ,COMMA typically to avoid failing to free memory that had been allocated <sil=0.922> .PERIOD Another accepted use is the creation of a state machine <sil=0.983> .PERIOD This is a fairly advanced topic though <sil=0.422> ,COMMA and not commonly needed <sil=0.930> .PERIOD Examples
#include <errno <sil=0.969> .PERIOD h>
#include <stdio <sil=0.984> .PERIOD h> 
#include <stdlib <sil=0.959> .PERIOD h>
int main(void)
{ int years <sil=0.531> ;SEMICOLON printf("Enter your age in years : ") <sil=0.402> ;SEMICOLON fflush(stdout) <sil=0.362> ;SEMICOLON errno = 0 <sil=0.337> ;SEMICOLON if (scanf("%d" <sil=0.568> ,COMMA &years) <sil=0.917> !EXCLAMATIONMARK = 1 || errno) return EXIT_FAILURE <sil=0.529> ;SEMICOLON printf("Your age in days is %d\n" <sil=0.400> ,COMMA years * 365) <sil=0.566> ;SEMICOLON return 0 <sil=0.554> ;SEMICOLON }

Procedures and functions
In C programming <sil=0.309> ,COMMA all executable code resides within a function <sil=0.919> .PERIOD A function is a named block of code that performs a task and then returns control to a caller <sil=0.961> .PERIOD Note that other programming languages may distinguish between a ”function” <sil=0.483> ,COMMA ”subroutine” <sil=0.541> ,COMMA ”subprogram” <sil=0.529> ,COMMA ”procedure” <sil=0.579> ,COMMA or ”method” -- in C <sil=0.327> ,COMMA these are all functions <sil=0.969> .PERIOD A function is often executed (called) several times <sil=0.581> ,COMMA from several different places <sil=0.558> ,COMMA during a single execution of the program <sil=0.930> .PERIOD After finishing a subroutine <sil=0.633> ,COMMA the program will branch back (return) to the point after the call <sil=0.945> .PERIOD Functions are a powerful programming tool <sil=0.953> .PERIOD As a basic example <sil=0.553> ,COMMA suppose you are writing code to print out the first 5 squares of numbers <sil=0.485> ,COMMA do some intermediate processing <sil=0.327> ,COMMA then print the first 5 squares again <sil=0.958> .PERIOD We could write it like this:
#include <stdio <sil=0.998> .PERIOD h>
int main(void)
{ int i <sil=0.565> ;SEMICOLON for(i=1 <sil=0.527> ;SEMICOLON i <= 5 <sil=0.308> ;SEMICOLON i++)
{ printf("%d " <sil=0.603> ,COMMA i*i) <sil=0.358> ;SEMICOLON }
for(i=1 <sil=0.379> ;SEMICOLON i <= 5 <sil=0.413> ;SEMICOLON i++)
{ printf("%d " <sil=0.538> ,COMMA i*i) <sil=0.630> ;SEMICOLON } return 0 <sil=0.346> ;SEMICOLON }
We have to write the same loop twice <sil=0.964> .PERIOD We may want to somehow put this code in a separate place and simply jump to this code when we want to use it <sil=0.982> .PERIOD This would look like:
#include <stdio <sil=0.912> .PERIOD h>
void Print_Squares(void)
{ int i <sil=0.625> ;SEMICOLON for(i=1 <sil=0.641> ;SEMICOLON i <=5 <sil=0.318> ;SEMICOLON i++)
{ printf("%d " <sil=0.562> ,COMMA i*i) <sil=0.390> ;SEMICOLON }
}
int main(void)
{
Print_Squares() <sil=0.419> ;SEMICOLON Print_Squares() <sil=0.450> ;SEMICOLON return 0 <sil=0.404> ;SEMICOLON }
This is precisely what functions are for <sil=0.983> .PERIOD More on functions
A function is like a black box <sil=0.979> .PERIOD It takes in input <sil=0.562> ,COMMA does something with it <sil=0.485> ,COMMA then spits out an answer <sil=0.983> .PERIOD Note that a function may not take any inputs at all <sil=0.588> ,COMMA or it may not return anything at all <sil=0.930> .PERIOD In the above example <sil=0.480> ,COMMA if we were to make a function of that loop <sil=0.525> ,COMMA we may not need any inputs <sil=0.456> ,COMMA and we aren't returning anything at all (Text output doesn't count - when we speak of returning we mean to say meaningful data that the program can use) <sil=0.951> .PERIOD We have some terminology to refer to functions:
• A function <sil=0.415> ,COMMA call it f <sil=0.551> ,COMMA that uses another function g <sil=0.352> ,COMMA is said to call g <sil=0.972> .PERIOD • For example <sil=0.405> ,COMMA f calls g to print the squares of ten numbers <sil=0.995> .PERIOD • A function's inputs are known as its arguments <sil=0.947> .PERIOD • A function g that gives some kind of answer back to f is said to return that answer <sil=0.992> .PERIOD • For example <sil=0.523> ,COMMA g returns the sum of its arguments <sil=0.954> .PERIOD Writing functions in C
It's always good to learn by example <sil=0.982> .PERIOD Let's write a function that will return the square of a number <sil=0.947> .PERIOD int square(int x)
{ int square_of_x <sil=0.542> ;SEMICOLON square_of_x = x * x <sil=0.582> ;SEMICOLON return square_of_x <sil=0.308> ;SEMICOLON }
To understand how to write such a function like this <sil=0.454> ,COMMA it may help to look at what this function does as a whole <sil=0.985> .PERIOD It takes in an int <sil=0.438> ,COMMA x <sil=0.438> ,COMMA and squares it <sil=0.581> ,COMMA storing it in the variable square_of_x <sil=0.976> .PERIOD Now this value is returned <sil=0.991> .PERIOD The first int at the beginning of the function declaration is the type of data that the function returns <sil=0.974> .PERIOD In this case when we square an integer we get an integer <sil=0.313> ,COMMA and we are returning this integer <sil=0.539> ,COMMA and so we write int as the return type <sil=0.978> .PERIOD Next is the name of the function <sil=0.907> .PERIOD It is good practice to use meaningful and descriptive names for functions you may write <sil=0.999> .PERIOD It may help to name the function after what it is written to do <sil=0.982> .PERIOD In this case we name the function ”square” <sil=0.549> ,COMMA because that's what it does - it squares a number <sil=0.941> .PERIOD Next is the function's first and only argument <sil=0.607> ,COMMA an int <sil=0.369> ,COMMA which will be referred to in the function as x <sil=0.905> .PERIOD This is the function's input <sil=0.970> .PERIOD In between the braces is the actual guts of the function <sil=0.907> .PERIOD It declares an integer variable called square_of_x that will be used to hold the value of the square of x <sil=0.904> .PERIOD Note that the variable square_of_x can only be used within this function <sil=0.638> ,COMMA and not outside <sil=0.965> .PERIOD We'll learn more about this sort of thing later <sil=0.301> ,COMMA and we will see that this property is very useful <sil=0.991> .PERIOD We then assign x multiplied by x <sil=0.382> ,COMMA or x squared <sil=0.458> ,COMMA to the variable square_of_x <sil=0.503> ,COMMA which is what this function is all about <sil=0.950> .PERIOD Following this is a return statement <sil=0.950> .PERIOD We want to return Writing functions in C the value of the square of x <sil=0.434> ,COMMA so we must say that this function returns the contents of the variable square_of_x <sil=0.911> .PERIOD Our brace to close <sil=0.498> ,COMMA and we have finished the declaration <sil=0.984> .PERIOD Written in a more concise manner <sil=0.617> ,COMMA this code performs exactly the same function as the above:
int square(int x)
{
return x * x <sil=0.449> ;SEMICOLON }
Note this should look familiar - you have been writing functions already <sil=0.540> ,COMMA in fact - main is a function that is always written <sil=0.921> .PERIOD In general
In general <sil=0.377> ,COMMA if we want to declare a function <sil=0.587> ,COMMA we write
type name(type1 arg1 <sil=0.369> ,COMMA type2 arg2 <sil=0.456> ,COMMA  <sil=0.904> .PERIOD  <sil=0.624> .PERIOD  <sil=0.616> .PERIOD ) {
/* code */ }

We've previously said that a function can take no arguments <sil=0.356> ,COMMA or can return nothing <sil=0.631> ,COMMA or both <sil=0.941> .PERIOD What do we write if we want the function to return nothing <sil=0.862> ?QUESTIONMARK We use C's void keyword <sil=0.996> .PERIOD void basically means ”nothing” - so if we want to write a function that returns nothing <sil=0.630> ,COMMA for example <sil=0.552> ,COMMA we write
void sayhello(int number_of_times)
{ int i <sil=0.347> ;SEMICOLON for(i=1 <sil=0.636> ;SEMICOLON i <= number_of_times <sil=0.509> ;SEMICOLON i++) { printf("Hello <sil=0.897> !EXCLAMATIONMARK \n") <sil=0.480> ;SEMICOLON }
}
Notice that there is no return statement in the function above <sil=0.969> .PERIOD Since there's none <sil=0.459> ,COMMA we write void as the return type <sil=0.985> .PERIOD (Actually <sil=0.345> ,COMMA one can use the return keyword in a procedure to return to the caller before the end of the procedure <sil=0.336> ,COMMA but one cannot return a value as if it were a function <sil=0.997> .PERIOD )
What about a function that takes no arguments <sil=0.976> ?QUESTIONMARK If we want to do this <sil=0.612> ,COMMA we can write for example
float calculate_number(void)
{ float to_return=1 <sil=0.566> ;SEMICOLON int i <sil=0.624> ;SEMICOLON for(i=0 <sil=0.420> ;SEMICOLON i < 100 <sil=0.623> ;SEMICOLON i++) { to_return += 1 <sil=0.523> ;SEMICOLON to_return = 1/to_return <sil=0.390> ;SEMICOLON }
return to_return <sil=0.533> ;SEMICOLON }
Notice this function doesn't take any inputs <sil=0.376> ,COMMA but merely returns a number calculated by this function <sil=0.958> .PERIOD Naturally <sil=0.431> ,COMMA you can combine both void return and void in arguments together to get a valid function <sil=0.344> ,COMMA also <sil=0.992> .PERIOD Recursion
Here's a simple function that does an infinite loop <sil=0.951> .PERIOD It prints a line and calls itself <sil=0.400> ,COMMA which again prints a line and calls itself again <sil=0.471> ,COMMA and this continues until the stack overflows and the program crashes <sil=0.911> .PERIOD A function calling itself is called recursion <sil=0.455> ,COMMA and normally you will have a conditional that would stop the recursion after a small <sil=0.561> ,COMMA finite number of steps <sil=0.975> .PERIOD // don't run this <sil=0.936> !EXCLAMATIONMARK void infinite_recursion()
{ printf("Infinite loop <sil=0.935> !EXCLAMATIONMARK \n") <sil=0.376> ;SEMICOLON infinite_recursion() <sil=0.344> ;SEMICOLON }
A simple check can be done like this <sil=0.962> .PERIOD Note that ++depth is used so the increment will take place before the value is passed into the function <sil=0.988> .PERIOD Alternatively you can increment on a separate line before the recursion call <sil=0.900> .PERIOD If you say print_me(3 <sil=0.568> ,COMMA 0) <sil=0.381> ;SEMICOLON the function will print the line Recursion 3 times <sil=0.901> .PERIOD void print_me(int j <sil=0.609> ,COMMA int depth)
{ if(depth < j) { printf("Recursion <sil=0.855> !EXCLAMATIONMARK depth = %d j = %d\n" <sil=0.329> ,COMMA depth <sil=0.474> ,COMMA j) <sil=0.619> ;SEMICOLON //j keeps its value print_me(j <sil=0.492> ,COMMA ++depth) <sil=0.408> ;SEMICOLON }
}
Recursion is most often used for jobs such as directory tree scans <sil=0.551> ,COMMA seeking for the end of a linked list <sil=0.521> ,COMMA parsing a tree structure in a database and factorising numbers (and finding primes) among other things <sil=0.913> .PERIOD Static functions
If a function is to be called only from within the file in which it is declared <sil=0.329> ,COMMA it is appropriate to declare it as a static function <sil=0.939> .PERIOD When a function is declared static <sil=0.331> ,COMMA the compiler will now compile to an object file in a way that prevents the function from being called from code in other files <sil=0.986> .PERIOD Example:
static int compare( int a <sil=0.449> ,COMMA int b )
{
return (a+4 < b) <sil=0.981> ?QUESTIONMARK a : b <sil=0.470> ;SEMICOLON }
Using C functions
We can now write functions <sil=0.501> ,COMMA but how do we use them <sil=0.930> ?QUESTIONMARK When we write main <sil=0.568> ,COMMA we place the function outside the braces that encompass main <sil=0.992> .PERIOD When we want to use that function <sil=0.600> ,COMMA say <sil=0.534> ,COMMA using our calculate_number function above <sil=0.510> ,COMMA we can write something like
float f <sil=0.343> ;SEMICOLON f = calculate_number() <sil=0.495> ;SEMICOLON If a function takes in arguments <sil=0.582> ,COMMA we can write something like
int square_of_10 <sil=0.369> ;SEMICOLON square_of_10 = square(10) <sil=0.342> ;SEMICOLON If a function doesn't return anything <sil=0.595> ,COMMA we can just say
 say_hello() <sil=0.345> ;SEMICOLON since we don't need a variable to catch its return value <sil=0.959> .PERIOD Functions from the C Standard Library
While the C language doesn't itself contain functions <sil=0.400> ,COMMA it is usually linked with the C Standard Library <sil=0.982> .PERIOD To use this library <sil=0.638> ,COMMA you need to add an #include directive at the top of the C file <sil=0.636> ,COMMA which may be one of the following:
•	<assert <sil=0.920> .PERIOD h> 
•	<ctype <sil=0.926> .PERIOD h>
 • 	<errno <sil=0.937> .PERIOD h> 
•	<float <sil=0.979> .PERIOD h> 
The functions avail able are:
	•	<limits <sil=0.977> .PERIOD h> 
•	<locale <sil=0.922> .PERIOD h> 
•	<math <sil=0.997> .PERIOD h> 
•	<setjmp <sil=0.973> .PERIOD h> 
	•	<signal <sil=0.930> .PERIOD h> 
•	<stdarg <sil=0.992> .PERIOD h> 
•	<stddef <sil=0.969> .PERIOD h> 
•	<stdio <sil=0.993> .PERIOD h>	
•	<stdlib <sil=0.977> .PERIOD h> 
•	<string <sil=0.900> .PERIOD h> 
•	<time <sil=0.988> .PERIOD h> 
•	<complex <sil=0.945> .PERIOD h>
		•	<assert <sil=0.915> .PERIOD h>
		•	<limits <sil=0.915> .PERIOD h>
		•	<signal <sil=0.914> .PERIOD h>
		•	<stdlib <sil=0.912> .PERIOD h>


Variable-length argument lists
Functions with variable-length argument lists are functions that can take a varying number of arguments <sil=0.938> .PERIOD An example in the C standard library is the printf function <sil=0.401> ,COMMA which can take any number of arguments depending on how the programmer wants to use it <sil=0.958> .PERIOD C programmers rarely find the need to write new functions with variable-length arguments <sil=0.949> .PERIOD If they want to pass a bunch of things to a function <sil=0.549> ,COMMA they typically define a structure to hold all those things -- perhaps a linked list <sil=0.309> ,COMMA or an array -- and call that function with the data in the arguments <sil=0.929> .PERIOD However <sil=0.518> ,COMMA you may occasionally find the need to write a new function that supports a variable-length argument list <sil=0.989> .PERIOD To create a function that can accept a variable-length argument list <sil=0.562> ,COMMA you must first include the standard library header stdarg <sil=0.969> .PERIOD h <sil=0.905> .PERIOD Next <sil=0.469> ,COMMA declare the function as you would normally <sil=0.959> .PERIOD Next <sil=0.627> ,COMMA add as the last argument an ellipsis (” <sil=0.910> .PERIOD  <sil=0.381> .PERIOD  <sil=0.463> .PERIOD ”) <sil=0.307> .PERIOD This indicates to the compiler that a variable list of arguments is to follow <sil=0.987> .PERIOD For example <sil=0.569> ,COMMA the following function declaration is for a function that returns the average of a list of numbers: float average (int n_args <sil=0.474> ,COMMA  <sil=0.966> .PERIOD  <sil=0.540> .PERIOD  <sil=0.313> .PERIOD ) <sil=0.556> ;SEMICOLON Note that because of the way variable-length arguments work <sil=0.369> ,COMMA we must somehow <sil=0.330> ,COMMA in the arguments <sil=0.350> ,COMMA specify the number of elements in the variable-length part of the arguments <sil=0.995> .PERIOD In the average function here <sil=0.570> ,COMMA it's done through an argument called n_args <sil=0.900> .PERIOD In the printf function <sil=0.309> ,COMMA it's done with the format codes that you specify in that first string in the arguments you provide <sil=0.926> .PERIOD Now that the function has been declared as using variable-length arguments <sil=0.577> ,COMMA we must next write the code that does the actual work in the function <sil=0.992> .PERIOD To access the numbers stored in the variable-length argument list for our average function <sil=0.601> ,COMMA we must first declare a variable for the list itself: va_list myList <sil=0.555> ;SEMICOLON The va_list type is a type declared in the stdarg <sil=0.975> .PERIOD h header that basically allows you to keep track of your list <sil=0.917> .PERIOD To start actually using myList <sil=0.631> ,COMMA however <sil=0.904> ,COMMA we must first assign it a value <sil=0.919> .PERIOD After all <sil=0.328> ,COMMA simply declaring it by itself wouldn't do anything <sil=0.994> .PERIOD To do this <sil=0.569> ,COMMA we must call va_start <sil=0.353> ,COMMA which is actually a macro defined in stdarg <sil=0.938> .PERIOD h <sil=0.930> .PERIOD In the arguments to va_start <sil=0.578> ,COMMA you must provide the va_list variable you plan on using <sil=0.537> ,COMMA as well as the name of the last variable appearing before the ellipsis in your function declaration:
#include <stdarg <sil=0.990> .PERIOD h> float average (int n_args <sil=0.440> ,COMMA  <sil=0.997> .PERIOD  <sil=0.318> .PERIOD  <sil=0.625> .PERIOD )
{ va_list myList <sil=0.505> ;SEMICOLON va_start (myList <sil=0.562> ,COMMA n_args) <sil=0.431> ;SEMICOLON va_end (myList) <sil=0.427> ;SEMICOLON }
Now that myList has been prepped for usage <sil=0.471> ,COMMA we can finally start accessing the variables stored in it <sil=0.966> .PERIOD To do so <sil=0.378> ,COMMA use the va_arg macro <sil=0.612> ,COMMA which pops off the next argument on the list <sil=0.968> .PERIOD In the arguments to va_arg <sil=0.486> ,COMMA provide the va_list variable you're using <sil=0.313> ,COMMA as well as the primitive data type (e <sil=0.987> .PERIOD g <sil=0.912> .PERIOD int <sil=0.536> ,COMMA char) that the variable you're accessing should be:
#include <stdarg <sil=0.911> .PERIOD h> float average (int n_args <sil=0.329> ,COMMA  <sil=0.909> .PERIOD  <sil=0.634> .PERIOD  <sil=0.339> .PERIOD )
{ va_list myList <sil=0.419> ;SEMICOLON va_start (myList <sil=0.329> ,COMMA n_args) <sil=0.450> ;SEMICOLON int myNumber = va_arg (myList <sil=0.548> ,COMMA int) <sil=0.445> ;SEMICOLON va_end (myList) <sil=0.615> ;SEMICOLON }
By popping n_args integers off of the variable-length argument list <sil=0.432> ,COMMA we can manage to find the average of the numbers:
#include <stdarg <sil=0.922> .PERIOD h> float average (int n_args <sil=0.359> ,COMMA  <sil=0.942> .PERIOD  <sil=0.555> .PERIOD  <sil=0.459> .PERIOD )
{ va_list myList <sil=0.363> ;SEMICOLON va_start (myList <sil=0.414> ,COMMA n_args) <sil=0.643> ;SEMICOLON int numbersAdded = 0 <sil=0.393> ;SEMICOLON int sum = 0 <sil=0.613> ;SEMICOLON while (numbersAdded < n_args) { int number = va_arg (myList <sil=0.325> ,COMMA int) <sil=0.453> ;SEMICOLON // Get next number from list sum += number <sil=0.578> ;SEMICOLON numbersAdded += 1 <sil=0.436> ;SEMICOLON } va_end (myList) <sil=0.373> ;SEMICOLON float avg = (float)(sum) / (float)(numbersAdded) <sil=0.572> ;SEMICOLON // Find the average return avg <sil=0.553> ;SEMICOLON }
By calling average (2 <sil=0.342> ,COMMA 10 <sil=0.371> ,COMMA 20) <sil=0.326> ,COMMA we get the average of 10 and 20 <sil=0.303> ,COMMA which is 15 <sil=0.957> .PERIOD Preprocessor
Preprocessors are a way of making text processing with your C program before they are actually compiled <sil=0.913> .PERIOD Before the actual compilation of every C program it is passed through a Preprocessor <sil=0.958> .PERIOD The Preprocessor looks through the program trying to find out specific instructions called Preprocessor directives that it can understand <sil=0.918> .PERIOD All Preprocessor directives begin with the # (hash) symbol <sil=0.975> .PERIOD C++ compilers use the same C preprocessor <sil=0.974> .PERIOD The preprocessor is a part of the compiler which performs preliminary operations (conditionally compiling code <sil=0.323> ,COMMA including files etc <sil=0.947> .PERIOD  <sil=0.421> .PERIOD  <sil=0.606> .PERIOD ) to your code before the compiler sees it <sil=0.988> .PERIOD These transformations are lexical <sil=0.346> ,COMMA meaning that the output of the preprocessor is still text <sil=0.994> .PERIOD Directives
Directives are special instructions directed to the preprocessor (preprocessor directive) or to the compiler (compiler directive) on how it should process part or all of your source code or set some flags on the final object and are used to make writing source code easier (more portable for instance) and to make the source code more understandable <sil=0.917> .PERIOD Directives are handled by the preprocessor <sil=0.635> ,COMMA which is either a separate program invoked by the compiler or part of the compiler itself <sil=0.946> .PERIOD #include
C has some features as part of the language and some others as part of a standard library <sil=0.626> ,COMMA which is a repository of code that is available alongside every standard-conformant C compiler <sil=0.963> .PERIOD When the C compiler compiles your program it usually also links it with the standard C library <sil=0.970> .PERIOD For example <sil=0.593> ,COMMA on encountering a #include <stdio <sil=0.924> .PERIOD h> directive <sil=0.594> ,COMMA it replaces the directive with the contents of the stdio <sil=0.978> .PERIOD h header file <sil=0.954> .PERIOD When you use features from the library <sil=0.650> ,COMMA C requires you to declare what you would be using <sil=0.965> .PERIOD The first line in the program is a preprocessing directive which should look like this:
#include <stdio <sil=0.927> .PERIOD h>
The above line causes the C declarations which are in the stdio <sil=0.950> .PERIOD h header to be included for use in your program <sil=0.901> .PERIOD Usually this is implemented by just inserting into your program the contents of a header file called stdio <sil=0.940> .PERIOD h <sil=0.963> ,COMMA located in a system-dependent location <sil=0.910> .PERIOD The location of such files may be described in your compiler's documentation <sil=0.966> .PERIOD A list of standard C header files is listed below in the Headers table <sil=0.919> .PERIOD The stdio <sil=0.960> .PERIOD h header contains various declarations for input/output (I/O) using an abstraction of I/O mechanisms called streams <sil=0.920> .PERIOD For example there is an output stream object called stdout which is used to output text to the standard output <sil=0.447> ,COMMA which usually displays the text on the computer screen <sil=0.973> .PERIOD If using angle brackets like the example above <sil=0.537> ,COMMA the preprocessor is instructed to search for the include file along the development environment path for the standard includes <sil=0.972> .PERIOD #include "other <sil=0.981> .PERIOD h"
If you use quotation marks (" ") <sil=0.577> ,COMMA the preprocessor is expected to search in some additional <sil=0.592> ,COMMA usually user-defined <sil=0.420> ,COMMA locations for the header file <sil=0.431> ,COMMA and to fall back to the standard include paths only if it is not found in those additional locations <sil=0.993> .PERIOD It is common for this form to include searching in the same directory as the file containing the #include directive <sil=0.924> .PERIOD #pragma
The pragma (pragmatic information) directive is part of the standard <sil=0.453> ,COMMA but the meaning of any pragma depends on the software implementation of the standard that is used <sil=0.984> .PERIOD The #pragma directive provides a way to request special behavior from the compiler <sil=0.956> .PERIOD This directive is most useful for programs that are unusually large or that need to take advantage of the capabilities of a particular compiler <sil=0.949> .PERIOD Pragmas are used within the source program <sil=0.992> .PERIOD #pragma token(s)
pragma is usually followed by a single token <sil=0.540> ,COMMA which represents a command for the compiler to obey <sil=0.944> .PERIOD You should check the software implementation of the C standard you intend on using for a list of the supported tokens <sil=0.919> .PERIOD Not surprisingly <sil=0.361> ,COMMA the set of commands that can appear in #pragma directives is different for each compiler <sil=0.532> ;SEMICOLON you'll have to consult the documentation for your compiler to see which commands it allows and what those commands do <sil=0.997> .PERIOD For instance one of the most implemented preprocessor directives <sil=0.439> ,COMMA #pragma once when placed at the beginning of a header file <sil=0.630> ,COMMA indicates that the file where it resides will be skipped if included several times by the preprocessor <sil=0.976> .PERIOD #define
The #define directive is used to define values or macros that are used by the preprocessor to manipulate the program source code before it is compiled <sil=0.996> .PERIOD Because preprocessor definitions are substituted before the compiler acts on the source code <sil=0.628> ,COMMA any errors that are introduced by #define are difficult to trace <sil=0.989> .PERIOD By convention <sil=0.619> ,COMMA values defined using #define are named in uppercase <sil=0.980> .PERIOD Although doing so is not a requirement <sil=0.407> ,COMMA it is considered very bad practice to do otherwise <sil=0.962> .PERIOD This allows the values to be easily identified when reading the source code <sil=0.984> .PERIOD Today <sil=0.457> ,COMMA #define is primarily used to handle compiler and platform differences <sil=0.928> .PERIOD E <sil=0.923> .PERIOD g <sil=0.978> .PERIOD  <sil=0.552> ,COMMA a define might hold a constant which is the appropriate error code for a system call <sil=0.973> .PERIOD The use of #define should thus be limited unless absolutely necessary <sil=0.331> ;SEMICOLON typedef statements and constant variables can often perform the same functions more safely <sil=0.929> .PERIOD Another feature of the #define command is that it can take arguments <sil=0.460> ,COMMA making it rather useful as a pseudo-function creator <sil=0.904> .PERIOD Consider the following code:
#define ABSOLUTE_VALUE( x ) ( ((x) < 0) <sil=0.955> ?QUESTIONMARK -(x) : (x) ) <sil=0.979> .PERIOD  <sil=0.349> .PERIOD  <sil=0.553> .PERIOD int x = -1 <sil=0.569> ;SEMICOLON while( ABSOLUTE_VALUE( x ) ) { <sil=0.960> .PERIOD  <sil=0.614> .PERIOD  <sil=0.380> .PERIOD }
It's generally a good idea to use extra parentheses when using complex macros <sil=0.951> .PERIOD Notice that in the above example <sil=0.352> ,COMMA the variable ”x” is always within its own set of parentheses <sil=0.965> .PERIOD This way <sil=0.562> ,COMMA it will be evaluated in whole <sil=0.447> ,COMMA before being compared to 0 or multiplied by -1 <sil=0.902> .PERIOD Also <sil=0.355> ,COMMA the entire macro is surrounded by parentheses <sil=0.355> ,COMMA to prevent it from being contaminated by other code <sil=0.916> .PERIOD If you're not careful <sil=0.497> ,COMMA you run the risk of having the compiler misinterpret your code <sil=0.939> .PERIOD Because of side-effects it is considered a very bad idea to use macro functions as described above <sil=0.945> .PERIOD int x = -10 <sil=0.501> ;SEMICOLON int y = ABSOLUTE_VALUE( x++ ) <sil=0.407> ;SEMICOLON If ABSOLUTE_VALUE() were a real function 'x' would now have the value of '-9' <sil=0.321> ,COMMA but because it was an argument in a macro it was expanded twice and thus has a value of -8 <sil=0.912> .PERIOD (# <sil=0.358> ,COMMA ##)
The # and ## operators are used with the #define macro <sil=0.928> .PERIOD Using # causes the first argument after the # to be returned as a string in quotes <sil=0.945> .PERIOD For example <sil=0.417> ,COMMA the command
#define as_string( s ) # s
	
will make the compiler turn this command
puts( as_string( Hello World <sil=0.958> !EXCLAMATIONMARK ) ) <sil=0.337> ;SEMICOLON Into
puts( "Hello World <sil=0.896> !EXCLAMATIONMARK " ) <sil=0.533> ;SEMICOLON Using ## concatenates what's before the ## with what's after it <sil=0.919> .PERIOD For example <sil=0.331> ,COMMA the command
#define concatenate( x <sil=0.470> ,COMMA y ) x ## y <sil=0.904> .PERIOD  <sil=0.364> .PERIOD  <sil=0.579> .PERIOD int xy = 10 <sil=0.367> ;SEMICOLON  <sil=0.908> .PERIOD  <sil=0.457> .PERIOD  <sil=0.487> .PERIOD will make the compiler turn	
printf( "%d" <sil=0.557> ,COMMA concatenate( x <sil=0.446> ,COMMA y )) <sil=0.363> ;SEMICOLON into	
printf( "%d" <sil=0.532> ,COMMA xy) <sil=0.439> ;SEMICOLON which will <sil=0.454> ,COMMA of course <sil=0.557> ,COMMA display 10 to standard output <sil=0.913> .PERIOD It is possible to concatenate a macro argument with a constant prefix or suffix to obtain a valid identifier as in
#define make_function( name ) int my_ ## name (int foo) {} make_function( bar )
which will define a function called my_bar() <sil=0.905> .PERIOD But it isn't possible to integrate a macro argument into a constant string using the concatenation operator <sil=0.902> .PERIOD In order to obtain such an effect <sil=0.487> ,COMMA one can use the ANSI C property that two or more consecutive string constants are considered equivalent to a single string constant when encountered <sil=0.903> .PERIOD Using this property <sil=0.384> ,COMMA one can write
#define eat( what ) puts( "I'm eating " #what " today <sil=0.986> .PERIOD " ) eat( fruit )
which the macro-processor will turn into
puts( "I'm eating " "fruit" " today <sil=0.934> .PERIOD " )
which in turn will be interpreted by the C parser as a single string constant <sil=0.973> .PERIOD The following trick can be used to turn a numeric constants into string literals
#define num2str(x) str(x)
#define str(x) 
#x 
#define CONST 23 puts(num2str(CONST)) <sil=0.492> ;SEMICOLON This is a bit tricky <sil=0.508> ,COMMA since it is expanded in 2 steps <sil=0.998> .PERIOD First num2str(CONST)is replaced with str(23) <sil=0.541> ,COMMA which in turn is replaced with "23" <sil=0.929> .PERIOD 